var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/viem/_cjs/utils/chain/defineChain.js
var require_defineChain = __commonJS({
  "node_modules/viem/_cjs/utils/chain/defineChain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineChain = defineChain;
    function defineChain(chain) {
      return {
        formatters: void 0,
        fees: void 0,
        serializers: void 0,
        ...chain
      };
    }
  }
});

// node_modules/viem/_cjs/errors/version.js
var require_version = __commonJS({
  "node_modules/viem/_cjs/errors/version.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.version = void 0;
    exports2.version = "2.21.27";
  }
});

// node_modules/viem/_cjs/errors/base.js
var require_base = __commonJS({
  "node_modules/viem/_cjs/errors/base.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseError = void 0;
    exports2.setErrorConfig = setErrorConfig;
    var version_js_1 = require_version();
    var errorConfig = {
      getDocsUrl: ({ docsBaseUrl, docsPath = "", docsSlug }) => docsPath ? `${docsBaseUrl ?? "https://viem.sh"}${docsPath}${docsSlug ? `#${docsSlug}` : ""}` : void 0,
      version: version_js_1.version
    };
    function setErrorConfig(config) {
      errorConfig = config;
    }
    var BaseError = class _BaseError extends Error {
      constructor(shortMessage, args = {}) {
        const details = (() => {
          if (args.cause instanceof _BaseError)
            return args.cause.details;
          if (args.cause?.message)
            return args.cause.message;
          return args.details;
        })();
        const docsPath = (() => {
          if (args.cause instanceof _BaseError)
            return args.cause.docsPath || args.docsPath;
          return args.docsPath;
        })();
        const docsUrl = errorConfig.getDocsUrl?.({ ...args, docsPath });
        const message = [
          shortMessage || "An error occurred.",
          "",
          ...args.metaMessages ? [...args.metaMessages, ""] : [],
          ...docsUrl ? [`Docs: ${docsUrl}`] : [],
          ...details ? [`Details: ${details}`] : [],
          ...errorConfig.version ? [`Version: ${errorConfig.version}`] : []
        ].join("\n");
        super(message, args.cause ? { cause: args.cause } : void 0);
        Object.defineProperty(this, "details", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "docsPath", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "metaMessages", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "shortMessage", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "version", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "BaseError"
        });
        this.details = details;
        this.docsPath = docsPath;
        this.metaMessages = args.metaMessages;
        this.name = args.name ?? this.name;
        this.shortMessage = shortMessage;
        this.version = version_js_1.version;
      }
      walk(fn) {
        return walk(this, fn);
      }
    };
    exports2.BaseError = BaseError;
    function walk(err, fn) {
      if (fn?.(err))
        return err;
      if (err && typeof err === "object" && "cause" in err)
        return walk(err.cause, fn);
      return fn ? null : err;
    }
  }
});

// node_modules/viem/_cjs/errors/encoding.js
var require_encoding = __commonJS({
  "node_modules/viem/_cjs/errors/encoding.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SizeOverflowError = exports2.InvalidHexValueError = exports2.InvalidHexBooleanError = exports2.InvalidBytesBooleanError = exports2.IntegerOutOfRangeError = void 0;
    var base_js_1 = require_base();
    var IntegerOutOfRangeError = class extends base_js_1.BaseError {
      constructor({ max, min, signed, size, value }) {
        super(`Number "${value}" is not in safe ${size ? `${size * 8}-bit ${signed ? "signed" : "unsigned"} ` : ""}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`, { name: "IntegerOutOfRangeError" });
      }
    };
    exports2.IntegerOutOfRangeError = IntegerOutOfRangeError;
    var InvalidBytesBooleanError = class extends base_js_1.BaseError {
      constructor(bytes) {
        super(`Bytes value "${bytes}" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`, {
          name: "InvalidBytesBooleanError"
        });
      }
    };
    exports2.InvalidBytesBooleanError = InvalidBytesBooleanError;
    var InvalidHexBooleanError = class extends base_js_1.BaseError {
      constructor(hex) {
        super(`Hex value "${hex}" is not a valid boolean. The hex value must be "0x0" (false) or "0x1" (true).`, { name: "InvalidHexBooleanError" });
      }
    };
    exports2.InvalidHexBooleanError = InvalidHexBooleanError;
    var InvalidHexValueError = class extends base_js_1.BaseError {
      constructor(value) {
        super(`Hex value "${value}" is an odd length (${value.length}). It must be an even length.`, { name: "InvalidHexValueError" });
      }
    };
    exports2.InvalidHexValueError = InvalidHexValueError;
    var SizeOverflowError = class extends base_js_1.BaseError {
      constructor({ givenSize, maxSize }) {
        super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`, { name: "SizeOverflowError" });
      }
    };
    exports2.SizeOverflowError = SizeOverflowError;
  }
});

// node_modules/viem/_cjs/utils/data/isHex.js
var require_isHex = __commonJS({
  "node_modules/viem/_cjs/utils/data/isHex.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isHex = isHex;
    function isHex(value, { strict = true } = {}) {
      if (!value)
        return false;
      if (typeof value !== "string")
        return false;
      return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith("0x");
    }
  }
});

// node_modules/viem/_cjs/utils/data/size.js
var require_size = __commonJS({
  "node_modules/viem/_cjs/utils/data/size.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.size = size;
    var isHex_js_1 = require_isHex();
    function size(value) {
      if ((0, isHex_js_1.isHex)(value, { strict: false }))
        return Math.ceil((value.length - 2) / 2);
      return value.length;
    }
  }
});

// node_modules/viem/_cjs/utils/data/trim.js
var require_trim = __commonJS({
  "node_modules/viem/_cjs/utils/data/trim.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.trim = trim;
    function trim(hexOrBytes, { dir = "left" } = {}) {
      let data = typeof hexOrBytes === "string" ? hexOrBytes.replace("0x", "") : hexOrBytes;
      let sliceLength = 0;
      for (let i = 0; i < data.length - 1; i++) {
        if (data[dir === "left" ? i : data.length - i - 1].toString() === "0")
          sliceLength++;
        else
          break;
      }
      data = dir === "left" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);
      if (typeof hexOrBytes === "string") {
        if (data.length === 1 && dir === "right")
          data = `${data}0`;
        return `0x${data.length % 2 === 1 ? `0${data}` : data}`;
      }
      return data;
    }
  }
});

// node_modules/viem/_cjs/errors/data.js
var require_data = __commonJS({
  "node_modules/viem/_cjs/errors/data.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidBytesLengthError = exports2.SizeExceedsPaddingSizeError = exports2.SliceOffsetOutOfBoundsError = void 0;
    var base_js_1 = require_base();
    var SliceOffsetOutOfBoundsError = class extends base_js_1.BaseError {
      constructor({ offset, position, size }) {
        super(`Slice ${position === "start" ? "starting" : "ending"} at offset "${offset}" is out-of-bounds (size: ${size}).`, { name: "SliceOffsetOutOfBoundsError" });
      }
    };
    exports2.SliceOffsetOutOfBoundsError = SliceOffsetOutOfBoundsError;
    var SizeExceedsPaddingSizeError = class extends base_js_1.BaseError {
      constructor({ size, targetSize, type }) {
        super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (${size}) exceeds padding size (${targetSize}).`, { name: "SizeExceedsPaddingSizeError" });
      }
    };
    exports2.SizeExceedsPaddingSizeError = SizeExceedsPaddingSizeError;
    var InvalidBytesLengthError = class extends base_js_1.BaseError {
      constructor({ size, targetSize, type }) {
        super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size} ${type} long.`, { name: "InvalidBytesLengthError" });
      }
    };
    exports2.InvalidBytesLengthError = InvalidBytesLengthError;
  }
});

// node_modules/viem/_cjs/utils/data/pad.js
var require_pad = __commonJS({
  "node_modules/viem/_cjs/utils/data/pad.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pad = pad;
    exports2.padHex = padHex;
    exports2.padBytes = padBytes;
    var data_js_1 = require_data();
    function pad(hexOrBytes, { dir, size = 32 } = {}) {
      if (typeof hexOrBytes === "string")
        return padHex(hexOrBytes, { dir, size });
      return padBytes(hexOrBytes, { dir, size });
    }
    function padHex(hex_, { dir, size = 32 } = {}) {
      if (size === null)
        return hex_;
      const hex = hex_.replace("0x", "");
      if (hex.length > size * 2)
        throw new data_js_1.SizeExceedsPaddingSizeError({
          size: Math.ceil(hex.length / 2),
          targetSize: size,
          type: "hex"
        });
      return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size * 2, "0")}`;
    }
    function padBytes(bytes, { dir, size = 32 } = {}) {
      if (size === null)
        return bytes;
      if (bytes.length > size)
        throw new data_js_1.SizeExceedsPaddingSizeError({
          size: bytes.length,
          targetSize: size,
          type: "bytes"
        });
      const paddedBytes = new Uint8Array(size);
      for (let i = 0; i < size; i++) {
        const padEnd = dir === "right";
        paddedBytes[padEnd ? i : size - i - 1] = bytes[padEnd ? i : bytes.length - i - 1];
      }
      return paddedBytes;
    }
  }
});

// node_modules/viem/_cjs/utils/encoding/toHex.js
var require_toHex = __commonJS({
  "node_modules/viem/_cjs/utils/encoding/toHex.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toHex = toHex;
    exports2.boolToHex = boolToHex;
    exports2.bytesToHex = bytesToHex;
    exports2.numberToHex = numberToHex;
    exports2.stringToHex = stringToHex;
    var encoding_js_1 = require_encoding();
    var pad_js_1 = require_pad();
    var fromHex_js_1 = require_fromHex();
    var hexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, "0"));
    function toHex(value, opts = {}) {
      if (typeof value === "number" || typeof value === "bigint")
        return numberToHex(value, opts);
      if (typeof value === "string") {
        return stringToHex(value, opts);
      }
      if (typeof value === "boolean")
        return boolToHex(value, opts);
      return bytesToHex(value, opts);
    }
    function boolToHex(value, opts = {}) {
      const hex = `0x${Number(value)}`;
      if (typeof opts.size === "number") {
        (0, fromHex_js_1.assertSize)(hex, { size: opts.size });
        return (0, pad_js_1.pad)(hex, { size: opts.size });
      }
      return hex;
    }
    function bytesToHex(value, opts = {}) {
      let string = "";
      for (let i = 0; i < value.length; i++) {
        string += hexes[value[i]];
      }
      const hex = `0x${string}`;
      if (typeof opts.size === "number") {
        (0, fromHex_js_1.assertSize)(hex, { size: opts.size });
        return (0, pad_js_1.pad)(hex, { dir: "right", size: opts.size });
      }
      return hex;
    }
    function numberToHex(value_, opts = {}) {
      const { signed, size } = opts;
      const value = BigInt(value_);
      let maxValue;
      if (size) {
        if (signed)
          maxValue = (1n << BigInt(size) * 8n - 1n) - 1n;
        else
          maxValue = 2n ** (BigInt(size) * 8n) - 1n;
      } else if (typeof value_ === "number") {
        maxValue = BigInt(Number.MAX_SAFE_INTEGER);
      }
      const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
      if (maxValue && value > maxValue || value < minValue) {
        const suffix = typeof value_ === "bigint" ? "n" : "";
        throw new encoding_js_1.IntegerOutOfRangeError({
          max: maxValue ? `${maxValue}${suffix}` : void 0,
          min: `${minValue}${suffix}`,
          signed,
          size,
          value: `${value_}${suffix}`
        });
      }
      const hex = `0x${(signed && value < 0 ? (1n << BigInt(size * 8)) + BigInt(value) : value).toString(16)}`;
      if (size)
        return (0, pad_js_1.pad)(hex, { size });
      return hex;
    }
    var encoder = new TextEncoder();
    function stringToHex(value_, opts = {}) {
      const value = encoder.encode(value_);
      return bytesToHex(value, opts);
    }
  }
});

// node_modules/viem/_cjs/utils/encoding/toBytes.js
var require_toBytes = __commonJS({
  "node_modules/viem/_cjs/utils/encoding/toBytes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toBytes = toBytes;
    exports2.boolToBytes = boolToBytes;
    exports2.hexToBytes = hexToBytes;
    exports2.numberToBytes = numberToBytes;
    exports2.stringToBytes = stringToBytes;
    var base_js_1 = require_base();
    var isHex_js_1 = require_isHex();
    var pad_js_1 = require_pad();
    var fromHex_js_1 = require_fromHex();
    var toHex_js_1 = require_toHex();
    var encoder = new TextEncoder();
    function toBytes(value, opts = {}) {
      if (typeof value === "number" || typeof value === "bigint")
        return numberToBytes(value, opts);
      if (typeof value === "boolean")
        return boolToBytes(value, opts);
      if ((0, isHex_js_1.isHex)(value))
        return hexToBytes(value, opts);
      return stringToBytes(value, opts);
    }
    function boolToBytes(value, opts = {}) {
      const bytes = new Uint8Array(1);
      bytes[0] = Number(value);
      if (typeof opts.size === "number") {
        (0, fromHex_js_1.assertSize)(bytes, { size: opts.size });
        return (0, pad_js_1.pad)(bytes, { size: opts.size });
      }
      return bytes;
    }
    var charCodeMap = {
      zero: 48,
      nine: 57,
      A: 65,
      F: 70,
      a: 97,
      f: 102
    };
    function charCodeToBase16(char) {
      if (char >= charCodeMap.zero && char <= charCodeMap.nine)
        return char - charCodeMap.zero;
      if (char >= charCodeMap.A && char <= charCodeMap.F)
        return char - (charCodeMap.A - 10);
      if (char >= charCodeMap.a && char <= charCodeMap.f)
        return char - (charCodeMap.a - 10);
      return void 0;
    }
    function hexToBytes(hex_, opts = {}) {
      let hex = hex_;
      if (opts.size) {
        (0, fromHex_js_1.assertSize)(hex, { size: opts.size });
        hex = (0, pad_js_1.pad)(hex, { dir: "right", size: opts.size });
      }
      let hexString = hex.slice(2);
      if (hexString.length % 2)
        hexString = `0${hexString}`;
      const length = hexString.length / 2;
      const bytes = new Uint8Array(length);
      for (let index = 0, j = 0; index < length; index++) {
        const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++));
        const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++));
        if (nibbleLeft === void 0 || nibbleRight === void 0) {
          throw new base_js_1.BaseError(`Invalid byte sequence ("${hexString[j - 2]}${hexString[j - 1]}" in "${hexString}").`);
        }
        bytes[index] = nibbleLeft * 16 + nibbleRight;
      }
      return bytes;
    }
    function numberToBytes(value, opts) {
      const hex = (0, toHex_js_1.numberToHex)(value, opts);
      return hexToBytes(hex);
    }
    function stringToBytes(value, opts = {}) {
      const bytes = encoder.encode(value);
      if (typeof opts.size === "number") {
        (0, fromHex_js_1.assertSize)(bytes, { size: opts.size });
        return (0, pad_js_1.pad)(bytes, { dir: "right", size: opts.size });
      }
      return bytes;
    }
  }
});

// node_modules/viem/_cjs/utils/encoding/fromHex.js
var require_fromHex = __commonJS({
  "node_modules/viem/_cjs/utils/encoding/fromHex.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertSize = assertSize;
    exports2.fromHex = fromHex;
    exports2.hexToBigInt = hexToBigInt;
    exports2.hexToBool = hexToBool;
    exports2.hexToNumber = hexToNumber;
    exports2.hexToString = hexToString;
    var encoding_js_1 = require_encoding();
    var size_js_1 = require_size();
    var trim_js_1 = require_trim();
    var toBytes_js_1 = require_toBytes();
    function assertSize(hexOrBytes, { size }) {
      if ((0, size_js_1.size)(hexOrBytes) > size)
        throw new encoding_js_1.SizeOverflowError({
          givenSize: (0, size_js_1.size)(hexOrBytes),
          maxSize: size
        });
    }
    function fromHex(hex, toOrOpts) {
      const opts = typeof toOrOpts === "string" ? { to: toOrOpts } : toOrOpts;
      const to = opts.to;
      if (to === "number")
        return hexToNumber(hex, opts);
      if (to === "bigint")
        return hexToBigInt(hex, opts);
      if (to === "string")
        return hexToString(hex, opts);
      if (to === "boolean")
        return hexToBool(hex, opts);
      return (0, toBytes_js_1.hexToBytes)(hex, opts);
    }
    function hexToBigInt(hex, opts = {}) {
      const { signed } = opts;
      if (opts.size)
        assertSize(hex, { size: opts.size });
      const value = BigInt(hex);
      if (!signed)
        return value;
      const size = (hex.length - 2) / 2;
      const max = (1n << BigInt(size) * 8n - 1n) - 1n;
      if (value <= max)
        return value;
      return value - BigInt(`0x${"f".padStart(size * 2, "f")}`) - 1n;
    }
    function hexToBool(hex_, opts = {}) {
      let hex = hex_;
      if (opts.size) {
        assertSize(hex, { size: opts.size });
        hex = (0, trim_js_1.trim)(hex);
      }
      if ((0, trim_js_1.trim)(hex) === "0x00")
        return false;
      if ((0, trim_js_1.trim)(hex) === "0x01")
        return true;
      throw new encoding_js_1.InvalidHexBooleanError(hex);
    }
    function hexToNumber(hex, opts = {}) {
      return Number(hexToBigInt(hex, opts));
    }
    function hexToString(hex, opts = {}) {
      let bytes = (0, toBytes_js_1.hexToBytes)(hex);
      if (opts.size) {
        assertSize(bytes, { size: opts.size });
        bytes = (0, trim_js_1.trim)(bytes, { dir: "right" });
      }
      return new TextDecoder().decode(bytes);
    }
  }
});

// node_modules/viem/_cjs/utils/formatters/formatter.js
var require_formatter = __commonJS({
  "node_modules/viem/_cjs/utils/formatters/formatter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineFormatter = defineFormatter;
    function defineFormatter(type, format) {
      return ({ exclude, format: overrides }) => {
        return {
          exclude,
          format: (args) => {
            const formatted = format(args);
            if (exclude) {
              for (const key of exclude) {
                delete formatted[key];
              }
            }
            return {
              ...formatted,
              ...overrides(args)
            };
          },
          type
        };
      };
    }
  }
});

// node_modules/viem/_cjs/utils/formatters/transaction.js
var require_transaction = __commonJS({
  "node_modules/viem/_cjs/utils/formatters/transaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineTransaction = exports2.transactionType = void 0;
    exports2.formatTransaction = formatTransaction;
    var fromHex_js_1 = require_fromHex();
    var formatter_js_1 = require_formatter();
    exports2.transactionType = {
      "0x0": "legacy",
      "0x1": "eip2930",
      "0x2": "eip1559",
      "0x3": "eip4844",
      "0x4": "eip7702"
    };
    function formatTransaction(transaction) {
      const transaction_ = {
        ...transaction,
        blockHash: transaction.blockHash ? transaction.blockHash : null,
        blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
        chainId: transaction.chainId ? (0, fromHex_js_1.hexToNumber)(transaction.chainId) : void 0,
        gas: transaction.gas ? BigInt(transaction.gas) : void 0,
        gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
        maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
        maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
        maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
        nonce: transaction.nonce ? (0, fromHex_js_1.hexToNumber)(transaction.nonce) : void 0,
        to: transaction.to ? transaction.to : null,
        transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
        type: transaction.type ? exports2.transactionType[transaction.type] : void 0,
        typeHex: transaction.type ? transaction.type : void 0,
        value: transaction.value ? BigInt(transaction.value) : void 0,
        v: transaction.v ? BigInt(transaction.v) : void 0
      };
      if (transaction.authorizationList)
        transaction_.authorizationList = formatAuthorizationList(transaction.authorizationList);
      transaction_.yParity = (() => {
        if (transaction.yParity)
          return Number(transaction.yParity);
        if (typeof transaction_.v === "bigint") {
          if (transaction_.v === 0n || transaction_.v === 27n)
            return 0;
          if (transaction_.v === 1n || transaction_.v === 28n)
            return 1;
          if (transaction_.v >= 35n)
            return transaction_.v % 2n === 0n ? 1 : 0;
        }
        return void 0;
      })();
      if (transaction_.type === "legacy") {
        delete transaction_.accessList;
        delete transaction_.maxFeePerBlobGas;
        delete transaction_.maxFeePerGas;
        delete transaction_.maxPriorityFeePerGas;
        delete transaction_.yParity;
      }
      if (transaction_.type === "eip2930") {
        delete transaction_.maxFeePerBlobGas;
        delete transaction_.maxFeePerGas;
        delete transaction_.maxPriorityFeePerGas;
      }
      if (transaction_.type === "eip1559") {
        delete transaction_.maxFeePerBlobGas;
      }
      return transaction_;
    }
    exports2.defineTransaction = (0, formatter_js_1.defineFormatter)("transaction", formatTransaction);
    function formatAuthorizationList(authorizationList) {
      return authorizationList.map((authorization) => ({
        contractAddress: authorization.address,
        chainId: Number(authorization.chainId),
        nonce: Number(authorization.nonce),
        r: authorization.r,
        s: authorization.s,
        yParity: Number(authorization.yParity)
      }));
    }
  }
});

// node_modules/viem/_cjs/utils/formatters/block.js
var require_block = __commonJS({
  "node_modules/viem/_cjs/utils/formatters/block.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineBlock = void 0;
    exports2.formatBlock = formatBlock;
    var formatter_js_1 = require_formatter();
    var transaction_js_1 = require_transaction();
    function formatBlock(block) {
      const transactions = block.transactions?.map((transaction) => {
        if (typeof transaction === "string")
          return transaction;
        return (0, transaction_js_1.formatTransaction)(transaction);
      });
      return {
        ...block,
        baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
        blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
        difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
        excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
        gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
        gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
        hash: block.hash ? block.hash : null,
        logsBloom: block.logsBloom ? block.logsBloom : null,
        nonce: block.nonce ? block.nonce : null,
        number: block.number ? BigInt(block.number) : null,
        size: block.size ? BigInt(block.size) : void 0,
        timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
        transactions,
        totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
      };
    }
    exports2.defineBlock = (0, formatter_js_1.defineFormatter)("block", formatBlock);
  }
});

// node_modules/viem/_cjs/utils/formatters/log.js
var require_log = __commonJS({
  "node_modules/viem/_cjs/utils/formatters/log.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatLog = formatLog;
    function formatLog(log, { args, eventName } = {}) {
      return {
        ...log,
        blockHash: log.blockHash ? log.blockHash : null,
        blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
        logIndex: log.logIndex ? Number(log.logIndex) : null,
        transactionHash: log.transactionHash ? log.transactionHash : null,
        transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
        ...eventName ? { args, eventName } : {}
      };
    }
  }
});

// node_modules/viem/_cjs/utils/formatters/transactionReceipt.js
var require_transactionReceipt = __commonJS({
  "node_modules/viem/_cjs/utils/formatters/transactionReceipt.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineTransactionReceipt = exports2.receiptStatuses = void 0;
    exports2.formatTransactionReceipt = formatTransactionReceipt;
    var fromHex_js_1 = require_fromHex();
    var formatter_js_1 = require_formatter();
    var log_js_1 = require_log();
    var transaction_js_1 = require_transaction();
    exports2.receiptStatuses = {
      "0x0": "reverted",
      "0x1": "success"
    };
    function formatTransactionReceipt(transactionReceipt) {
      const receipt = {
        ...transactionReceipt,
        blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
        contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
        cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
        effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
        gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
        logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => (0, log_js_1.formatLog)(log)) : null,
        to: transactionReceipt.to ? transactionReceipt.to : null,
        transactionIndex: transactionReceipt.transactionIndex ? (0, fromHex_js_1.hexToNumber)(transactionReceipt.transactionIndex) : null,
        status: transactionReceipt.status ? exports2.receiptStatuses[transactionReceipt.status] : null,
        type: transactionReceipt.type ? transaction_js_1.transactionType[transactionReceipt.type] || transactionReceipt.type : null
      };
      if (transactionReceipt.blobGasPrice)
        receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
      if (transactionReceipt.blobGasUsed)
        receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
      return receipt;
    }
    exports2.defineTransactionReceipt = (0, formatter_js_1.defineFormatter)("transactionReceipt", formatTransactionReceipt);
  }
});

// node_modules/viem/_cjs/utils/formatters/transactionRequest.js
var require_transactionRequest = __commonJS({
  "node_modules/viem/_cjs/utils/formatters/transactionRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineTransactionRequest = exports2.rpcTransactionType = void 0;
    exports2.formatTransactionRequest = formatTransactionRequest;
    var toHex_js_1 = require_toHex();
    var formatter_js_1 = require_formatter();
    exports2.rpcTransactionType = {
      legacy: "0x0",
      eip2930: "0x1",
      eip1559: "0x2",
      eip4844: "0x3",
      eip7702: "0x4"
    };
    function formatTransactionRequest(request) {
      const rpcRequest = {};
      if (typeof request.authorizationList !== "undefined")
        rpcRequest.authorizationList = formatAuthorizationList(request.authorizationList);
      if (typeof request.accessList !== "undefined")
        rpcRequest.accessList = request.accessList;
      if (typeof request.blobVersionedHashes !== "undefined")
        rpcRequest.blobVersionedHashes = request.blobVersionedHashes;
      if (typeof request.blobs !== "undefined") {
        if (typeof request.blobs[0] !== "string")
          rpcRequest.blobs = request.blobs.map((x) => (0, toHex_js_1.bytesToHex)(x));
        else
          rpcRequest.blobs = request.blobs;
      }
      if (typeof request.data !== "undefined")
        rpcRequest.data = request.data;
      if (typeof request.from !== "undefined")
        rpcRequest.from = request.from;
      if (typeof request.gas !== "undefined")
        rpcRequest.gas = (0, toHex_js_1.numberToHex)(request.gas);
      if (typeof request.gasPrice !== "undefined")
        rpcRequest.gasPrice = (0, toHex_js_1.numberToHex)(request.gasPrice);
      if (typeof request.maxFeePerBlobGas !== "undefined")
        rpcRequest.maxFeePerBlobGas = (0, toHex_js_1.numberToHex)(request.maxFeePerBlobGas);
      if (typeof request.maxFeePerGas !== "undefined")
        rpcRequest.maxFeePerGas = (0, toHex_js_1.numberToHex)(request.maxFeePerGas);
      if (typeof request.maxPriorityFeePerGas !== "undefined")
        rpcRequest.maxPriorityFeePerGas = (0, toHex_js_1.numberToHex)(request.maxPriorityFeePerGas);
      if (typeof request.nonce !== "undefined")
        rpcRequest.nonce = (0, toHex_js_1.numberToHex)(request.nonce);
      if (typeof request.to !== "undefined")
        rpcRequest.to = request.to;
      if (typeof request.type !== "undefined")
        rpcRequest.type = exports2.rpcTransactionType[request.type];
      if (typeof request.value !== "undefined")
        rpcRequest.value = (0, toHex_js_1.numberToHex)(request.value);
      return rpcRequest;
    }
    exports2.defineTransactionRequest = (0, formatter_js_1.defineFormatter)("transactionRequest", formatTransactionRequest);
    function formatAuthorizationList(authorizationList) {
      return authorizationList.map((authorization) => ({
        address: authorization.contractAddress,
        r: authorization.r,
        s: authorization.s,
        chainId: (0, toHex_js_1.numberToHex)(authorization.chainId),
        nonce: (0, toHex_js_1.numberToHex)(authorization.nonce),
        ...typeof authorization.yParity !== "undefined" ? { yParity: (0, toHex_js_1.numberToHex)(authorization.yParity) } : {},
        ...typeof authorization.v !== "undefined" && typeof authorization.yParity === "undefined" ? { v: (0, toHex_js_1.numberToHex)(authorization.v) } : {}
      }));
    }
  }
});

// node_modules/viem/_cjs/constants/number.js
var require_number = __commonJS({
  "node_modules/viem/_cjs/constants/number.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.minInt144 = exports2.minInt136 = exports2.minInt128 = exports2.minInt120 = exports2.minInt112 = exports2.minInt104 = exports2.minInt96 = exports2.minInt88 = exports2.minInt80 = exports2.minInt72 = exports2.minInt64 = exports2.minInt56 = exports2.minInt48 = exports2.minInt40 = exports2.minInt32 = exports2.minInt24 = exports2.minInt16 = exports2.minInt8 = exports2.maxInt256 = exports2.maxInt248 = exports2.maxInt240 = exports2.maxInt232 = exports2.maxInt224 = exports2.maxInt216 = exports2.maxInt208 = exports2.maxInt200 = exports2.maxInt192 = exports2.maxInt184 = exports2.maxInt176 = exports2.maxInt168 = exports2.maxInt160 = exports2.maxInt152 = exports2.maxInt144 = exports2.maxInt136 = exports2.maxInt128 = exports2.maxInt120 = exports2.maxInt112 = exports2.maxInt104 = exports2.maxInt96 = exports2.maxInt88 = exports2.maxInt80 = exports2.maxInt72 = exports2.maxInt64 = exports2.maxInt56 = exports2.maxInt48 = exports2.maxInt40 = exports2.maxInt32 = exports2.maxInt24 = exports2.maxInt16 = exports2.maxInt8 = void 0;
    exports2.maxUint256 = exports2.maxUint248 = exports2.maxUint240 = exports2.maxUint232 = exports2.maxUint224 = exports2.maxUint216 = exports2.maxUint208 = exports2.maxUint200 = exports2.maxUint192 = exports2.maxUint184 = exports2.maxUint176 = exports2.maxUint168 = exports2.maxUint160 = exports2.maxUint152 = exports2.maxUint144 = exports2.maxUint136 = exports2.maxUint128 = exports2.maxUint120 = exports2.maxUint112 = exports2.maxUint104 = exports2.maxUint96 = exports2.maxUint88 = exports2.maxUint80 = exports2.maxUint72 = exports2.maxUint64 = exports2.maxUint56 = exports2.maxUint48 = exports2.maxUint40 = exports2.maxUint32 = exports2.maxUint24 = exports2.maxUint16 = exports2.maxUint8 = exports2.minInt256 = exports2.minInt248 = exports2.minInt240 = exports2.minInt232 = exports2.minInt224 = exports2.minInt216 = exports2.minInt208 = exports2.minInt200 = exports2.minInt192 = exports2.minInt184 = exports2.minInt176 = exports2.minInt168 = exports2.minInt160 = exports2.minInt152 = void 0;
    exports2.maxInt8 = 2n ** (8n - 1n) - 1n;
    exports2.maxInt16 = 2n ** (16n - 1n) - 1n;
    exports2.maxInt24 = 2n ** (24n - 1n) - 1n;
    exports2.maxInt32 = 2n ** (32n - 1n) - 1n;
    exports2.maxInt40 = 2n ** (40n - 1n) - 1n;
    exports2.maxInt48 = 2n ** (48n - 1n) - 1n;
    exports2.maxInt56 = 2n ** (56n - 1n) - 1n;
    exports2.maxInt64 = 2n ** (64n - 1n) - 1n;
    exports2.maxInt72 = 2n ** (72n - 1n) - 1n;
    exports2.maxInt80 = 2n ** (80n - 1n) - 1n;
    exports2.maxInt88 = 2n ** (88n - 1n) - 1n;
    exports2.maxInt96 = 2n ** (96n - 1n) - 1n;
    exports2.maxInt104 = 2n ** (104n - 1n) - 1n;
    exports2.maxInt112 = 2n ** (112n - 1n) - 1n;
    exports2.maxInt120 = 2n ** (120n - 1n) - 1n;
    exports2.maxInt128 = 2n ** (128n - 1n) - 1n;
    exports2.maxInt136 = 2n ** (136n - 1n) - 1n;
    exports2.maxInt144 = 2n ** (144n - 1n) - 1n;
    exports2.maxInt152 = 2n ** (152n - 1n) - 1n;
    exports2.maxInt160 = 2n ** (160n - 1n) - 1n;
    exports2.maxInt168 = 2n ** (168n - 1n) - 1n;
    exports2.maxInt176 = 2n ** (176n - 1n) - 1n;
    exports2.maxInt184 = 2n ** (184n - 1n) - 1n;
    exports2.maxInt192 = 2n ** (192n - 1n) - 1n;
    exports2.maxInt200 = 2n ** (200n - 1n) - 1n;
    exports2.maxInt208 = 2n ** (208n - 1n) - 1n;
    exports2.maxInt216 = 2n ** (216n - 1n) - 1n;
    exports2.maxInt224 = 2n ** (224n - 1n) - 1n;
    exports2.maxInt232 = 2n ** (232n - 1n) - 1n;
    exports2.maxInt240 = 2n ** (240n - 1n) - 1n;
    exports2.maxInt248 = 2n ** (248n - 1n) - 1n;
    exports2.maxInt256 = 2n ** (256n - 1n) - 1n;
    exports2.minInt8 = -(2n ** (8n - 1n));
    exports2.minInt16 = -(2n ** (16n - 1n));
    exports2.minInt24 = -(2n ** (24n - 1n));
    exports2.minInt32 = -(2n ** (32n - 1n));
    exports2.minInt40 = -(2n ** (40n - 1n));
    exports2.minInt48 = -(2n ** (48n - 1n));
    exports2.minInt56 = -(2n ** (56n - 1n));
    exports2.minInt64 = -(2n ** (64n - 1n));
    exports2.minInt72 = -(2n ** (72n - 1n));
    exports2.minInt80 = -(2n ** (80n - 1n));
    exports2.minInt88 = -(2n ** (88n - 1n));
    exports2.minInt96 = -(2n ** (96n - 1n));
    exports2.minInt104 = -(2n ** (104n - 1n));
    exports2.minInt112 = -(2n ** (112n - 1n));
    exports2.minInt120 = -(2n ** (120n - 1n));
    exports2.minInt128 = -(2n ** (128n - 1n));
    exports2.minInt136 = -(2n ** (136n - 1n));
    exports2.minInt144 = -(2n ** (144n - 1n));
    exports2.minInt152 = -(2n ** (152n - 1n));
    exports2.minInt160 = -(2n ** (160n - 1n));
    exports2.minInt168 = -(2n ** (168n - 1n));
    exports2.minInt176 = -(2n ** (176n - 1n));
    exports2.minInt184 = -(2n ** (184n - 1n));
    exports2.minInt192 = -(2n ** (192n - 1n));
    exports2.minInt200 = -(2n ** (200n - 1n));
    exports2.minInt208 = -(2n ** (208n - 1n));
    exports2.minInt216 = -(2n ** (216n - 1n));
    exports2.minInt224 = -(2n ** (224n - 1n));
    exports2.minInt232 = -(2n ** (232n - 1n));
    exports2.minInt240 = -(2n ** (240n - 1n));
    exports2.minInt248 = -(2n ** (248n - 1n));
    exports2.minInt256 = -(2n ** (256n - 1n));
    exports2.maxUint8 = 2n ** 8n - 1n;
    exports2.maxUint16 = 2n ** 16n - 1n;
    exports2.maxUint24 = 2n ** 24n - 1n;
    exports2.maxUint32 = 2n ** 32n - 1n;
    exports2.maxUint40 = 2n ** 40n - 1n;
    exports2.maxUint48 = 2n ** 48n - 1n;
    exports2.maxUint56 = 2n ** 56n - 1n;
    exports2.maxUint64 = 2n ** 64n - 1n;
    exports2.maxUint72 = 2n ** 72n - 1n;
    exports2.maxUint80 = 2n ** 80n - 1n;
    exports2.maxUint88 = 2n ** 88n - 1n;
    exports2.maxUint96 = 2n ** 96n - 1n;
    exports2.maxUint104 = 2n ** 104n - 1n;
    exports2.maxUint112 = 2n ** 112n - 1n;
    exports2.maxUint120 = 2n ** 120n - 1n;
    exports2.maxUint128 = 2n ** 128n - 1n;
    exports2.maxUint136 = 2n ** 136n - 1n;
    exports2.maxUint144 = 2n ** 144n - 1n;
    exports2.maxUint152 = 2n ** 152n - 1n;
    exports2.maxUint160 = 2n ** 160n - 1n;
    exports2.maxUint168 = 2n ** 168n - 1n;
    exports2.maxUint176 = 2n ** 176n - 1n;
    exports2.maxUint184 = 2n ** 184n - 1n;
    exports2.maxUint192 = 2n ** 192n - 1n;
    exports2.maxUint200 = 2n ** 200n - 1n;
    exports2.maxUint208 = 2n ** 208n - 1n;
    exports2.maxUint216 = 2n ** 216n - 1n;
    exports2.maxUint224 = 2n ** 224n - 1n;
    exports2.maxUint232 = 2n ** 232n - 1n;
    exports2.maxUint240 = 2n ** 240n - 1n;
    exports2.maxUint248 = 2n ** 248n - 1n;
    exports2.maxUint256 = 2n ** 256n - 1n;
  }
});

// node_modules/viem/_cjs/zksync/constants/number.js
var require_number2 = __commonJS({
  "node_modules/viem/_cjs/zksync/constants/number.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.maxBytecodeSize = exports2.gasPerPubdataDefault = void 0;
    var number_js_1 = require_number();
    exports2.gasPerPubdataDefault = 50000n;
    exports2.maxBytecodeSize = number_js_1.maxUint16 * 32n;
  }
});

// node_modules/viem/_cjs/zksync/formatters.js
var require_formatters = __commonJS({
  "node_modules/viem/_cjs/zksync/formatters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatters = void 0;
    var fromHex_js_1 = require_fromHex();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    var block_js_1 = require_block();
    var log_js_1 = require_log();
    var transaction_js_1 = require_transaction();
    var transactionReceipt_js_1 = require_transactionReceipt();
    var transactionRequest_js_1 = require_transactionRequest();
    var number_js_1 = require_number2();
    exports2.formatters = {
      block: (0, block_js_1.defineBlock)({
        format(args) {
          const transactions = args.transactions?.map((transaction) => {
            if (typeof transaction === "string")
              return transaction;
            const formatted = exports2.formatters.transaction?.format(transaction);
            if (formatted.typeHex === "0x71")
              formatted.type = "eip712";
            else if (formatted.typeHex === "0xff")
              formatted.type = "priority";
            return formatted;
          });
          return {
            l1BatchNumber: args.l1BatchNumber ? (0, fromHex_js_1.hexToBigInt)(args.l1BatchNumber) : null,
            l1BatchTimestamp: args.l1BatchTimestamp ? (0, fromHex_js_1.hexToBigInt)(args.l1BatchTimestamp) : null,
            transactions
          };
        }
      }),
      transaction: (0, transaction_js_1.defineTransaction)({
        format(args) {
          const transaction = {};
          if (args.type === "0x71")
            transaction.type = "eip712";
          else if (args.type === "0xff")
            transaction.type = "priority";
          return {
            ...transaction,
            l1BatchNumber: args.l1BatchNumber ? (0, fromHex_js_1.hexToBigInt)(args.l1BatchNumber) : null,
            l1BatchTxIndex: args.l1BatchTxIndex ? (0, fromHex_js_1.hexToBigInt)(args.l1BatchTxIndex) : null
          };
        }
      }),
      transactionReceipt: (0, transactionReceipt_js_1.defineTransactionReceipt)({
        format(args) {
          return {
            l1BatchNumber: args.l1BatchNumber ? (0, fromHex_js_1.hexToBigInt)(args.l1BatchNumber) : null,
            l1BatchTxIndex: args.l1BatchTxIndex ? (0, fromHex_js_1.hexToBigInt)(args.l1BatchTxIndex) : null,
            logs: args.logs.map((log) => {
              return {
                ...(0, log_js_1.formatLog)(log),
                l1BatchNumber: log.l1BatchNumber ? (0, fromHex_js_1.hexToBigInt)(log.l1BatchNumber) : null,
                transactionLogIndex: (0, fromHex_js_1.hexToNumber)(log.transactionLogIndex),
                logType: log.logType
              };
            }),
            l2ToL1Logs: args.l2ToL1Logs.map((l2ToL1Log) => {
              return {
                blockNumber: (0, fromHex_js_1.hexToBigInt)(l2ToL1Log.blockHash),
                blockHash: l2ToL1Log.blockHash,
                l1BatchNumber: (0, fromHex_js_1.hexToBigInt)(l2ToL1Log.l1BatchNumber),
                transactionIndex: (0, fromHex_js_1.hexToBigInt)(l2ToL1Log.transactionIndex),
                shardId: (0, fromHex_js_1.hexToBigInt)(l2ToL1Log.shardId),
                isService: l2ToL1Log.isService,
                sender: l2ToL1Log.sender,
                key: l2ToL1Log.key,
                value: l2ToL1Log.value,
                transactionHash: l2ToL1Log.transactionHash,
                logIndex: (0, fromHex_js_1.hexToBigInt)(l2ToL1Log.logIndex)
              };
            })
          };
        }
      }),
      transactionRequest: (0, transactionRequest_js_1.defineTransactionRequest)({
        exclude: [
          "customSignature",
          "factoryDeps",
          "gasPerPubdata",
          "paymaster",
          "paymasterInput"
        ],
        format(args) {
          if (args.gasPerPubdata || args.paymaster && args.paymasterInput || args.factoryDeps || args.customSignature)
            return {
              eip712Meta: {
                ...args.gasPerPubdata ? { gasPerPubdata: (0, toHex_js_1.toHex)(args.gasPerPubdata) } : { gasPerPubdata: (0, toHex_js_1.toHex)(number_js_1.gasPerPubdataDefault) },
                ...args.paymaster && args.paymasterInput ? {
                  paymasterParams: {
                    paymaster: args.paymaster,
                    paymasterInput: Array.from((0, toBytes_js_1.hexToBytes)(args.paymasterInput))
                  }
                } : {},
                ...args.factoryDeps ? {
                  factoryDeps: args.factoryDeps.map((dep) => Array.from((0, toBytes_js_1.hexToBytes)(dep)))
                } : {},
                ...args.customSignature ? {
                  customSignature: Array.from((0, toBytes_js_1.hexToBytes)(args.customSignature))
                } : {}
              },
              type: "0x71"
            };
          return {};
        }
      })
    };
  }
});

// node_modules/viem/_cjs/utils/data/concat.js
var require_concat = __commonJS({
  "node_modules/viem/_cjs/utils/data/concat.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.concat = concat;
    exports2.concatBytes = concatBytes;
    exports2.concatHex = concatHex;
    function concat(values) {
      if (typeof values[0] === "string")
        return concatHex(values);
      return concatBytes(values);
    }
    function concatBytes(values) {
      let length = 0;
      for (const arr of values) {
        length += arr.length;
      }
      const result = new Uint8Array(length);
      let offset = 0;
      for (const arr of values) {
        result.set(arr, offset);
        offset += arr.length;
      }
      return result;
    }
    function concatHex(values) {
      return `0x${values.reduce((acc, x) => acc + x.replace("0x", ""), "")}`;
    }
  }
});

// node_modules/viem/_cjs/errors/cursor.js
var require_cursor = __commonJS({
  "node_modules/viem/_cjs/errors/cursor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RecursiveReadLimitExceededError = exports2.PositionOutOfBoundsError = exports2.NegativeOffsetError = void 0;
    var base_js_1 = require_base();
    var NegativeOffsetError = class extends base_js_1.BaseError {
      constructor({ offset }) {
        super(`Offset \`${offset}\` cannot be negative.`, {
          name: "NegativeOffsetError"
        });
      }
    };
    exports2.NegativeOffsetError = NegativeOffsetError;
    var PositionOutOfBoundsError = class extends base_js_1.BaseError {
      constructor({ length, position }) {
        super(`Position \`${position}\` is out of bounds (\`0 < position < ${length}\`).`, { name: "PositionOutOfBoundsError" });
      }
    };
    exports2.PositionOutOfBoundsError = PositionOutOfBoundsError;
    var RecursiveReadLimitExceededError = class extends base_js_1.BaseError {
      constructor({ count, limit }) {
        super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`, { name: "RecursiveReadLimitExceededError" });
      }
    };
    exports2.RecursiveReadLimitExceededError = RecursiveReadLimitExceededError;
  }
});

// node_modules/viem/_cjs/utils/cursor.js
var require_cursor2 = __commonJS({
  "node_modules/viem/_cjs/utils/cursor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createCursor = createCursor;
    var cursor_js_1 = require_cursor();
    var staticCursor = {
      bytes: new Uint8Array(),
      dataView: new DataView(new ArrayBuffer(0)),
      position: 0,
      positionReadCount: /* @__PURE__ */ new Map(),
      recursiveReadCount: 0,
      recursiveReadLimit: Number.POSITIVE_INFINITY,
      assertReadLimit() {
        if (this.recursiveReadCount >= this.recursiveReadLimit)
          throw new cursor_js_1.RecursiveReadLimitExceededError({
            count: this.recursiveReadCount + 1,
            limit: this.recursiveReadLimit
          });
      },
      assertPosition(position) {
        if (position < 0 || position > this.bytes.length - 1)
          throw new cursor_js_1.PositionOutOfBoundsError({
            length: this.bytes.length,
            position
          });
      },
      decrementPosition(offset) {
        if (offset < 0)
          throw new cursor_js_1.NegativeOffsetError({ offset });
        const position = this.position - offset;
        this.assertPosition(position);
        this.position = position;
      },
      getReadCount(position) {
        return this.positionReadCount.get(position || this.position) || 0;
      },
      incrementPosition(offset) {
        if (offset < 0)
          throw new cursor_js_1.NegativeOffsetError({ offset });
        const position = this.position + offset;
        this.assertPosition(position);
        this.position = position;
      },
      inspectByte(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position);
        return this.bytes[position];
      },
      inspectBytes(length, position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position + length - 1);
        return this.bytes.subarray(position, position + length);
      },
      inspectUint8(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position);
        return this.bytes[position];
      },
      inspectUint16(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position + 1);
        return this.dataView.getUint16(position);
      },
      inspectUint24(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position + 2);
        return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
      },
      inspectUint32(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position + 3);
        return this.dataView.getUint32(position);
      },
      pushByte(byte) {
        this.assertPosition(this.position);
        this.bytes[this.position] = byte;
        this.position++;
      },
      pushBytes(bytes) {
        this.assertPosition(this.position + bytes.length - 1);
        this.bytes.set(bytes, this.position);
        this.position += bytes.length;
      },
      pushUint8(value) {
        this.assertPosition(this.position);
        this.bytes[this.position] = value;
        this.position++;
      },
      pushUint16(value) {
        this.assertPosition(this.position + 1);
        this.dataView.setUint16(this.position, value);
        this.position += 2;
      },
      pushUint24(value) {
        this.assertPosition(this.position + 2);
        this.dataView.setUint16(this.position, value >> 8);
        this.dataView.setUint8(this.position + 2, value & ~4294967040);
        this.position += 3;
      },
      pushUint32(value) {
        this.assertPosition(this.position + 3);
        this.dataView.setUint32(this.position, value);
        this.position += 4;
      },
      readByte() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectByte();
        this.position++;
        return value;
      },
      readBytes(length, size) {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectBytes(length);
        this.position += size ?? length;
        return value;
      },
      readUint8() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectUint8();
        this.position += 1;
        return value;
      },
      readUint16() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectUint16();
        this.position += 2;
        return value;
      },
      readUint24() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectUint24();
        this.position += 3;
        return value;
      },
      readUint32() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectUint32();
        this.position += 4;
        return value;
      },
      get remaining() {
        return this.bytes.length - this.position;
      },
      setPosition(position) {
        const oldPosition = this.position;
        this.assertPosition(position);
        this.position = position;
        return () => this.position = oldPosition;
      },
      _touch() {
        if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
          return;
        const count = this.getReadCount();
        this.positionReadCount.set(this.position, count + 1);
        if (count > 0)
          this.recursiveReadCount++;
      }
    };
    function createCursor(bytes, { recursiveReadLimit = 8192 } = {}) {
      const cursor = Object.create(staticCursor);
      cursor.bytes = bytes;
      cursor.dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
      cursor.positionReadCount = /* @__PURE__ */ new Map();
      cursor.recursiveReadLimit = recursiveReadLimit;
      return cursor;
    }
  }
});

// node_modules/viem/_cjs/utils/encoding/toRlp.js
var require_toRlp = __commonJS({
  "node_modules/viem/_cjs/utils/encoding/toRlp.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toRlp = toRlp;
    exports2.bytesToRlp = bytesToRlp;
    exports2.hexToRlp = hexToRlp;
    var base_js_1 = require_base();
    var cursor_js_1 = require_cursor2();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    function toRlp(bytes, to = "hex") {
      const encodable = getEncodable(bytes);
      const cursor = (0, cursor_js_1.createCursor)(new Uint8Array(encodable.length));
      encodable.encode(cursor);
      if (to === "hex")
        return (0, toHex_js_1.bytesToHex)(cursor.bytes);
      return cursor.bytes;
    }
    function bytesToRlp(bytes, to = "bytes") {
      return toRlp(bytes, to);
    }
    function hexToRlp(hex, to = "hex") {
      return toRlp(hex, to);
    }
    function getEncodable(bytes) {
      if (Array.isArray(bytes))
        return getEncodableList(bytes.map((x) => getEncodable(x)));
      return getEncodableBytes(bytes);
    }
    function getEncodableList(list) {
      const bodyLength = list.reduce((acc, x) => acc + x.length, 0);
      const sizeOfBodyLength = getSizeOfLength(bodyLength);
      const length = (() => {
        if (bodyLength <= 55)
          return 1 + bodyLength;
        return 1 + sizeOfBodyLength + bodyLength;
      })();
      return {
        length,
        encode(cursor) {
          if (bodyLength <= 55) {
            cursor.pushByte(192 + bodyLength);
          } else {
            cursor.pushByte(192 + 55 + sizeOfBodyLength);
            if (sizeOfBodyLength === 1)
              cursor.pushUint8(bodyLength);
            else if (sizeOfBodyLength === 2)
              cursor.pushUint16(bodyLength);
            else if (sizeOfBodyLength === 3)
              cursor.pushUint24(bodyLength);
            else
              cursor.pushUint32(bodyLength);
          }
          for (const { encode } of list) {
            encode(cursor);
          }
        }
      };
    }
    function getEncodableBytes(bytesOrHex) {
      const bytes = typeof bytesOrHex === "string" ? (0, toBytes_js_1.hexToBytes)(bytesOrHex) : bytesOrHex;
      const sizeOfBytesLength = getSizeOfLength(bytes.length);
      const length = (() => {
        if (bytes.length === 1 && bytes[0] < 128)
          return 1;
        if (bytes.length <= 55)
          return 1 + bytes.length;
        return 1 + sizeOfBytesLength + bytes.length;
      })();
      return {
        length,
        encode(cursor) {
          if (bytes.length === 1 && bytes[0] < 128) {
            cursor.pushBytes(bytes);
          } else if (bytes.length <= 55) {
            cursor.pushByte(128 + bytes.length);
            cursor.pushBytes(bytes);
          } else {
            cursor.pushByte(128 + 55 + sizeOfBytesLength);
            if (sizeOfBytesLength === 1)
              cursor.pushUint8(bytes.length);
            else if (sizeOfBytesLength === 2)
              cursor.pushUint16(bytes.length);
            else if (sizeOfBytesLength === 3)
              cursor.pushUint24(bytes.length);
            else
              cursor.pushUint32(bytes.length);
            cursor.pushBytes(bytes);
          }
        }
      };
    }
    function getSizeOfLength(length) {
      if (length < 2 ** 8)
        return 1;
      if (length < 2 ** 16)
        return 2;
      if (length < 2 ** 24)
        return 3;
      if (length < 2 ** 32)
        return 4;
      throw new base_js_1.BaseError("Length is too large.");
    }
  }
});

// node_modules/viem/_cjs/constants/unit.js
var require_unit = __commonJS({
  "node_modules/viem/_cjs/constants/unit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.weiUnits = exports2.gweiUnits = exports2.etherUnits = void 0;
    exports2.etherUnits = {
      gwei: 9,
      wei: 18
    };
    exports2.gweiUnits = {
      ether: -9,
      wei: 9
    };
    exports2.weiUnits = {
      ether: -18,
      gwei: -9
    };
  }
});

// node_modules/viem/_cjs/utils/unit/formatUnits.js
var require_formatUnits = __commonJS({
  "node_modules/viem/_cjs/utils/unit/formatUnits.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatUnits = formatUnits;
    function formatUnits(value, decimals) {
      let display = value.toString();
      const negative = display.startsWith("-");
      if (negative)
        display = display.slice(1);
      display = display.padStart(decimals, "0");
      let [integer, fraction] = [
        display.slice(0, display.length - decimals),
        display.slice(display.length - decimals)
      ];
      fraction = fraction.replace(/(0+)$/, "");
      return `${negative ? "-" : ""}${integer || "0"}${fraction ? `.${fraction}` : ""}`;
    }
  }
});

// node_modules/viem/_cjs/utils/unit/formatEther.js
var require_formatEther = __commonJS({
  "node_modules/viem/_cjs/utils/unit/formatEther.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatEther = formatEther;
    var unit_js_1 = require_unit();
    var formatUnits_js_1 = require_formatUnits();
    function formatEther(wei, unit = "wei") {
      return (0, formatUnits_js_1.formatUnits)(wei, unit_js_1.etherUnits[unit]);
    }
  }
});

// node_modules/viem/_cjs/utils/unit/formatGwei.js
var require_formatGwei = __commonJS({
  "node_modules/viem/_cjs/utils/unit/formatGwei.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatGwei = formatGwei;
    var unit_js_1 = require_unit();
    var formatUnits_js_1 = require_formatUnits();
    function formatGwei(wei, unit = "wei") {
      return (0, formatUnits_js_1.formatUnits)(wei, unit_js_1.gweiUnits[unit]);
    }
  }
});

// node_modules/viem/_cjs/errors/transaction.js
var require_transaction2 = __commonJS({
  "node_modules/viem/_cjs/errors/transaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WaitForTransactionReceiptTimeoutError = exports2.TransactionReceiptNotFoundError = exports2.TransactionNotFoundError = exports2.TransactionExecutionError = exports2.InvalidStorageKeySizeError = exports2.InvalidSerializedTransactionError = exports2.InvalidSerializedTransactionTypeError = exports2.InvalidSerializableTransactionError = exports2.InvalidLegacyVError = exports2.FeeConflictError = void 0;
    exports2.prettyPrint = prettyPrint;
    var formatEther_js_1 = require_formatEther();
    var formatGwei_js_1 = require_formatGwei();
    var base_js_1 = require_base();
    function prettyPrint(args) {
      const entries = Object.entries(args).map(([key, value]) => {
        if (value === void 0 || value === false)
          return null;
        return [key, value];
      }).filter(Boolean);
      const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0);
      return entries.map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`).join("\n");
    }
    var FeeConflictError = class extends base_js_1.BaseError {
      constructor() {
        super([
          "Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.",
          "Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others."
        ].join("\n"), { name: "FeeConflictError" });
      }
    };
    exports2.FeeConflictError = FeeConflictError;
    var InvalidLegacyVError = class extends base_js_1.BaseError {
      constructor({ v }) {
        super(`Invalid \`v\` value "${v}". Expected 27 or 28.`, {
          name: "InvalidLegacyVError"
        });
      }
    };
    exports2.InvalidLegacyVError = InvalidLegacyVError;
    var InvalidSerializableTransactionError = class extends base_js_1.BaseError {
      constructor({ transaction }) {
        super("Cannot infer a transaction type from provided transaction.", {
          metaMessages: [
            "Provided Transaction:",
            "{",
            prettyPrint(transaction),
            "}",
            "",
            "To infer the type, either provide:",
            "- a `type` to the Transaction, or",
            "- an EIP-1559 Transaction with `maxFeePerGas`, or",
            "- an EIP-2930 Transaction with `gasPrice` & `accessList`, or",
            "- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or",
            "- an EIP-7702 Transaction with `authorizationList`, or",
            "- a Legacy Transaction with `gasPrice`"
          ],
          name: "InvalidSerializableTransactionError"
        });
      }
    };
    exports2.InvalidSerializableTransactionError = InvalidSerializableTransactionError;
    var InvalidSerializedTransactionTypeError = class extends base_js_1.BaseError {
      constructor({ serializedType }) {
        super(`Serialized transaction type "${serializedType}" is invalid.`, {
          name: "InvalidSerializedTransactionType"
        });
        Object.defineProperty(this, "serializedType", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.serializedType = serializedType;
      }
    };
    exports2.InvalidSerializedTransactionTypeError = InvalidSerializedTransactionTypeError;
    var InvalidSerializedTransactionError = class extends base_js_1.BaseError {
      constructor({ attributes, serializedTransaction, type }) {
        const missing = Object.entries(attributes).map(([key, value]) => typeof value === "undefined" ? key : void 0).filter(Boolean);
        super(`Invalid serialized transaction of type "${type}" was provided.`, {
          metaMessages: [
            `Serialized Transaction: "${serializedTransaction}"`,
            missing.length > 0 ? `Missing Attributes: ${missing.join(", ")}` : ""
          ].filter(Boolean),
          name: "InvalidSerializedTransactionError"
        });
        Object.defineProperty(this, "serializedTransaction", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "type", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.serializedTransaction = serializedTransaction;
        this.type = type;
      }
    };
    exports2.InvalidSerializedTransactionError = InvalidSerializedTransactionError;
    var InvalidStorageKeySizeError = class extends base_js_1.BaseError {
      constructor({ storageKey }) {
        super(`Size for storage key "${storageKey}" is invalid. Expected 32 bytes. Got ${Math.floor((storageKey.length - 2) / 2)} bytes.`, { name: "InvalidStorageKeySizeError" });
      }
    };
    exports2.InvalidStorageKeySizeError = InvalidStorageKeySizeError;
    var TransactionExecutionError = class extends base_js_1.BaseError {
      constructor(cause, { account, docsPath, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value }) {
        const prettyArgs = prettyPrint({
          chain: chain && `${chain?.name} (id: ${chain?.id})`,
          from: account?.address,
          to,
          value: typeof value !== "undefined" && `${(0, formatEther_js_1.formatEther)(value)} ${chain?.nativeCurrency?.symbol || "ETH"}`,
          data,
          gas,
          gasPrice: typeof gasPrice !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(gasPrice)} gwei`,
          maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(maxFeePerGas)} gwei`,
          maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(maxPriorityFeePerGas)} gwei`,
          nonce
        });
        super(cause.shortMessage, {
          cause,
          docsPath,
          metaMessages: [
            ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
            "Request Arguments:",
            prettyArgs
          ].filter(Boolean),
          name: "TransactionExecutionError"
        });
        Object.defineProperty(this, "cause", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.cause = cause;
      }
    };
    exports2.TransactionExecutionError = TransactionExecutionError;
    var TransactionNotFoundError = class extends base_js_1.BaseError {
      constructor({ blockHash, blockNumber, blockTag, hash, index }) {
        let identifier = "Transaction";
        if (blockTag && index !== void 0)
          identifier = `Transaction at block time "${blockTag}" at index "${index}"`;
        if (blockHash && index !== void 0)
          identifier = `Transaction at block hash "${blockHash}" at index "${index}"`;
        if (blockNumber && index !== void 0)
          identifier = `Transaction at block number "${blockNumber}" at index "${index}"`;
        if (hash)
          identifier = `Transaction with hash "${hash}"`;
        super(`${identifier} could not be found.`, {
          name: "TransactionNotFoundError"
        });
      }
    };
    exports2.TransactionNotFoundError = TransactionNotFoundError;
    var TransactionReceiptNotFoundError = class extends base_js_1.BaseError {
      constructor({ hash }) {
        super(`Transaction receipt with hash "${hash}" could not be found. The Transaction may not be processed on a block yet.`, {
          name: "TransactionReceiptNotFoundError"
        });
      }
    };
    exports2.TransactionReceiptNotFoundError = TransactionReceiptNotFoundError;
    var WaitForTransactionReceiptTimeoutError = class extends base_js_1.BaseError {
      constructor({ hash }) {
        super(`Timed out while waiting for transaction with hash "${hash}" to be confirmed.`, { name: "WaitForTransactionReceiptTimeoutError" });
      }
    };
    exports2.WaitForTransactionReceiptTimeoutError = WaitForTransactionReceiptTimeoutError;
  }
});

// node_modules/viem/_cjs/utils/blob/blobsToCommitments.js
var require_blobsToCommitments = __commonJS({
  "node_modules/viem/_cjs/utils/blob/blobsToCommitments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.blobsToCommitments = blobsToCommitments;
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    function blobsToCommitments(parameters) {
      const { kzg } = parameters;
      const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
      const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => (0, toBytes_js_1.hexToBytes)(x)) : parameters.blobs;
      const commitments = [];
      for (const blob of blobs)
        commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)));
      return to === "bytes" ? commitments : commitments.map((x) => (0, toHex_js_1.bytesToHex)(x));
    }
  }
});

// node_modules/viem/_cjs/utils/blob/blobsToProofs.js
var require_blobsToProofs = __commonJS({
  "node_modules/viem/_cjs/utils/blob/blobsToProofs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.blobsToProofs = blobsToProofs;
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    function blobsToProofs(parameters) {
      const { kzg } = parameters;
      const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
      const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => (0, toBytes_js_1.hexToBytes)(x)) : parameters.blobs;
      const commitments = typeof parameters.commitments[0] === "string" ? parameters.commitments.map((x) => (0, toBytes_js_1.hexToBytes)(x)) : parameters.commitments;
      const proofs = [];
      for (let i = 0; i < blobs.length; i++) {
        const blob = blobs[i];
        const commitment = commitments[i];
        proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));
      }
      return to === "bytes" ? proofs : proofs.map((x) => (0, toHex_js_1.bytesToHex)(x));
    }
  }
});

// node_modules/@noble/hashes/_assert.js
var require_assert = __commonJS({
  "node_modules/@noble/hashes/_assert.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isBytes = isBytes;
    exports2.number = number;
    exports2.bool = bool;
    exports2.bytes = bytes;
    exports2.hash = hash;
    exports2.exists = exists;
    exports2.output = output;
    function number(n) {
      if (!Number.isSafeInteger(n) || n < 0)
        throw new Error(`positive integer expected, not ${n}`);
    }
    function bool(b) {
      if (typeof b !== "boolean")
        throw new Error(`boolean expected, not ${b}`);
    }
    function isBytes(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    function bytes(b, ...lengths) {
      if (!isBytes(b))
        throw new Error("Uint8Array expected");
      if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
    }
    function hash(h) {
      if (typeof h !== "function" || typeof h.create !== "function")
        throw new Error("Hash should be wrapped by utils.wrapConstructor");
      number(h.outputLen);
      number(h.blockLen);
    }
    function exists(instance, checkFinished = true) {
      if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished)
        throw new Error("Hash#digest() has already been called");
    }
    function output(out, instance) {
      bytes(out);
      const min = instance.outputLen;
      if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
      }
    }
    var assert = { number, bool, bytes, hash, exists, output };
    exports2.default = assert;
  }
});

// node_modules/@noble/hashes/cryptoNode.js
var require_cryptoNode = __commonJS({
  "node_modules/@noble/hashes/cryptoNode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.crypto = void 0;
    var nc = __require("node:crypto");
    exports2.crypto = nc && typeof nc === "object" && "webcrypto" in nc ? nc.webcrypto : nc && typeof nc === "object" && "randomBytes" in nc ? nc : void 0;
  }
});

// node_modules/@noble/hashes/utils.js
var require_utils = __commonJS({
  "node_modules/@noble/hashes/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Hash = exports2.nextTick = exports2.byteSwapIfBE = exports2.byteSwap = exports2.isLE = exports2.rotl = exports2.rotr = exports2.createView = exports2.u32 = exports2.u8 = void 0;
    exports2.isBytes = isBytes;
    exports2.byteSwap32 = byteSwap32;
    exports2.bytesToHex = bytesToHex;
    exports2.hexToBytes = hexToBytes;
    exports2.asyncLoop = asyncLoop;
    exports2.utf8ToBytes = utf8ToBytes;
    exports2.toBytes = toBytes;
    exports2.concatBytes = concatBytes;
    exports2.checkOpts = checkOpts;
    exports2.wrapConstructor = wrapConstructor;
    exports2.wrapConstructorWithOpts = wrapConstructorWithOpts;
    exports2.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
    exports2.randomBytes = randomBytes;
    var crypto_1 = require_cryptoNode();
    var _assert_js_1 = require_assert();
    function isBytes(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    var u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    exports2.u8 = u8;
    var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    exports2.u32 = u32;
    var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    exports2.createView = createView;
    var rotr = (word, shift) => word << 32 - shift | word >>> shift;
    exports2.rotr = rotr;
    var rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
    exports2.rotl = rotl;
    exports2.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    var byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
    exports2.byteSwap = byteSwap;
    exports2.byteSwapIfBE = exports2.isLE ? (n) => n : (n) => (0, exports2.byteSwap)(n);
    function byteSwap32(arr) {
      for (let i = 0; i < arr.length; i++) {
        arr[i] = (0, exports2.byteSwap)(arr[i]);
      }
    }
    var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      (0, _assert_js_1.bytes)(bytes);
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    var asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
    function asciiToBase16(char) {
      if (char >= asciis._0 && char <= asciis._9)
        return char - asciis._0;
      if (char >= asciis._A && char <= asciis._F)
        return char - (asciis._A - 10);
      if (char >= asciis._a && char <= asciis._f)
        return char - (asciis._a - 10);
      return;
    }
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const hl = hex.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + hl);
      const array = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex[hi] + hex[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
      }
      return array;
    }
    var nextTick = async () => {
    };
    exports2.nextTick = nextTick;
    async function asyncLoop(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports2.nextTick)();
        ts += diff;
      }
    }
    function utf8ToBytes(str2) {
      if (typeof str2 !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str2}`);
      return new Uint8Array(new TextEncoder().encode(str2));
    }
    function toBytes(data) {
      if (typeof data === "string")
        data = utf8ToBytes(data);
      (0, _assert_js_1.bytes)(data);
      return data;
    }
    function concatBytes(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        (0, _assert_js_1.bytes)(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    var Hash = class {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    };
    exports2.Hash = Hash;
    var toStr = {}.toString;
    function checkOpts(defaults, opts) {
      if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    function wrapConstructor(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    function wrapXOFConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    function randomBytes(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      if (crypto_1.crypto && typeof crypto_1.crypto.randomBytes === "function") {
        return crypto_1.crypto.randomBytes(bytesLength);
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
  }
});

// node_modules/@noble/hashes/_md.js
var require_md = __commonJS({
  "node_modules/@noble/hashes/_md.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HashMD = exports2.Maj = exports2.Chi = void 0;
    var _assert_js_1 = require_assert();
    var utils_js_1 = require_utils();
    function setBigUint64(view, byteOffset, value, isLE) {
      if (typeof view.setBigUint64 === "function")
        return view.setBigUint64(byteOffset, value, isLE);
      const _32n = BigInt(32);
      const _u32_max = BigInt(4294967295);
      const wh = Number(value >> _32n & _u32_max);
      const wl = Number(value & _u32_max);
      const h = isLE ? 4 : 0;
      const l = isLE ? 0 : 4;
      view.setUint32(byteOffset + h, wh, isLE);
      view.setUint32(byteOffset + l, wl, isLE);
    }
    var Chi = (a, b, c) => a & b ^ ~a & c;
    exports2.Chi = Chi;
    var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
    exports2.Maj = Maj;
    var HashMD = class extends utils_js_1.Hash {
      constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { view, buffer, blockLen } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          if (take === blockLen) {
            const dataView = (0, utils_js_1.createView)(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.output)(out, this);
        this.finished = true;
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer[i] = 0;
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE);
      }
      digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
          to.buffer.set(buffer);
        return to;
      }
    };
    exports2.HashMD = HashMD;
  }
});

// node_modules/@noble/hashes/sha256.js
var require_sha256 = __commonJS({
  "node_modules/@noble/hashes/sha256.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sha224 = exports2.sha256 = exports2.SHA256 = void 0;
    var _md_js_1 = require_md();
    var utils_js_1 = require_utils();
    var SHA256_K = /* @__PURE__ */ new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    var SHA256_IV = /* @__PURE__ */ new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SHA256_W = /* @__PURE__ */ new Uint32Array(64);
    var SHA256 = class extends _md_js_1.HashMD {
      constructor() {
        super(64, 32, 8, false);
        this.A = SHA256_IV[0] | 0;
        this.B = SHA256_IV[1] | 0;
        this.C = SHA256_IV[2] | 0;
        this.D = SHA256_IV[3] | 0;
        this.E = SHA256_IV[4] | 0;
        this.F = SHA256_IV[5] | 0;
        this.G = SHA256_IV[6] | 0;
        this.H = SHA256_IV[7] | 0;
      }
      get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
      }
      // prettier-ignore
      set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W[i - 15];
          const W2 = SHA256_W[i - 2];
          const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
          const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
          SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
          const T1 = H + sigma1 + (0, _md_js_1.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
          const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
          const T2 = sigma0 + (0, _md_js_1.Maj)(A, B, C) | 0;
          H = G;
          G = F;
          F = E;
          E = D + T1 | 0;
          D = C;
          C = B;
          B = A;
          A = T1 + T2 | 0;
        }
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
      }
      roundClean() {
        SHA256_W.fill(0);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
      }
    };
    exports2.SHA256 = SHA256;
    var SHA224 = class extends SHA256 {
      constructor() {
        super();
        this.A = 3238371032 | 0;
        this.B = 914150663 | 0;
        this.C = 812702999 | 0;
        this.D = 4144912697 | 0;
        this.E = 4290775857 | 0;
        this.F = 1750603025 | 0;
        this.G = 1694076839 | 0;
        this.H = 3204075428 | 0;
        this.outputLen = 28;
      }
    };
    exports2.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());
    exports2.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
  }
});

// node_modules/viem/_cjs/utils/hash/sha256.js
var require_sha2562 = __commonJS({
  "node_modules/viem/_cjs/utils/hash/sha256.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sha256 = sha256;
    var sha256_1 = require_sha256();
    var isHex_js_1 = require_isHex();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    function sha256(value, to_) {
      const to = to_ || "hex";
      const bytes = (0, sha256_1.sha256)((0, isHex_js_1.isHex)(value, { strict: false }) ? (0, toBytes_js_1.toBytes)(value) : value);
      if (to === "bytes")
        return bytes;
      return (0, toHex_js_1.toHex)(bytes);
    }
  }
});

// node_modules/viem/_cjs/utils/blob/commitmentToVersionedHash.js
var require_commitmentToVersionedHash = __commonJS({
  "node_modules/viem/_cjs/utils/blob/commitmentToVersionedHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.commitmentToVersionedHash = commitmentToVersionedHash;
    var toHex_js_1 = require_toHex();
    var sha256_js_1 = require_sha2562();
    function commitmentToVersionedHash(parameters) {
      const { commitment, version = 1 } = parameters;
      const to = parameters.to ?? (typeof commitment === "string" ? "hex" : "bytes");
      const versionedHash = (0, sha256_js_1.sha256)(commitment, "bytes");
      versionedHash.set([version], 0);
      return to === "bytes" ? versionedHash : (0, toHex_js_1.bytesToHex)(versionedHash);
    }
  }
});

// node_modules/viem/_cjs/utils/blob/commitmentsToVersionedHashes.js
var require_commitmentsToVersionedHashes = __commonJS({
  "node_modules/viem/_cjs/utils/blob/commitmentsToVersionedHashes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.commitmentsToVersionedHashes = commitmentsToVersionedHashes;
    var commitmentToVersionedHash_js_1 = require_commitmentToVersionedHash();
    function commitmentsToVersionedHashes(parameters) {
      const { commitments, version } = parameters;
      const to = parameters.to ?? (typeof commitments[0] === "string" ? "hex" : "bytes");
      const hashes = [];
      for (const commitment of commitments) {
        hashes.push((0, commitmentToVersionedHash_js_1.commitmentToVersionedHash)({
          commitment,
          to,
          version
        }));
      }
      return hashes;
    }
  }
});

// node_modules/viem/_cjs/constants/blob.js
var require_blob = __commonJS({
  "node_modules/viem/_cjs/constants/blob.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.maxBytesPerTransaction = exports2.bytesPerBlob = exports2.fieldElementsPerBlob = exports2.bytesPerFieldElement = void 0;
    var blobsPerTransaction = 6;
    exports2.bytesPerFieldElement = 32;
    exports2.fieldElementsPerBlob = 4096;
    exports2.bytesPerBlob = exports2.bytesPerFieldElement * exports2.fieldElementsPerBlob;
    exports2.maxBytesPerTransaction = exports2.bytesPerBlob * blobsPerTransaction - 1 - 1 * exports2.fieldElementsPerBlob * blobsPerTransaction;
  }
});

// node_modules/viem/_cjs/constants/kzg.js
var require_kzg = __commonJS({
  "node_modules/viem/_cjs/constants/kzg.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.versionedHashVersionKzg = void 0;
    exports2.versionedHashVersionKzg = 1;
  }
});

// node_modules/viem/_cjs/errors/blob.js
var require_blob2 = __commonJS({
  "node_modules/viem/_cjs/errors/blob.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidVersionedHashVersionError = exports2.InvalidVersionedHashSizeError = exports2.EmptyBlobError = exports2.BlobSizeTooLargeError = void 0;
    var kzg_js_1 = require_kzg();
    var base_js_1 = require_base();
    var BlobSizeTooLargeError = class extends base_js_1.BaseError {
      constructor({ maxSize, size }) {
        super("Blob size is too large.", {
          metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size} bytes`],
          name: "BlobSizeTooLargeError"
        });
      }
    };
    exports2.BlobSizeTooLargeError = BlobSizeTooLargeError;
    var EmptyBlobError = class extends base_js_1.BaseError {
      constructor() {
        super("Blob data must not be empty.", { name: "EmptyBlobError" });
      }
    };
    exports2.EmptyBlobError = EmptyBlobError;
    var InvalidVersionedHashSizeError = class extends base_js_1.BaseError {
      constructor({ hash, size }) {
        super(`Versioned hash "${hash}" size is invalid.`, {
          metaMessages: ["Expected: 32", `Received: ${size}`],
          name: "InvalidVersionedHashSizeError"
        });
      }
    };
    exports2.InvalidVersionedHashSizeError = InvalidVersionedHashSizeError;
    var InvalidVersionedHashVersionError = class extends base_js_1.BaseError {
      constructor({ hash, version }) {
        super(`Versioned hash "${hash}" version is invalid.`, {
          metaMessages: [
            `Expected: ${kzg_js_1.versionedHashVersionKzg}`,
            `Received: ${version}`
          ],
          name: "InvalidVersionedHashVersionError"
        });
      }
    };
    exports2.InvalidVersionedHashVersionError = InvalidVersionedHashVersionError;
  }
});

// node_modules/viem/_cjs/utils/blob/toBlobs.js
var require_toBlobs = __commonJS({
  "node_modules/viem/_cjs/utils/blob/toBlobs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toBlobs = toBlobs;
    var blob_js_1 = require_blob();
    var blob_js_2 = require_blob2();
    var cursor_js_1 = require_cursor2();
    var size_js_1 = require_size();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    function toBlobs(parameters) {
      const to = parameters.to ?? (typeof parameters.data === "string" ? "hex" : "bytes");
      const data = typeof parameters.data === "string" ? (0, toBytes_js_1.hexToBytes)(parameters.data) : parameters.data;
      const size_ = (0, size_js_1.size)(data);
      if (!size_)
        throw new blob_js_2.EmptyBlobError();
      if (size_ > blob_js_1.maxBytesPerTransaction)
        throw new blob_js_2.BlobSizeTooLargeError({
          maxSize: blob_js_1.maxBytesPerTransaction,
          size: size_
        });
      const blobs = [];
      let active = true;
      let position = 0;
      while (active) {
        const blob = (0, cursor_js_1.createCursor)(new Uint8Array(blob_js_1.bytesPerBlob));
        let size = 0;
        while (size < blob_js_1.fieldElementsPerBlob) {
          const bytes = data.slice(position, position + (blob_js_1.bytesPerFieldElement - 1));
          blob.pushByte(0);
          blob.pushBytes(bytes);
          if (bytes.length < 31) {
            blob.pushByte(128);
            active = false;
            break;
          }
          size++;
          position += 31;
        }
        blobs.push(blob);
      }
      return to === "bytes" ? blobs.map((x) => x.bytes) : blobs.map((x) => (0, toHex_js_1.bytesToHex)(x.bytes));
    }
  }
});

// node_modules/viem/_cjs/utils/blob/toBlobSidecars.js
var require_toBlobSidecars = __commonJS({
  "node_modules/viem/_cjs/utils/blob/toBlobSidecars.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toBlobSidecars = toBlobSidecars;
    var blobsToCommitments_js_1 = require_blobsToCommitments();
    var blobsToProofs_js_1 = require_blobsToProofs();
    var toBlobs_js_1 = require_toBlobs();
    function toBlobSidecars(parameters) {
      const { data, kzg, to } = parameters;
      const blobs = parameters.blobs ?? (0, toBlobs_js_1.toBlobs)({ data, to });
      const commitments = parameters.commitments ?? (0, blobsToCommitments_js_1.blobsToCommitments)({ blobs, kzg, to });
      const proofs = parameters.proofs ?? (0, blobsToProofs_js_1.blobsToProofs)({ blobs, commitments, kzg, to });
      const sidecars = [];
      for (let i = 0; i < blobs.length; i++)
        sidecars.push({
          blob: blobs[i],
          commitment: commitments[i],
          proof: proofs[i]
        });
      return sidecars;
    }
  }
});

// node_modules/viem/_cjs/experimental/eip7702/utils/serializeAuthorizationList.js
var require_serializeAuthorizationList = __commonJS({
  "node_modules/viem/_cjs/experimental/eip7702/utils/serializeAuthorizationList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeAuthorizationList = serializeAuthorizationList;
    var toHex_js_1 = require_toHex();
    var serializeTransaction_js_1 = require_serializeTransaction();
    function serializeAuthorizationList(authorizationList) {
      if (!authorizationList || authorizationList.length === 0)
        return [];
      const serializedAuthorizationList = [];
      for (const authorization of authorizationList) {
        const { contractAddress, chainId, nonce, ...signature } = authorization;
        serializedAuthorizationList.push([
          (0, toHex_js_1.toHex)(chainId),
          contractAddress,
          nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
          ...(0, serializeTransaction_js_1.toYParitySignatureArray)({}, signature)
        ]);
      }
      return serializedAuthorizationList;
    }
  }
});

// node_modules/viem/_cjs/errors/address.js
var require_address = __commonJS({
  "node_modules/viem/_cjs/errors/address.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidAddressError = void 0;
    var base_js_1 = require_base();
    var InvalidAddressError = class extends base_js_1.BaseError {
      constructor({ address }) {
        super(`Address "${address}" is invalid.`, {
          metaMessages: [
            "- Address must be a hex value of 20 bytes (40 hex characters).",
            "- Address must match its checksum counterpart."
          ],
          name: "InvalidAddressError"
        });
      }
    };
    exports2.InvalidAddressError = InvalidAddressError;
  }
});

// node_modules/viem/_cjs/errors/chain.js
var require_chain = __commonJS({
  "node_modules/viem/_cjs/errors/chain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidChainIdError = exports2.ClientChainNotConfiguredError = exports2.ChainNotFoundError = exports2.ChainMismatchError = exports2.ChainDoesNotSupportContract = void 0;
    var base_js_1 = require_base();
    var ChainDoesNotSupportContract = class extends base_js_1.BaseError {
      constructor({ blockNumber, chain, contract }) {
        super(`Chain "${chain.name}" does not support contract "${contract.name}".`, {
          metaMessages: [
            "This could be due to any of the following:",
            ...blockNumber && contract.blockCreated && contract.blockCreated > blockNumber ? [
              `- The contract "${contract.name}" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`
            ] : [
              `- The chain does not have the contract "${contract.name}" configured.`
            ]
          ],
          name: "ChainDoesNotSupportContract"
        });
      }
    };
    exports2.ChainDoesNotSupportContract = ChainDoesNotSupportContract;
    var ChainMismatchError = class extends base_js_1.BaseError {
      constructor({ chain, currentChainId }) {
        super(`The current chain of the wallet (id: ${currentChainId}) does not match the target chain for the transaction (id: ${chain.id} \u2013 ${chain.name}).`, {
          metaMessages: [
            `Current Chain ID:  ${currentChainId}`,
            `Expected Chain ID: ${chain.id} \u2013 ${chain.name}`
          ],
          name: "ChainMismatchError"
        });
      }
    };
    exports2.ChainMismatchError = ChainMismatchError;
    var ChainNotFoundError = class extends base_js_1.BaseError {
      constructor() {
        super([
          "No chain was provided to the request.",
          "Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient."
        ].join("\n"), {
          name: "ChainNotFoundError"
        });
      }
    };
    exports2.ChainNotFoundError = ChainNotFoundError;
    var ClientChainNotConfiguredError = class extends base_js_1.BaseError {
      constructor() {
        super("No chain was provided to the Client.", {
          name: "ClientChainNotConfiguredError"
        });
      }
    };
    exports2.ClientChainNotConfiguredError = ClientChainNotConfiguredError;
    var InvalidChainIdError = class extends base_js_1.BaseError {
      constructor({ chainId }) {
        super(typeof chainId === "number" ? `Chain ID "${chainId}" is invalid.` : "Chain ID is invalid.", { name: "InvalidChainIdError" });
      }
    };
    exports2.InvalidChainIdError = InvalidChainIdError;
  }
});

// node_modules/viem/_cjs/errors/node.js
var require_node = __commonJS({
  "node_modules/viem/_cjs/errors/node.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnknownNodeError = exports2.TipAboveFeeCapError = exports2.TransactionTypeNotSupportedError = exports2.IntrinsicGasTooLowError = exports2.IntrinsicGasTooHighError = exports2.InsufficientFundsError = exports2.NonceMaxValueError = exports2.NonceTooLowError = exports2.NonceTooHighError = exports2.FeeCapTooLowError = exports2.FeeCapTooHighError = exports2.ExecutionRevertedError = void 0;
    var formatGwei_js_1 = require_formatGwei();
    var base_js_1 = require_base();
    var ExecutionRevertedError = class extends base_js_1.BaseError {
      constructor({ cause, message } = {}) {
        const reason = message?.replace("execution reverted: ", "")?.replace("execution reverted", "");
        super(`Execution reverted ${reason ? `with reason: ${reason}` : "for an unknown reason"}.`, {
          cause,
          name: "ExecutionRevertedError"
        });
      }
    };
    exports2.ExecutionRevertedError = ExecutionRevertedError;
    Object.defineProperty(ExecutionRevertedError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 3
    });
    Object.defineProperty(ExecutionRevertedError, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /execution reverted/
    });
    var FeeCapTooHighError = class extends base_js_1.BaseError {
      constructor({ cause, maxFeePerGas } = {}) {
        super(`The fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${(0, formatGwei_js_1.formatGwei)(maxFeePerGas)} gwei` : ""}) cannot be higher than the maximum allowed value (2^256-1).`, {
          cause,
          name: "FeeCapTooHighError"
        });
      }
    };
    exports2.FeeCapTooHighError = FeeCapTooHighError;
    Object.defineProperty(FeeCapTooHighError, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /max fee per gas higher than 2\^256-1|fee cap higher than 2\^256-1/
    });
    var FeeCapTooLowError = class extends base_js_1.BaseError {
      constructor({ cause, maxFeePerGas } = {}) {
        super(`The fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${(0, formatGwei_js_1.formatGwei)(maxFeePerGas)}` : ""} gwei) cannot be lower than the block base fee.`, {
          cause,
          name: "FeeCapTooLowError"
        });
      }
    };
    exports2.FeeCapTooLowError = FeeCapTooLowError;
    Object.defineProperty(FeeCapTooLowError, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/
    });
    var NonceTooHighError = class extends base_js_1.BaseError {
      constructor({ cause, nonce } = {}) {
        super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}is higher than the next one expected.`, { cause, name: "NonceTooHighError" });
      }
    };
    exports2.NonceTooHighError = NonceTooHighError;
    Object.defineProperty(NonceTooHighError, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /nonce too high/
    });
    var NonceTooLowError = class extends base_js_1.BaseError {
      constructor({ cause, nonce } = {}) {
        super([
          `Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}is lower than the current nonce of the account.`,
          "Try increasing the nonce or find the latest nonce with `getTransactionCount`."
        ].join("\n"), { cause, name: "NonceTooLowError" });
      }
    };
    exports2.NonceTooLowError = NonceTooLowError;
    Object.defineProperty(NonceTooLowError, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /nonce too low|transaction already imported|already known/
    });
    var NonceMaxValueError = class extends base_js_1.BaseError {
      constructor({ cause, nonce } = {}) {
        super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}exceeds the maximum allowed nonce.`, { cause, name: "NonceMaxValueError" });
      }
    };
    exports2.NonceMaxValueError = NonceMaxValueError;
    Object.defineProperty(NonceMaxValueError, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /nonce has max value/
    });
    var InsufficientFundsError = class extends base_js_1.BaseError {
      constructor({ cause } = {}) {
        super([
          "The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account."
        ].join("\n"), {
          cause,
          metaMessages: [
            "This error could arise when the account does not have enough funds to:",
            " - pay for the total gas fee,",
            " - pay for the value to send.",
            " ",
            "The cost of the transaction is calculated as `gas * gas fee + value`, where:",
            " - `gas` is the amount of gas needed for transaction to execute,",
            " - `gas fee` is the gas fee,",
            " - `value` is the amount of ether to send to the recipient."
          ],
          name: "InsufficientFundsError"
        });
      }
    };
    exports2.InsufficientFundsError = InsufficientFundsError;
    Object.defineProperty(InsufficientFundsError, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /insufficient funds|exceeds transaction sender account balance/
    });
    var IntrinsicGasTooHighError = class extends base_js_1.BaseError {
      constructor({ cause, gas } = {}) {
        super(`The amount of gas ${gas ? `(${gas}) ` : ""}provided for the transaction exceeds the limit allowed for the block.`, {
          cause,
          name: "IntrinsicGasTooHighError"
        });
      }
    };
    exports2.IntrinsicGasTooHighError = IntrinsicGasTooHighError;
    Object.defineProperty(IntrinsicGasTooHighError, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /intrinsic gas too high|gas limit reached/
    });
    var IntrinsicGasTooLowError = class extends base_js_1.BaseError {
      constructor({ cause, gas } = {}) {
        super(`The amount of gas ${gas ? `(${gas}) ` : ""}provided for the transaction is too low.`, {
          cause,
          name: "IntrinsicGasTooLowError"
        });
      }
    };
    exports2.IntrinsicGasTooLowError = IntrinsicGasTooLowError;
    Object.defineProperty(IntrinsicGasTooLowError, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /intrinsic gas too low/
    });
    var TransactionTypeNotSupportedError = class extends base_js_1.BaseError {
      constructor({ cause }) {
        super("The transaction type is not supported for this chain.", {
          cause,
          name: "TransactionTypeNotSupportedError"
        });
      }
    };
    exports2.TransactionTypeNotSupportedError = TransactionTypeNotSupportedError;
    Object.defineProperty(TransactionTypeNotSupportedError, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /transaction type not valid/
    });
    var TipAboveFeeCapError = class extends base_js_1.BaseError {
      constructor({ cause, maxPriorityFeePerGas, maxFeePerGas } = {}) {
        super([
          `The provided tip (\`maxPriorityFeePerGas\`${maxPriorityFeePerGas ? ` = ${(0, formatGwei_js_1.formatGwei)(maxPriorityFeePerGas)} gwei` : ""}) cannot be higher than the fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${(0, formatGwei_js_1.formatGwei)(maxFeePerGas)} gwei` : ""}).`
        ].join("\n"), {
          cause,
          name: "TipAboveFeeCapError"
        });
      }
    };
    exports2.TipAboveFeeCapError = TipAboveFeeCapError;
    Object.defineProperty(TipAboveFeeCapError, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /max priority fee per gas higher than max fee per gas|tip higher than fee cap/
    });
    var UnknownNodeError = class extends base_js_1.BaseError {
      constructor({ cause }) {
        super(`An error occurred while executing: ${cause?.shortMessage}`, {
          cause,
          name: "UnknownNodeError"
        });
      }
    };
    exports2.UnknownNodeError = UnknownNodeError;
  }
});

// node_modules/viem/_cjs/utils/lru.js
var require_lru = __commonJS({
  "node_modules/viem/_cjs/utils/lru.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LruMap = void 0;
    var LruMap = class extends Map {
      constructor(size) {
        super();
        Object.defineProperty(this, "maxSize", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.maxSize = size;
      }
      get(key) {
        const value = super.get(key);
        if (super.has(key) && value !== void 0) {
          this.delete(key);
          super.set(key, value);
        }
        return value;
      }
      set(key, value) {
        super.set(key, value);
        if (this.maxSize && this.size > this.maxSize) {
          const firstKey = this.keys().next().value;
          if (firstKey)
            this.delete(firstKey);
        }
        return this;
      }
    };
    exports2.LruMap = LruMap;
  }
});

// node_modules/@noble/hashes/_u64.js
var require_u64 = __commonJS({
  "node_modules/@noble/hashes/_u64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.add5L = exports2.add5H = exports2.add4H = exports2.add4L = exports2.add3H = exports2.add3L = exports2.rotlBL = exports2.rotlBH = exports2.rotlSL = exports2.rotlSH = exports2.rotr32L = exports2.rotr32H = exports2.rotrBL = exports2.rotrBH = exports2.rotrSL = exports2.rotrSH = exports2.shrSL = exports2.shrSH = exports2.toBig = void 0;
    exports2.fromBig = fromBig;
    exports2.split = split;
    exports2.add = add;
    var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
    var _32n = /* @__PURE__ */ BigInt(32);
    function fromBig(n, le = false) {
      if (le)
        return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
      return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
    }
    function split(lst, le = false) {
      let Ah = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
    }
    var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
    exports2.toBig = toBig;
    var shrSH = (h, _l, s) => h >>> s;
    exports2.shrSH = shrSH;
    var shrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports2.shrSL = shrSL;
    var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
    exports2.rotrSH = rotrSH;
    var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports2.rotrSL = rotrSL;
    var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
    exports2.rotrBH = rotrBH;
    var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
    exports2.rotrBL = rotrBL;
    var rotr32H = (_h, l) => l;
    exports2.rotr32H = rotr32H;
    var rotr32L = (h, _l) => h;
    exports2.rotr32L = rotr32L;
    var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
    exports2.rotlSH = rotlSH;
    var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
    exports2.rotlSL = rotlSL;
    var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
    exports2.rotlBH = rotlBH;
    var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
    exports2.rotlBL = rotlBL;
    function add(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
    }
    var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    exports2.add3L = add3L;
    var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    exports2.add3H = add3H;
    var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    exports2.add4L = add4L;
    var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    exports2.add4H = add4H;
    var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    exports2.add5L = add5L;
    var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    exports2.add5H = add5H;
    var u64 = {
      fromBig,
      split,
      toBig,
      shrSH,
      shrSL,
      rotrSH,
      rotrSL,
      rotrBH,
      rotrBL,
      rotr32H,
      rotr32L,
      rotlSH,
      rotlSL,
      rotlBH,
      rotlBL,
      add,
      add3L,
      add3H,
      add4L,
      add4H,
      add5H,
      add5L
    };
    exports2.default = u64;
  }
});

// node_modules/@noble/hashes/sha3.js
var require_sha3 = __commonJS({
  "node_modules/@noble/hashes/sha3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shake256 = exports2.shake128 = exports2.keccak_512 = exports2.keccak_384 = exports2.keccak_256 = exports2.keccak_224 = exports2.sha3_512 = exports2.sha3_384 = exports2.sha3_256 = exports2.sha3_224 = exports2.Keccak = void 0;
    exports2.keccakP = keccakP;
    var _assert_js_1 = require_assert();
    var _u64_js_1 = require_u64();
    var utils_js_1 = require_utils();
    var SHA3_PI = [];
    var SHA3_ROTL = [];
    var _SHA3_IOTA = [];
    var _0n = /* @__PURE__ */ BigInt(0);
    var _1n = /* @__PURE__ */ BigInt(1);
    var _2n = /* @__PURE__ */ BigInt(2);
    var _7n = /* @__PURE__ */ BigInt(7);
    var _256n = /* @__PURE__ */ BigInt(256);
    var _0x71n = /* @__PURE__ */ BigInt(113);
    for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI.push(2 * (5 * y + x));
      SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n;
      for (let j = 0; j < 7; j++) {
        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
        if (R & _2n)
          t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
      }
      _SHA3_IOTA.push(t);
    }
    var [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);
    var rotlH = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s);
    var rotlL = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s);
    function keccakP(s, rounds = 24) {
      const B = new Uint32Array(5 * 2);
      for (let round = 24 - rounds; round < 24; round++) {
        for (let x = 0; x < 10; x++)
          B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
          const idx1 = (x + 8) % 10;
          const idx0 = (x + 2) % 10;
          const B0 = B[idx0];
          const B1 = B[idx0 + 1];
          const Th = rotlH(B0, B1, 1) ^ B[idx1];
          const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
          for (let y = 0; y < 50; y += 10) {
            s[x + y] ^= Th;
            s[x + y + 1] ^= Tl;
          }
        }
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
          const shift = SHA3_ROTL[t];
          const Th = rotlH(curH, curL, shift);
          const Tl = rotlL(curH, curL, shift);
          const PI = SHA3_PI[t];
          curH = s[PI];
          curL = s[PI + 1];
          s[PI] = Th;
          s[PI + 1] = Tl;
        }
        for (let y = 0; y < 50; y += 10) {
          for (let x = 0; x < 10; x++)
            B[x] = s[y + x];
          for (let x = 0; x < 10; x++)
            s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
      }
      B.fill(0);
    }
    var Keccak = class _Keccak extends utils_js_1.Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.number)(outputLen);
        if (0 >= this.blockLen || this.blockLen >= 200)
          throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
      }
      keccak() {
        if (!utils_js_1.isLE)
          (0, utils_js_1.byteSwap32)(this.state32);
        keccakP(this.state32, this.rounds);
        if (!utils_js_1.isLE)
          (0, utils_js_1.byteSwap32)(this.state32);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        (0, _assert_js_1.exists)(this, false);
        (0, _assert_js_1.bytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes) {
        (0, _assert_js_1.number)(bytes);
        return this.xofInto(new Uint8Array(bytes));
      }
      digestInto(out) {
        (0, _assert_js_1.output)(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        this.state.fill(0);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    };
    exports2.Keccak = Keccak;
    var gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));
    exports2.sha3_224 = gen(6, 144, 224 / 8);
    exports2.sha3_256 = gen(6, 136, 256 / 8);
    exports2.sha3_384 = gen(6, 104, 384 / 8);
    exports2.sha3_512 = gen(6, 72, 512 / 8);
    exports2.keccak_224 = gen(1, 144, 224 / 8);
    exports2.keccak_256 = gen(1, 136, 256 / 8);
    exports2.keccak_384 = gen(1, 104, 384 / 8);
    exports2.keccak_512 = gen(1, 72, 512 / 8);
    var genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
    exports2.shake128 = genShake(31, 168, 128 / 8);
    exports2.shake256 = genShake(31, 136, 256 / 8);
  }
});

// node_modules/viem/_cjs/utils/hash/keccak256.js
var require_keccak256 = __commonJS({
  "node_modules/viem/_cjs/utils/hash/keccak256.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.keccak256 = keccak256;
    var sha3_1 = require_sha3();
    var isHex_js_1 = require_isHex();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    function keccak256(value, to_) {
      const to = to_ || "hex";
      const bytes = (0, sha3_1.keccak_256)((0, isHex_js_1.isHex)(value, { strict: false }) ? (0, toBytes_js_1.toBytes)(value) : value);
      if (to === "bytes")
        return bytes;
      return (0, toHex_js_1.toHex)(bytes);
    }
  }
});

// node_modules/viem/_cjs/utils/address/getAddress.js
var require_getAddress = __commonJS({
  "node_modules/viem/_cjs/utils/address/getAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checksumAddress = checksumAddress;
    exports2.getAddress = getAddress;
    var address_js_1 = require_address();
    var toBytes_js_1 = require_toBytes();
    var keccak256_js_1 = require_keccak256();
    var lru_js_1 = require_lru();
    var isAddress_js_1 = require_isAddress();
    var checksumAddressCache = new lru_js_1.LruMap(8192);
    function checksumAddress(address_, chainId) {
      if (checksumAddressCache.has(`${address_}.${chainId}`))
        return checksumAddressCache.get(`${address_}.${chainId}`);
      const hexAddress = chainId ? `${chainId}${address_.toLowerCase()}` : address_.substring(2).toLowerCase();
      const hash = (0, keccak256_js_1.keccak256)((0, toBytes_js_1.stringToBytes)(hexAddress), "bytes");
      const address = (chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress).split("");
      for (let i = 0; i < 40; i += 2) {
        if (hash[i >> 1] >> 4 >= 8 && address[i]) {
          address[i] = address[i].toUpperCase();
        }
        if ((hash[i >> 1] & 15) >= 8 && address[i + 1]) {
          address[i + 1] = address[i + 1].toUpperCase();
        }
      }
      const result = `0x${address.join("")}`;
      checksumAddressCache.set(`${address_}.${chainId}`, result);
      return result;
    }
    function getAddress(address, chainId) {
      if (!(0, isAddress_js_1.isAddress)(address, { strict: false }))
        throw new address_js_1.InvalidAddressError({ address });
      return checksumAddress(address, chainId);
    }
  }
});

// node_modules/viem/_cjs/utils/address/isAddress.js
var require_isAddress = __commonJS({
  "node_modules/viem/_cjs/utils/address/isAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isAddressCache = void 0;
    exports2.isAddress = isAddress;
    var lru_js_1 = require_lru();
    var getAddress_js_1 = require_getAddress();
    var addressRegex = /^0x[a-fA-F0-9]{40}$/;
    exports2.isAddressCache = new lru_js_1.LruMap(8192);
    function isAddress(address, options2) {
      const { strict = true } = options2 ?? {};
      const cacheKey = `${address}.${strict}`;
      if (exports2.isAddressCache.has(cacheKey))
        return exports2.isAddressCache.get(cacheKey);
      const result = (() => {
        if (!addressRegex.test(address))
          return false;
        if (address.toLowerCase() === address)
          return true;
        if (strict)
          return (0, getAddress_js_1.checksumAddress)(address) === address;
        return true;
      })();
      exports2.isAddressCache.set(cacheKey, result);
      return result;
    }
  }
});

// node_modules/viem/_cjs/utils/data/slice.js
var require_slice = __commonJS({
  "node_modules/viem/_cjs/utils/data/slice.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.slice = slice;
    exports2.sliceBytes = sliceBytes;
    exports2.sliceHex = sliceHex;
    var data_js_1 = require_data();
    var isHex_js_1 = require_isHex();
    var size_js_1 = require_size();
    function slice(value, start, end, { strict } = {}) {
      if ((0, isHex_js_1.isHex)(value, { strict: false }))
        return sliceHex(value, start, end, {
          strict
        });
      return sliceBytes(value, start, end, {
        strict
      });
    }
    function assertStartOffset(value, start) {
      if (typeof start === "number" && start > 0 && start > (0, size_js_1.size)(value) - 1)
        throw new data_js_1.SliceOffsetOutOfBoundsError({
          offset: start,
          position: "start",
          size: (0, size_js_1.size)(value)
        });
    }
    function assertEndOffset(value, start, end) {
      if (typeof start === "number" && typeof end === "number" && (0, size_js_1.size)(value) !== end - start) {
        throw new data_js_1.SliceOffsetOutOfBoundsError({
          offset: end,
          position: "end",
          size: (0, size_js_1.size)(value)
        });
      }
    }
    function sliceBytes(value_, start, end, { strict } = {}) {
      assertStartOffset(value_, start);
      const value = value_.slice(start, end);
      if (strict)
        assertEndOffset(value, start, end);
      return value;
    }
    function sliceHex(value_, start, end, { strict } = {}) {
      assertStartOffset(value_, start);
      const value = `0x${value_.replace("0x", "").slice((start ?? 0) * 2, (end ?? value_.length) * 2)}`;
      if (strict)
        assertEndOffset(value, start, end);
      return value;
    }
  }
});

// node_modules/viem/_cjs/utils/transaction/assertTransaction.js
var require_assertTransaction = __commonJS({
  "node_modules/viem/_cjs/utils/transaction/assertTransaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertTransactionEIP7702 = assertTransactionEIP7702;
    exports2.assertTransactionEIP4844 = assertTransactionEIP4844;
    exports2.assertTransactionEIP1559 = assertTransactionEIP1559;
    exports2.assertTransactionEIP2930 = assertTransactionEIP2930;
    exports2.assertTransactionLegacy = assertTransactionLegacy;
    var kzg_js_1 = require_kzg();
    var number_js_1 = require_number();
    var address_js_1 = require_address();
    var base_js_1 = require_base();
    var blob_js_1 = require_blob2();
    var chain_js_1 = require_chain();
    var node_js_1 = require_node();
    var isAddress_js_1 = require_isAddress();
    var size_js_1 = require_size();
    var slice_js_1 = require_slice();
    var fromHex_js_1 = require_fromHex();
    function assertTransactionEIP7702(transaction) {
      const { authorizationList } = transaction;
      if (authorizationList) {
        for (const authorization of authorizationList) {
          const { contractAddress, chainId } = authorization;
          if (!(0, isAddress_js_1.isAddress)(contractAddress))
            throw new address_js_1.InvalidAddressError({ address: contractAddress });
          if (chainId <= 0)
            throw new chain_js_1.InvalidChainIdError({ chainId });
        }
      }
      assertTransactionEIP1559(transaction);
    }
    function assertTransactionEIP4844(transaction) {
      const { blobVersionedHashes } = transaction;
      if (blobVersionedHashes) {
        if (blobVersionedHashes.length === 0)
          throw new blob_js_1.EmptyBlobError();
        for (const hash of blobVersionedHashes) {
          const size_ = (0, size_js_1.size)(hash);
          const version = (0, fromHex_js_1.hexToNumber)((0, slice_js_1.slice)(hash, 0, 1));
          if (size_ !== 32)
            throw new blob_js_1.InvalidVersionedHashSizeError({ hash, size: size_ });
          if (version !== kzg_js_1.versionedHashVersionKzg)
            throw new blob_js_1.InvalidVersionedHashVersionError({
              hash,
              version
            });
        }
      }
      assertTransactionEIP1559(transaction);
    }
    function assertTransactionEIP1559(transaction) {
      const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = transaction;
      if (chainId <= 0)
        throw new chain_js_1.InvalidChainIdError({ chainId });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (maxFeePerGas && maxFeePerGas > number_js_1.maxUint256)
        throw new node_js_1.FeeCapTooHighError({ maxFeePerGas });
      if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas)
        throw new node_js_1.TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });
    }
    function assertTransactionEIP2930(transaction) {
      const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } = transaction;
      if (chainId <= 0)
        throw new chain_js_1.InvalidChainIdError({ chainId });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (maxPriorityFeePerGas || maxFeePerGas)
        throw new base_js_1.BaseError("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.");
      if (gasPrice && gasPrice > number_js_1.maxUint256)
        throw new node_js_1.FeeCapTooHighError({ maxFeePerGas: gasPrice });
    }
    function assertTransactionLegacy(transaction) {
      const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } = transaction;
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (typeof chainId !== "undefined" && chainId <= 0)
        throw new chain_js_1.InvalidChainIdError({ chainId });
      if (maxPriorityFeePerGas || maxFeePerGas)
        throw new base_js_1.BaseError("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.");
      if (gasPrice && gasPrice > number_js_1.maxUint256)
        throw new node_js_1.FeeCapTooHighError({ maxFeePerGas: gasPrice });
    }
  }
});

// node_modules/viem/_cjs/utils/transaction/getTransactionType.js
var require_getTransactionType = __commonJS({
  "node_modules/viem/_cjs/utils/transaction/getTransactionType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransactionType = getTransactionType;
    var transaction_js_1 = require_transaction2();
    function getTransactionType(transaction) {
      if (transaction.type)
        return transaction.type;
      if (typeof transaction.authorizationList !== "undefined")
        return "eip7702";
      if (typeof transaction.blobs !== "undefined" || typeof transaction.blobVersionedHashes !== "undefined" || typeof transaction.maxFeePerBlobGas !== "undefined" || typeof transaction.sidecars !== "undefined")
        return "eip4844";
      if (typeof transaction.maxFeePerGas !== "undefined" || typeof transaction.maxPriorityFeePerGas !== "undefined") {
        return "eip1559";
      }
      if (typeof transaction.gasPrice !== "undefined") {
        if (typeof transaction.accessList !== "undefined")
          return "eip2930";
        return "legacy";
      }
      throw new transaction_js_1.InvalidSerializableTransactionError({ transaction });
    }
  }
});

// node_modules/viem/_cjs/utils/transaction/serializeAccessList.js
var require_serializeAccessList = __commonJS({
  "node_modules/viem/_cjs/utils/transaction/serializeAccessList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeAccessList = serializeAccessList;
    var address_js_1 = require_address();
    var transaction_js_1 = require_transaction2();
    var isAddress_js_1 = require_isAddress();
    function serializeAccessList(accessList) {
      if (!accessList || accessList.length === 0)
        return [];
      const serializedAccessList = [];
      for (let i = 0; i < accessList.length; i++) {
        const { address, storageKeys } = accessList[i];
        for (let j = 0; j < storageKeys.length; j++) {
          if (storageKeys[j].length - 2 !== 64) {
            throw new transaction_js_1.InvalidStorageKeySizeError({ storageKey: storageKeys[j] });
          }
        }
        if (!(0, isAddress_js_1.isAddress)(address, { strict: false })) {
          throw new address_js_1.InvalidAddressError({ address });
        }
        serializedAccessList.push([address, storageKeys]);
      }
      return serializedAccessList;
    }
  }
});

// node_modules/viem/_cjs/utils/transaction/serializeTransaction.js
var require_serializeTransaction = __commonJS({
  "node_modules/viem/_cjs/utils/transaction/serializeTransaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeTransaction = serializeTransaction;
    exports2.toYParitySignatureArray = toYParitySignatureArray;
    var transaction_js_1 = require_transaction2();
    var blobsToCommitments_js_1 = require_blobsToCommitments();
    var blobsToProofs_js_1 = require_blobsToProofs();
    var commitmentsToVersionedHashes_js_1 = require_commitmentsToVersionedHashes();
    var toBlobSidecars_js_1 = require_toBlobSidecars();
    var concat_js_1 = require_concat();
    var trim_js_1 = require_trim();
    var toHex_js_1 = require_toHex();
    var toRlp_js_1 = require_toRlp();
    var serializeAuthorizationList_js_1 = require_serializeAuthorizationList();
    var assertTransaction_js_1 = require_assertTransaction();
    var getTransactionType_js_1 = require_getTransactionType();
    var serializeAccessList_js_1 = require_serializeAccessList();
    function serializeTransaction(transaction, signature) {
      const type = (0, getTransactionType_js_1.getTransactionType)(transaction);
      if (type === "eip1559")
        return serializeTransactionEIP1559(transaction, signature);
      if (type === "eip2930")
        return serializeTransactionEIP2930(transaction, signature);
      if (type === "eip4844")
        return serializeTransactionEIP4844(transaction, signature);
      if (type === "eip7702")
        return serializeTransactionEIP7702(transaction, signature);
      return serializeTransactionLegacy(transaction, signature);
    }
    function serializeTransactionEIP7702(transaction, signature) {
      const { authorizationList, chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
      (0, assertTransaction_js_1.assertTransactionEIP7702)(transaction);
      const serializedAccessList = (0, serializeAccessList_js_1.serializeAccessList)(accessList);
      const serializedAuthorizationList = (0, serializeAuthorizationList_js_1.serializeAuthorizationList)(authorizationList);
      return (0, concat_js_1.concatHex)([
        "0x04",
        (0, toRlp_js_1.toRlp)([
          (0, toHex_js_1.toHex)(chainId),
          nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
          maxPriorityFeePerGas ? (0, toHex_js_1.toHex)(maxPriorityFeePerGas) : "0x",
          maxFeePerGas ? (0, toHex_js_1.toHex)(maxFeePerGas) : "0x",
          gas ? (0, toHex_js_1.toHex)(gas) : "0x",
          to ?? "0x",
          value ? (0, toHex_js_1.toHex)(value) : "0x",
          data ?? "0x",
          serializedAccessList,
          serializedAuthorizationList,
          ...toYParitySignatureArray(transaction, signature)
        ])
      ]);
    }
    function serializeTransactionEIP4844(transaction, signature) {
      const { chainId, gas, nonce, to, value, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
      (0, assertTransaction_js_1.assertTransactionEIP4844)(transaction);
      let blobVersionedHashes = transaction.blobVersionedHashes;
      let sidecars = transaction.sidecars;
      if (transaction.blobs && (typeof blobVersionedHashes === "undefined" || typeof sidecars === "undefined")) {
        const blobs2 = typeof transaction.blobs[0] === "string" ? transaction.blobs : transaction.blobs.map((x) => (0, toHex_js_1.bytesToHex)(x));
        const kzg = transaction.kzg;
        const commitments2 = (0, blobsToCommitments_js_1.blobsToCommitments)({
          blobs: blobs2,
          kzg
        });
        if (typeof blobVersionedHashes === "undefined")
          blobVersionedHashes = (0, commitmentsToVersionedHashes_js_1.commitmentsToVersionedHashes)({
            commitments: commitments2
          });
        if (typeof sidecars === "undefined") {
          const proofs2 = (0, blobsToProofs_js_1.blobsToProofs)({ blobs: blobs2, commitments: commitments2, kzg });
          sidecars = (0, toBlobSidecars_js_1.toBlobSidecars)({ blobs: blobs2, commitments: commitments2, proofs: proofs2 });
        }
      }
      const serializedAccessList = (0, serializeAccessList_js_1.serializeAccessList)(accessList);
      const serializedTransaction = [
        (0, toHex_js_1.toHex)(chainId),
        nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
        maxPriorityFeePerGas ? (0, toHex_js_1.toHex)(maxPriorityFeePerGas) : "0x",
        maxFeePerGas ? (0, toHex_js_1.toHex)(maxFeePerGas) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        to ?? "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        data ?? "0x",
        serializedAccessList,
        maxFeePerBlobGas ? (0, toHex_js_1.toHex)(maxFeePerBlobGas) : "0x",
        blobVersionedHashes ?? [],
        ...toYParitySignatureArray(transaction, signature)
      ];
      const blobs = [];
      const commitments = [];
      const proofs = [];
      if (sidecars)
        for (let i = 0; i < sidecars.length; i++) {
          const { blob, commitment, proof } = sidecars[i];
          blobs.push(blob);
          commitments.push(commitment);
          proofs.push(proof);
        }
      return (0, concat_js_1.concatHex)([
        "0x03",
        sidecars ? (0, toRlp_js_1.toRlp)([serializedTransaction, blobs, commitments, proofs]) : (0, toRlp_js_1.toRlp)(serializedTransaction)
      ]);
    }
    function serializeTransactionEIP1559(transaction, signature) {
      const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
      (0, assertTransaction_js_1.assertTransactionEIP1559)(transaction);
      const serializedAccessList = (0, serializeAccessList_js_1.serializeAccessList)(accessList);
      const serializedTransaction = [
        (0, toHex_js_1.toHex)(chainId),
        nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
        maxPriorityFeePerGas ? (0, toHex_js_1.toHex)(maxPriorityFeePerGas) : "0x",
        maxFeePerGas ? (0, toHex_js_1.toHex)(maxFeePerGas) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        to ?? "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        data ?? "0x",
        serializedAccessList,
        ...toYParitySignatureArray(transaction, signature)
      ];
      return (0, concat_js_1.concatHex)([
        "0x02",
        (0, toRlp_js_1.toRlp)(serializedTransaction)
      ]);
    }
    function serializeTransactionEIP2930(transaction, signature) {
      const { chainId, gas, data, nonce, to, value, accessList, gasPrice } = transaction;
      (0, assertTransaction_js_1.assertTransactionEIP2930)(transaction);
      const serializedAccessList = (0, serializeAccessList_js_1.serializeAccessList)(accessList);
      const serializedTransaction = [
        (0, toHex_js_1.toHex)(chainId),
        nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
        gasPrice ? (0, toHex_js_1.toHex)(gasPrice) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        to ?? "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        data ?? "0x",
        serializedAccessList,
        ...toYParitySignatureArray(transaction, signature)
      ];
      return (0, concat_js_1.concatHex)([
        "0x01",
        (0, toRlp_js_1.toRlp)(serializedTransaction)
      ]);
    }
    function serializeTransactionLegacy(transaction, signature) {
      const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction;
      (0, assertTransaction_js_1.assertTransactionLegacy)(transaction);
      let serializedTransaction = [
        nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
        gasPrice ? (0, toHex_js_1.toHex)(gasPrice) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        to ?? "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        data ?? "0x"
      ];
      if (signature) {
        const v = (() => {
          if (signature.v >= 35n) {
            const inferredChainId = (signature.v - 35n) / 2n;
            if (inferredChainId > 0)
              return signature.v;
            return 27n + (signature.v === 35n ? 0n : 1n);
          }
          if (chainId > 0)
            return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n);
          const v2 = 27n + (signature.v === 27n ? 0n : 1n);
          if (signature.v !== v2)
            throw new transaction_js_1.InvalidLegacyVError({ v: signature.v });
          return v2;
        })();
        const r = (0, trim_js_1.trim)(signature.r);
        const s = (0, trim_js_1.trim)(signature.s);
        serializedTransaction = [
          ...serializedTransaction,
          (0, toHex_js_1.toHex)(v),
          r === "0x00" ? "0x" : r,
          s === "0x00" ? "0x" : s
        ];
      } else if (chainId > 0) {
        serializedTransaction = [
          ...serializedTransaction,
          (0, toHex_js_1.toHex)(chainId),
          "0x",
          "0x"
        ];
      }
      return (0, toRlp_js_1.toRlp)(serializedTransaction);
    }
    function toYParitySignatureArray(transaction, signature_) {
      const signature = signature_ ?? transaction;
      const { v, yParity } = signature;
      if (typeof signature.r === "undefined")
        return [];
      if (typeof signature.s === "undefined")
        return [];
      if (typeof v === "undefined" && typeof yParity === "undefined")
        return [];
      const r = (0, trim_js_1.trim)(signature.r);
      const s = (0, trim_js_1.trim)(signature.s);
      const yParity_ = (() => {
        if (typeof yParity === "number")
          return yParity ? (0, toHex_js_1.toHex)(1) : "0x";
        if (v === 0n)
          return "0x";
        if (v === 1n)
          return (0, toHex_js_1.toHex)(1);
        return v === 27n ? "0x" : (0, toHex_js_1.toHex)(1);
      })();
      return [yParity_, r === "0x00" ? "0x" : r, s === "0x00" ? "0x" : s];
    }
  }
});

// node_modules/viem/_cjs/zksync/errors/transaction.js
var require_transaction3 = __commonJS({
  "node_modules/viem/_cjs/zksync/errors/transaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidEip712TransactionError = void 0;
    var base_js_1 = require_base();
    var InvalidEip712TransactionError = class extends base_js_1.BaseError {
      constructor() {
        super([
          "Transaction is not an EIP712 transaction.",
          "",
          "Transaction must:",
          '  - include `type: "eip712"`',
          "  - include one of the following: `customSignature`, `paymaster`, `paymasterInput`, `gasPerPubdata`, `factoryDeps`"
        ].join("\n"), { name: "InvalidEip712TransactionError" });
      }
    };
    exports2.InvalidEip712TransactionError = InvalidEip712TransactionError;
  }
});

// node_modules/viem/_cjs/zksync/utils/isEip712Transaction.js
var require_isEip712Transaction = __commonJS({
  "node_modules/viem/_cjs/zksync/utils/isEip712Transaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isEIP712Transaction = isEIP712Transaction;
    function isEIP712Transaction(transaction) {
      if (transaction.type === "eip712")
        return true;
      if ("customSignature" in transaction && transaction.customSignature || "paymaster" in transaction && transaction.paymaster || "paymasterInput" in transaction && transaction.paymasterInput || "gasPerPubdata" in transaction && typeof transaction.gasPerPubdata === "bigint" || "factoryDeps" in transaction && transaction.factoryDeps)
        return true;
      return false;
    }
  }
});

// node_modules/viem/_cjs/zksync/utils/assertEip712Transaction.js
var require_assertEip712Transaction = __commonJS({
  "node_modules/viem/_cjs/zksync/utils/assertEip712Transaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertEip712Transaction = assertEip712Transaction;
    var address_js_1 = require_address();
    var base_js_1 = require_base();
    var chain_js_1 = require_chain();
    var isAddress_js_1 = require_isAddress();
    var transaction_js_1 = require_transaction3();
    var isEip712Transaction_js_1 = require_isEip712Transaction();
    function assertEip712Transaction(transaction) {
      const { chainId, to, from, paymaster, paymasterInput } = transaction;
      if (!(0, isEip712Transaction_js_1.isEIP712Transaction)(transaction))
        throw new transaction_js_1.InvalidEip712TransactionError();
      if (!chainId || chainId <= 0)
        throw new chain_js_1.InvalidChainIdError({ chainId });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (from && !(0, isAddress_js_1.isAddress)(from))
        throw new address_js_1.InvalidAddressError({ address: from });
      if (paymaster && !(0, isAddress_js_1.isAddress)(paymaster))
        throw new address_js_1.InvalidAddressError({ address: paymaster });
      if (paymaster && !paymasterInput) {
        throw new base_js_1.BaseError("`paymasterInput` must be provided when `paymaster` is defined");
      }
      if (!paymaster && paymasterInput) {
        throw new base_js_1.BaseError("`paymaster` must be provided when `paymasterInput` is defined");
      }
    }
  }
});

// node_modules/viem/_cjs/zksync/serializers.js
var require_serializers = __commonJS({
  "node_modules/viem/_cjs/zksync/serializers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializers = void 0;
    exports2.serializeTransaction = serializeTransaction;
    var concat_js_1 = require_concat();
    var toHex_js_1 = require_toHex();
    var toRlp_js_1 = require_toRlp();
    var serializeTransaction_js_1 = require_serializeTransaction();
    var number_js_1 = require_number2();
    var assertEip712Transaction_js_1 = require_assertEip712Transaction();
    var isEip712Transaction_js_1 = require_isEip712Transaction();
    function serializeTransaction(transaction, signature) {
      if ((0, isEip712Transaction_js_1.isEIP712Transaction)(transaction))
        return serializeTransactionEIP712(transaction);
      return (0, serializeTransaction_js_1.serializeTransaction)(transaction, signature);
    }
    exports2.serializers = {
      transaction: serializeTransaction
    };
    function serializeTransactionEIP712(transaction) {
      const { chainId, gas, nonce, to, from, value, maxFeePerGas, maxPriorityFeePerGas, customSignature, factoryDeps, paymaster, paymasterInput, gasPerPubdata, data } = transaction;
      (0, assertEip712Transaction_js_1.assertEip712Transaction)(transaction);
      const serializedTransaction = [
        nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
        maxPriorityFeePerGas ? (0, toHex_js_1.toHex)(maxPriorityFeePerGas) : "0x",
        maxFeePerGas ? (0, toHex_js_1.toHex)(maxFeePerGas) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        to ?? "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        data ?? "0x0",
        (0, toHex_js_1.toHex)(chainId),
        (0, toHex_js_1.toHex)(""),
        (0, toHex_js_1.toHex)(""),
        (0, toHex_js_1.toHex)(chainId),
        from ?? "0x",
        gasPerPubdata ? (0, toHex_js_1.toHex)(gasPerPubdata) : (0, toHex_js_1.toHex)(number_js_1.gasPerPubdataDefault),
        factoryDeps ?? [],
        customSignature ?? "0x",
        paymaster && paymasterInput ? [paymaster, paymasterInput] : []
      ];
      return (0, concat_js_1.concatHex)([
        "0x71",
        (0, toRlp_js_1.toRlp)(serializedTransaction)
      ]);
    }
  }
});

// node_modules/viem/_cjs/zksync/errors/bytecode.js
var require_bytecode = __commonJS({
  "node_modules/viem/_cjs/zksync/errors/bytecode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BytecodeLengthMustBeDivisibleBy32Error = exports2.BytecodeLengthInWordsMustBeOddError = exports2.BytecodeLengthExceedsMaxSizeError = void 0;
    var base_js_1 = require_base();
    var BytecodeLengthExceedsMaxSizeError = class extends base_js_1.BaseError {
      constructor({ givenLength, maxBytecodeSize }) {
        super(`Bytecode cannot be longer than ${maxBytecodeSize} bytes. Given length: ${givenLength}`, { name: "BytecodeLengthExceedsMaxSizeError" });
      }
    };
    exports2.BytecodeLengthExceedsMaxSizeError = BytecodeLengthExceedsMaxSizeError;
    var BytecodeLengthInWordsMustBeOddError = class extends base_js_1.BaseError {
      constructor({ givenLengthInWords }) {
        super(`Bytecode length in 32-byte words must be odd. Given length in words: ${givenLengthInWords}`, { name: "BytecodeLengthInWordsMustBeOddError" });
      }
    };
    exports2.BytecodeLengthInWordsMustBeOddError = BytecodeLengthInWordsMustBeOddError;
    var BytecodeLengthMustBeDivisibleBy32Error = class extends base_js_1.BaseError {
      constructor({ givenLength }) {
        super(`The bytecode length in bytes must be divisible by 32. Given length: ${givenLength}`, { name: "BytecodeLengthMustBeDivisibleBy32Error" });
      }
    };
    exports2.BytecodeLengthMustBeDivisibleBy32Error = BytecodeLengthMustBeDivisibleBy32Error;
  }
});

// node_modules/viem/_cjs/zksync/utils/hashBytecode.js
var require_hashBytecode = __commonJS({
  "node_modules/viem/_cjs/zksync/utils/hashBytecode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashBytecode = hashBytecode;
    var pad_js_1 = require_pad();
    var toBytes_js_1 = require_toBytes();
    var sha256_js_1 = require_sha2562();
    var number_js_1 = require_number2();
    var bytecode_js_1 = require_bytecode();
    function hashBytecode(bytecode) {
      const bytecodeBytes = (0, toBytes_js_1.toBytes)(bytecode);
      if (bytecodeBytes.length % 32 !== 0)
        throw new bytecode_js_1.BytecodeLengthMustBeDivisibleBy32Error({
          givenLength: bytecodeBytes.length
        });
      if (bytecodeBytes.length > number_js_1.maxBytecodeSize)
        throw new bytecode_js_1.BytecodeLengthExceedsMaxSizeError({
          givenLength: bytecodeBytes.length,
          maxBytecodeSize: number_js_1.maxBytecodeSize
        });
      const hashStr = (0, sha256_js_1.sha256)(bytecodeBytes);
      const hash = (0, toBytes_js_1.toBytes)(hashStr);
      const bytecodeLengthInWords = bytecodeBytes.length / 32;
      if (bytecodeLengthInWords % 2 === 0) {
        throw new bytecode_js_1.BytecodeLengthInWordsMustBeOddError({
          givenLengthInWords: bytecodeLengthInWords
        });
      }
      const bytecodeLength = (0, toBytes_js_1.toBytes)(bytecodeLengthInWords);
      const bytecodeLengthPadded = (0, pad_js_1.pad)(bytecodeLength, { size: 2 });
      const codeHashVersion = new Uint8Array([1, 0]);
      hash.set(codeHashVersion, 0);
      hash.set(bytecodeLengthPadded, 2);
      return hash;
    }
  }
});

// node_modules/viem/_cjs/zksync/utils/getEip712Domain.js
var require_getEip712Domain = __commonJS({
  "node_modules/viem/_cjs/zksync/utils/getEip712Domain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEip712Domain = void 0;
    var toHex_js_1 = require_toHex();
    var number_js_1 = require_number2();
    var assertEip712Transaction_js_1 = require_assertEip712Transaction();
    var hashBytecode_js_1 = require_hashBytecode();
    var getEip712Domain = (transaction) => {
      (0, assertEip712Transaction_js_1.assertEip712Transaction)(transaction);
      const message = transactionToMessage(transaction);
      return {
        domain: {
          name: "zkSync",
          version: "2",
          chainId: transaction.chainId
        },
        types: {
          Transaction: [
            { name: "txType", type: "uint256" },
            { name: "from", type: "uint256" },
            { name: "to", type: "uint256" },
            { name: "gasLimit", type: "uint256" },
            { name: "gasPerPubdataByteLimit", type: "uint256" },
            { name: "maxFeePerGas", type: "uint256" },
            { name: "maxPriorityFeePerGas", type: "uint256" },
            { name: "paymaster", type: "uint256" },
            { name: "nonce", type: "uint256" },
            { name: "value", type: "uint256" },
            { name: "data", type: "bytes" },
            { name: "factoryDeps", type: "bytes32[]" },
            { name: "paymasterInput", type: "bytes" }
          ]
        },
        primaryType: "Transaction",
        message
      };
    };
    exports2.getEip712Domain = getEip712Domain;
    function transactionToMessage(transaction) {
      const { gas, nonce, to, from, value, maxFeePerGas, maxPriorityFeePerGas, factoryDeps, paymaster, paymasterInput, gasPerPubdata, data } = transaction;
      return {
        txType: 113n,
        from: BigInt(from),
        to: to ? BigInt(to) : 0n,
        gasLimit: gas ?? 0n,
        gasPerPubdataByteLimit: gasPerPubdata ?? number_js_1.gasPerPubdataDefault,
        maxFeePerGas: maxFeePerGas ?? 0n,
        maxPriorityFeePerGas: maxPriorityFeePerGas ?? 0n,
        paymaster: paymaster ? BigInt(paymaster) : 0n,
        nonce: nonce ? BigInt(nonce) : 0n,
        value: value ?? 0n,
        data: data ? data : "0x0",
        factoryDeps: factoryDeps?.map((dep) => (0, toHex_js_1.toHex)((0, hashBytecode_js_1.hashBytecode)(dep))) ?? [],
        paymasterInput: paymasterInput ? paymasterInput : "0x"
      };
    }
  }
});

// node_modules/viem/_cjs/zksync/chainConfig.js
var require_chainConfig = __commonJS({
  "node_modules/viem/_cjs/zksync/chainConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chainConfig = void 0;
    var formatters_js_1 = require_formatters();
    var serializers_js_1 = require_serializers();
    var getEip712Domain_js_1 = require_getEip712Domain();
    exports2.chainConfig = {
      formatters: formatters_js_1.formatters,
      serializers: serializers_js_1.serializers,
      custom: {
        getEip712Domain: getEip712Domain_js_1.getEip712Domain
      }
    };
  }
});

// node_modules/viem/_cjs/chains/definitions/abstractTestnet.js
var require_abstractTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/abstractTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.abstractTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    var chainConfig_js_1 = require_chainConfig();
    exports2.abstractTestnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 11124,
      name: "Abstract Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "ETH",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://api.testnet.abs.xyz"] }
      },
      blockExplorers: {
        default: {
          name: "Abstract Block Explorer",
          url: "https://explorer.testnet.abs.xyz"
        }
      },
      testnet: true,
      contracts: {
        multicall3: {
          address: "0xF9cda624FBC7e059355ce98a31693d299FACd963",
          blockCreated: 358349
        },
        universalSignatureVerifier: {
          address: "0xfB688330379976DA81eB64Fe4BF50d7401763B9C",
          blockCreated: 431682
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/acala.js
var require_acala = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/acala.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.acala = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.acala = (0, defineChain_js_1.defineChain)({
      id: 787,
      name: "Acala",
      network: "acala",
      nativeCurrency: {
        name: "Acala",
        symbol: "ACA",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://eth-rpc-acala.aca-api.network"],
          webSocket: ["wss://eth-rpc-acala.aca-api.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Acala Blockscout",
          url: "https://blockscout.acala.network",
          apiUrl: "https://blockscout.acala.network/api"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/alienX.js
var require_alienX = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/alienX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.alienx = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.alienx = (0, defineChain_js_1.defineChain)({
      id: 10241024,
      name: "AlienX Mainnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.alienxchain.io/http"] }
      },
      blockExplorers: {
        default: {
          name: "AlienX Explorer",
          url: "https://explorer.alienxchain.io"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/alienXHalTestnet.js
var require_alienXHalTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/alienXHalTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.alienxHalTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.alienxHalTestnet = (0, defineChain_js_1.defineChain)({
      id: 10241025,
      name: "ALIENX Hal Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://hal-rpc.alienxchain.io/http"] }
      },
      blockExplorers: {
        default: {
          name: "AlienX Explorer",
          url: "https://hal-explorer.alienxchain.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/op-stack/contracts.js
var require_contracts = __commonJS({
  "node_modules/viem/_cjs/op-stack/contracts.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.contracts = void 0;
    exports2.contracts = {
      gasPriceOracle: { address: "0x420000000000000000000000000000000000000F" },
      l1Block: { address: "0x4200000000000000000000000000000000000015" },
      l2CrossDomainMessenger: {
        address: "0x4200000000000000000000000000000000000007"
      },
      l2Erc721Bridge: { address: "0x4200000000000000000000000000000000000014" },
      l2StandardBridge: { address: "0x4200000000000000000000000000000000000010" },
      l2ToL1MessagePasser: {
        address: "0x4200000000000000000000000000000000000016"
      }
    };
  }
});

// node_modules/viem/_cjs/op-stack/formatters.js
var require_formatters2 = __commonJS({
  "node_modules/viem/_cjs/op-stack/formatters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatters = void 0;
    var fromHex_js_1 = require_fromHex();
    var block_js_1 = require_block();
    var transaction_js_1 = require_transaction();
    var transactionReceipt_js_1 = require_transactionReceipt();
    exports2.formatters = {
      block: (0, block_js_1.defineBlock)({
        format(args) {
          const transactions = args.transactions?.map((transaction) => {
            if (typeof transaction === "string")
              return transaction;
            const formatted = (0, transaction_js_1.formatTransaction)(transaction);
            if (formatted.typeHex === "0x7e") {
              formatted.isSystemTx = transaction.isSystemTx;
              formatted.mint = transaction.mint ? (0, fromHex_js_1.hexToBigInt)(transaction.mint) : void 0;
              formatted.sourceHash = transaction.sourceHash;
              formatted.type = "deposit";
            }
            return formatted;
          });
          return {
            transactions,
            stateRoot: args.stateRoot
          };
        }
      }),
      transaction: (0, transaction_js_1.defineTransaction)({
        format(args) {
          const transaction = {};
          if (args.type === "0x7e") {
            transaction.isSystemTx = args.isSystemTx;
            transaction.mint = args.mint ? (0, fromHex_js_1.hexToBigInt)(args.mint) : void 0;
            transaction.sourceHash = args.sourceHash;
            transaction.type = "deposit";
          }
          return transaction;
        }
      }),
      transactionReceipt: (0, transactionReceipt_js_1.defineTransactionReceipt)({
        format(args) {
          return {
            l1GasPrice: args.l1GasPrice ? (0, fromHex_js_1.hexToBigInt)(args.l1GasPrice) : null,
            l1GasUsed: args.l1GasUsed ? (0, fromHex_js_1.hexToBigInt)(args.l1GasUsed) : null,
            l1Fee: args.l1Fee ? (0, fromHex_js_1.hexToBigInt)(args.l1Fee) : null,
            l1FeeScalar: args.l1FeeScalar ? Number(args.l1FeeScalar) : null
          };
        }
      })
    };
  }
});

// node_modules/viem/_cjs/op-stack/serializers.js
var require_serializers2 = __commonJS({
  "node_modules/viem/_cjs/op-stack/serializers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializers = void 0;
    exports2.serializeTransaction = serializeTransaction;
    exports2.assertTransactionDeposit = assertTransactionDeposit;
    var address_js_1 = require_address();
    var isAddress_js_1 = require_isAddress();
    var concat_js_1 = require_concat();
    var toHex_js_1 = require_toHex();
    var toRlp_js_1 = require_toRlp();
    var serializeTransaction_js_1 = require_serializeTransaction();
    function serializeTransaction(transaction, signature) {
      if (isDeposit(transaction))
        return serializeTransactionDeposit(transaction);
      return (0, serializeTransaction_js_1.serializeTransaction)(transaction, signature);
    }
    exports2.serializers = {
      transaction: serializeTransaction
    };
    function serializeTransactionDeposit(transaction) {
      assertTransactionDeposit(transaction);
      const { sourceHash, data, from, gas, isSystemTx, mint, to, value } = transaction;
      const serializedTransaction = [
        sourceHash,
        from,
        to ?? "0x",
        mint ? (0, toHex_js_1.toHex)(mint) : "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        isSystemTx ? "0x1" : "0x",
        data ?? "0x"
      ];
      return (0, concat_js_1.concatHex)([
        "0x7e",
        (0, toRlp_js_1.toRlp)(serializedTransaction)
      ]);
    }
    function isDeposit(transaction) {
      if (transaction.type === "deposit")
        return true;
      if (typeof transaction.sourceHash !== "undefined")
        return true;
      return false;
    }
    function assertTransactionDeposit(transaction) {
      const { from, to } = transaction;
      if (from && !(0, isAddress_js_1.isAddress)(from))
        throw new address_js_1.InvalidAddressError({ address: from });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
    }
  }
});

// node_modules/viem/_cjs/op-stack/chainConfig.js
var require_chainConfig2 = __commonJS({
  "node_modules/viem/_cjs/op-stack/chainConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chainConfig = void 0;
    var contracts_js_1 = require_contracts();
    var formatters_js_1 = require_formatters2();
    var serializers_js_1 = require_serializers2();
    exports2.chainConfig = {
      contracts: contracts_js_1.contracts,
      formatters: formatters_js_1.formatters,
      serializers: serializers_js_1.serializers
    };
  }
});

// node_modules/viem/_cjs/chains/definitions/ancient8.js
var require_ancient8 = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/ancient8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ancient8 = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.ancient8 = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 888888888,
      name: "Ancient8",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.ancient8.gg"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ancient8 explorer",
          url: "https://scan.ancient8.gg",
          apiUrl: "https://scan.ancient8.gg/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0xB09DC08428C8b4EFB4ff9C0827386CDF34277996"
          }
        },
        portal: {
          [sourceId]: {
            address: "0x639F2AECE398Aa76b07e59eF6abe2cFe32bacb68",
            blockCreated: 19070571
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0xd5e3eDf5b68135D559D572E26bF863FBC1950033",
            blockCreated: 19070571
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/ancient8Sepolia.js
var require_ancient8Sepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/ancient8Sepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ancient8Sepolia = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.ancient8Sepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 28122024,
      name: "Ancient8 Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpcv2-testnet.ancient8.gg"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ancient8 Celestia Testnet explorer",
          url: "https://scanv2-testnet.ancient8.gg",
          apiUrl: "https://scanv2-testnet.ancient8.gg/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB"
          }
        },
        portal: {
          [sourceId]: {
            address: "0xfa1d9E26A6aCD7b22115D27572c1221B9803c960",
            blockCreated: 4972908
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0xF6Bc0146d3c74D48306e79Ae134A260E418C9335",
            blockCreated: 4972908
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/anvil.js
var require_anvil = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/anvil.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.anvil = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.anvil = (0, defineChain_js_1.defineChain)({
      id: 31337,
      name: "Anvil",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["http://127.0.0.1:8545"],
          webSocket: ["ws://127.0.0.1:8545"]
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/apexTestnet.js
var require_apexTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/apexTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.apexTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.apexTestnet = (0, defineChain_js_1.defineChain)({
      id: 3993,
      name: "APEX Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-testnet.apexlayer.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://exp-testnet.apexlayer.xyz",
          apiUrl: "https://exp-testnet.apexlayer.xyz/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xf7642be33a6b18D16a995657adb5a68CD0438aE2",
          blockCreated: 283775
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/arbitrum.js
var require_arbitrum = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/arbitrum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.arbitrum = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.arbitrum = (0, defineChain_js_1.defineChain)({
      id: 42161,
      name: "Arbitrum One",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://arb1.arbitrum.io/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Arbiscan",
          url: "https://arbiscan.io",
          apiUrl: "https://api.arbiscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 7654707
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/arbitrumGoerli.js
var require_arbitrumGoerli = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/arbitrumGoerli.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.arbitrumGoerli = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.arbitrumGoerli = (0, defineChain_js_1.defineChain)({
      id: 421613,
      name: "Arbitrum Goerli",
      nativeCurrency: {
        name: "Arbitrum Goerli Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://goerli-rollup.arbitrum.io/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Arbiscan",
          url: "https://goerli.arbiscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 88114
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/arbitrumNova.js
var require_arbitrumNova = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/arbitrumNova.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.arbitrumNova = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.arbitrumNova = (0, defineChain_js_1.defineChain)({
      id: 42170,
      name: "Arbitrum Nova",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://nova.arbitrum.io/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Arbiscan",
          url: "https://nova.arbiscan.io",
          apiUrl: "https://api-nova.arbiscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1746963
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/assetChain.js
var require_assetChain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/assetChain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assetChain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.assetChain = (0, defineChain_js_1.defineChain)({
      id: 42420,
      name: "AssetChain Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Real World Asset",
        symbol: "RWA"
      },
      rpcUrls: {
        default: { http: ["https://mainnet-rpc.assetchain.org"] }
      },
      blockExplorers: {
        default: {
          name: "Asset Chain Explorer",
          url: "https://scan.assetchain.org",
          apiUrl: "https://scan.assetchain.org/api"
        }
      },
      testnet: false,
      contracts: {}
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/assetChainTestnet.js
var require_assetChainTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/assetChainTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assetChainTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.assetChainTestnet = (0, defineChain_js_1.defineChain)({
      id: 42421,
      name: "AssetChain Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Real World Asset",
        symbol: "RWA"
      },
      rpcUrls: {
        default: { http: ["https://enugu-rpc.assetchain.org"] }
      },
      blockExplorers: {
        default: {
          name: "Asset Chain Testnet Explorer",
          url: "https://scan-testnet.assetchain.org",
          apiUrl: "https://scan-testnet.assetchain.org/api"
        }
      },
      testnet: true,
      contracts: {
        multicall3: {
          address: "0x989F832D35988cb5e3eB001Fa2Fe789469EC31Ea",
          blockCreated: 17177
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/astar.js
var require_astar = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/astar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.astar = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.astar = (0, defineChain_js_1.defineChain)({
      id: 592,
      name: "Astar",
      network: "astar-mainnet",
      nativeCurrency: {
        name: "Astar",
        symbol: "ASTR",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://astar.api.onfinality.io/public"] }
      },
      blockExplorers: {
        default: {
          name: "Astar Subscan",
          url: "https://astar.subscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 761794
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/astarZkEVM.js
var require_astarZkEVM = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/astarZkEVM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.astarZkEVM = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.astarZkEVM = (0, defineChain_js_1.defineChain)({
      id: 3776,
      name: "Astar zkEVM",
      network: "AstarZkEVM",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-zkevm.astar.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Astar zkEVM Explorer",
          url: "https://astar-zkevm.explorer.startale.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 93528
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/astarZkyoto.js
var require_astarZkyoto = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/astarZkyoto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.astarZkyoto = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.astarZkyoto = (0, defineChain_js_1.defineChain)({
      id: 6038361,
      name: "Astar zkEVM Testnet zKyoto",
      network: "zKyoto",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.startale.com/zkyoto"]
        }
      },
      blockExplorers: {
        default: {
          name: "zKyoto Explorer",
          url: "https://zkyoto.explorer.startale.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 196153
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/arbitrumSepolia.js
var require_arbitrumSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/arbitrumSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.arbitrumSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.arbitrumSepolia = (0, defineChain_js_1.defineChain)({
      id: 421614,
      name: "Arbitrum Sepolia",
      nativeCurrency: {
        name: "Arbitrum Sepolia Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://sepolia-rollup.arbitrum.io/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Arbiscan",
          url: "https://sepolia.arbiscan.io",
          apiUrl: "https://api-sepolia.arbiscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 81930
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/areonNetwork.js
var require_areonNetwork = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/areonNetwork.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.areonNetwork = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.areonNetwork = (0, defineChain_js_1.defineChain)({
      id: 463,
      name: "Areon Network",
      nativeCurrency: { decimals: 18, name: "AREA", symbol: "AREA" },
      rpcUrls: {
        default: {
          http: ["https://mainnet-rpc.areon.network"],
          webSocket: ["wss://mainnet-ws.areon.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Areonscan",
          url: "https://areonscan.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 353286
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/areonNetworkTestnet.js
var require_areonNetworkTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/areonNetworkTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.areonNetworkTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.areonNetworkTestnet = (0, defineChain_js_1.defineChain)({
      id: 462,
      name: "Areon Network Testnet",
      nativeCurrency: { decimals: 18, name: "TAREA", symbol: "TAREA" },
      rpcUrls: {
        default: {
          http: ["https://testnet-rpc.areon.network"],
          webSocket: ["wss://testnet-ws.areon.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Areonscan",
          url: "https://areonscan.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/artelaTestnet.js
var require_artelaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/artelaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.artelaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.artelaTestnet = (0, defineChain_js_1.defineChain)({
      id: 11822,
      name: "Artela Testnet",
      nativeCurrency: { name: "ART", symbol: "ART", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://betanet-rpc1.artela.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Artela",
          url: "https://betanet-scan.artela.network",
          apiUrl: "https://betanet-scan.artela.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xd07c8635f76e8745Ee7092fbb6e8fbc5FeF09DD7",
          blockCreated: 7001871
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/atletaOlympia.js
var require_atletaOlympia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/atletaOlympia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.atletaOlympia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.atletaOlympia = (0, defineChain_js_1.defineChain)({
      id: 2340,
      name: "Atleta Olympia",
      nativeCurrency: { decimals: 18, name: "Atla", symbol: "ATLA" },
      rpcUrls: {
        default: {
          http: [
            "https://testnet-rpc.atleta.network:9944",
            "https://testnet-rpc.atleta.network"
          ],
          ws: ["wss://testnet-rpc.atleta.network:9944"]
        }
      },
      blockExplorers: {
        default: {
          name: "Atleta Olympia Explorer",
          url: "https://blockscout.atleta.network",
          apiUrl: "https://blockscout.atleta.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0x1472ec6392180fb84F345d2455bCC75B26577115",
          blockCreated: 1076473
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/aurora.js
var require_aurora = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/aurora.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.aurora = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.aurora = (0, defineChain_js_1.defineChain)({
      id: 1313161554,
      name: "Aurora",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://mainnet.aurora.dev"] }
      },
      blockExplorers: {
        default: {
          name: "Aurorascan",
          url: "https://aurorascan.dev",
          apiUrl: "https://aurorascan.dev/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 62907816
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/auroraTestnet.js
var require_auroraTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/auroraTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.auroraTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.auroraTestnet = (0, defineChain_js_1.defineChain)({
      id: 1313161555,
      name: "Aurora Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://testnet.aurora.dev"] }
      },
      blockExplorers: {
        default: {
          name: "Aurorascan",
          url: "https://testnet.aurorascan.dev",
          apiUrl: "https://testnet.aurorascan.dev/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/auroria.js
var require_auroria = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/auroria.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.auroria = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.auroria = (0, defineChain_js_1.defineChain)({
      id: 205205,
      name: "Auroria Testnet",
      network: "auroria",
      nativeCurrency: {
        name: "Auroria Stratis",
        symbol: "tSTRAX",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://auroria.rpc.stratisevm.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Auroria Testnet Explorer",
          url: "https://auroria.explorer.stratisevm.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/avalanche.js
var require_avalanche = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/avalanche.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.avalanche = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.avalanche = (0, defineChain_js_1.defineChain)({
      id: 43114,
      name: "Avalanche",
      nativeCurrency: {
        decimals: 18,
        name: "Avalanche",
        symbol: "AVAX"
      },
      rpcUrls: {
        default: { http: ["https://api.avax.network/ext/bc/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "SnowTrace",
          url: "https://snowtrace.io",
          apiUrl: "https://api.snowtrace.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 11907934
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/avalancheFuji.js
var require_avalancheFuji = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/avalancheFuji.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.avalancheFuji = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.avalancheFuji = (0, defineChain_js_1.defineChain)({
      id: 43113,
      name: "Avalanche Fuji",
      nativeCurrency: {
        decimals: 18,
        name: "Avalanche Fuji",
        symbol: "AVAX"
      },
      rpcUrls: {
        default: { http: ["https://api.avax-test.network/ext/bc/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "SnowTrace",
          url: "https://testnet.snowtrace.io",
          apiUrl: "https://api-testnet.snowtrace.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 7096959
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/b3Sepolia.js
var require_b3Sepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/b3Sepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.b3Sepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    var sourceId = 168587773;
    exports2.b3Sepolia = (0, defineChain_js_1.defineChain)({
      id: 1993,
      name: "B3 Sepolia",
      nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://sepolia.b3.fun/http"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://sepolia.explorer.b3.fun"
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/b3.js
var require_b3 = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/b3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.b3 = void 0;
    var defineChain_js_1 = require_defineChain();
    var sourceId = 8453;
    exports2.b3 = (0, defineChain_js_1.defineChain)({
      id: 8333,
      name: "B3",
      nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://mainnet-rpc.b3.fun/http"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://explorer.b3.fun"
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bahamut.js
var require_bahamut = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bahamut.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bahamut = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bahamut = (0, defineChain_js_1.defineChain)({
      id: 5165,
      network: "bahamut",
      name: "Bahamut",
      nativeCurrency: { name: "Fasttoken", symbol: "FTN", decimals: 18 },
      rpcUrls: {
        default: {
          http: [
            "https://rpc1.bahamut.io",
            "https://bahamut-rpc.publicnode.com",
            "https://rpc2.bahamut.io"
          ],
          webSocket: [
            "wss://ws1.sahara.bahamutchain.com",
            "wss://bahamut-rpc.publicnode.com",
            "wss://ws2.sahara.bahamutchain.com"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "Ftnscan",
          url: "https://www.ftnscan.com",
          apiUrl: "https://www.ftnscan.com/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/base.js
var require_base2 = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/base.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.base = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.base = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 8453,
      name: "Base",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.base.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Basescan",
          url: "https://basescan.org",
          apiUrl: "https://api.basescan.org/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0x56315b90c40730925ec5485cf004d835058518A0"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 5022
        },
        portal: {
          [sourceId]: {
            address: "0x49048044D57e1C92A77f79988d21Fa8fAF74E97e",
            blockCreated: 17482143
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x3154Cf16ccdb4C6d922629664174b904d80F2C35",
            blockCreated: 17482143
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/baseGoerli.js
var require_baseGoerli = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/baseGoerli.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.baseGoerli = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 5;
    exports2.baseGoerli = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 84531,
      name: "Base Goerli",
      nativeCurrency: { name: "Goerli Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://goerli.base.org"] }
      },
      blockExplorers: {
        default: {
          name: "Basescan",
          url: "https://goerli.basescan.org",
          apiUrl: "https://goerli.basescan.org/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0x2A35891ff30313CcFa6CE88dcf3858bb075A2298"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1376988
        },
        portal: {
          [sourceId]: {
            address: "0xe93c8cD0D409341205A592f8c4Ac1A5fe5585cfA"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0xfA6D8Ee5BE770F84FC001D098C4bD604Fe01284a"
          }
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/baseSepolia.js
var require_baseSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/baseSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.baseSepolia = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.baseSepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 84532,
      network: "base-sepolia",
      name: "Base Sepolia",
      nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia.base.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Basescan",
          url: "https://sepolia.basescan.org",
          apiUrl: "https://api-sepolia.basescan.org/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        disputeGameFactory: {
          [sourceId]: {
            address: "0xd6E6dBf4F7EA0ac412fD8b65ED297e64BB7a06E1"
          }
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0x84457ca9D0163FbC4bbfe4Dfbb20ba46e48DF254"
          }
        },
        portal: {
          [sourceId]: {
            address: "0x49f53e41452c74589e85ca1677426ba426459e85",
            blockCreated: 4446677
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0xfd0Bf71F60660E2f608ed56e1659C450eB113120",
            blockCreated: 4446677
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1059647
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/beam.js
var require_beam = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/beam.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.beam = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.beam = (0, defineChain_js_1.defineChain)({
      id: 4337,
      name: "Beam",
      network: "beam",
      nativeCurrency: {
        decimals: 18,
        name: "Beam",
        symbol: "BEAM"
      },
      rpcUrls: {
        default: {
          http: ["https://build.onbeam.com/rpc"],
          webSocket: ["wss://build.onbeam.com/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Beam Explorer",
          url: "https://subnets.avax.network/beam"
        }
      },
      contracts: {
        multicall3: {
          address: "0x4956f15efdc3dc16645e90cc356eafa65ffc65ec",
          blockCreated: 1
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/beamTestnet.js
var require_beamTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/beamTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.beamTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.beamTestnet = (0, defineChain_js_1.defineChain)({
      id: 13337,
      name: "Beam Testnet",
      network: "beam",
      nativeCurrency: {
        decimals: 18,
        name: "Beam",
        symbol: "BEAM"
      },
      rpcUrls: {
        default: {
          http: ["https://build.onbeam.com/rpc/testnet"],
          webSocket: ["wss://build.onbeam.com/ws/testnet"]
        }
      },
      blockExplorers: {
        default: {
          name: "Beam Explorer",
          url: "https://subnets-test.avax.network/beam"
        }
      },
      contracts: {
        multicall3: {
          address: "0x9bf49b704ee2a095b95c1f2d4eb9010510c41c9e",
          blockCreated: 3
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bearNetworkChainMainnet.js
var require_bearNetworkChainMainnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bearNetworkChainMainnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bearNetworkChainMainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bearNetworkChainMainnet = (0, defineChain_js_1.defineChain)({
      id: 641230,
      name: "Bear Network Chain Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "BearNetworkChain",
        symbol: "BRNKC"
      },
      rpcUrls: {
        default: { http: ["https://brnkc-mainnet.bearnetwork.net"] }
      },
      blockExplorers: {
        default: {
          name: "BrnkScan",
          url: "https://brnkscan.bearnetwork.net",
          apiUrl: "https://brnkscan.bearnetwork.net/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bearNetworkChainTestnet.js
var require_bearNetworkChainTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bearNetworkChainTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bearNetworkChainTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bearNetworkChainTestnet = (0, defineChain_js_1.defineChain)({
      id: 751230,
      name: "Bear Network Chain Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "tBRNKC",
        symbol: "tBRNKC"
      },
      rpcUrls: {
        default: { http: ["https://brnkc-test.bearnetwork.net"] }
      },
      blockExplorers: {
        default: {
          name: "BrnkTestScan",
          url: "https://brnktest-scan.bearnetwork.net",
          apiUrl: "https://brnktest-scan.bearnetwork.net/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/berachainTestnet.js
var require_berachainTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/berachainTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.berachainTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.berachainTestnet = (0, defineChain_js_1.defineChain)({
      id: 80085,
      name: "Berachain Artio",
      nativeCurrency: {
        decimals: 18,
        name: "BERA Token",
        symbol: "BERA"
      },
      rpcUrls: {
        default: { http: ["https://artio.rpc.berachain.com"] }
      },
      blockExplorers: {
        default: {
          name: "Berachain",
          url: "https://artio.beratrail.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/berachainTestnetbArtio.js
var require_berachainTestnetbArtio = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/berachainTestnetbArtio.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.berachainTestnetbArtio = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.berachainTestnetbArtio = (0, defineChain_js_1.defineChain)({
      id: 80084,
      name: "Berachain bArtio",
      nativeCurrency: {
        decimals: 18,
        name: "BERA Token",
        symbol: "BERA"
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 109269
        }
      },
      rpcUrls: {
        default: { http: ["https://bartio.rpc.berachain.com"] }
      },
      blockExplorers: {
        default: {
          name: "Berachain bArtio Beratrail",
          url: "https://bartio.beratrail.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bevmMainnet.js
var require_bevmMainnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bevmMainnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bevmMainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bevmMainnet = (0, defineChain_js_1.defineChain)({
      id: 11501,
      name: "BEVM Mainnet",
      nativeCurrency: { name: "Bitcoin", symbol: "BTC", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc-mainnet-1.bevm.io"] }
      },
      blockExplorers: {
        default: {
          name: "Bevmscan",
          url: "https://scan-mainnet.bevm.io",
          apiUrl: "https://scan-mainnet-api.bevm.io/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bitkub.js
var require_bitkub = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bitkub.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bitkub = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bitkub = (0, defineChain_js_1.defineChain)({
      id: 96,
      name: "Bitkub",
      nativeCurrency: { name: "Bitkub", symbol: "KUB", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.bitkubchain.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Bitkub Chain Mainnet Explorer",
          url: "https://www.bkcscan.com",
          apiUrl: "https://www.bkcscan.com/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bitkubTestnet.js
var require_bitkubTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bitkubTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bitkubTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bitkubTestnet = (0, defineChain_js_1.defineChain)({
      id: 25925,
      name: "Bitkub Testnet",
      network: "Bitkub Testnet",
      nativeCurrency: { name: "Bitkub Test", symbol: "tKUB", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-testnet.bitkubchain.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Bitkub Chain Testnet Explorer",
          url: "https://testnet.bkcscan.com",
          apiUrl: "https://testnet.bkcscan.com/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bitlayer.js
var require_bitlayer = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bitlayer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bitlayer = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bitlayer = (0, defineChain_js_1.defineChain)({
      id: 200901,
      name: "Bitlayer Mainnet",
      nativeCurrency: {
        name: "BTC",
        symbol: "BTC",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.bitlayer.org"],
          webSocket: ["wss://ws.bitlayer.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "bitlayer mainnet scan",
          url: "https://www.btrscan.com"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bitlayerTestnet.js
var require_bitlayerTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bitlayerTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bitlayerTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bitlayerTestnet = (0, defineChain_js_1.defineChain)({
      id: 200810,
      name: "Bitlayer Testnet",
      nativeCurrency: {
        name: "BTC",
        symbol: "BTC",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://testnet-rpc.bitlayer.org"],
          webSocket: ["wss://testnet-ws.bitlayer.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "bitlayer testnet scan",
          url: "https://testnet.btrscan.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bitTorrent.js
var require_bitTorrent = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bitTorrent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bitTorrent = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bitTorrent = (0, defineChain_js_1.defineChain)({
      id: 199,
      name: "BitTorrent",
      network: "bittorrent-chain-mainnet",
      nativeCurrency: { name: "BitTorrent", symbol: "BTT", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.bittorrentchain.io"] }
      },
      blockExplorers: {
        default: {
          name: "Bttcscan",
          url: "https://bttcscan.com",
          apiUrl: "https://api.bttcscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 31078552
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bitTorrentTestnet.js
var require_bitTorrentTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bitTorrentTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bitTorrentTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bitTorrentTestnet = (0, defineChain_js_1.defineChain)({
      id: 1028,
      name: "BitTorrent Chain Testnet",
      network: "bittorrent-chain-testnet",
      nativeCurrency: { name: "BitTorrent", symbol: "BTT", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://testrpc.bittorrentchain.io"] }
      },
      blockExplorers: {
        default: {
          name: "Bttcscan",
          url: "https://testnet.bttcscan.com",
          apiUrl: "https://testnet.bttcscan.com/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/blast.js
var require_blast = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/blast.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.blast = void 0;
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.blast = (0, defineChain_js_1.defineChain)({
      id: 81457,
      name: "Blast",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://rpc.blast.io"] }
      },
      blockExplorers: {
        default: {
          name: "Blastscan",
          url: "https://blastscan.io",
          apiUrl: "https://api.blastscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 212929
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/blastSepolia.js
var require_blastSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/blastSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.blastSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.blastSepolia = (0, defineChain_js_1.defineChain)({
      id: 168587773,
      name: "Blast Sepolia",
      nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://sepolia.blast.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blastscan",
          url: "https://sepolia.blastscan.io",
          apiUrl: "https://api-sepolia.blastscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 756690
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bob.js
var require_bob = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bob.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bob = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.bob = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 60808,
      name: "BOB",
      nativeCurrency: {
        decimals: 18,
        name: "ETH",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.gobob.xyz"],
          webSocket: ["wss://rpc.gobob.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "BOB Explorer",
          url: "https://explorer.gobob.xyz"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 23131
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0xdDa53E23f8a32640b04D7256e651C1db98dB11C1",
            blockCreated: 4462615
          }
        },
        portal: {
          [sourceId]: {
            address: "0x8AdeE124447435fE03e3CD24dF3f4cAE32E65a3E",
            blockCreated: 4462615
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bobSepolia.js
var require_bobSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bobSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bobSepolia = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.bobSepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 808813,
      name: "BOB Sepolia",
      nativeCurrency: {
        decimals: 18,
        name: "ETH",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://bob-sepolia.rpc.gobob.xyz"],
          webSocket: ["wss://bob-sepolia.rpc.gobob.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "BOB Sepolia Explorer",
          url: "https://bob-sepolia.explorer.gobob.xyz"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 35677
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0x14D0069452b4AE2b250B395b8adAb771E4267d2f",
            blockCreated: 4462615
          }
        },
        portal: {
          [sourceId]: {
            address: "0x867B1Aa872b9C8cB5E9F7755feDC45BB24Ad0ae4",
            blockCreated: 4462615
          }
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/boba.js
var require_boba = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/boba.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.boba = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.boba = (0, defineChain_js_1.defineChain)({
      id: 288,
      name: "Boba Network",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://mainnet.boba.network"] }
      },
      blockExplorers: {
        default: {
          name: "BOBAScan",
          url: "https://bobascan.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 446859
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bobaSepolia.js
var require_bobaSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bobaSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bobaSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bobaSepolia = (0, defineChain_js_1.defineChain)({
      id: 28882,
      name: "Boba Sepolia",
      nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://sepolia.boba.network"] }
      },
      blockExplorers: {
        default: {
          name: "BOBAScan",
          url: "https://testnet.bobascan.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/botanixTestnet.js
var require_botanixTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/botanixTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.botanixTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.botanixTestnet = (0, defineChain_js_1.defineChain)({
      id: 3636,
      name: "Botanix Testnet",
      nativeCurrency: { name: "Botanix", symbol: "BTC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://poa-node.botanixlabs.dev"]
        }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://blockscout.botanixlabs.dev",
          apiUrl: "https://blockscout.botanixlabs.dev"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bounceBit.js
var require_bounceBit = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bounceBit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bounceBit = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bounceBit = (0, defineChain_js_1.defineChain)({
      id: 6001,
      name: "BounceBit Mainnet",
      nativeCurrency: { name: "BounceBit", symbol: "BB", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://fullnode-mainnet.bouncebitapi.com"] }
      },
      blockExplorers: {
        default: {
          name: "BB Scan",
          url: "https://bbscan.io"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bounceBitTestnet.js
var require_bounceBitTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bounceBitTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bounceBitTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bounceBitTestnet = (0, defineChain_js_1.defineChain)({
      id: 6e3,
      name: "BounceBit Testnet",
      nativeCurrency: { name: "BounceBit", symbol: "BB", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://fullnode-testnet.bouncebitapi.com"] }
      },
      blockExplorers: {
        default: {
          name: "BB Scan",
          url: "https://testnet.bbscan.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bronos.js
var require_bronos = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bronos.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bronos = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bronos = (0, defineChain_js_1.defineChain)({
      id: 1039,
      name: "Bronos",
      nativeCurrency: {
        decimals: 18,
        name: "BRO",
        symbol: "BRO"
      },
      rpcUrls: {
        default: { http: ["https://evm.bronos.org"] }
      },
      blockExplorers: {
        default: {
          name: "BronoScan",
          url: "https://broscan.bronos.org"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bronosTestnet.js
var require_bronosTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bronosTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bronosTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bronosTestnet = (0, defineChain_js_1.defineChain)({
      id: 1038,
      name: "Bronos Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Bronos Coin",
        symbol: "tBRO"
      },
      rpcUrls: {
        default: { http: ["https://evm-testnet.bronos.org"] }
      },
      blockExplorers: {
        default: {
          name: "BronoScan",
          url: "https://tbroscan.bronos.org"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bsc.js
var require_bsc = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bsc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bsc = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bsc = (0, defineChain_js_1.defineChain)({
      id: 56,
      name: "BNB Smart Chain",
      nativeCurrency: {
        decimals: 18,
        name: "BNB",
        symbol: "BNB"
      },
      rpcUrls: {
        default: { http: ["https://rpc.ankr.com/bsc"] }
      },
      blockExplorers: {
        default: {
          name: "BscScan",
          url: "https://bscscan.com",
          apiUrl: "https://api.bscscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 15921452
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bscTestnet.js
var require_bscTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bscTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bscTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bscTestnet = (0, defineChain_js_1.defineChain)({
      id: 97,
      name: "Binance Smart Chain Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "BNB",
        symbol: "tBNB"
      },
      rpcUrls: {
        default: { http: ["https://data-seed-prebsc-1-s1.bnbchain.org:8545"] }
      },
      blockExplorers: {
        default: {
          name: "BscScan",
          url: "https://testnet.bscscan.com",
          apiUrl: "https://api-testnet.bscscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 17422483
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bscGreenfield.js
var require_bscGreenfield = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bscGreenfield.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bscGreenfield = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bscGreenfield = (0, defineChain_js_1.defineChain)({
      id: 1017,
      name: "BNB Greenfield Chain",
      nativeCurrency: {
        decimals: 18,
        name: "BNB",
        symbol: "BNB"
      },
      rpcUrls: {
        default: { http: ["https://greenfield-chain.bnbchain.org"] }
      },
      blockExplorers: {
        default: {
          name: "BNB Greenfield Mainnet Scan",
          url: "https://greenfieldscan.com"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bsquared.js
var require_bsquared = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bsquared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bsquared = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bsquared = (0, defineChain_js_1.defineChain)({
      id: 223,
      name: "B2",
      nativeCurrency: {
        name: "Bitcoin",
        symbol: "BTC",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.bsquared.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://explorer.bsquared.network"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bsquaredTestnet.js
var require_bsquaredTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bsquaredTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bsquaredTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bsquaredTestnet = (0, defineChain_js_1.defineChain)({
      id: 1123,
      name: "B2 Testnet",
      nativeCurrency: {
        name: "Bitcoin",
        symbol: "BTC",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://testnet-rpc.bsquared.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://testnet-explorer.bsquared.network"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/btr.js
var require_btr = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/btr.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.btr = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.btr = (0, defineChain_js_1.defineChain)({
      id: 200901,
      name: "Bitlayer",
      nativeCurrency: {
        name: "Bitcoin",
        symbol: "BTC",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: [
            "https://rpc.bitlayer.org",
            "https://rpc.bitlayer-rpc.com",
            "https://rpc.ankr.com/bitlayer"
          ],
          webSocket: ["wss://ws.bitlayer.org", "wss://ws.bitlayer-rpc.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Bitlayer(BTR) Scan",
          url: "https://www.btrscan.com"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/btrTestnet.js
var require_btrTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/btrTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.btrTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.btrTestnet = (0, defineChain_js_1.defineChain)({
      id: 200810,
      name: "Bitlayer Testnet",
      nativeCurrency: {
        name: "Bitcoin",
        symbol: "BTC",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://testnet-rpc.bitlayer.org"],
          webSocket: [
            "wss://testnet-ws.bitlayer.org",
            "wss://testnet-ws.bitlayer-rpc.com"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "Bitlayer(BTR) Scan",
          url: "https://testnet.btrscan.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bxn.js
var require_bxn = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bxn.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bxn = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bxn = (0, defineChain_js_1.defineChain)({
      id: 4999,
      name: "BlackFort Exchange Network",
      nativeCurrency: { name: "BlackFort Token", symbol: "BXN", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.blackfort.network/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://explorer.blackfort.network",
          apiUrl: "https://explorer.blackfort.network/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/bxnTestnet.js
var require_bxnTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/bxnTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bxnTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bxnTestnet = (0, defineChain_js_1.defineChain)({
      id: 4777,
      name: "BlackFort Exchange Network Testnet",
      nativeCurrency: {
        name: "BlackFort Testnet Token",
        symbol: "TBXN",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://testnet.blackfort.network/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://testnet-explorer.blackfort.network",
          apiUrl: "https://testnet-explorer.blackfort.network/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/cannon.js
var require_cannon = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/cannon.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cannon = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.cannon = (0, defineChain_js_1.defineChain)({
      id: 13370,
      name: "Cannon",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["http://127.0.0.1:8545"] }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/canto.js
var require_canto = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/canto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.canto = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.canto = (0, defineChain_js_1.defineChain)({
      id: 7700,
      name: "Canto",
      nativeCurrency: {
        decimals: 18,
        name: "Canto",
        symbol: "CANTO"
      },
      rpcUrls: {
        default: { http: ["https://canto.gravitychain.io"] }
      },
      blockExplorers: {
        default: {
          name: "Tuber.Build (Blockscout)",
          url: "https://tuber.build"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 2905789
        }
      }
    });
  }
});

// node_modules/viem/_cjs/celo/fees.js
var require_fees = __commonJS({
  "node_modules/viem/_cjs/celo/fees.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fees = void 0;
    exports2.fees = {
      estimateFeesPerGas: async (params) => {
        if (!params.request?.feeCurrency)
          return null;
        const [maxFeePerGas, maxPriorityFeePerGas] = await Promise.all([
          estimateFeePerGasInFeeCurrency(params.client, params.request.feeCurrency),
          estimateMaxPriorityFeePerGasInFeeCurrency(params.client, params.request.feeCurrency)
        ]);
        const suggestedMaxFeePerGas = params.multiply(maxFeePerGas) + maxPriorityFeePerGas;
        return {
          maxFeePerGas: suggestedMaxFeePerGas,
          maxPriorityFeePerGas
        };
      }
    };
    async function estimateFeePerGasInFeeCurrency(client, feeCurrency) {
      const fee = await client.request({
        method: "eth_gasPrice",
        params: [feeCurrency]
      });
      return BigInt(fee);
    }
    async function estimateMaxPriorityFeePerGasInFeeCurrency(client, feeCurrency) {
      const feesPerGas = await client.request({
        method: "eth_maxPriorityFeePerGas",
        params: [feeCurrency]
      });
      return BigInt(feesPerGas);
    }
  }
});

// node_modules/viem/_cjs/celo/utils.js
var require_utils2 = __commonJS({
  "node_modules/viem/_cjs/celo/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isEmpty = isEmpty;
    exports2.isPresent = isPresent;
    exports2.isEIP1559 = isEIP1559;
    exports2.isCIP64 = isCIP64;
    var trim_js_1 = require_trim();
    function isEmpty(value) {
      return value === 0 || value === 0n || value === void 0 || value === null || value === "0" || value === "" || typeof value === "string" && ((0, trim_js_1.trim)(value).toLowerCase() === "0x" || (0, trim_js_1.trim)(value).toLowerCase() === "0x00");
    }
    function isPresent(value) {
      return !isEmpty(value);
    }
    function isEIP1559(transaction) {
      return typeof transaction.maxFeePerGas !== "undefined" && typeof transaction.maxPriorityFeePerGas !== "undefined";
    }
    function isCIP64(transaction) {
      if (transaction.type === "cip64") {
        return true;
      }
      return isEIP1559(transaction) && isPresent(transaction.feeCurrency);
    }
  }
});

// node_modules/viem/_cjs/celo/formatters.js
var require_formatters3 = __commonJS({
  "node_modules/viem/_cjs/celo/formatters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatters = void 0;
    var fromHex_js_1 = require_fromHex();
    var block_js_1 = require_block();
    var transaction_js_1 = require_transaction();
    var transactionRequest_js_1 = require_transactionRequest();
    var utils_js_1 = require_utils2();
    exports2.formatters = {
      block: (0, block_js_1.defineBlock)({
        format(args) {
          const transactions = args.transactions?.map((transaction) => {
            if (typeof transaction === "string")
              return transaction;
            const formatted = (0, transaction_js_1.formatTransaction)(transaction);
            return {
              ...formatted,
              ...transaction.gatewayFee ? {
                gatewayFee: (0, fromHex_js_1.hexToBigInt)(transaction.gatewayFee),
                gatewayFeeRecipient: transaction.gatewayFeeRecipient
              } : {},
              feeCurrency: transaction.feeCurrency
            };
          });
          return {
            transactions,
            ...args.randomness ? { randomness: args.randomness } : {}
          };
        }
      }),
      transaction: (0, transaction_js_1.defineTransaction)({
        format(args) {
          if (args.type === "0x7e")
            return {
              isSystemTx: args.isSystemTx,
              mint: args.mint ? (0, fromHex_js_1.hexToBigInt)(args.mint) : void 0,
              sourceHash: args.sourceHash,
              type: "deposit"
            };
          const transaction = { feeCurrency: args.feeCurrency };
          if (args.type === "0x7b")
            transaction.type = "cip64";
          else {
            if (args.type === "0x7c")
              transaction.type = "cip42";
            transaction.gatewayFee = args.gatewayFee ? (0, fromHex_js_1.hexToBigInt)(args.gatewayFee) : null;
            transaction.gatewayFeeRecipient = args.gatewayFeeRecipient;
          }
          return transaction;
        }
      }),
      transactionRequest: (0, transactionRequest_js_1.defineTransactionRequest)({
        format(args) {
          const request = {};
          if (args.feeCurrency)
            request.feeCurrency = args.feeCurrency;
          if ((0, utils_js_1.isCIP64)(args))
            request.type = "0x7b";
          return request;
        }
      })
    };
  }
});

// node_modules/viem/_cjs/celo/serializers.js
var require_serializers3 = __commonJS({
  "node_modules/viem/_cjs/celo/serializers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializers = void 0;
    exports2.serializeTransaction = serializeTransaction;
    exports2.assertTransactionCIP42 = assertTransactionCIP42;
    exports2.assertTransactionCIP64 = assertTransactionCIP64;
    var number_js_1 = require_number();
    var address_js_1 = require_address();
    var base_js_1 = require_base();
    var chain_js_1 = require_chain();
    var node_js_1 = require_node();
    var serializers_js_1 = require_serializers2();
    var isAddress_js_1 = require_isAddress();
    var concat_js_1 = require_concat();
    var toHex_js_1 = require_toHex();
    var toRlp_js_1 = require_toRlp();
    var serializeAccessList_js_1 = require_serializeAccessList();
    var serializeTransaction_js_1 = require_serializeTransaction();
    var utils_js_1 = require_utils2();
    function serializeTransaction(transaction, signature) {
      if ((0, utils_js_1.isCIP64)(transaction))
        return serializeTransactionCIP64(transaction, signature);
      return (0, serializers_js_1.serializeTransaction)(transaction, signature);
    }
    exports2.serializers = {
      transaction: serializeTransaction
    };
    function serializeTransactionCIP64(transaction, signature) {
      assertTransactionCIP64(transaction);
      const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, feeCurrency, data } = transaction;
      const serializedTransaction = [
        (0, toHex_js_1.toHex)(chainId),
        nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
        maxPriorityFeePerGas ? (0, toHex_js_1.toHex)(maxPriorityFeePerGas) : "0x",
        maxFeePerGas ? (0, toHex_js_1.toHex)(maxFeePerGas) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        to ?? "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        data ?? "0x",
        (0, serializeAccessList_js_1.serializeAccessList)(accessList),
        feeCurrency,
        ...(0, serializeTransaction_js_1.toYParitySignatureArray)(transaction, signature)
      ];
      return (0, concat_js_1.concatHex)([
        "0x7b",
        (0, toRlp_js_1.toRlp)(serializedTransaction)
      ]);
    }
    var MAX_MAX_FEE_PER_GAS = number_js_1.maxUint256;
    function assertTransactionCIP42(transaction) {
      const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to, feeCurrency, gatewayFee, gatewayFeeRecipient } = transaction;
      if (chainId <= 0)
        throw new chain_js_1.InvalidChainIdError({ chainId });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (gasPrice)
        throw new base_js_1.BaseError("`gasPrice` is not a valid CIP-42 Transaction attribute.");
      if ((0, utils_js_1.isPresent)(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)
        throw new node_js_1.FeeCapTooHighError({ maxFeePerGas });
      if ((0, utils_js_1.isPresent)(maxPriorityFeePerGas) && (0, utils_js_1.isPresent)(maxFeePerGas) && maxPriorityFeePerGas > maxFeePerGas)
        throw new node_js_1.TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });
      if ((0, utils_js_1.isPresent)(gatewayFee) && (0, utils_js_1.isEmpty)(gatewayFeeRecipient) || (0, utils_js_1.isPresent)(gatewayFeeRecipient) && (0, utils_js_1.isEmpty)(gatewayFee)) {
        throw new base_js_1.BaseError("`gatewayFee` and `gatewayFeeRecipient` must be provided together.");
      }
      if ((0, utils_js_1.isPresent)(feeCurrency) && !(0, isAddress_js_1.isAddress)(feeCurrency)) {
        throw new base_js_1.BaseError("`feeCurrency` MUST be a token address for CIP-42 transactions.");
      }
      if ((0, utils_js_1.isPresent)(gatewayFeeRecipient) && !(0, isAddress_js_1.isAddress)(gatewayFeeRecipient)) {
        throw new address_js_1.InvalidAddressError(gatewayFeeRecipient);
      }
      if ((0, utils_js_1.isEmpty)(feeCurrency) && (0, utils_js_1.isEmpty)(gatewayFeeRecipient)) {
        throw new base_js_1.BaseError("Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.");
      }
    }
    function assertTransactionCIP64(transaction) {
      const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to, feeCurrency } = transaction;
      if (chainId <= 0)
        throw new chain_js_1.InvalidChainIdError({ chainId });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (gasPrice)
        throw new base_js_1.BaseError("`gasPrice` is not a valid CIP-64 Transaction attribute.");
      if ((0, utils_js_1.isPresent)(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)
        throw new node_js_1.FeeCapTooHighError({ maxFeePerGas });
      if ((0, utils_js_1.isPresent)(maxPriorityFeePerGas) && (0, utils_js_1.isPresent)(maxFeePerGas) && maxPriorityFeePerGas > maxFeePerGas)
        throw new node_js_1.TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });
      if ((0, utils_js_1.isPresent)(feeCurrency) && !(0, isAddress_js_1.isAddress)(feeCurrency)) {
        throw new base_js_1.BaseError("`feeCurrency` MUST be a token address for CIP-64 transactions.");
      }
      if ((0, utils_js_1.isEmpty)(feeCurrency)) {
        throw new base_js_1.BaseError("`feeCurrency` must be provided for CIP-64 transactions.");
      }
    }
  }
});

// node_modules/viem/_cjs/celo/chainConfig.js
var require_chainConfig3 = __commonJS({
  "node_modules/viem/_cjs/celo/chainConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chainConfig = void 0;
    var contracts_js_1 = require_contracts();
    var fees_js_1 = require_fees();
    var formatters_js_1 = require_formatters3();
    var serializers_js_1 = require_serializers3();
    exports2.chainConfig = {
      contracts: contracts_js_1.contracts,
      formatters: formatters_js_1.formatters,
      serializers: serializers_js_1.serializers,
      fees: fees_js_1.fees
    };
  }
});

// node_modules/viem/_cjs/chains/definitions/celo.js
var require_celo = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/celo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.celo = void 0;
    var chainConfig_js_1 = require_chainConfig3();
    var defineChain_js_1 = require_defineChain();
    exports2.celo = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 42220,
      name: "Celo",
      nativeCurrency: {
        decimals: 18,
        name: "CELO",
        symbol: "CELO"
      },
      rpcUrls: {
        default: { http: ["https://forno.celo.org"] }
      },
      blockExplorers: {
        default: {
          name: "Celo Explorer",
          url: "https://celoscan.io",
          apiUrl: "https://api.celoscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 13112599
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/celoAlfajores.js
var require_celoAlfajores = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/celoAlfajores.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.celoAlfajores = void 0;
    var chainConfig_js_1 = require_chainConfig3();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 17e3;
    exports2.celoAlfajores = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 44787,
      name: "Alfajores",
      nativeCurrency: {
        decimals: 18,
        name: "CELO",
        symbol: "A-CELO"
      },
      rpcUrls: {
        default: {
          http: ["https://alfajores-forno.celo-testnet.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Celo Alfajores Explorer",
          url: "https://celo-alfajores.blockscout.com",
          apiUrl: "https://celo-alfajores.blockscout.com/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 14569001
        },
        portal: {
          [sourceId]: {
            address: "0x82527353927d8D069b3B452904c942dA149BA381",
            blockCreated: 2411324
          }
        },
        disputeGameFactory: {
          [sourceId]: {
            address: "0xE28AAdcd9883746c0e5068F58f9ea06027b214cb",
            blockCreated: 2411324
          }
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0x4a2635e9e4f6e45817b1D402ac4904c1d1752438",
            blockCreated: 2411324
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0xD1B0E0581973c9eB7f886967A606b9441A897037",
            blockCreated: 2411324
          }
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/chang.js
var require_chang = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/chang.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chang = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.chang = (0, defineChain_js_1.defineChain)({
      id: 5858,
      name: "Chang Chain Foundation Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "CTH",
        symbol: "CTH"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.cthscan.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Chang Chain explorer",
          url: "https://cthscan.com"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/chiliz.js
var require_chiliz = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/chiliz.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chiliz = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.chiliz = (0, defineChain_js_1.defineChain)({
      id: 88888,
      name: "Chiliz Chain",
      network: "chiliz-chain",
      nativeCurrency: {
        decimals: 18,
        name: "CHZ",
        symbol: "CHZ"
      },
      rpcUrls: {
        default: {
          http: [
            "https://rpc.ankr.com/chiliz",
            "https://chiliz-rpc.publicnode.com"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "Chiliz Explorer",
          url: "https://scan.chiliz.com",
          apiUrl: "https://scan.chiliz.com/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/chips.js
var require_chips = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/chips.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chips = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.chips = (0, defineChain_js_1.defineChain)({
      id: 2882,
      name: "Chips Network",
      network: "CHIPS",
      nativeCurrency: {
        decimals: 18,
        name: "IOTA",
        symbol: "IOTA"
      },
      rpcUrls: {
        default: {
          http: [
            "https://node.chips.ooo/wasp/api/v1/chains/iota1pp3d3mnap3ufmgqnjsnw344sqmf5svjh26y2khnmc89sv6788y3r207a8fn/evm"
          ]
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/classic.js
var require_classic = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/classic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.classic = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.classic = (0, defineChain_js_1.defineChain)({
      id: 61,
      name: "Ethereum Classic",
      nativeCurrency: {
        decimals: 18,
        name: "ETC",
        symbol: "ETC"
      },
      rpcUrls: {
        default: { http: ["https://etc.rivet.link"] }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://blockscout.com/etc/mainnet"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/confluxESpace.js
var require_confluxESpace = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/confluxESpace.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.confluxESpace = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.confluxESpace = (0, defineChain_js_1.defineChain)({
      id: 1030,
      name: "Conflux eSpace",
      nativeCurrency: { name: "Conflux", symbol: "CFX", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://evm.confluxrpc.com"],
          webSocket: ["wss://evm.confluxrpc.com/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "ConfluxScan",
          url: "https://evm.confluxscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xEFf0078910f638cd81996cc117bccD3eDf2B072F",
          blockCreated: 68602935
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/confluxESpaceTestnet.js
var require_confluxESpaceTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/confluxESpaceTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.confluxESpaceTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.confluxESpaceTestnet = (0, defineChain_js_1.defineChain)({
      id: 71,
      name: "Conflux eSpace Testnet",
      network: "cfx-espace-testnet",
      testnet: true,
      nativeCurrency: { name: "Conflux", symbol: "CFX", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://evmtestnet.confluxrpc.com"],
          webSocket: ["wss://evmtestnet.confluxrpc.com/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "ConfluxScan",
          url: "https://evmtestnet.confluxscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xEFf0078910f638cd81996cc117bccD3eDf2B072F",
          blockCreated: 117499050
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/coreDao.js
var require_coreDao = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/coreDao.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.coreDao = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.coreDao = (0, defineChain_js_1.defineChain)({
      id: 1116,
      name: "Core Dao",
      nativeCurrency: {
        decimals: 18,
        name: "Core",
        symbol: "CORE"
      },
      rpcUrls: {
        default: { http: ["https://rpc.coredao.org"] }
      },
      blockExplorers: {
        default: {
          name: "CoreDao",
          url: "https://scan.coredao.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 11907934
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/crab.js
var require_crab = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/crab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.crab = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.crab = (0, defineChain_js_1.defineChain)({
      id: 44,
      name: "Crab Network",
      nativeCurrency: {
        decimals: 18,
        name: "Crab Network Native Token",
        symbol: "CRAB"
      },
      rpcUrls: {
        default: {
          http: ["https://crab-rpc.darwinia.network"],
          webSocket: ["wss://crab-rpc.darwinia.network"]
        }
      },
      blockExplorers: {
        default: { name: "Blockscout", url: "https://crab-scan.darwinia.network" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 3032593
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/cronos.js
var require_cronos = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/cronos.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cronos = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.cronos = (0, defineChain_js_1.defineChain)({
      id: 25,
      name: "Cronos Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Cronos",
        symbol: "CRO"
      },
      rpcUrls: {
        default: { http: ["https://evm.cronos.org"] }
      },
      blockExplorers: {
        default: {
          name: "Cronos Explorer",
          url: "https://explorer.cronos.org",
          apiUrl: "https://explorer-api.cronos.org/mainnet/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1963112
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/cronoszkEVM.js
var require_cronoszkEVM = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/cronoszkEVM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cronoszkEVM = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.cronoszkEVM = (0, defineChain_js_1.defineChain)({
      id: 388,
      name: "Cronos zkEVM Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Cronos zkEVM CRO",
        symbol: "zkCRO"
      },
      rpcUrls: {
        default: { http: ["https://mainnet.zkevm.cronos.org"] }
      },
      blockExplorers: {
        default: {
          name: "Cronos zkEVM (Mainnet) Chain Explorer",
          url: "https://explorer.zkevm.cronos.org"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/cronoszkEVMTestnet.js
var require_cronoszkEVMTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/cronoszkEVMTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cronoszkEVMTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.cronoszkEVMTestnet = (0, defineChain_js_1.defineChain)({
      id: 282,
      name: "Cronos zkEVM Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Cronos zkEVM Test Coin",
        symbol: "zkTCRO"
      },
      rpcUrls: {
        default: { http: ["https://testnet.zkevm.cronos.org"] }
      },
      blockExplorers: {
        default: {
          name: "Cronos zkEVM Testnet Explorer",
          url: "https://explorer.zkevm.cronos.org/testnet"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/cronosTestnet.js
var require_cronosTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/cronosTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cronosTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.cronosTestnet = (0, defineChain_js_1.defineChain)({
      id: 338,
      name: "Cronos Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "CRO",
        symbol: "tCRO"
      },
      rpcUrls: {
        default: { http: ["https://evm-t3.cronos.org"] }
      },
      blockExplorers: {
        default: {
          name: "Cronos Explorer",
          url: "https://cronos.org/explorer/testnet3"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 10191251
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/crossbell.js
var require_crossbell = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/crossbell.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.crossbell = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.crossbell = (0, defineChain_js_1.defineChain)({
      id: 3737,
      name: "Crossbell",
      nativeCurrency: {
        decimals: 18,
        name: "CSB",
        symbol: "CSB"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.crossbell.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "CrossScan",
          url: "https://scan.crossbell.io",
          apiUrl: "https://scan.crossbell.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 38246031
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/curtis.js
var require_curtis = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/curtis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.curtis = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.curtis = (0, defineChain_js_1.defineChain)({
      id: 33111,
      name: "Curtis",
      nativeCurrency: { name: "ApeCoin", symbol: "APE", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.curtis.apechain.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Curtis Explorer",
          url: "https://explorer.curtis.apechain.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/cyber.js
var require_cyber = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/cyber.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cyber = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.cyber = (0, defineChain_js_1.defineChain)({
      id: 7560,
      name: "Cyber",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://cyber.alt.technology"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://cyberscan.co",
          apiUrl: "https://cyberscan.co/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 0
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/cyberTestnet.js
var require_cyberTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/cyberTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cyberTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.cyberTestnet = (0, defineChain_js_1.defineChain)({
      id: 111557560,
      name: "Cyber Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://cyber-testnet.alt.technology"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://testnet.cyberscan.co",
          apiUrl: "https://testnet.cyberscan.co/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xffc391F0018269d4758AEA1a144772E8FB99545E",
          blockCreated: 304545
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/darwinia.js
var require_darwinia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/darwinia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.darwinia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.darwinia = (0, defineChain_js_1.defineChain)({
      id: 46,
      name: "Darwinia Network",
      nativeCurrency: {
        decimals: 18,
        name: "RING",
        symbol: "RING"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.darwinia.network"],
          webSocket: ["wss://rpc.darwinia.network"]
        }
      },
      blockExplorers: {
        default: { name: "Explorer", url: "https://explorer.darwinia.network" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 69420
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/dchain.js
var require_dchain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/dchain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dchain = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    exports2.dchain = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 2716446429837e3,
      name: "Dchain",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://dchain-2716446429837000-1.jsonrpc.sagarpc.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Dchain Explorer",
          url: "https://dchain-2716446429837000-1.sagaexplorer.io",
          apiUrl: "https://api-dchain-2716446429837000-1.sagaexplorer.io/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/dchainTestnet.js
var require_dchainTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/dchainTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dchainTestnet = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    exports2.dchainTestnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 2713017997578e3,
      name: "Dchain Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: [
            "https://dchaintestnet-2713017997578000-1.jsonrpc.testnet.sagarpc.io"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "Dchain Explorer",
          url: "https://dchaintestnet-2713017997578000-1.testnet.sagaexplorer.io",
          apiUrl: "https://api-dchaintestnet-2713017997578000-1.testnet.sagaexplorer.io/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/defichainEvm.js
var require_defichainEvm = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/defichainEvm.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defichainEvm = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.defichainEvm = (0, defineChain_js_1.defineChain)({
      id: 1130,
      network: "defichain-evm",
      name: "DeFiChain EVM Mainnet",
      nativeCurrency: {
        name: "DeFiChain",
        symbol: "DFI",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://eth.mainnet.ocean.jellyfishsdk.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "DeFiScan",
          url: "https://meta.defiscan.live"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 137852
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/defichainEvmTestnet.js
var require_defichainEvmTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/defichainEvmTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defichainEvmTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.defichainEvmTestnet = (0, defineChain_js_1.defineChain)({
      id: 1131,
      network: "defichain-evm-testnet",
      name: "DeFiChain EVM Testnet",
      nativeCurrency: {
        name: "DeFiChain",
        symbol: "DFI",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://eth.testnet.ocean.jellyfishsdk.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "DeFiScan",
          url: "https://meta.defiscan.live/?network=TestNet"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 156462
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/degen.js
var require_degen = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/degen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.degen = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.degen = (0, defineChain_js_1.defineChain)({
      id: 666666666,
      name: "Degen",
      nativeCurrency: {
        decimals: 18,
        name: "Degen",
        symbol: "DEGEN"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.degen.tips"],
          webSocket: ["wss://rpc.degen.tips"]
        }
      },
      blockExplorers: {
        default: {
          name: "Degen Chain Explorer",
          url: "https://explorer.degen.tips",
          apiUrl: "https://explorer.degen.tips/api/v2"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/dfk.js
var require_dfk = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/dfk.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dfk = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.dfk = (0, defineChain_js_1.defineChain)({
      id: 53935,
      name: "DFK Chain",
      nativeCurrency: {
        decimals: 18,
        name: "Jewel",
        symbol: "JEWEL"
      },
      rpcUrls: {
        default: {
          http: ["https://subnets.avax.network/defi-kingdoms/dfk-chain/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "DFKSubnetScan",
          url: "https://subnets.avax.network/defi-kingdoms"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14790551
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/dodochainTestnet.js
var require_dodochainTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/dodochainTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dodochainTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.dodochainTestnet = (0, defineChain_js_1.defineChain)({
      id: 53457,
      name: "DODOchain Testnet",
      nativeCurrency: { decimals: 18, name: "DODO", symbol: "DODO" },
      rpcUrls: {
        default: {
          http: ["https://dodochain-testnet.alt.technology"],
          webSocket: ["wss://dodochain-testnet.alt.technology/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "DODOchain Testnet (Sepolia) Explorer",
          url: "https://testnet-scan.dodochain.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/dogechain.js
var require_dogechain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/dogechain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dogechain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.dogechain = (0, defineChain_js_1.defineChain)({
      id: 2e3,
      name: "Dogechain",
      nativeCurrency: {
        decimals: 18,
        name: "Wrapped Dogecoin",
        symbol: "WDOGE"
      },
      rpcUrls: {
        default: { http: ["https://rpc.dogechain.dog"] }
      },
      blockExplorers: {
        default: {
          name: "DogeChainExplorer",
          url: "https://explorer.dogechain.dog",
          apiUrl: "https://explorer.dogechain.dog/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0x68a8609a60a008EFA633dfdec592c03B030cC508",
          blockCreated: 25384031
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/dosChain.js
var require_dosChain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/dosChain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dosChain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.dosChain = (0, defineChain_js_1.defineChain)({
      id: 7979,
      name: "DOS Chain",
      nativeCurrency: {
        decimals: 18,
        name: "DOS Chain",
        symbol: "DOS"
      },
      rpcUrls: {
        default: { http: ["https://main.doschain.com"] }
      },
      blockExplorers: {
        default: {
          name: "DOS Chain Explorer",
          url: "https://doscan.io",
          apiUrl: "https://api.doscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 161908
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/dosChainTestnet.js
var require_dosChainTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/dosChainTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dosChainTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.dosChainTestnet = (0, defineChain_js_1.defineChain)({
      id: 3939,
      name: "DOS Chain Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "DOS Chain Testnet",
        symbol: "DOS"
      },
      rpcUrls: {
        default: { http: ["https://test.doschain.com"] }
      },
      blockExplorers: {
        default: {
          name: "DOS Chain Testnet Explorer",
          url: "https://test.doscan.io",
          apiUrl: "https://api-test.doscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 69623
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/dreyerxMainnet.js
var require_dreyerxMainnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/dreyerxMainnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dreyerxMainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.dreyerxMainnet = (0, defineChain_js_1.defineChain)({
      id: 23451,
      name: "DreyerX Mainnet",
      nativeCurrency: {
        name: "DreyerX",
        symbol: "DRX",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.dreyerx.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "DreyerX Scan",
          url: "https://scan.dreyerx.com"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/utils/chain/assertCurrentChain.js
var require_assertCurrentChain = __commonJS({
  "node_modules/viem/_cjs/utils/chain/assertCurrentChain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertCurrentChain = assertCurrentChain;
    var chain_js_1 = require_chain();
    function assertCurrentChain({ chain, currentChainId }) {
      if (!chain)
        throw new chain_js_1.ChainNotFoundError();
      if (currentChainId !== chain.id)
        throw new chain_js_1.ChainMismatchError({ chain, currentChainId });
    }
  }
});

// node_modules/viem/_cjs/utils/chain/extractChain.js
var require_extractChain = __commonJS({
  "node_modules/viem/_cjs/utils/chain/extractChain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extractChain = extractChain;
    function extractChain({ chains, id }) {
      return chains.find((chain) => chain.id === id);
    }
  }
});

// node_modules/viem/_cjs/utils/chain/getChainContractAddress.js
var require_getChainContractAddress = __commonJS({
  "node_modules/viem/_cjs/utils/chain/getChainContractAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChainContractAddress = getChainContractAddress;
    var chain_js_1 = require_chain();
    function getChainContractAddress({ blockNumber, chain, contract: name }) {
      const contract = chain?.contracts?.[name];
      if (!contract)
        throw new chain_js_1.ChainDoesNotSupportContract({
          chain,
          contract: { name }
        });
      if (blockNumber && contract.blockCreated && contract.blockCreated > blockNumber)
        throw new chain_js_1.ChainDoesNotSupportContract({
          blockNumber,
          chain,
          contract: {
            name,
            blockCreated: contract.blockCreated
          }
        });
      return contract.address;
    }
  }
});

// node_modules/viem/_cjs/chains/utils.js
var require_utils3 = __commonJS({
  "node_modules/viem/_cjs/chains/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChainContractAddress = exports2.extractChain = exports2.defineChain = exports2.assertCurrentChain = void 0;
    var assertCurrentChain_js_1 = require_assertCurrentChain();
    Object.defineProperty(exports2, "assertCurrentChain", { enumerable: true, get: function() {
      return assertCurrentChain_js_1.assertCurrentChain;
    } });
    var defineChain_js_1 = require_defineChain();
    Object.defineProperty(exports2, "defineChain", { enumerable: true, get: function() {
      return defineChain_js_1.defineChain;
    } });
    var extractChain_js_1 = require_extractChain();
    Object.defineProperty(exports2, "extractChain", { enumerable: true, get: function() {
      return extractChain_js_1.extractChain;
    } });
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    Object.defineProperty(exports2, "getChainContractAddress", { enumerable: true, get: function() {
      return getChainContractAddress_js_1.getChainContractAddress;
    } });
  }
});

// node_modules/viem/_cjs/chains/definitions/dreyerxTestnet.js
var require_dreyerxTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/dreyerxTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dreyerxTestnet = void 0;
    var utils_js_1 = require_utils3();
    exports2.dreyerxTestnet = (0, utils_js_1.defineChain)({
      id: 23452,
      name: "DreyerX Testnet",
      nativeCurrency: {
        name: "DreyerX",
        symbol: "DRX",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["http://testnet-rpc.dreyerx.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "DreyerX Testnet Scan",
          url: "https://testnet-scan.dreyerx.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/edgeless.js
var require_edgeless = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/edgeless.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.edgeless = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.edgeless = (0, defineChain_js_1.defineChain)({
      id: 2026,
      name: "Edgeless Network",
      nativeCurrency: {
        name: "Edgeless Wrapped ETH",
        symbol: "EwETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.edgeless.network/http"],
          webSocket: ["wss://rpc.edgeless.network/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Edgeless Explorer",
          url: "https://explorer.edgeless.network"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/edgelessTestnet.js
var require_edgelessTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/edgelessTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.edgelessTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.edgelessTestnet = (0, defineChain_js_1.defineChain)({
      id: 202,
      name: "Edgeless Testnet",
      nativeCurrency: {
        name: "Edgeless Wrapped ETH",
        symbol: "EwETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://edgeless-testnet.rpc.caldera.xyz/http"],
          webSocket: ["wss://edgeless-testnet.rpc.caldera.xyz/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Edgeless Testnet Explorer",
          url: "https://testnet.explorer.edgeless.network"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/edgeware.js
var require_edgeware = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/edgeware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.edgeware = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.edgeware = (0, defineChain_js_1.defineChain)({
      id: 2021,
      name: "Edgeware EdgeEVM Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Edgeware",
        symbol: "EDG"
      },
      rpcUrls: {
        default: { http: ["https://edgeware-evm.jelliedowl.net"] }
      },
      blockExplorers: {
        default: {
          name: "Edgscan by Bharathcoorg",
          url: "https://edgscan.live",
          apiUrl: "https://edgscan.live/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 18117872
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/edgewareTestnet.js
var require_edgewareTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/edgewareTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.edgewareTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.edgewareTestnet = (0, defineChain_js_1.defineChain)({
      id: 2022,
      name: "Beresheet BereEVM Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Testnet EDG",
        symbol: "tEDG"
      },
      rpcUrls: {
        default: { http: ["https://beresheet-evm.jelliedowl.net"] }
      },
      blockExplorers: {
        default: {
          name: "Edgscan by Bharathcoorg",
          url: "https://testnet.edgscan.live",
          apiUrl: "https://testnet.edgscan.live/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/elysiumTestnet.js
var require_elysiumTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/elysiumTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.elysiumTestnet = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    exports2.elysiumTestnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 1338,
      name: "Elysium Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "LAVA",
        symbol: "LAVA"
      },
      rpcUrls: {
        default: {
          http: ["https://elysium-test-rpc.vulcanforged.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Elysium testnet explorer",
          url: "https://elysium-explorer.vulcanforged.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/eon.js
var require_eon = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/eon.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.eon = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.eon = (0, defineChain_js_1.defineChain)({
      id: 7332,
      name: "Horizen EON",
      nativeCurrency: {
        decimals: 18,
        name: "ZEN",
        symbol: "ZEN"
      },
      rpcUrls: {
        default: { http: ["https://eon-rpc.horizenlabs.io/ethv1"] }
      },
      blockExplorers: {
        default: {
          name: "EON Explorer",
          url: "https://eon-explorer.horizenlabs.io"
        }
      },
      contracts: {}
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/eos.js
var require_eos = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/eos.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.eos = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.eos = (0, defineChain_js_1.defineChain)({
      id: 17777,
      name: "EOS EVM",
      nativeCurrency: {
        decimals: 18,
        name: "EOS",
        symbol: "EOS"
      },
      rpcUrls: {
        default: { http: ["https://api.evm.eosnetwork.com"] }
      },
      blockExplorers: {
        default: {
          name: "EOS EVM Explorer",
          url: "https://explorer.evm.eosnetwork.com",
          apiUrl: "https://explorer.evm.eosnetwork.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 7943933
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/eosTestnet.js
var require_eosTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/eosTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.eosTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.eosTestnet = (0, defineChain_js_1.defineChain)({
      id: 15557,
      name: "EOS EVM Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "EOS",
        symbol: "EOS"
      },
      rpcUrls: {
        default: { http: ["https://api.testnet.evm.eosnetwork.com"] }
      },
      blockExplorers: {
        default: {
          name: "EOS EVM Testnet Explorer",
          url: "https://explorer.testnet.evm.eosnetwork.com",
          apiUrl: "https://explorer.testnet.evm.eosnetwork.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 9067940
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/etherlink.js
var require_etherlink = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/etherlink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.etherlink = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.etherlink = (0, defineChain_js_1.defineChain)({
      id: 42793,
      name: "Etherlink",
      nativeCurrency: {
        decimals: 18,
        name: "Tez",
        symbol: "XTZ"
      },
      rpcUrls: {
        default: { http: ["https://node.mainnet.etherlink.com"] }
      },
      blockExplorers: {
        default: {
          name: "Etherlink",
          url: "https://explorer.etherlink.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 33899
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/etherlinkTestnet.js
var require_etherlinkTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/etherlinkTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.etherlinkTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.etherlinkTestnet = (0, defineChain_js_1.defineChain)({
      id: 128123,
      name: "Etherlink Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Tez",
        symbol: "XTZ"
      },
      rpcUrls: {
        default: { http: ["https://node.ghostnet.etherlink.com"] }
      },
      blockExplorers: {
        default: {
          name: "Etherlink Testnet",
          url: "https://testnet-explorer.etherlink.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/evmos.js
var require_evmos = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/evmos.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evmos = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.evmos = (0, defineChain_js_1.defineChain)({
      id: 9001,
      name: "Evmos",
      nativeCurrency: {
        decimals: 18,
        name: "Evmos",
        symbol: "EVMOS"
      },
      rpcUrls: {
        default: { http: ["https://eth.bd.evmos.org:8545"] }
      },
      blockExplorers: {
        default: {
          name: "Evmos Block Explorer",
          url: "https://escan.live"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/evmosTestnet.js
var require_evmosTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/evmosTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evmosTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.evmosTestnet = (0, defineChain_js_1.defineChain)({
      id: 9e3,
      name: "Evmos Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Evmos",
        symbol: "EVMOS"
      },
      rpcUrls: {
        default: { http: ["https://eth.bd.evmos.dev:8545"] }
      },
      blockExplorers: {
        default: {
          name: "Evmos Testnet Block Explorer",
          url: "https://evm.evmos.dev/"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/ekta.js
var require_ekta = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/ekta.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ekta = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.ekta = (0, defineChain_js_1.defineChain)({
      id: 1994,
      name: "Ekta",
      nativeCurrency: {
        decimals: 18,
        name: "EKTA",
        symbol: "EKTA"
      },
      rpcUrls: {
        default: { http: ["https://main.ekta.io"] }
      },
      blockExplorers: {
        default: {
          name: "Ektascan",
          url: "https://ektascan.io",
          apiUrl: "https://ektascan.io/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/ektaTestnet.js
var require_ektaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/ektaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ektaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.ektaTestnet = (0, defineChain_js_1.defineChain)({
      id: 1004,
      name: "Ekta Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "EKTA",
        symbol: "EKTA"
      },
      rpcUrls: {
        default: { http: ["https://test.ekta.io:8545"] }
      },
      blockExplorers: {
        default: {
          name: "Test Ektascan",
          url: "https://test.ektascan.io",
          apiUrl: "https://test.ektascan.io/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/elastos.js
var require_elastos = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/elastos.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.elastos = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.elastos = (0, defineChain_js_1.defineChain)({
      id: 20,
      name: "Elastos Smart Chain",
      nativeCurrency: { name: "ELA", symbol: "ELA", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://api2.elastos.io/eth"]
        }
      },
      blockExplorers: {
        default: {
          name: "Elastos Explorer",
          url: "https://esc.elastos.io"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/elastosTestnet.js
var require_elastosTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/elastosTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.elastosTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.elastosTestnet = (0, defineChain_js_1.defineChain)({
      id: 21,
      name: "Elastos Smart Chain Testnet",
      nativeCurrency: { name: "tELA", symbol: "tELA", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://api-testnet.elastos.io/eth"]
        }
      },
      blockExplorers: {
        default: {
          name: "Elastos Explorer",
          url: "https://esc-testnet.elastos.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/electroneum.js
var require_electroneum = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/electroneum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.electroneum = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.electroneum = (0, defineChain_js_1.defineChain)({
      id: 52014,
      name: "Electroneum Mainnet",
      nativeCurrency: {
        name: "ETN",
        symbol: "ETN",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.electroneum.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Electroneum Block Explorer",
          url: "https://blockexplorer.electroneum.com"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/electroneumTestnet.js
var require_electroneumTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/electroneumTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.electroneumTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.electroneumTestnet = (0, defineChain_js_1.defineChain)({
      id: 5201420,
      name: "Electroneum Testnet",
      nativeCurrency: {
        name: "ETN",
        symbol: "ETN",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://testnet-rpc.electroneum.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Electroneum Block Explorer",
          url: "https://blockexplorer.thesecurityteam.rocks"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/fantom.js
var require_fantom = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/fantom.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fantom = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fantom = (0, defineChain_js_1.defineChain)({
      id: 250,
      name: "Fantom",
      nativeCurrency: {
        decimals: 18,
        name: "Fantom",
        symbol: "FTM"
      },
      rpcUrls: {
        default: { http: ["https://rpc.ankr.com/fantom"] }
      },
      blockExplorers: {
        default: {
          name: "FTMScan",
          url: "https://ftmscan.com",
          apiUrl: "https://api.ftmscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 33001987
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/fantomSonicTestnet.js
var require_fantomSonicTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/fantomSonicTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fantomSonicTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fantomSonicTestnet = (0, defineChain_js_1.defineChain)({
      id: 64240,
      name: "Fantom Sonic Open Testnet",
      network: "fantom-sonic-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Fantom",
        symbol: "FTM"
      },
      rpcUrls: {
        default: { http: ["https://rpcapi.sonic.fantom.network"] }
      },
      blockExplorers: {
        default: {
          name: "Fantom Sonic Open Testnet Explorer",
          url: "https://public-sonic.fantom.network"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/fantomTestnet.js
var require_fantomTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/fantomTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fantomTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fantomTestnet = (0, defineChain_js_1.defineChain)({
      id: 4002,
      name: "Fantom Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Fantom",
        symbol: "FTM"
      },
      rpcUrls: {
        default: { http: ["https://rpc.testnet.fantom.network"] }
      },
      blockExplorers: {
        default: {
          name: "FTMScan",
          url: "https://testnet.ftmscan.com",
          apiUrl: "https://testnet.ftmscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 8328688
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/fibo.js
var require_fibo = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/fibo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fibo = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fibo = (0, defineChain_js_1.defineChain)({
      id: 12306,
      name: "Fibo Chain",
      nativeCurrency: {
        decimals: 18,
        name: "fibo",
        symbol: "FIBO"
      },
      rpcUrls: {
        default: { http: ["https://network.hzroc.art"] }
      },
      blockExplorers: {
        default: {
          name: "FiboScan",
          url: "https://scan.fibochain.org"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/filecoin.js
var require_filecoin = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/filecoin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.filecoin = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.filecoin = (0, defineChain_js_1.defineChain)({
      id: 314,
      name: "Filecoin Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "filecoin",
        symbol: "FIL"
      },
      rpcUrls: {
        default: { http: ["https://api.node.glif.io/rpc/v1"] }
      },
      blockExplorers: {
        default: {
          name: "Filfox",
          url: "https://filfox.info/en"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3328594
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/filecoinCalibration.js
var require_filecoinCalibration = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/filecoinCalibration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.filecoinCalibration = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.filecoinCalibration = (0, defineChain_js_1.defineChain)({
      id: 314159,
      name: "Filecoin Calibration",
      nativeCurrency: {
        decimals: 18,
        name: "testnet filecoin",
        symbol: "tFIL"
      },
      rpcUrls: {
        default: { http: ["https://api.calibration.node.glif.io/rpc/v1"] }
      },
      blockExplorers: {
        default: {
          name: "Filscan",
          url: "https://calibration.filscan.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/filecoinHyperspace.js
var require_filecoinHyperspace = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/filecoinHyperspace.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.filecoinHyperspace = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.filecoinHyperspace = (0, defineChain_js_1.defineChain)({
      id: 3141,
      name: "Filecoin Hyperspace",
      nativeCurrency: {
        decimals: 18,
        name: "testnet filecoin",
        symbol: "tFIL"
      },
      rpcUrls: {
        default: { http: ["https://api.hyperspace.node.glif.io/rpc/v1"] }
      },
      blockExplorers: {
        default: {
          name: "Filfox",
          url: "https://hyperspace.filfox.info/en"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/flare.js
var require_flare = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/flare.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flare = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.flare = (0, defineChain_js_1.defineChain)({
      id: 14,
      name: "Flare Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Flare",
        symbol: "FLR"
      },
      rpcUrls: {
        default: { http: ["https://flare-api.flare.network/ext/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "Flare Explorer",
          url: "https://flare-explorer.flare.network",
          apiUrl: "https://flare-explorer.flare.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3002461
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/flareTestnet.js
var require_flareTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/flareTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flareTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.flareTestnet = (0, defineChain_js_1.defineChain)({
      id: 114,
      name: "Flare Testnet Coston2",
      nativeCurrency: {
        decimals: 18,
        name: "Coston2 Flare",
        symbol: "C2FLR"
      },
      rpcUrls: {
        default: { http: ["https://coston2-api.flare.network/ext/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "Coston2 Explorer",
          url: "https://coston2-explorer.flare.network",
          apiUrl: "https://coston2-explorer.flare.network/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/flowPreviewnet.js
var require_flowPreviewnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/flowPreviewnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flowPreviewnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.flowPreviewnet = (0, defineChain_js_1.defineChain)({
      id: 646,
      name: "FlowEVM Previewnet",
      nativeCurrency: {
        decimals: 18,
        name: "Flow",
        symbol: "FLOW"
      },
      rpcUrls: {
        default: {
          http: ["https://previewnet.evm.nodes.onflow.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Previewnet Explorer",
          url: "https://previewnet.flowdiver.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 6205
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/flowMainnet.js
var require_flowMainnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/flowMainnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flowMainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.flowMainnet = (0, defineChain_js_1.defineChain)({
      id: 747,
      name: "FlowEVM Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Flow",
        symbol: "FLOW"
      },
      rpcUrls: {
        default: {
          http: ["https://mainnet.evm.nodes.onflow.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Mainnet Explorer",
          url: "https://flowdiver.io"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/flowTestnet.js
var require_flowTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/flowTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flowTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.flowTestnet = (0, defineChain_js_1.defineChain)({
      id: 545,
      name: "FlowEVM Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Flow",
        symbol: "FLOW"
      },
      rpcUrls: {
        default: {
          http: ["https://testnet.evm.nodes.onflow.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Flow Diver",
          url: "https://testnet.flowdiver.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 137518
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/fluence.js
var require_fluence = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/fluence.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fluence = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fluence = (0, defineChain_js_1.defineChain)({
      id: 9999999,
      name: "Fluence",
      nativeCurrency: { name: "FLT", symbol: "FLT", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.mainnet.fluence.dev"],
          webSocket: ["wss://ws.mainnet.fluence.dev"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://blockscout.mainnet.fluence.dev",
          apiUrl: "https://blockscout.mainnet.fluence.dev/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/fluenceStage.js
var require_fluenceStage = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/fluenceStage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fluenceStage = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fluenceStage = (0, defineChain_js_1.defineChain)({
      id: 123420000220,
      name: "Fluence Stage",
      nativeCurrency: { name: "tFLT", symbol: "tFLT", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.stage.fluence.dev"],
          webSocket: ["wss://ws.stage.fluence.dev"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://blockscout.stage.fluence.dev",
          apiUrl: "https://blockscout.stage.fluence.dev/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/fluenceTestnet.js
var require_fluenceTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/fluenceTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fluenceTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fluenceTestnet = (0, defineChain_js_1.defineChain)({
      id: 52164803,
      name: "Fluence Testnet",
      nativeCurrency: { name: "tFLT", symbol: "tFLT", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.fluence.dev"],
          webSocket: ["wss://ws.testnet.fluence.dev"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://blockscout.testnet.fluence.dev",
          apiUrl: "https://blockscout.testnet.fluence.dev/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/forma.js
var require_forma = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/forma.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.forma = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.forma = (0, defineChain_js_1.defineChain)({
      id: 984122,
      name: "Forma",
      network: "forma",
      nativeCurrency: {
        symbol: "TIA",
        name: "TIA",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.forma.art"],
          webSocket: ["wss://ws.forma.art"]
        }
      },
      blockExplorers: {
        default: {
          name: "Forma Explorer",
          url: "https://explorer.forma.art"
        }
      },
      contracts: {
        multicall3: {
          address: "0xd53C6FFB123F7349A32980F87faeD8FfDc9ef079",
          blockCreated: 252705
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/foundry.js
var require_foundry = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/foundry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.foundry = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.foundry = (0, defineChain_js_1.defineChain)({
      id: 31337,
      name: "Foundry",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["http://127.0.0.1:8545"],
          webSocket: ["ws://127.0.0.1:8545"]
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/fraxtal.js
var require_fraxtal = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/fraxtal.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fraxtal = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.fraxtal = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 252,
      name: "Fraxtal",
      nativeCurrency: { name: "Frax Ether", symbol: "frxETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.frax.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "fraxscan",
          url: "https://fraxscan.com",
          apiUrl: "https://api.fraxscan.com/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0x66CC916Ed5C6C2FA97014f7D1cD141528Ae171e4"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11"
        },
        portal: {
          [sourceId]: {
            address: "0x36cb65c1967A0Fb0EEE11569C51C2f2aA1Ca6f6D",
            blockCreated: 19135323
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x34C0bD5877A5Ee7099D0f5688D65F4bB9158BDE2",
            blockCreated: 19135323
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/fraxtalTestnet.js
var require_fraxtalTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/fraxtalTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fraxtalTestnet = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 17e3;
    exports2.fraxtalTestnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 2522,
      name: "Fraxtal Testnet",
      nativeCurrency: { name: "Frax Ether", symbol: "frxETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.frax.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "fraxscan testnet",
          url: "https://holesky.fraxscan.com",
          apiUrl: "https://api-holesky.fraxscan.com/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0x715EA64DA13F4d0831ece4Ad3E8c1aa013167F32"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11"
        },
        portal: {
          [sourceId]: {
            address: "0xB9c64BfA498d5b9a8398Ed6f46eb76d90dE5505d",
            blockCreated: 318416
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x0BaafC217162f64930909aD9f2B27125121d6332",
            blockCreated: 318416
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/funkiMainnet.js
var require_funkiMainnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/funkiMainnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.funkiMainnet = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.funkiMainnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 33979,
      name: "Funki",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-mainnet.funkichain.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Funki Mainnet Explorer",
          url: "https://funkiscan.io"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/funkiSepolia.js
var require_funkiSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/funkiSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.funkiSepolia = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.funkiSepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 3397901,
      network: "funkiSepolia",
      name: "Funki Sepolia Sandbox",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://funki-testnet.alt.technology"]
        }
      },
      blockExplorers: {
        default: {
          name: "Funki Sepolia Sandbox Explorer",
          url: "https://sepolia-sandbox.funkichain.com/"
        }
      },
      testnet: true,
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1620204
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/fuse.js
var require_fuse = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/fuse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fuse = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fuse = (0, defineChain_js_1.defineChain)({
      id: 122,
      name: "Fuse",
      nativeCurrency: { name: "Fuse", symbol: "FUSE", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.fuse.io"] }
      },
      blockExplorers: {
        default: {
          name: "Fuse Explorer",
          url: "https://explorer.fuse.io",
          apiUrl: "https://explorer.fuse.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 16146628
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/fuseSparknet.js
var require_fuseSparknet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/fuseSparknet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fuseSparknet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fuseSparknet = (0, defineChain_js_1.defineChain)({
      id: 123,
      name: "Fuse Sparknet",
      nativeCurrency: { name: "Spark", symbol: "SPARK", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.fusespark.io"] }
      },
      blockExplorers: {
        default: {
          name: "Sparkent Explorer",
          url: "https://explorer.fusespark.io",
          apiUrl: "https://explorer.fusespark.io/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/fusion.js
var require_fusion = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/fusion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fusion = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fusion = (0, defineChain_js_1.defineChain)({
      id: 32659,
      name: "Fusion Mainnet",
      nativeCurrency: { name: "Fusion", symbol: "FSN", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.fusionnetwork.io"],
          webSocket: ["wss://mainnet.fusionnetwork.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "FSNscan",
          url: "https://fsnscan.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 10441605
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/fusionTestnet.js
var require_fusionTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/fusionTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fusionTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fusionTestnet = (0, defineChain_js_1.defineChain)({
      id: 46688,
      name: "Fusion Testnet",
      nativeCurrency: { name: "Fusion", symbol: "FSN", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.fusionnetwork.io"],
          webSocket: ["wss://testnet.fusionnetwork.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "FSNscan",
          url: "https://testnet.fsnscan.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 10428309
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/iotex.js
var require_iotex = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/iotex.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.iotex = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.iotex = (0, defineChain_js_1.defineChain)({
      id: 4689,
      name: "IoTeX",
      nativeCurrency: {
        decimals: 18,
        name: "IoTeX",
        symbol: "IOTX"
      },
      rpcUrls: {
        default: {
          http: ["https://babel-api.mainnet.iotex.io"],
          webSocket: ["wss://babel-api.mainnet.iotex.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "IoTeXScan",
          url: "https://iotexscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 22163670
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/iotexTestnet.js
var require_iotexTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/iotexTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.iotexTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.iotexTestnet = (0, defineChain_js_1.defineChain)({
      id: 4690,
      name: "IoTeX Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "IoTeX",
        symbol: "IOTX"
      },
      rpcUrls: {
        default: {
          http: ["https://babel-api.testnet.iotex.io"],
          webSocket: ["wss://babel-api.testnet.iotex.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "IoTeXScan",
          url: "https://testnet.iotexscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xb5cecD6894c6f473Ec726A176f1512399A2e355d",
          blockCreated: 24347592
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/jbc.js
var require_jbc = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/jbc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.jbc = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.jbc = (0, defineChain_js_1.defineChain)({
      id: 8899,
      name: "JIBCHAIN L1",
      network: "jbc",
      nativeCurrency: { name: "JBC", symbol: "JBC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-l1.jibchain.net"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://exp-l1.jibchain.net",
          apiUrl: "https://exp-l1.jibchain.net/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xc0C8C486D1466C57Efe13C2bf000d4c56F47CBdC",
          blockCreated: 2299048
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/jbcTestnet.js
var require_jbcTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/jbcTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.jbcTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.jbcTestnet = (0, defineChain_js_1.defineChain)({
      id: 88991,
      name: "Jibchain Testnet",
      nativeCurrency: { name: "tJBC", symbol: "tJBC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.jibchain.net"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://exp.testnet.jibchain.net",
          apiUrl: "https://exp.testnet.jibchain.net/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xa1a858ad9041B4741e620355a3F96B3c78e70ecE",
          blockCreated: 32848
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/karura.js
var require_karura = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/karura.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.karura = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.karura = (0, defineChain_js_1.defineChain)({
      id: 686,
      name: "Karura",
      network: "karura",
      nativeCurrency: {
        name: "Karura",
        symbol: "KAR",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://eth-rpc-karura.aca-api.network"],
          webSocket: ["wss://eth-rpc-karura.aca-api.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Karura Blockscout",
          url: "https://blockscout.karura.network",
          apiUrl: "https://blockscout.karura.network/api"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/garnet.js
var require_garnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/garnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.garnet = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 17e3;
    exports2.garnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      name: "Garnet Testnet",
      testnet: true,
      id: 17069,
      sourceId,
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.garnetchain.com"],
          webSocket: ["wss://rpc.garnetchain.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://explorer.garnetchain.com"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11"
        },
        portal: {
          [sourceId]: {
            address: "0x57ee40586fbE286AfC75E67cb69511A6D9aF5909",
            blockCreated: 1274684
          }
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0xCb8E7AC561b8EF04F2a15865e9fbc0766FEF569B",
            blockCreated: 1274684
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x09bcDd311FE398F80a78BE37E489f5D440DB95DE",
            blockCreated: 1274684
          }
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/goChain.js
var require_goChain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/goChain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.goChain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.goChain = (0, defineChain_js_1.defineChain)({
      id: 60,
      name: "GoChain",
      nativeCurrency: {
        decimals: 18,
        name: "GO",
        symbol: "GO"
      },
      rpcUrls: {
        default: { http: ["https://rpc.gochain.io"] }
      },
      blockExplorers: {
        default: {
          name: "GoChain Explorer",
          url: "https://explorer.gochain.io"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/gobi.js
var require_gobi = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/gobi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.gobi = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.gobi = (0, defineChain_js_1.defineChain)({
      id: 1663,
      name: "Horizen Gobi Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Test ZEN",
        symbol: "tZEN"
      },
      rpcUrls: {
        default: { http: ["https://gobi-testnet.horizenlabs.io/ethv1"] }
      },
      blockExplorers: {
        default: {
          name: "Gobi Explorer",
          url: "https://gobi-explorer.horizen.io"
        }
      },
      contracts: {},
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/goerli.js
var require_goerli = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/goerli.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.goerli = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.goerli = (0, defineChain_js_1.defineChain)({
      id: 5,
      name: "Goerli",
      nativeCurrency: { name: "Goerli Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.ankr.com/eth_goerli"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://goerli.etherscan.io",
          apiUrl: "https://api-goerli.etherscan.io/api"
        }
      },
      contracts: {
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        },
        ensUniversalResolver: {
          address: "0xfc4AC75C46C914aF5892d6d3eFFcebD7917293F1",
          blockCreated: 10339206
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 6507670
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/gnosis.js
var require_gnosis = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/gnosis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.gnosis = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.gnosis = (0, defineChain_js_1.defineChain)({
      id: 100,
      name: "Gnosis",
      nativeCurrency: {
        decimals: 18,
        name: "Gnosis",
        symbol: "xDAI"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.gnosischain.com"],
          webSocket: ["wss://rpc.gnosischain.com/wss"]
        }
      },
      blockExplorers: {
        default: {
          name: "Gnosisscan",
          url: "https://gnosisscan.io",
          apiUrl: "https://api.gnosisscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 21022491
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/gnosisChiado.js
var require_gnosisChiado = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/gnosisChiado.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.gnosisChiado = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.gnosisChiado = (0, defineChain_js_1.defineChain)({
      id: 10200,
      name: "Gnosis Chiado",
      nativeCurrency: {
        decimals: 18,
        name: "Gnosis",
        symbol: "xDAI"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.chiadochain.net"],
          webSocket: ["wss://rpc.chiadochain.net/wss"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://blockscout.chiadochain.net",
          apiUrl: "https://blockscout.chiadochain.net/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 4967313
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/gravity.js
var require_gravity = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/gravity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.gravity = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.gravity = (0, defineChain_js_1.defineChain)({
      id: 1625,
      name: "Gravity Alpha Mainnet",
      nativeCurrency: { name: "G", symbol: "G", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.gravity.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "Gravity Explorer",
          url: "https://explorer.gravity.xyz",
          apiUrl: "https://explorer.gravity.xyz/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xf8ac4BEB2F75d2cFFb588c63251347fdD629B92c",
          blockCreated: 16851
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/guruTestnet.js
var require_guruTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/guruTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.guruTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.guruTestnet = (0, defineChain_js_1.defineChain)({
      id: 261,
      name: "Guru Network Testnet",
      nativeCurrency: {
        name: "testGURU",
        symbol: "tGURU",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.gurunetwork.ai/archive/261"]
        }
      },
      blockExplorers: {
        default: {
          name: "Guruscan",
          url: "https://scan.gurunetwork.ai"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/ham.js
var require_ham = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/ham.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ham = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.ham = (0, defineChain_js_1.defineChain)({
      id: 5112,
      name: "Ham",
      nativeCurrency: {
        decimals: 18,
        name: "Ham",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.ham.fun"],
          webSocket: ["wss://rpc.ham.fun"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ham Chain Explorer",
          url: "https://explorer.ham.fun",
          apiUrl: "https://explorer.ham.fun/api/v2"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/hardhat.js
var require_hardhat = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/hardhat.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hardhat = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.hardhat = (0, defineChain_js_1.defineChain)({
      id: 31337,
      name: "Hardhat",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["http://127.0.0.1:8545"] }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/harmonyOne.js
var require_harmonyOne = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/harmonyOne.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.harmonyOne = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.harmonyOne = (0, defineChain_js_1.defineChain)({
      id: 16666e5,
      name: "Harmony One",
      nativeCurrency: {
        name: "Harmony",
        symbol: "ONE",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://rpc.ankr.com/harmony"] }
      },
      blockExplorers: {
        default: {
          name: "Harmony Explorer",
          url: "https://explorer.harmony.one"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 24185753
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/hashkeyChainTestnet.js
var require_hashkeyChainTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/hashkeyChainTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashkeyTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.hashkeyTestnet = (0, defineChain_js_1.defineChain)({
      id: 133,
      name: "HashKey Chain Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "HashKey EcoPoints",
        symbol: "HSK"
      },
      rpcUrls: {
        default: {
          http: ["https://hashkeychain-testnet.alt.technology"]
        }
      },
      blockExplorers: {
        default: {
          name: "HashKey Chain Explorer",
          url: "https://hashkeychain-testnet-explorer.alt.technology"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/haqqMainnet.js
var require_haqqMainnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/haqqMainnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.haqqMainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.haqqMainnet = (0, defineChain_js_1.defineChain)({
      id: 11235,
      name: "HAQQ Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Islamic Coin",
        symbol: "ISLM"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.eth.haqq.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "HAQQ Explorer",
          url: "https://explorer.haqq.network",
          apiUrl: "https://explorer.haqq.network/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/haqqTestedge2.js
var require_haqqTestedge2 = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/haqqTestedge2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.haqqTestedge2 = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.haqqTestedge2 = (0, defineChain_js_1.defineChain)({
      id: 54211,
      name: "HAQQ Testedge 2",
      nativeCurrency: {
        decimals: 18,
        name: "Islamic Coin",
        symbol: "ISLMT"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.eth.testedge2.haqq.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "HAQQ Explorer",
          url: "https://explorer.testedge2.haqq.network",
          apiUrl: "https://explorer.testedge2.haqq.network/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/hedera.js
var require_hedera = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/hedera.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hedera = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.hedera = (0, defineChain_js_1.defineChain)({
      id: 295,
      name: "Hedera Mainnet",
      network: "hedera-mainnet",
      nativeCurrency: {
        symbol: "HBAR",
        name: "HBAR",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://mainnet.hashio.io/api"]
        }
      },
      blockExplorers: {
        default: {
          name: "Hashscan",
          url: "https://hashscan.io/mainnet"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/hederaTestnet.js
var require_hederaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/hederaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hederaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.hederaTestnet = (0, defineChain_js_1.defineChain)({
      id: 296,
      name: "Hedera Testnet",
      network: "hedera-testnet",
      nativeCurrency: {
        symbol: "HBAR",
        name: "HBAR",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://testnet.hashio.io/api"]
        }
      },
      blockExplorers: {
        default: {
          name: "Hashscan",
          url: "https://hashscan.io/testnet"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/hederaPreviewnet.js
var require_hederaPreviewnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/hederaPreviewnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hederaPreviewnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.hederaPreviewnet = (0, defineChain_js_1.defineChain)({
      id: 297,
      name: "Hedera Previewnet",
      network: "hedera-previewnet",
      nativeCurrency: {
        symbol: "HBAR",
        name: "HBAR",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://previewnet.hashio.io/api"]
        }
      },
      blockExplorers: {
        default: {
          name: "Hashscan",
          url: "https://hashscan.io/previewnet"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/hela.js
var require_hela = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/hela.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hela = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.hela = (0, defineChain_js_1.defineChain)({
      id: 8668,
      name: "Hela Mainnet",
      nativeCurrency: {
        name: "HLUSD",
        symbol: "HLUSD",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://mainnet-rpc.helachain.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Hela explorer",
          url: "https://mainnet-blockexplorer.helachain.com"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/hemiSepolia.js
var require_hemiSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/hemiSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hemiSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.hemiSepolia = (0, defineChain_js_1.defineChain)({
      id: 743111,
      name: "Hemi Sepolia",
      network: "Hemi Sepolia",
      nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://testnet.rpc.hemi.network/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Hemi Sepolia explorer",
          url: "https://testnet.explorer.hemi.xyz"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/holesky.js
var require_holesky = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/holesky.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.holesky = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.holesky = (0, defineChain_js_1.defineChain)({
      id: 17e3,
      name: "Holesky",
      nativeCurrency: { name: "Holesky Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://ethereum-holesky-rpc.publicnode.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://holesky.etherscan.io",
          apiUrl: "https://api-holesky.etherscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 77
        },
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
          blockCreated: 801613
        },
        ensUniversalResolver: {
          address: "0xa6AC935D4971E3CD133b950aE053bECD16fE7f3b",
          blockCreated: 973484
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/hychain.js
var require_hychain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/hychain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hychain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.hychain = (0, defineChain_js_1.defineChain)({
      id: 2911,
      name: "HYCHAIN",
      nativeCurrency: { name: "HYTOPIA", symbol: "TOPIA", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.hychain.com/http"] }
      },
      blockExplorers: {
        default: {
          name: "HYCHAIN Explorer",
          url: "https://explorer.hychain.com"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/hychainTestnet.js
var require_hychainTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/hychainTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hychainTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.hychainTestnet = (0, defineChain_js_1.defineChain)({
      id: 29112,
      name: "HYCHAIN Testnet",
      nativeCurrency: { name: "HYTOPIA", symbol: "TOPIA", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.hychain.com/http"] }
      },
      blockExplorers: {
        default: {
          name: "HYCHAIN Explorer",
          url: "https://testnet-rpc.hychain.com/http"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/immutableZkEvm.js
var require_immutableZkEvm = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/immutableZkEvm.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.immutableZkEvm = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.immutableZkEvm = (0, defineChain_js_1.defineChain)({
      id: 13371,
      name: "Immutable zkEVM",
      nativeCurrency: {
        decimals: 18,
        name: "Immutable Coin",
        symbol: "IMX"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.immutable.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Immutable Explorer",
          url: "https://explorer.immutable.com",
          apiUrl: "https://explorer.immutable.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0x236bdA4589e44e6850f5aC6a74BfCa398a86c6c0",
          blockCreated: 4335972
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/immutableZkEvmTestnet.js
var require_immutableZkEvmTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/immutableZkEvmTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.immutableZkEvmTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.immutableZkEvmTestnet = (0, defineChain_js_1.defineChain)({
      id: 13473,
      name: "Immutable zkEVM Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Immutable Coin",
        symbol: "IMX"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.immutable.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Immutable Testnet Explorer",
          url: "https://explorer.testnet.immutable.com/"
        }
      },
      contracts: {
        multicall3: {
          address: "0x2CC787Ed364600B0222361C4188308Fa8E68bA60",
          blockCreated: 5977391
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/inEVM.js
var require_inEVM = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/inEVM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.inEVM = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.inEVM = (0, defineChain_js_1.defineChain)({
      id: 2525,
      name: "inEVM Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Injective",
        symbol: "INJ"
      },
      rpcUrls: {
        default: { http: ["https://mainnet.rpc.inevm.com/http"] }
      },
      blockExplorers: {
        default: {
          name: "inEVM Explorer",
          url: "https://inevm.calderaexplorer.xyz",
          apiUrl: "https://inevm.calderaexplorer.xyz/api/v2"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 118606
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/iota.js
var require_iota = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/iota.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.iota = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.iota = (0, defineChain_js_1.defineChain)({
      id: 8822,
      name: "IOTA EVM",
      network: "iotaevm",
      nativeCurrency: {
        decimals: 18,
        name: "IOTA",
        symbol: "IOTA"
      },
      rpcUrls: {
        default: {
          http: ["https://json-rpc.evm.iotaledger.net"],
          webSocket: ["wss://ws.json-rpc.evm.iotaledger.net"]
        }
      },
      blockExplorers: {
        default: {
          name: "Explorer",
          url: "https://explorer.evm.iota.org",
          apiUrl: "https://explorer.evm.iota.org/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/iotaTestnet.js
var require_iotaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/iotaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.iotaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.iotaTestnet = (0, defineChain_js_1.defineChain)({
      id: 1075,
      name: "IOTA EVM Testnet",
      network: "iotaevm-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "IOTA",
        symbol: "IOTA"
      },
      rpcUrls: {
        default: {
          http: ["https://json-rpc.evm.testnet.iotaledger.net"],
          webSocket: ["wss://ws.json-rpc.evm.testnet.iotaledger.net"]
        }
      },
      blockExplorers: {
        default: {
          name: "Explorer",
          url: "https://explorer.evm.testnet.iotaledger.net",
          apiUrl: "https://explorer.evm.testnet.iotaledger.net/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/kakarotSepolia.js
var require_kakarotSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/kakarotSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kakarotSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kakarotSepolia = (0, defineChain_js_1.defineChain)({
      id: 1802203764,
      name: "Kakarot Sepolia",
      nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://sepolia-rpc.kakarot.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Kakarot Scan",
          url: "https://sepolia.kakarotscan.org"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/kakarotStarknetSepolia.js
var require_kakarotStarknetSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/kakarotStarknetSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kakarotStarknetSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kakarotStarknetSepolia = (0, defineChain_js_1.defineChain)({
      id: 5424235787602241,
      name: "Kakarot Starknet Sepolia",
      nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://sepolia-rpc.kakarot.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Kakarot Scan",
          url: "https://sepolia.kakarotscan.org"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/kava.js
var require_kava = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/kava.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kava = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kava = (0, defineChain_js_1.defineChain)({
      id: 2222,
      name: "Kava EVM",
      network: "kava-mainnet",
      nativeCurrency: {
        name: "Kava",
        symbol: "KAVA",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://evm.kava.io"] }
      },
      blockExplorers: {
        default: {
          name: "Kava EVM Explorer",
          url: "https://kavascan.com",
          apiUrl: "https://kavascan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 3661165
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/kavaTestnet.js
var require_kavaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/kavaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kavaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kavaTestnet = (0, defineChain_js_1.defineChain)({
      id: 2221,
      name: "Kava EVM Testnet",
      network: "kava-testnet",
      nativeCurrency: {
        name: "Kava",
        symbol: "KAVA",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://evm.testnet.kava.io"] }
      },
      blockExplorers: {
        default: {
          name: "Kava EVM Testnet Explorer",
          url: "https://testnet.kavascan.com/",
          apiUrl: "https://testnet.kavascan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xDf1D724A7166261eEB015418fe8c7679BBEa7fd6",
          blockCreated: 7242179
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/kcc.js
var require_kcc = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/kcc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kcc = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kcc = (0, defineChain_js_1.defineChain)({
      id: 321,
      name: "KCC Mainnet",
      network: "KCC Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "KCS",
        symbol: "KCS"
      },
      rpcUrls: {
        default: {
          http: ["https://kcc-rpc.com"]
        }
      },
      blockExplorers: {
        default: { name: "KCC Explorer", url: "https://explorer.kcc.io" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 11760430
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/kinto.js
var require_kinto = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/kinto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kinto = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kinto = (0, defineChain_js_1.defineChain)({
      id: 7887,
      name: "Kinto Mainnet",
      network: "Kinto Mainnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.kinto.xyz/http"] }
      },
      blockExplorers: {
        default: {
          name: "Kinto Explorer",
          url: "https://explorer.kinto.xyz"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/klaytn.js
var require_klaytn = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/klaytn.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.klaytn = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.klaytn = (0, defineChain_js_1.defineChain)({
      id: 8217,
      name: "Klaytn",
      nativeCurrency: {
        decimals: 18,
        name: "Klaytn",
        symbol: "KLAY"
      },
      rpcUrls: {
        default: { http: ["https://public-en-cypress.klaytn.net"] }
      },
      blockExplorers: {
        default: {
          name: "KlaytnScope",
          url: "https://scope.klaytn.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 96002415
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/klaytnBaobab.js
var require_klaytnBaobab = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/klaytnBaobab.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.klaytnBaobab = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.klaytnBaobab = (0, defineChain_js_1.defineChain)({
      id: 1001,
      name: "Klaytn Baobab Testnet",
      network: "klaytn-baobab",
      nativeCurrency: {
        decimals: 18,
        name: "Baobab Klaytn",
        symbol: "KLAY"
      },
      rpcUrls: {
        default: { http: ["https://public-en-baobab.klaytn.net"] }
      },
      blockExplorers: {
        default: {
          name: "KlaytnScope",
          url: "https://baobab.klaytnscope.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 123390593
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/kaia.js
var require_kaia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/kaia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kaia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kaia = (0, defineChain_js_1.defineChain)({
      id: 8217,
      name: "Kaia",
      nativeCurrency: {
        decimals: 18,
        name: "Kaia",
        symbol: "KAIA"
      },
      rpcUrls: {
        default: { http: ["https://public-en.node.kaia.io"] }
      },
      blockExplorers: {
        default: {
          name: "KaiaScan",
          url: "https://kaiascan.io",
          apiUrl: "https://api-cypress.klaytnscope.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 96002415
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/kairos.js
var require_kairos = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/kairos.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kairos = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kairos = (0, defineChain_js_1.defineChain)({
      id: 1001,
      name: "Kairos Testnet",
      network: "kairos",
      nativeCurrency: {
        decimals: 18,
        name: "Kairos KAIA",
        symbol: "KAIA"
      },
      rpcUrls: {
        default: { http: ["https://public-en-kairos.node.kaia.io"] }
      },
      blockExplorers: {
        default: {
          name: "KaiaScan",
          url: "https://kairos.kaiascan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 123390593
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/koi.js
var require_koi = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/koi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.koi = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.koi = (0, defineChain_js_1.defineChain)({
      id: 701,
      name: "Koi Network",
      nativeCurrency: {
        decimals: 18,
        name: "Koi Network Native Token",
        symbol: "KRING"
      },
      rpcUrls: {
        default: {
          http: ["https://koi-rpc.darwinia.network"],
          webSocket: ["wss://koi-rpc.darwinia.network"]
        }
      },
      blockExplorers: {
        default: { name: "Blockscout", url: "https://koi-scan.darwinia.network" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 180001
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/kroma.js
var require_kroma = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/kroma.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kroma = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kroma = (0, defineChain_js_1.defineChain)({
      id: 255,
      name: "Kroma",
      nativeCurrency: { name: "ETH", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://api.kroma.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Kroma Explorer",
          url: "https://blockscout.kroma.network",
          apiUrl: "https://blockscout.kroma.network/api"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/kromaSepolia.js
var require_kromaSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/kromaSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kromaSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kromaSepolia = (0, defineChain_js_1.defineChain)({
      id: 2358,
      name: "Kroma Sepolia",
      nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://api.sepolia.kroma.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Kroma Sepolia Explorer",
          url: "https://blockscout.sepolia.kroma.network",
          apiUrl: "https://blockscout.sepolia.kroma.network/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/l3x.js
var require_l3x = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/l3x.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.l3x = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.l3x = (0, defineChain_js_1.defineChain)({
      id: 12324,
      name: "L3X Protocol",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-mainnet.l3x.com"],
          webSocket: ["wss://rpc-mainnet.l3x.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "L3X Mainnet Explorer",
          url: "https://explorer.l3x.com",
          apiUrl: "https://explorer.l3x.com/api/v2"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/l3xTestnet.js
var require_l3xTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/l3xTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.l3xTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.l3xTestnet = (0, defineChain_js_1.defineChain)({
      id: 12325,
      name: "L3X Protocol Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-testnet.l3x.com"],
          webSocket: ["wss://rpc-testnet.l3x.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "L3X Testnet Explorer",
          url: "https://explorer-testnet.l3x.com",
          apiUrl: "https://explorer-testnet.l3x.com/api/v2"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/lightlinkPegasus.js
var require_lightlinkPegasus = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/lightlinkPegasus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lightlinkPegasus = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.lightlinkPegasus = (0, defineChain_js_1.defineChain)({
      id: 1891,
      name: "LightLink Pegasus Testnet",
      network: "lightlink-pegasus",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://replicator.pegasus.lightlink.io/rpc/v1"]
        }
      },
      blockExplorers: {
        default: {
          name: "LightLink Pegasus Explorer",
          url: "https://pegasus.lightlink.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/lightlinkPhoenix.js
var require_lightlinkPhoenix = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/lightlinkPhoenix.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lightlinkPhoenix = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.lightlinkPhoenix = (0, defineChain_js_1.defineChain)({
      id: 1890,
      name: "LightLink Phoenix Mainnet",
      network: "lightlink-phoenix",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://replicator.phoenix.lightlink.io/rpc/v1"]
        }
      },
      blockExplorers: {
        default: {
          name: "LightLink Phoenix Explorer",
          url: "https://phoenix.lightlink.io"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/accounts/utils/parseAccount.js
var require_parseAccount = __commonJS({
  "node_modules/viem/_cjs/accounts/utils/parseAccount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAccount = parseAccount;
    function parseAccount(account) {
      if (typeof account === "string")
        return { address: account, type: "json-rpc" };
      return account;
    }
  }
});

// node_modules/viem/_cjs/errors/fee.js
var require_fee = __commonJS({
  "node_modules/viem/_cjs/errors/fee.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MaxFeePerGasTooLowError = exports2.Eip1559FeesNotSupportedError = exports2.BaseFeeScalarError = void 0;
    var formatGwei_js_1 = require_formatGwei();
    var base_js_1 = require_base();
    var BaseFeeScalarError = class extends base_js_1.BaseError {
      constructor() {
        super("`baseFeeMultiplier` must be greater than 1.", {
          name: "BaseFeeScalarError"
        });
      }
    };
    exports2.BaseFeeScalarError = BaseFeeScalarError;
    var Eip1559FeesNotSupportedError = class extends base_js_1.BaseError {
      constructor() {
        super("Chain does not support EIP-1559 fees.", {
          name: "Eip1559FeesNotSupportedError"
        });
      }
    };
    exports2.Eip1559FeesNotSupportedError = Eip1559FeesNotSupportedError;
    var MaxFeePerGasTooLowError = class extends base_js_1.BaseError {
      constructor({ maxPriorityFeePerGas }) {
        super(`\`maxFeePerGas\` cannot be less than the \`maxPriorityFeePerGas\` (${(0, formatGwei_js_1.formatGwei)(maxPriorityFeePerGas)} gwei).`, { name: "MaxFeePerGasTooLowError" });
      }
    };
    exports2.MaxFeePerGasTooLowError = MaxFeePerGasTooLowError;
  }
});

// node_modules/viem/_cjs/utils/getAction.js
var require_getAction = __commonJS({
  "node_modules/viem/_cjs/utils/getAction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAction = getAction;
    function getAction(client, actionFn, name) {
      const action_implicit = client[actionFn.name];
      if (typeof action_implicit === "function")
        return action_implicit;
      const action_explicit = client[name];
      if (typeof action_explicit === "function")
        return action_explicit;
      return (params) => actionFn(client, params);
    }
  }
});

// node_modules/viem/_cjs/errors/block.js
var require_block2 = __commonJS({
  "node_modules/viem/_cjs/errors/block.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BlockNotFoundError = void 0;
    var base_js_1 = require_base();
    var BlockNotFoundError = class extends base_js_1.BaseError {
      constructor({ blockHash, blockNumber }) {
        let identifier = "Block";
        if (blockHash)
          identifier = `Block at hash "${blockHash}"`;
        if (blockNumber)
          identifier = `Block at number "${blockNumber}"`;
        super(`${identifier} could not be found.`, { name: "BlockNotFoundError" });
      }
    };
    exports2.BlockNotFoundError = BlockNotFoundError;
  }
});

// node_modules/viem/_cjs/actions/public/getBlock.js
var require_getBlock = __commonJS({
  "node_modules/viem/_cjs/actions/public/getBlock.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBlock = getBlock;
    var block_js_1 = require_block2();
    var toHex_js_1 = require_toHex();
    var block_js_2 = require_block();
    async function getBlock(client, { blockHash, blockNumber, blockTag: blockTag_, includeTransactions: includeTransactions_ } = {}) {
      const blockTag = blockTag_ ?? "latest";
      const includeTransactions = includeTransactions_ ?? false;
      const blockNumberHex = blockNumber !== void 0 ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      let block = null;
      if (blockHash) {
        block = await client.request({
          method: "eth_getBlockByHash",
          params: [blockHash, includeTransactions]
        }, { dedupe: true });
      } else {
        block = await client.request({
          method: "eth_getBlockByNumber",
          params: [blockNumberHex || blockTag, includeTransactions]
        }, { dedupe: Boolean(blockNumberHex) });
      }
      if (!block)
        throw new block_js_1.BlockNotFoundError({ blockHash, blockNumber });
      const format = client.chain?.formatters?.block?.format || block_js_2.formatBlock;
      return format(block);
    }
  }
});

// node_modules/viem/_cjs/actions/public/getGasPrice.js
var require_getGasPrice = __commonJS({
  "node_modules/viem/_cjs/actions/public/getGasPrice.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getGasPrice = getGasPrice;
    async function getGasPrice(client) {
      const gasPrice = await client.request({
        method: "eth_gasPrice"
      });
      return BigInt(gasPrice);
    }
  }
});

// node_modules/viem/_cjs/actions/public/estimateMaxPriorityFeePerGas.js
var require_estimateMaxPriorityFeePerGas = __commonJS({
  "node_modules/viem/_cjs/actions/public/estimateMaxPriorityFeePerGas.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.estimateMaxPriorityFeePerGas = estimateMaxPriorityFeePerGas;
    exports2.internal_estimateMaxPriorityFeePerGas = internal_estimateMaxPriorityFeePerGas;
    var fee_js_1 = require_fee();
    var fromHex_js_1 = require_fromHex();
    var getAction_js_1 = require_getAction();
    var getBlock_js_1 = require_getBlock();
    var getGasPrice_js_1 = require_getGasPrice();
    async function estimateMaxPriorityFeePerGas(client, args) {
      return internal_estimateMaxPriorityFeePerGas(client, args);
    }
    async function internal_estimateMaxPriorityFeePerGas(client, args) {
      const { block: block_, chain = client.chain, request } = args || {};
      try {
        const maxPriorityFeePerGas = chain?.fees?.maxPriorityFeePerGas ?? chain?.fees?.defaultPriorityFee;
        if (typeof maxPriorityFeePerGas === "function") {
          const block = block_ || await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({});
          const maxPriorityFeePerGas_ = await maxPriorityFeePerGas({
            block,
            client,
            request
          });
          if (maxPriorityFeePerGas_ === null)
            throw new Error();
          return maxPriorityFeePerGas_;
        }
        if (typeof maxPriorityFeePerGas !== "undefined")
          return maxPriorityFeePerGas;
        const maxPriorityFeePerGasHex = await client.request({
          method: "eth_maxPriorityFeePerGas"
        });
        return (0, fromHex_js_1.hexToBigInt)(maxPriorityFeePerGasHex);
      } catch {
        const [block, gasPrice] = await Promise.all([
          block_ ? Promise.resolve(block_) : (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({}),
          (0, getAction_js_1.getAction)(client, getGasPrice_js_1.getGasPrice, "getGasPrice")({})
        ]);
        if (typeof block.baseFeePerGas !== "bigint")
          throw new fee_js_1.Eip1559FeesNotSupportedError();
        const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas;
        if (maxPriorityFeePerGas < 0n)
          return 0n;
        return maxPriorityFeePerGas;
      }
    }
  }
});

// node_modules/viem/_cjs/actions/public/estimateFeesPerGas.js
var require_estimateFeesPerGas = __commonJS({
  "node_modules/viem/_cjs/actions/public/estimateFeesPerGas.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.estimateFeesPerGas = estimateFeesPerGas;
    exports2.internal_estimateFeesPerGas = internal_estimateFeesPerGas;
    var fee_js_1 = require_fee();
    var getAction_js_1 = require_getAction();
    var estimateMaxPriorityFeePerGas_js_1 = require_estimateMaxPriorityFeePerGas();
    var getBlock_js_1 = require_getBlock();
    var getGasPrice_js_1 = require_getGasPrice();
    async function estimateFeesPerGas(client, args) {
      return internal_estimateFeesPerGas(client, args);
    }
    async function internal_estimateFeesPerGas(client, args) {
      const { block: block_, chain = client.chain, request, type = "eip1559" } = args || {};
      const baseFeeMultiplier = await (async () => {
        if (typeof chain?.fees?.baseFeeMultiplier === "function")
          return chain.fees.baseFeeMultiplier({
            block: block_,
            client,
            request
          });
        return chain?.fees?.baseFeeMultiplier ?? 1.2;
      })();
      if (baseFeeMultiplier < 1)
        throw new fee_js_1.BaseFeeScalarError();
      const decimals = baseFeeMultiplier.toString().split(".")[1]?.length ?? 0;
      const denominator = 10 ** decimals;
      const multiply = (base) => base * BigInt(Math.ceil(baseFeeMultiplier * denominator)) / BigInt(denominator);
      const block = block_ ? block_ : await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({});
      if (typeof chain?.fees?.estimateFeesPerGas === "function") {
        const fees = await chain.fees.estimateFeesPerGas({
          block: block_,
          client,
          multiply,
          request,
          type
        });
        if (fees !== null)
          return fees;
      }
      if (type === "eip1559") {
        if (typeof block.baseFeePerGas !== "bigint")
          throw new fee_js_1.Eip1559FeesNotSupportedError();
        const maxPriorityFeePerGas = typeof request?.maxPriorityFeePerGas === "bigint" ? request.maxPriorityFeePerGas : await (0, estimateMaxPriorityFeePerGas_js_1.internal_estimateMaxPriorityFeePerGas)(client, {
          block,
          chain,
          request
        });
        const baseFeePerGas = multiply(block.baseFeePerGas);
        const maxFeePerGas = request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas;
        return {
          maxFeePerGas,
          maxPriorityFeePerGas
        };
      }
      const gasPrice = request?.gasPrice ?? multiply(await (0, getAction_js_1.getAction)(client, getGasPrice_js_1.getGasPrice, "getGasPrice")({}));
      return {
        gasPrice
      };
    }
  }
});

// node_modules/viem/_cjs/accounts/utils/publicKeyToAddress.js
var require_publicKeyToAddress = __commonJS({
  "node_modules/viem/_cjs/accounts/utils/publicKeyToAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.publicKeyToAddress = publicKeyToAddress;
    var getAddress_js_1 = require_getAddress();
    var keccak256_js_1 = require_keccak256();
    function publicKeyToAddress(publicKey) {
      const address = (0, keccak256_js_1.keccak256)(`0x${publicKey.substring(4)}`).substring(26);
      return (0, getAddress_js_1.checksumAddress)(`0x${address}`);
    }
  }
});

// node_modules/@noble/hashes/hmac.js
var require_hmac = __commonJS({
  "node_modules/@noble/hashes/hmac.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hmac = exports2.HMAC = void 0;
    var _assert_js_1 = require_assert();
    var utils_js_1 = require_utils();
    var HMAC = class extends utils_js_1.Hash {
      constructor(hash, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.hash)(hash);
        const key = (0, utils_js_1.toBytes)(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
      }
      update(buf) {
        (0, _assert_js_1.exists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    };
    exports2.HMAC = HMAC;
    var hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
    exports2.hmac = hmac;
    exports2.hmac.create = (hash, key) => new HMAC(hash, key);
  }
});

// node_modules/@noble/curves/abstract/utils.js
var require_utils4 = __commonJS({
  "node_modules/@noble/curves/abstract/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.notImplemented = exports2.bitMask = void 0;
    exports2.isBytes = isBytes;
    exports2.abytes = abytes;
    exports2.abool = abool;
    exports2.bytesToHex = bytesToHex;
    exports2.numberToHexUnpadded = numberToHexUnpadded;
    exports2.hexToNumber = hexToNumber;
    exports2.hexToBytes = hexToBytes;
    exports2.bytesToNumberBE = bytesToNumberBE;
    exports2.bytesToNumberLE = bytesToNumberLE;
    exports2.numberToBytesBE = numberToBytesBE;
    exports2.numberToBytesLE = numberToBytesLE;
    exports2.numberToVarBytesBE = numberToVarBytesBE;
    exports2.ensureBytes = ensureBytes;
    exports2.concatBytes = concatBytes;
    exports2.equalBytes = equalBytes;
    exports2.utf8ToBytes = utf8ToBytes;
    exports2.inRange = inRange;
    exports2.aInRange = aInRange;
    exports2.bitLen = bitLen;
    exports2.bitGet = bitGet;
    exports2.bitSet = bitSet;
    exports2.createHmacDrbg = createHmacDrbg;
    exports2.validateObject = validateObject;
    exports2.memoized = memoized;
    var _0n = /* @__PURE__ */ BigInt(0);
    var _1n = /* @__PURE__ */ BigInt(1);
    var _2n = /* @__PURE__ */ BigInt(2);
    function isBytes(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    function abytes(item) {
      if (!isBytes(item))
        throw new Error("Uint8Array expected");
    }
    function abool(title, value) {
      if (typeof value !== "boolean")
        throw new Error(`${title} must be valid boolean, got "${value}".`);
    }
    var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      abytes(bytes);
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    function numberToHexUnpadded(num) {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
    }
    function hexToNumber(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      return BigInt(hex === "" ? "0" : `0x${hex}`);
    }
    var asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
    function asciiToBase16(char) {
      if (char >= asciis._0 && char <= asciis._9)
        return char - asciis._0;
      if (char >= asciis._A && char <= asciis._F)
        return char - (asciis._A - 10);
      if (char >= asciis._a && char <= asciis._f)
        return char - (asciis._a - 10);
      return;
    }
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const hl = hex.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + hl);
      const array = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex[hi] + hex[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
      }
      return array;
    }
    function bytesToNumberBE(bytes) {
      return hexToNumber(bytesToHex(bytes));
    }
    function bytesToNumberLE(bytes) {
      abytes(bytes);
      return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
    }
    function numberToBytesBE(n, len) {
      return hexToBytes(n.toString(16).padStart(len * 2, "0"));
    }
    function numberToBytesLE(n, len) {
      return numberToBytesBE(n, len).reverse();
    }
    function numberToVarBytesBE(n) {
      return hexToBytes(numberToHexUnpadded(n));
    }
    function ensureBytes(title, hex, expectedLength) {
      let res;
      if (typeof hex === "string") {
        try {
          res = hexToBytes(hex);
        } catch (e) {
          throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
        }
      } else if (isBytes(hex)) {
        res = Uint8Array.from(hex);
      } else {
        throw new Error(`${title} must be hex string or Uint8Array`);
      }
      const len = res.length;
      if (typeof expectedLength === "number" && len !== expectedLength)
        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
      return res;
    }
    function concatBytes(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    function equalBytes(a, b) {
      if (a.length !== b.length)
        return false;
      let diff = 0;
      for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b[i];
      return diff === 0;
    }
    function utf8ToBytes(str2) {
      if (typeof str2 !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str2}`);
      return new Uint8Array(new TextEncoder().encode(str2));
    }
    var isPosBig = (n) => typeof n === "bigint" && _0n <= n;
    function inRange(n, min, max) {
      return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;
    }
    function aInRange(title, n, min, max) {
      if (!inRange(n, min, max))
        throw new Error(`expected valid ${title}: ${min} <= n < ${max}, got ${typeof n} ${n}`);
    }
    function bitLen(n) {
      let len;
      for (len = 0; n > _0n; n >>= _1n, len += 1)
        ;
      return len;
    }
    function bitGet(n, pos) {
      return n >> BigInt(pos) & _1n;
    }
    function bitSet(n, pos, value) {
      return n | (value ? _1n : _0n) << BigInt(pos);
    }
    var bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;
    exports2.bitMask = bitMask;
    var u8n = (data) => new Uint8Array(data);
    var u8fr = (arr) => Uint8Array.from(arr);
    function createHmacDrbg(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== "number" || hashLen < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      if (typeof hmacFn !== "function")
        throw new Error("hmacFn must be a function");
      let v = u8n(hashLen);
      let k = u8n(hashLen);
      let i = 0;
      const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
      };
      const h = (...b) => hmacFn(k, v, ...b);
      const reseed = (seed = u8n()) => {
        k = h(u8fr([0]), seed);
        v = h();
        if (seed.length === 0)
          return;
        k = h(u8fr([1]), seed);
        v = h();
      };
      const gen = () => {
        if (i++ >= 1e3)
          throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while (len < qByteLen) {
          v = h();
          const sl = v.slice();
          out.push(sl);
          len += v.length;
        }
        return concatBytes(...out);
      };
      const genUntil = (seed, pred) => {
        reset();
        reseed(seed);
        let res = void 0;
        while (!(res = pred(gen())))
          reseed();
        reset();
        return res;
      };
      return genUntil;
    }
    var validatorFns = {
      bigint: (val) => typeof val === "bigint",
      function: (val) => typeof val === "function",
      boolean: (val) => typeof val === "boolean",
      string: (val) => typeof val === "string",
      stringOrUint8Array: (val) => typeof val === "string" || isBytes(val),
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object) => object.Fp.isValid(val),
      hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
    };
    function validateObject(object, validators, optValidators = {}) {
      const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns[type];
        if (typeof checkVal !== "function")
          throw new Error(`Invalid validator "${type}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === void 0)
          return;
        if (!checkVal(val, object)) {
          throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
        }
      };
      for (const [fieldName, type] of Object.entries(validators))
        checkField(fieldName, type, false);
      for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
      return object;
    }
    var notImplemented = () => {
      throw new Error("not implemented");
    };
    exports2.notImplemented = notImplemented;
    function memoized(fn) {
      const map = /* @__PURE__ */ new WeakMap();
      return (arg, ...args) => {
        const val = map.get(arg);
        if (val !== void 0)
          return val;
        const computed = fn(arg, ...args);
        map.set(arg, computed);
        return computed;
      };
    }
  }
});

// node_modules/@noble/curves/abstract/modular.js
var require_modular = __commonJS({
  "node_modules/@noble/curves/abstract/modular.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isNegativeLE = void 0;
    exports2.mod = mod;
    exports2.pow = pow;
    exports2.pow2 = pow2;
    exports2.invert = invert;
    exports2.tonelliShanks = tonelliShanks;
    exports2.FpSqrt = FpSqrt;
    exports2.validateField = validateField;
    exports2.FpPow = FpPow;
    exports2.FpInvertBatch = FpInvertBatch;
    exports2.FpDiv = FpDiv;
    exports2.FpLegendre = FpLegendre;
    exports2.FpIsSquare = FpIsSquare;
    exports2.nLength = nLength;
    exports2.Field = Field;
    exports2.FpSqrtOdd = FpSqrtOdd;
    exports2.FpSqrtEven = FpSqrtEven;
    exports2.hashToPrivateScalar = hashToPrivateScalar;
    exports2.getFieldBytesLength = getFieldBytesLength;
    exports2.getMinHashLength = getMinHashLength;
    exports2.mapHashToField = mapHashToField;
    var utils_js_1 = require_utils4();
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    var _5n = BigInt(5);
    var _8n = BigInt(8);
    var _9n = BigInt(9);
    var _16n = BigInt(16);
    function mod(a, b) {
      const result = a % b;
      return result >= _0n ? result : b + result;
    }
    function pow(num, power, modulo) {
      if (modulo <= _0n || power < _0n)
        throw new Error("Expected power/modulo > 0");
      if (modulo === _1n)
        return _0n;
      let res = _1n;
      while (power > _0n) {
        if (power & _1n)
          res = res * num % modulo;
        num = num * num % modulo;
        power >>= _1n;
      }
      return res;
    }
    function pow2(x, power, modulo) {
      let res = x;
      while (power-- > _0n) {
        res *= res;
        res %= modulo;
      }
      return res;
    }
    function invert(number, modulo) {
      if (number === _0n || modulo <= _0n) {
        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
      }
      let a = mod(number, modulo);
      let b = modulo;
      let x = _0n, y = _1n, u = _1n, v = _0n;
      while (a !== _0n) {
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        b = a, a = r, x = u, y = v, u = m, v = n;
      }
      const gcd = b;
      if (gcd !== _1n)
        throw new Error("invert: does not exist");
      return mod(x, modulo);
    }
    function tonelliShanks(P) {
      const legendreC = (P - _1n) / _2n;
      let Q, S, Z;
      for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)
        ;
      for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)
        ;
      if (S === 1) {
        const p1div4 = (P + _1n) / _4n;
        return function tonelliFast(Fp, n) {
          const root = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      const Q1div2 = (Q + _1n) / _2n;
      return function tonelliSlow(Fp, n) {
        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
          throw new Error("Cannot find square root");
        let r = S;
        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q);
        let x = Fp.pow(n, Q1div2);
        let b = Fp.pow(n, Q);
        while (!Fp.eql(b, Fp.ONE)) {
          if (Fp.eql(b, Fp.ZERO))
            return Fp.ZERO;
          let m = 1;
          for (let t2 = Fp.sqr(b); m < r; m++) {
            if (Fp.eql(t2, Fp.ONE))
              break;
            t2 = Fp.sqr(t2);
          }
          const ge = Fp.pow(g, _1n << BigInt(r - m - 1));
          g = Fp.sqr(ge);
          x = Fp.mul(x, ge);
          b = Fp.mul(b, g);
          r = m;
        }
        return x;
      };
    }
    function FpSqrt(P) {
      if (P % _4n === _3n) {
        const p1div4 = (P + _1n) / _4n;
        return function sqrt3mod4(Fp, n) {
          const root = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _8n === _5n) {
        const c1 = (P - _5n) / _8n;
        return function sqrt5mod8(Fp, n) {
          const n2 = Fp.mul(n, _2n);
          const v = Fp.pow(n2, c1);
          const nv = Fp.mul(n, v);
          const i = Fp.mul(Fp.mul(nv, _2n), v);
          const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _16n === _9n) {
      }
      return tonelliShanks(P);
    }
    var isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;
    exports2.isNegativeLE = isNegativeLE;
    var FIELD_FIELDS = [
      "create",
      "isValid",
      "is0",
      "neg",
      "inv",
      "sqrt",
      "sqr",
      "eql",
      "add",
      "sub",
      "mul",
      "pow",
      "div",
      "addN",
      "subN",
      "mulN",
      "sqrN"
    ];
    function validateField(field) {
      const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
      };
      const opts = FIELD_FIELDS.reduce((map, val) => {
        map[val] = "function";
        return map;
      }, initial);
      return (0, utils_js_1.validateObject)(field, opts);
    }
    function FpPow(f, num, power) {
      if (power < _0n)
        throw new Error("Expected power > 0");
      if (power === _0n)
        return f.ONE;
      if (power === _1n)
        return num;
      let p = f.ONE;
      let d = num;
      while (power > _0n) {
        if (power & _1n)
          p = f.mul(p, d);
        d = f.sqr(d);
        power >>= _1n;
      }
      return p;
    }
    function FpInvertBatch(f, nums) {
      const tmp = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num, i) => {
        if (f.is0(num))
          return acc;
        tmp[i] = acc;
        return f.mul(acc, num);
      }, f.ONE);
      const inverted = f.inv(lastMultiplied);
      nums.reduceRight((acc, num, i) => {
        if (f.is0(num))
          return acc;
        tmp[i] = f.mul(acc, tmp[i]);
        return f.mul(acc, num);
      }, inverted);
      return tmp;
    }
    function FpDiv(f, lhs, rhs) {
      return f.mul(lhs, typeof rhs === "bigint" ? invert(rhs, f.ORDER) : f.inv(rhs));
    }
    function FpLegendre(order) {
      const legendreConst = (order - _1n) / _2n;
      return (f, x) => f.pow(x, legendreConst);
    }
    function FpIsSquare(f) {
      const legendre = FpLegendre(f.ORDER);
      return (x) => {
        const p = legendre(f, x);
        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
      };
    }
    function nLength(n, nBitLength) {
      const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
    }
    function Field(ORDER, bitLen, isLE = false, redef = {}) {
      if (ORDER <= _0n)
        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
      const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
      if (BYTES > 2048)
        throw new Error("Field lengths over 2048 bytes are not supported");
      const sqrtP = FpSqrt(ORDER);
      const f = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: (0, utils_js_1.bitMask)(BITS),
        ZERO: _0n,
        ONE: _1n,
        create: (num) => mod(num, ORDER),
        isValid: (num) => {
          if (typeof num !== "bigint")
            throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
          return _0n <= num && num < ORDER;
        },
        is0: (num) => num === _0n,
        isOdd: (num) => (num & _1n) === _1n,
        neg: (num) => mod(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod(num * num, ORDER),
        add: (lhs, rhs) => mod(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
        pow: (num, power) => FpPow(f, num, power),
        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert(num, ORDER),
        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
        invertBatch: (lst) => FpInvertBatch(f, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b, c) => c ? b : a,
        toBytes: (num) => isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES),
        fromBytes: (bytes) => {
          if (bytes.length !== BYTES)
            throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
          return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);
        }
      });
      return Object.freeze(f);
    }
    function FpSqrtOdd(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp.sqrt(elm);
      return Fp.isOdd(root) ? root : Fp.neg(root);
    }
    function FpSqrtEven(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp.sqrt(elm);
      return Fp.isOdd(root) ? Fp.neg(root) : root;
    }
    function hashToPrivateScalar(hash, groupOrder, isLE = false) {
      hash = (0, utils_js_1.ensureBytes)("privateHash", hash);
      const hashLen = hash.length;
      const minLen = nLength(groupOrder).nByteLength + 8;
      if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
      const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);
      return mod(num, groupOrder - _1n) + _1n;
    }
    function getFieldBytesLength(fieldOrder) {
      if (typeof fieldOrder !== "bigint")
        throw new Error("field order must be bigint");
      const bitLength = fieldOrder.toString(2).length;
      return Math.ceil(bitLength / 8);
    }
    function getMinHashLength(fieldOrder) {
      const length = getFieldBytesLength(fieldOrder);
      return length + Math.ceil(length / 2);
    }
    function mapHashToField(key, fieldOrder, isLE = false) {
      const len = key.length;
      const fieldLen = getFieldBytesLength(fieldOrder);
      const minLen = getMinHashLength(fieldOrder);
      if (len < 16 || len < minLen || len > 1024)
        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
      const num = isLE ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);
      const reduced = mod(num, fieldOrder - _1n) + _1n;
      return isLE ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
    }
  }
});

// node_modules/@noble/curves/abstract/curve.js
var require_curve = __commonJS({
  "node_modules/@noble/curves/abstract/curve.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wNAF = wNAF;
    exports2.pippenger = pippenger;
    exports2.validateBasic = validateBasic;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils4();
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var pointPrecomputes = /* @__PURE__ */ new WeakMap();
    var pointWindowSizes = /* @__PURE__ */ new WeakMap();
    function wNAF(c, bits) {
      const constTimeNegate = (condition, item) => {
        const neg = item.negate();
        return condition ? neg : item;
      };
      const validateW = (W) => {
        if (!Number.isSafeInteger(W) || W <= 0 || W > bits)
          throw new Error(`Wrong window size=${W}, should be [1..${bits}]`);
      };
      const opts = (W) => {
        validateW(W);
        const windows = Math.ceil(bits / W) + 1;
        const windowSize = 2 ** (W - 1);
        return { windows, windowSize };
      };
      return {
        constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder(elm, n) {
          let p = c.ZERO;
          let d = elm;
          while (n > _0n) {
            if (n & _1n)
              p = p.add(d);
            d = d.double();
            n >>= _1n;
          }
          return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W) {
          const { windows, windowSize } = opts(W);
          const points = [];
          let p = elm;
          let base = p;
          for (let window2 = 0; window2 < windows; window2++) {
            base = p;
            points.push(base);
            for (let i = 1; i < windowSize; i++) {
              base = base.add(p);
              points.push(base);
            }
            p = base.double();
          }
          return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W, precomputes, n) {
          const { windows, windowSize } = opts(W);
          let p = c.ZERO;
          let f = c.BASE;
          const mask = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window2 = 0; window2 < windows; window2++) {
            const offset = window2 * windowSize;
            let wbits = Number(n & mask);
            n >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n += _1n;
            }
            const offset1 = offset;
            const offset2 = offset + Math.abs(wbits) - 1;
            const cond1 = window2 % 2 !== 0;
            const cond2 = wbits < 0;
            if (wbits === 0) {
              f = f.add(constTimeNegate(cond1, precomputes[offset1]));
            } else {
              p = p.add(constTimeNegate(cond2, precomputes[offset2]));
            }
          }
          return { p, f };
        },
        wNAFCached(P, n, transform) {
          const W = pointWindowSizes.get(P) || 1;
          let comp = pointPrecomputes.get(P);
          if (!comp) {
            comp = this.precomputeWindow(P, W);
            if (W !== 1)
              pointPrecomputes.set(P, transform(comp));
          }
          return this.wNAF(W, comp, n);
        },
        // We calculate precomputes for elliptic curve point multiplication
        // using windowed method. This specifies window size and
        // stores precomputed values. Usually only base point would be precomputed.
        setWindowSize(P, W) {
          validateW(W);
          pointWindowSizes.set(P, W);
          pointPrecomputes.delete(P);
        }
      };
    }
    function pippenger(c, field, points, scalars) {
      if (!Array.isArray(points) || !Array.isArray(scalars) || scalars.length !== points.length)
        throw new Error("arrays of points and scalars must have equal length");
      scalars.forEach((s, i) => {
        if (!field.isValid(s))
          throw new Error(`wrong scalar at index ${i}`);
      });
      points.forEach((p, i) => {
        if (!(p instanceof c))
          throw new Error(`wrong point at index ${i}`);
      });
      const wbits = (0, utils_js_1.bitLen)(BigInt(points.length));
      const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1;
      const MASK = (1 << windowSize) - 1;
      const buckets = new Array(MASK + 1).fill(c.ZERO);
      const lastBits = Math.floor((field.BITS - 1) / windowSize) * windowSize;
      let sum = c.ZERO;
      for (let i = lastBits; i >= 0; i -= windowSize) {
        buckets.fill(c.ZERO);
        for (let j = 0; j < scalars.length; j++) {
          const scalar = scalars[j];
          const wbits2 = Number(scalar >> BigInt(i) & BigInt(MASK));
          buckets[wbits2] = buckets[wbits2].add(points[j]);
        }
        let resI = c.ZERO;
        for (let j = buckets.length - 1, sumI = c.ZERO; j > 0; j--) {
          sumI = sumI.add(buckets[j]);
          resI = resI.add(sumI);
        }
        sum = sum.add(resI);
        if (i !== 0)
          for (let j = 0; j < windowSize; j++)
            sum = sum.double();
      }
      return sum;
    }
    function validateBasic(curve) {
      (0, modular_js_1.validateField)(curve.Fp);
      (0, utils_js_1.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
      }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
      });
      return Object.freeze({
        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER }
      });
    }
  }
});

// node_modules/@noble/curves/abstract/weierstrass.js
var require_weierstrass = __commonJS({
  "node_modules/@noble/curves/abstract/weierstrass.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DER = void 0;
    exports2.weierstrassPoints = weierstrassPoints;
    exports2.weierstrass = weierstrass;
    exports2.SWUFpSqrtRatio = SWUFpSqrtRatio;
    exports2.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
    var curve_js_1 = require_curve();
    var mod = require_modular();
    var ut = require_utils4();
    var utils_js_1 = require_utils4();
    function validateSigVerOpts(opts) {
      if (opts.lowS !== void 0)
        (0, utils_js_1.abool)("lowS", opts.lowS);
      if (opts.prehash !== void 0)
        (0, utils_js_1.abool)("prehash", opts.prehash);
    }
    function validatePointOpts(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp, a } = opts;
      if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) {
          throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    var { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
    exports2.DER = {
      // asn.1 DER encoding utils
      Err: class DERErr extends Error {
        constructor(m = "") {
          super(m);
        }
      },
      // Basic building block is TLV (Tag-Length-Value)
      _tlv: {
        encode: (tag, data) => {
          const { Err: E } = exports2.DER;
          if (tag < 0 || tag > 256)
            throw new E("tlv.encode: wrong tag");
          if (data.length & 1)
            throw new E("tlv.encode: unpadded data");
          const dataLen = data.length / 2;
          const len = ut.numberToHexUnpadded(dataLen);
          if (len.length / 2 & 128)
            throw new E("tlv.encode: long form length too big");
          const lenLen = dataLen > 127 ? ut.numberToHexUnpadded(len.length / 2 | 128) : "";
          return `${ut.numberToHexUnpadded(tag)}${lenLen}${len}${data}`;
        },
        // v - value, l - left bytes (unparsed)
        decode(tag, data) {
          const { Err: E } = exports2.DER;
          let pos = 0;
          if (tag < 0 || tag > 256)
            throw new E("tlv.encode: wrong tag");
          if (data.length < 2 || data[pos++] !== tag)
            throw new E("tlv.decode: wrong tlv");
          const first = data[pos++];
          const isLong = !!(first & 128);
          let length = 0;
          if (!isLong)
            length = first;
          else {
            const lenLen = first & 127;
            if (!lenLen)
              throw new E("tlv.decode(long): indefinite length not supported");
            if (lenLen > 4)
              throw new E("tlv.decode(long): byte length is too big");
            const lengthBytes = data.subarray(pos, pos + lenLen);
            if (lengthBytes.length !== lenLen)
              throw new E("tlv.decode: length bytes not complete");
            if (lengthBytes[0] === 0)
              throw new E("tlv.decode(long): zero leftmost byte");
            for (const b of lengthBytes)
              length = length << 8 | b;
            pos += lenLen;
            if (length < 128)
              throw new E("tlv.decode(long): not minimal encoding");
          }
          const v = data.subarray(pos, pos + length);
          if (v.length !== length)
            throw new E("tlv.decode: wrong value length");
          return { v, l: data.subarray(pos + length) };
        }
      },
      // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
      // since we always use positive integers here. It must always be empty:
      // - add zero byte if exists
      // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
      _int: {
        encode(num) {
          const { Err: E } = exports2.DER;
          if (num < _0n)
            throw new E("integer: negative integers are not allowed");
          let hex = ut.numberToHexUnpadded(num);
          if (Number.parseInt(hex[0], 16) & 8)
            hex = "00" + hex;
          if (hex.length & 1)
            throw new E("unexpected assertion");
          return hex;
        },
        decode(data) {
          const { Err: E } = exports2.DER;
          if (data[0] & 128)
            throw new E("Invalid signature integer: negative");
          if (data[0] === 0 && !(data[1] & 128))
            throw new E("Invalid signature integer: unnecessary leading zero");
          return b2n(data);
        }
      },
      toSig(hex) {
        const { Err: E, _int: int, _tlv: tlv } = exports2.DER;
        const data = typeof hex === "string" ? h2b(hex) : hex;
        ut.abytes(data);
        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);
        if (seqLeftBytes.length)
          throw new E("Invalid signature: left bytes after parsing");
        const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);
        const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);
        if (sLeftBytes.length)
          throw new E("Invalid signature: left bytes after parsing");
        return { r: int.decode(rBytes), s: int.decode(sBytes) };
      },
      hexFromSig(sig) {
        const { _tlv: tlv, _int: int } = exports2.DER;
        const seq = `${tlv.encode(2, int.encode(sig.r))}${tlv.encode(2, int.encode(sig.s))}`;
        return tlv.encode(48, seq);
      }
    };
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    function weierstrassPoints(opts) {
      const CURVE = validatePointOpts(opts);
      const { Fp } = CURVE;
      const Fn = mod.Field(CURVE.n, CURVE.nBitLength);
      const toBytes = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return ut.concatBytes(Uint8Array.from([4]), Fp.toBytes(a.x), Fp.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes) => {
        const tail = bytes.subarray(1);
        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x, y };
      });
      function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x);
        const x3 = Fp.mul(x2, x);
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b);
      }
      if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num) {
        return ut.inRange(num, _1n, CURVE.n);
      }
      function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;
        if (lengths && typeof key !== "bigint") {
          if (ut.isBytes(key))
            key = ut.bytesToHex(key);
          if (typeof key !== "string" || !lengths.includes(key.length))
            throw new Error("Invalid key");
          key = key.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
          num = typeof key === "bigint" ? key : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
          throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey)
          num = mod.mod(num, N);
        ut.aInRange("private key", num, _1n, N);
        return num;
      }
      function assertPrjPoint(other) {
        if (!(other instanceof Point))
          throw new Error("ProjectivePoint expected");
      }
      const toAffineMemo = (0, utils_js_1.memoized)((p, iz) => {
        const { px: x, py: y, pz: z } = p;
        if (Fp.eql(z, Fp.ONE))
          return { x, y };
        const is0 = p.is0();
        if (iz == null)
          iz = is0 ? Fp.ONE : Fp.inv(z);
        const ax = Fp.mul(x, iz);
        const ay = Fp.mul(y, iz);
        const zz = Fp.mul(z, iz);
        if (is0)
          return { x: Fp.ZERO, y: Fp.ZERO };
        if (!Fp.eql(zz, Fp.ONE))
          throw new Error("invZ was invalid");
        return { x: ax, y: ay };
      });
      const assertValidMemo = (0, utils_js_1.memoized)((p) => {
        if (p.is0()) {
          if (CURVE.allowInfinityPoint && !Fp.is0(p.py))
            return;
          throw new Error("bad point: ZERO");
        }
        const { x, y } = p.toAffine();
        if (!Fp.isValid(x) || !Fp.isValid(y))
          throw new Error("bad point: x or y not FE");
        const left = Fp.sqr(y);
        const right = weierstrassEquation(x);
        if (!Fp.eql(left, right))
          throw new Error("bad point: equation left != right");
        if (!p.isTorsionFree())
          throw new Error("bad point: not in prime-order subgroup");
        return true;
      });
      class Point {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp.isValid(pz))
            throw new Error("z required");
          Object.freeze(this);
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point)
            throw new Error("projective point not allowed");
          const is0 = (i) => Fp.eql(i, Fp.ZERO);
          if (is0(x) && is0(y))
            return Point.ZERO;
          return new Point(x, y, Fp.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = Fp.invertBatch(points.map((p) => p.pz));
          return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
          const P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)("pointHex", hex)));
          P.assertValidity();
          return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // Multiscalar Multiplication
        static msm(points, scalars) {
          return (0, curve_js_1.pippenger)(Point, Fn, points, scalars);
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          wnaf.setWindowSize(this, windowSize);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          assertValidMemo(this);
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp.isOdd)
            return !Fp.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
          const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b } = CURVE;
          const b3 = Fp.mul(b, _3n);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          let t0 = Fp.mul(X1, X1);
          let t1 = Fp.mul(Y1, Y1);
          let t2 = Fp.mul(Z1, Z1);
          let t3 = Fp.mul(X1, Y1);
          t3 = Fp.add(t3, t3);
          Z3 = Fp.mul(X1, Z1);
          Z3 = Fp.add(Z3, Z3);
          X3 = Fp.mul(a, Z3);
          Y3 = Fp.mul(b3, t2);
          Y3 = Fp.add(X3, Y3);
          X3 = Fp.sub(t1, Y3);
          Y3 = Fp.add(t1, Y3);
          Y3 = Fp.mul(X3, Y3);
          X3 = Fp.mul(t3, X3);
          Z3 = Fp.mul(b3, Z3);
          t2 = Fp.mul(a, t2);
          t3 = Fp.sub(t0, t2);
          t3 = Fp.mul(a, t3);
          t3 = Fp.add(t3, Z3);
          Z3 = Fp.add(t0, t0);
          t0 = Fp.add(Z3, t0);
          t0 = Fp.add(t0, t2);
          t0 = Fp.mul(t0, t3);
          Y3 = Fp.add(Y3, t0);
          t2 = Fp.mul(Y1, Z1);
          t2 = Fp.add(t2, t2);
          t0 = Fp.mul(t2, t3);
          X3 = Fp.sub(X3, t0);
          Z3 = Fp.mul(t2, t1);
          Z3 = Fp.add(Z3, Z3);
          Z3 = Fp.add(Z3, Z3);
          return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          const a = CURVE.a;
          const b3 = Fp.mul(CURVE.b, _3n);
          let t0 = Fp.mul(X1, X2);
          let t1 = Fp.mul(Y1, Y2);
          let t2 = Fp.mul(Z1, Z2);
          let t3 = Fp.add(X1, Y1);
          let t4 = Fp.add(X2, Y2);
          t3 = Fp.mul(t3, t4);
          t4 = Fp.add(t0, t1);
          t3 = Fp.sub(t3, t4);
          t4 = Fp.add(X1, Z1);
          let t5 = Fp.add(X2, Z2);
          t4 = Fp.mul(t4, t5);
          t5 = Fp.add(t0, t2);
          t4 = Fp.sub(t4, t5);
          t5 = Fp.add(Y1, Z1);
          X3 = Fp.add(Y2, Z2);
          t5 = Fp.mul(t5, X3);
          X3 = Fp.add(t1, t2);
          t5 = Fp.sub(t5, X3);
          Z3 = Fp.mul(a, t4);
          X3 = Fp.mul(b3, t2);
          Z3 = Fp.add(X3, Z3);
          X3 = Fp.sub(t1, Z3);
          Z3 = Fp.add(t1, Z3);
          Y3 = Fp.mul(X3, Z3);
          t1 = Fp.add(t0, t0);
          t1 = Fp.add(t1, t0);
          t2 = Fp.mul(a, t2);
          t4 = Fp.mul(b3, t4);
          t1 = Fp.add(t1, t2);
          t2 = Fp.sub(t0, t2);
          t2 = Fp.mul(a, t2);
          t4 = Fp.add(t4, t2);
          t0 = Fp.mul(t1, t4);
          Y3 = Fp.add(Y3, t0);
          t0 = Fp.mul(t5, t4);
          X3 = Fp.mul(t3, X3);
          X3 = Fp.sub(X3, t0);
          t0 = Fp.mul(t3, t1);
          Z3 = Fp.mul(t5, Z3);
          Z3 = Fp.add(Z3, t0);
          return new Point(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point.ZERO);
        }
        wNAF(n) {
          return wnaf.wNAFCached(this, n, Point.normalizeZ);
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(sc) {
          ut.aInRange("scalar", sc, _0n, CURVE.n);
          const I = Point.ZERO;
          if (sc === _0n)
            return I;
          if (sc === _1n)
            return this;
          const { endo } = CURVE;
          if (!endo)
            return wnaf.unsafeLadder(this, sc);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);
          let k1p = I;
          let k2p = I;
          let d = this;
          while (k1 > _0n || k2 > _0n) {
            if (k1 & _1n)
              k1p = k1p.add(d);
            if (k2 & _1n)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n;
            k2 >>= _1n;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          const { endo, n: N } = CURVE;
          ut.aInRange("scalar", scalar, _1n, N);
          let point, fake;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f } = this.wNAF(scalar);
            point = p;
            fake = f;
          }
          return Point.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b) {
          const G = Point.BASE;
          const mul = (P, a2) => a2 === _0n || a2 === _1n || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
          const sum = mul(this, a).add(mul(Q, b));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          return toAffineMemo(this, iz);
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n)
            return this;
          if (clearCofactor)
            return clearCofactor(Point, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          (0, utils_js_1.abool)("isCompressed", isCompressed);
          this.assertValidity();
          return toBytes(Point, this, isCompressed);
        }
        toHex(isCompressed = true) {
          (0, utils_js_1.abool)("isCompressed", isCompressed);
          return ut.bytesToHex(this.toRawBytes(isCompressed));
        }
      }
      Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
      Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    function validateOpts(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { Fp, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp.BYTES + 1;
      const uncompressedLen = 2 * Fp.BYTES + 1;
      function modN(a) {
        return mod.mod(a, CURVE_ORDER);
      }
      function invN(a) {
        return mod.invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x = Fp.toBytes(a.x);
          const cat = ut.concatBytes;
          (0, utils_js_1.abool)("isCompressed", isCompressed);
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
          } else {
            return cat(Uint8Array.from([4]), x, Fp.toBytes(a.y));
          }
        },
        fromBytes(bytes) {
          const len = bytes.length;
          const head = bytes[0];
          const tail = bytes.subarray(1);
          if (len === compressedLen && (head === 2 || head === 3)) {
            const x = ut.bytesToNumberBE(tail);
            if (!ut.inRange(x, _1n, Fp.ORDER))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x);
            let y;
            try {
              y = Fp.sqrt(y2);
            } catch (sqrtError) {
              const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
              throw new Error("Point is not on curve" + suffix);
            }
            const isYOdd = (y & _1n) === _1n;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp.neg(y);
            return { x, y };
          } else if (len === uncompressedLen && head === 4) {
            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return { x, y };
          } else {
            throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
          }
        }
      });
      const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number) {
        const HALF = CURVE_ORDER >> _1n;
        return number > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
      }
      const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));
      class Signature {
        constructor(r, s, recovery) {
          this.r = r;
          this.s = s;
          this.recovery = recovery;
          this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
          const l = CURVE.nByteLength;
          hex = (0, utils_js_1.ensureBytes)("compactSignature", hex, l * 2);
          return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
          const { r, s } = exports2.DER.toSig((0, utils_js_1.ensureBytes)("DER", hex));
          return new Signature(r, s);
        }
        assertValidity() {
          ut.aInRange("r", this.r, _1n, CURVE_ORDER);
          ut.aInRange("s", this.s, _1n, CURVE_ORDER);
        }
        addRecoveryBit(recovery) {
          return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r, s, recovery: rec } = this;
          const h = bits2int_modN((0, utils_js_1.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
          if (radj >= Fp.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R = Point.fromHex(prefix + numToNByteStr(radj));
          const ir = invN(radj);
          const u1 = modN(-h * ir);
          const u2 = modN(s * ir);
          const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q)
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return ut.hexToBytes(this.toDERHex());
        }
        toDERHex() {
          return exports2.DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return ut.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = mod.getMinHashLength(CURVE.n);
          return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey(privateKey, isCompressed = true) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = ut.isBytes(item);
        const str2 = typeof item === "string";
        const len = (arr || str2) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str2)
          return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b = Point.fromHex(publicB);
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes) {
        const num = ut.bytesToNumberBE(bytes);
        const delta = bytes.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num >> BigInt(delta) : num;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
        return modN(bits2int(bytes));
      };
      const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
      function int2octets(num) {
        ut.aInRange(`num < 2^${CURVE.nBitLength}`, num, _0n, ORDER_MASK);
        return ut.numberToBytesBE(num, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k) => k in opts))
          throw new Error("sign() legacy options not supported");
        const { hash, randomBytes } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        validateSigVerOpts(opts);
        if (prehash)
          msgHash = (0, utils_js_1.ensureBytes)("prehashed msgHash", hash(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null && ent !== false) {
          const e = ent === true ? randomBytes(Fp.BYTES) : ent;
          seedArgs.push((0, utils_js_1.ensureBytes)("extraEntropy", e));
        }
        const seed = ut.concatBytes(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k = bits2int(kBytes);
          if (!isWithinCurveOrder(k))
            return;
          const ik = invN(k);
          const q = Point.BASE.multiply(k).toAffine();
          const r = modN(q.x);
          if (r === _0n)
            return;
          const s = modN(ik * modN(m + r * d));
          if (s === _0n)
            return;
          let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature(r, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point.BASE._setWindowSize(8);
      function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
        const sg = signature;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        publicKey = (0, utils_js_1.ensureBytes)("publicKey", publicKey);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        validateSigVerOpts(opts);
        const { lowS, prehash } = opts;
        let _sig = void 0;
        let P;
        try {
          if (typeof sg === "string" || ut.isBytes(sg)) {
            try {
              _sig = Signature.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports2.DER.Err))
                throw derError;
              _sig = Signature.fromCompact(sg);
            }
          } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
            const { r: r2, s: s2 } = sg;
            _sig = new Signature(r2, s2);
          } else {
            throw new Error("PARSE");
          }
          P = Point.fromHex(publicKey);
        } catch (error) {
          if (error.message === "PARSE")
            throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
          return false;
        }
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h = bits2int_modN(msgHash);
        const is = invN(s);
        const u1 = modN(h * is);
        const u2 = modN(r * is);
        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();
        if (!R)
          return false;
        const v = modN(R.x);
        return v === r;
      }
      return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign,
        verify,
        ProjectivePoint: Point,
        Signature,
        utils
      };
    }
    function SWUFpSqrtRatio(Fp, Z) {
      const q = Fp.ORDER;
      let l = _0n;
      for (let o = q - _1n; o % _2n === _0n; o /= _2n)
        l += _1n;
      const c1 = l;
      const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
      const c2 = (q - _1n) / _2n_pow_c1;
      const c3 = (c2 - _1n) / _2n;
      const c4 = _2n_pow_c1 - _1n;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp.pow(Z, c2);
      const c7 = Fp.pow(Z, (c2 + _1n) / _2n);
      let sqrtRatio = (u, v) => {
        let tv1 = c6;
        let tv2 = Fp.pow(v, c4);
        let tv3 = Fp.sqr(tv2);
        tv3 = Fp.mul(tv3, v);
        let tv5 = Fp.mul(u, tv3);
        tv5 = Fp.pow(tv5, c3);
        tv5 = Fp.mul(tv5, tv2);
        tv2 = Fp.mul(tv5, v);
        tv3 = Fp.mul(tv5, u);
        let tv4 = Fp.mul(tv3, tv2);
        tv5 = Fp.pow(tv4, c5);
        let isQR = Fp.eql(tv5, Fp.ONE);
        tv2 = Fp.mul(tv3, c7);
        tv5 = Fp.mul(tv4, tv1);
        tv3 = Fp.cmov(tv2, tv3, isQR);
        tv4 = Fp.cmov(tv5, tv4, isQR);
        for (let i = c1; i > _1n; i--) {
          let tv52 = i - _2n;
          tv52 = _2n << tv52 - _1n;
          let tvv5 = Fp.pow(tv4, tv52);
          const e1 = Fp.eql(tvv5, Fp.ONE);
          tv2 = Fp.mul(tv3, tv1);
          tv1 = Fp.mul(tv1, tv1);
          tvv5 = Fp.mul(tv4, tv1);
          tv3 = Fp.cmov(tv2, tv3, e1);
          tv4 = Fp.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp.ORDER % _4n === _3n) {
        const c12 = (Fp.ORDER - _3n) / _4n;
        const c22 = Fp.sqrt(Fp.neg(Z));
        sqrtRatio = (u, v) => {
          let tv1 = Fp.sqr(v);
          const tv2 = Fp.mul(u, v);
          tv1 = Fp.mul(tv1, tv2);
          let y1 = Fp.pow(tv1, c12);
          y1 = Fp.mul(y1, tv2);
          const y2 = Fp.mul(y1, c22);
          const tv3 = Fp.mul(Fp.sqr(y1), v);
          const isQR = Fp.eql(tv3, u);
          let y = Fp.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    function mapToCurveSimpleSWU(Fp, opts) {
      mod.validateField(Fp);
      if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
      if (!Fp.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u);
        tv1 = Fp.mul(tv1, opts.Z);
        tv2 = Fp.sqr(tv1);
        tv2 = Fp.add(tv2, tv1);
        tv3 = Fp.add(tv2, Fp.ONE);
        tv3 = Fp.mul(tv3, opts.B);
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO));
        tv4 = Fp.mul(tv4, opts.A);
        tv2 = Fp.sqr(tv3);
        tv6 = Fp.sqr(tv4);
        tv5 = Fp.mul(tv6, opts.A);
        tv2 = Fp.add(tv2, tv5);
        tv2 = Fp.mul(tv2, tv3);
        tv6 = Fp.mul(tv6, tv4);
        tv5 = Fp.mul(tv6, opts.B);
        tv2 = Fp.add(tv2, tv5);
        x = Fp.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp.mul(tv1, u);
        y = Fp.mul(y, value);
        x = Fp.cmov(x, tv3, isValid);
        y = Fp.cmov(y, value, isValid);
        const e1 = Fp.isOdd(u) === Fp.isOdd(y);
        y = Fp.cmov(Fp.neg(y), y, e1);
        x = Fp.div(x, tv4);
        return { x, y };
      };
    }
  }
});

// node_modules/@noble/curves/_shortw_utils.js
var require_shortw_utils = __commonJS({
  "node_modules/@noble/curves/_shortw_utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHash = getHash;
    exports2.createCurve = createCurve;
    var hmac_1 = require_hmac();
    var utils_1 = require_utils();
    var weierstrass_js_1 = require_weierstrass();
    function getHash(hash) {
      return {
        hash,
        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),
        randomBytes: utils_1.randomBytes
      };
    }
    function createCurve(curveDef, defHash) {
      const create = (hash) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash) });
      return Object.freeze({ ...create(defHash), create });
    }
  }
});

// node_modules/@noble/curves/abstract/hash-to-curve.js
var require_hash_to_curve = __commonJS({
  "node_modules/@noble/curves/abstract/hash-to-curve.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.expand_message_xmd = expand_message_xmd;
    exports2.expand_message_xof = expand_message_xof;
    exports2.hash_to_field = hash_to_field;
    exports2.isogenyMap = isogenyMap;
    exports2.createHasher = createHasher;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils4();
    var os2ip = utils_js_1.bytesToNumberBE;
    function i2osp(value, length) {
      anum(value);
      anum(length);
      if (value < 0 || value >= 1 << 8 * length) {
        throw new Error(`bad I2OSP call: value=${value} length=${length}`);
      }
      const res = Array.from({ length }).fill(0);
      for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 255;
        value >>>= 8;
      }
      return new Uint8Array(res);
    }
    function strxor(a, b) {
      const arr = new Uint8Array(a.length);
      for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b[i];
      }
      return arr;
    }
    function anum(item) {
      if (!Number.isSafeInteger(item))
        throw new Error("number expected");
    }
    function expand_message_xmd(msg, DST, lenInBytes, H) {
      (0, utils_js_1.abytes)(msg);
      (0, utils_js_1.abytes)(DST);
      anum(lenInBytes);
      if (DST.length > 255)
        DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
      const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
      const ell = Math.ceil(lenInBytes / b_in_bytes);
      if (lenInBytes > 65535 || ell > 255)
        throw new Error("expand_message_xmd: invalid lenInBytes");
      const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));
      const Z_pad = i2osp(0, r_in_bytes);
      const l_i_b_str = i2osp(lenInBytes, 2);
      const b = new Array(ell);
      const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
      b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
      for (let i = 1; i <= ell; i++) {
        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
        b[i] = H((0, utils_js_1.concatBytes)(...args));
      }
      const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);
      return pseudo_random_bytes.slice(0, lenInBytes);
    }
    function expand_message_xof(msg, DST, lenInBytes, k, H) {
      (0, utils_js_1.abytes)(msg);
      (0, utils_js_1.abytes)(DST);
      anum(lenInBytes);
      if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k / 8);
        DST = H.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
      }
      if (lenInBytes > 65535 || DST.length > 255)
        throw new Error("expand_message_xof: invalid lenInBytes");
      return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
    }
    function hash_to_field(msg, count, options2) {
      (0, utils_js_1.validateObject)(options2, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
      });
      const { p, k, m, hash, expand, DST: _DST } = options2;
      (0, utils_js_1.abytes)(msg);
      anum(count);
      const DST = typeof _DST === "string" ? (0, utils_js_1.utf8ToBytes)(_DST) : _DST;
      const log2p = p.toString(2).length;
      const L = Math.ceil((log2p + k) / 8);
      const len_in_bytes = count * m * L;
      let prb;
      if (expand === "xmd") {
        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
      } else if (expand === "xof") {
        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);
      } else if (expand === "_internal_pass") {
        prb = msg;
      } else {
        throw new Error('expand must be "xmd" or "xof"');
      }
      const u = new Array(count);
      for (let i = 0; i < count; i++) {
        const e = new Array(m);
        for (let j = 0; j < m; j++) {
          const elm_offset = L * (j + i * m);
          const tv = prb.subarray(elm_offset, elm_offset + L);
          e[j] = (0, modular_js_1.mod)(os2ip(tv), p);
        }
        u[i] = e;
      }
      return u;
    }
    function isogenyMap(field, map) {
      const COEFF = map.map((i) => Array.from(i).reverse());
      return (x, y) => {
        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
        x = field.div(xNum, xDen);
        y = field.mul(y, field.div(yNum, yDen));
        return { x, y };
      };
    }
    function createHasher(Point, mapToCurve, def) {
      if (typeof mapToCurve !== "function")
        throw new Error("mapToCurve() must be defined");
      return {
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve(msg, options2) {
          const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options2 });
          const u0 = Point.fromAffine(mapToCurve(u[0]));
          const u1 = Point.fromAffine(mapToCurve(u[1]));
          const P = u0.add(u1).clearCofactor();
          P.assertValidity();
          return P;
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve(msg, options2) {
          const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options2 });
          const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();
          P.assertValidity();
          return P;
        },
        // Same as encodeToCurve, but without hash
        mapToCurve(scalars) {
          if (!Array.isArray(scalars))
            throw new Error("mapToCurve: expected array of bigints");
          for (const i of scalars)
            if (typeof i !== "bigint")
              throw new Error(`mapToCurve: expected array of bigints, got ${i} in array`);
          const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();
          P.assertValidity();
          return P;
        }
      };
    }
  }
});

// node_modules/@noble/curves/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/@noble/curves/secp256k1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeToCurve = exports2.hashToCurve = exports2.schnorr = exports2.secp256k1 = void 0;
    var sha256_1 = require_sha256();
    var utils_1 = require_utils();
    var _shortw_utils_js_1 = require_shortw_utils();
    var hash_to_curve_js_1 = require_hash_to_curve();
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils4();
    var weierstrass_js_1 = require_weierstrass();
    var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var divNearest = (a, b) => (a + b / _2n) / b;
    function sqrtMod(y) {
      const P = secp256k1P;
      const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
      const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y * y * y % P;
      const b3 = b2 * b2 * y % P;
      const b6 = (0, modular_js_1.pow2)(b3, _3n, P) * b3 % P;
      const b9 = (0, modular_js_1.pow2)(b6, _3n, P) * b3 % P;
      const b11 = (0, modular_js_1.pow2)(b9, _2n, P) * b2 % P;
      const b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;
      const b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;
      const b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;
      const b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;
      const b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;
      const b223 = (0, modular_js_1.pow2)(b220, _3n, P) * b3 % P;
      const t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;
      const t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;
      const root = (0, modular_js_1.pow2)(t2, _2n, P);
      if (!Fp.eql(Fp.sqr(root), y))
        throw new Error("Cannot find square root");
      return root;
    }
    var Fp = (0, modular_js_1.Field)(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
    exports2.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
      a: BigInt(0),
      // equation params: a, b
      b: BigInt(7),
      // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
      Fp,
      // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
      n: secp256k1N,
      // Curve order, total count of valid points in the field
      // Base point (x, y) aka generator point
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      // Cofactor
      lowS: true,
      // Allow only low-S signatures by default in sign() and verify()
      /**
       * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
       * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
       * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
       * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
       */
      endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k) => {
          const n = secp256k1N;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest(b2 * k, n);
          const c2 = divNearest(-b1 * k, n);
          let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);
          let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
            k1 = n - k1;
          if (k2neg)
            k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k);
          }
          return { k1neg, k1, k2neg, k2 };
        }
      }
    }, sha256_1.sha256);
    var _0n = BigInt(0);
    var TAGGED_HASH_PREFIXES = {};
    function taggedHash(tag, ...messages) {
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
    }
    var pointToBytes = (point) => point.toRawBytes(true).slice(1);
    var numTo32b = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);
    var modP = (x) => (0, modular_js_1.mod)(x, secp256k1P);
    var modN = (x) => (0, modular_js_1.mod)(x, secp256k1N);
    var Point = exports2.secp256k1.ProjectivePoint;
    var GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);
    function schnorrGetExtPubKey(priv) {
      let d_ = exports2.secp256k1.utils.normPrivateKeyToScalar(priv);
      let p = Point.fromPrivateKey(d_);
      const scalar = p.hasEvenY() ? d_ : modN(-d_);
      return { scalar, bytes: pointToBytes(p) };
    }
    function lift_x(x) {
      (0, utils_js_1.aInRange)("x", x, _1n, secp256k1P);
      const xx = modP(x * x);
      const c = modP(xx * x + BigInt(7));
      let y = sqrtMod(c);
      if (y % _2n !== _0n)
        y = modP(-y);
      const p = new Point(x, y, _1n);
      p.assertValidity();
      return p;
    }
    var num = utils_js_1.bytesToNumberBE;
    function challenge(...args) {
      return modN(num(taggedHash("BIP0340/challenge", ...args)));
    }
    function schnorrGetPublicKey(privateKey) {
      return schnorrGetExtPubKey(privateKey).bytes;
    }
    function schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
      const a = (0, utils_js_1.ensureBytes)("auxRand", auxRand, 32);
      const t = numTo32b(d ^ num(taggedHash("BIP0340/aux", a)));
      const rand = taggedHash("BIP0340/nonce", t, px, m);
      const k_ = modN(num(rand));
      if (k_ === _0n)
        throw new Error("sign failed: k is zero");
      const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
      const e = challenge(rx, px, m);
      const sig = new Uint8Array(64);
      sig.set(rx, 0);
      sig.set(numTo32b(modN(k + e * d)), 32);
      if (!schnorrVerify(sig, m, px))
        throw new Error("sign: Invalid signature produced");
      return sig;
    }
    function schnorrVerify(signature, message, publicKey) {
      const sig = (0, utils_js_1.ensureBytes)("signature", signature, 64);
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const pub = (0, utils_js_1.ensureBytes)("publicKey", publicKey, 32);
      try {
        const P = lift_x(num(pub));
        const r = num(sig.subarray(0, 32));
        if (!(0, utils_js_1.inRange)(r, _1n, secp256k1P))
          return false;
        const s = num(sig.subarray(32, 64));
        if (!(0, utils_js_1.inRange)(s, _1n, secp256k1N))
          return false;
        const e = challenge(numTo32b(r), pointToBytes(P), m);
        const R = GmulAdd(P, s, modN(-e));
        if (!R || !R.hasEvenY() || R.toAffine().x !== r)
          return false;
        return true;
      } catch (error) {
        return false;
      }
    }
    exports2.schnorr = (() => ({
      getPublicKey: schnorrGetPublicKey,
      sign: schnorrSign,
      verify: schnorrVerify,
      utils: {
        randomPrivateKey: exports2.secp256k1.utils.randomPrivateKey,
        lift_x,
        pointToBytes,
        numberToBytesBE: utils_js_1.numberToBytesBE,
        bytesToNumberBE: utils_js_1.bytesToNumberBE,
        taggedHash,
        mod: modular_js_1.mod
      }
    }))();
    var isoMap = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [
      // xNum
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      // xDen
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ],
      // yNum
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      // yDen
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ]
    ].map((i) => i.map((j) => BigInt(j)))))();
    var mapSWU = /* @__PURE__ */ (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fp.create(BigInt("-11"))
    }))();
    var htf = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.createHasher)(exports2.secp256k1.ProjectivePoint, (scalars) => {
      const { x, y } = mapSWU(Fp.create(scalars[0]));
      return isoMap(x, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fp.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha256_1.sha256
    }))();
    exports2.hashToCurve = (() => htf.hashToCurve)();
    exports2.encodeToCurve = (() => htf.encodeToCurve)();
  }
});

// node_modules/viem/_cjs/utils/signature/recoverPublicKey.js
var require_recoverPublicKey = __commonJS({
  "node_modules/viem/_cjs/utils/signature/recoverPublicKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverPublicKey = recoverPublicKey;
    var isHex_js_1 = require_isHex();
    var fromHex_js_1 = require_fromHex();
    var toHex_js_1 = require_toHex();
    async function recoverPublicKey({ hash, signature }) {
      const hashHex = (0, isHex_js_1.isHex)(hash) ? hash : (0, toHex_js_1.toHex)(hash);
      const { secp256k1 } = await Promise.resolve().then(() => require_secp256k1());
      const signature_ = (() => {
        if (typeof signature === "object" && "r" in signature && "s" in signature) {
          const { r, s, v, yParity } = signature;
          const yParityOrV2 = Number(yParity ?? v);
          const recoveryBit2 = toRecoveryBit(yParityOrV2);
          return new secp256k1.Signature((0, fromHex_js_1.hexToBigInt)(r), (0, fromHex_js_1.hexToBigInt)(s)).addRecoveryBit(recoveryBit2);
        }
        const signatureHex = (0, isHex_js_1.isHex)(signature) ? signature : (0, toHex_js_1.toHex)(signature);
        const yParityOrV = (0, fromHex_js_1.hexToNumber)(`0x${signatureHex.slice(130)}`);
        const recoveryBit = toRecoveryBit(yParityOrV);
        return secp256k1.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
      })();
      const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
      return `0x${publicKey}`;
    }
    function toRecoveryBit(yParityOrV) {
      if (yParityOrV === 0 || yParityOrV === 1)
        return yParityOrV;
      if (yParityOrV === 27)
        return 0;
      if (yParityOrV === 28)
        return 1;
      throw new Error("Invalid yParityOrV value");
    }
  }
});

// node_modules/viem/_cjs/utils/signature/recoverAddress.js
var require_recoverAddress = __commonJS({
  "node_modules/viem/_cjs/utils/signature/recoverAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverAddress = recoverAddress;
    var publicKeyToAddress_js_1 = require_publicKeyToAddress();
    var recoverPublicKey_js_1 = require_recoverPublicKey();
    async function recoverAddress({ hash, signature }) {
      return (0, publicKeyToAddress_js_1.publicKeyToAddress)(await (0, recoverPublicKey_js_1.recoverPublicKey)({ hash, signature }));
    }
  }
});

// node_modules/viem/_cjs/experimental/eip7702/utils/hashAuthorization.js
var require_hashAuthorization = __commonJS({
  "node_modules/viem/_cjs/experimental/eip7702/utils/hashAuthorization.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashAuthorization = hashAuthorization;
    var concat_js_1 = require_concat();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    var toRlp_js_1 = require_toRlp();
    var keccak256_js_1 = require_keccak256();
    function hashAuthorization(parameters) {
      const { chainId, contractAddress, nonce, to } = parameters;
      const hash = (0, keccak256_js_1.keccak256)((0, concat_js_1.concatHex)([
        "0x05",
        (0, toRlp_js_1.toRlp)([
          (0, toHex_js_1.numberToHex)(chainId),
          contractAddress,
          nonce ? (0, toHex_js_1.numberToHex)(nonce) : "0x"
        ])
      ]));
      if (to === "bytes")
        return (0, toBytes_js_1.hexToBytes)(hash);
      return hash;
    }
  }
});

// node_modules/viem/_cjs/experimental/eip7702/utils/recoverAuthorizationAddress.js
var require_recoverAuthorizationAddress = __commonJS({
  "node_modules/viem/_cjs/experimental/eip7702/utils/recoverAuthorizationAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverAuthorizationAddress = recoverAuthorizationAddress;
    var recoverAddress_js_1 = require_recoverAddress();
    var hashAuthorization_js_1 = require_hashAuthorization();
    async function recoverAuthorizationAddress(parameters) {
      const { authorization, signature } = parameters;
      return (0, recoverAddress_js_1.recoverAddress)({
        hash: (0, hashAuthorization_js_1.hashAuthorization)(authorization),
        signature: signature ?? authorization
      });
    }
  }
});

// node_modules/viem/_cjs/errors/estimateGas.js
var require_estimateGas = __commonJS({
  "node_modules/viem/_cjs/errors/estimateGas.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EstimateGasExecutionError = void 0;
    var formatEther_js_1 = require_formatEther();
    var formatGwei_js_1 = require_formatGwei();
    var base_js_1 = require_base();
    var transaction_js_1 = require_transaction2();
    var EstimateGasExecutionError = class extends base_js_1.BaseError {
      constructor(cause, { account, docsPath, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value }) {
        const prettyArgs = (0, transaction_js_1.prettyPrint)({
          from: account?.address,
          to,
          value: typeof value !== "undefined" && `${(0, formatEther_js_1.formatEther)(value)} ${chain?.nativeCurrency?.symbol || "ETH"}`,
          data,
          gas,
          gasPrice: typeof gasPrice !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(gasPrice)} gwei`,
          maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(maxFeePerGas)} gwei`,
          maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(maxPriorityFeePerGas)} gwei`,
          nonce
        });
        super(cause.shortMessage, {
          cause,
          docsPath,
          metaMessages: [
            ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
            "Estimate Gas Arguments:",
            prettyArgs
          ].filter(Boolean),
          name: "EstimateGasExecutionError"
        });
        Object.defineProperty(this, "cause", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.cause = cause;
      }
    };
    exports2.EstimateGasExecutionError = EstimateGasExecutionError;
  }
});

// node_modules/viem/_cjs/utils/stringify.js
var require_stringify = __commonJS({
  "node_modules/viem/_cjs/utils/stringify.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringify = void 0;
    var stringify = (value, replacer, space) => JSON.stringify(value, (key, value_) => {
      const value2 = typeof value_ === "bigint" ? value_.toString() : value_;
      return typeof replacer === "function" ? replacer(key, value2) : value2;
    }, space);
    exports2.stringify = stringify;
  }
});

// node_modules/viem/_cjs/errors/utils.js
var require_utils5 = __commonJS({
  "node_modules/viem/_cjs/errors/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUrl = exports2.getContractAddress = void 0;
    var getContractAddress = (address) => address;
    exports2.getContractAddress = getContractAddress;
    var getUrl = (url) => url;
    exports2.getUrl = getUrl;
  }
});

// node_modules/viem/_cjs/errors/request.js
var require_request = __commonJS({
  "node_modules/viem/_cjs/errors/request.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TimeoutError = exports2.SocketClosedError = exports2.RpcRequestError = exports2.WebSocketRequestError = exports2.HttpRequestError = void 0;
    var stringify_js_1 = require_stringify();
    var base_js_1 = require_base();
    var utils_js_1 = require_utils5();
    var HttpRequestError = class extends base_js_1.BaseError {
      constructor({ body, cause, details, headers, status, url }) {
        super("HTTP request failed.", {
          cause,
          details,
          metaMessages: [
            status && `Status: ${status}`,
            `URL: ${(0, utils_js_1.getUrl)(url)}`,
            body && `Request body: ${(0, stringify_js_1.stringify)(body)}`
          ].filter(Boolean),
          name: "HttpRequestError"
        });
        Object.defineProperty(this, "body", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "headers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "status", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "url", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.body = body;
        this.headers = headers;
        this.status = status;
        this.url = url;
      }
    };
    exports2.HttpRequestError = HttpRequestError;
    var WebSocketRequestError = class extends base_js_1.BaseError {
      constructor({ body, cause, details, url }) {
        super("WebSocket request failed.", {
          cause,
          details,
          metaMessages: [
            `URL: ${(0, utils_js_1.getUrl)(url)}`,
            body && `Request body: ${(0, stringify_js_1.stringify)(body)}`
          ].filter(Boolean),
          name: "WebSocketRequestError"
        });
      }
    };
    exports2.WebSocketRequestError = WebSocketRequestError;
    var RpcRequestError = class extends base_js_1.BaseError {
      constructor({ body, error, url }) {
        super("RPC Request failed.", {
          cause: error,
          details: error.message,
          metaMessages: [`URL: ${(0, utils_js_1.getUrl)(url)}`, `Request body: ${(0, stringify_js_1.stringify)(body)}`],
          name: "RpcRequestError"
        });
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.code = error.code;
      }
    };
    exports2.RpcRequestError = RpcRequestError;
    var SocketClosedError = class extends base_js_1.BaseError {
      constructor({ url } = {}) {
        super("The socket has been closed.", {
          metaMessages: [url && `URL: ${(0, utils_js_1.getUrl)(url)}`].filter(Boolean),
          name: "SocketClosedError"
        });
      }
    };
    exports2.SocketClosedError = SocketClosedError;
    var TimeoutError = class extends base_js_1.BaseError {
      constructor({ body, url }) {
        super("The request took too long to respond.", {
          details: "The request timed out.",
          metaMessages: [`URL: ${(0, utils_js_1.getUrl)(url)}`, `Request body: ${(0, stringify_js_1.stringify)(body)}`],
          name: "TimeoutError"
        });
      }
    };
    exports2.TimeoutError = TimeoutError;
  }
});

// node_modules/viem/_cjs/errors/rpc.js
var require_rpc = __commonJS({
  "node_modules/viem/_cjs/errors/rpc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnknownRpcError = exports2.SwitchChainError = exports2.ChainDisconnectedError = exports2.ProviderDisconnectedError = exports2.UnsupportedProviderMethodError = exports2.UnauthorizedProviderError = exports2.UserRejectedRequestError = exports2.JsonRpcVersionUnsupportedError = exports2.LimitExceededRpcError = exports2.MethodNotSupportedRpcError = exports2.TransactionRejectedRpcError = exports2.ResourceUnavailableRpcError = exports2.ResourceNotFoundRpcError = exports2.InvalidInputRpcError = exports2.InternalRpcError = exports2.InvalidParamsRpcError = exports2.MethodNotFoundRpcError = exports2.InvalidRequestRpcError = exports2.ParseRpcError = exports2.ProviderRpcError = exports2.RpcError = void 0;
    var base_js_1 = require_base();
    var request_js_1 = require_request();
    var unknownErrorCode = -1;
    var RpcError = class extends base_js_1.BaseError {
      constructor(cause, { code, docsPath, metaMessages, name, shortMessage }) {
        super(shortMessage, {
          cause,
          docsPath,
          metaMessages: metaMessages || cause?.metaMessages,
          name: name || "RpcError"
        });
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.name = name || cause.name;
        this.code = cause instanceof request_js_1.RpcRequestError ? cause.code : code ?? unknownErrorCode;
      }
    };
    exports2.RpcError = RpcError;
    var ProviderRpcError = class extends RpcError {
      constructor(cause, options2) {
        super(cause, options2);
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.data = options2.data;
      }
    };
    exports2.ProviderRpcError = ProviderRpcError;
    var ParseRpcError = class _ParseRpcError extends RpcError {
      constructor(cause) {
        super(cause, {
          code: _ParseRpcError.code,
          name: "ParseRpcError",
          shortMessage: "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
        });
      }
    };
    exports2.ParseRpcError = ParseRpcError;
    Object.defineProperty(ParseRpcError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32700
    });
    var InvalidRequestRpcError = class _InvalidRequestRpcError extends RpcError {
      constructor(cause) {
        super(cause, {
          code: _InvalidRequestRpcError.code,
          name: "InvalidRequestRpcError",
          shortMessage: "JSON is not a valid request object."
        });
      }
    };
    exports2.InvalidRequestRpcError = InvalidRequestRpcError;
    Object.defineProperty(InvalidRequestRpcError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32600
    });
    var MethodNotFoundRpcError = class _MethodNotFoundRpcError extends RpcError {
      constructor(cause, { method } = {}) {
        super(cause, {
          code: _MethodNotFoundRpcError.code,
          name: "MethodNotFoundRpcError",
          shortMessage: `The method${method ? ` "${method}"` : ""} does not exist / is not available.`
        });
      }
    };
    exports2.MethodNotFoundRpcError = MethodNotFoundRpcError;
    Object.defineProperty(MethodNotFoundRpcError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32601
    });
    var InvalidParamsRpcError = class _InvalidParamsRpcError extends RpcError {
      constructor(cause) {
        super(cause, {
          code: _InvalidParamsRpcError.code,
          name: "InvalidParamsRpcError",
          shortMessage: [
            "Invalid parameters were provided to the RPC method.",
            "Double check you have provided the correct parameters."
          ].join("\n")
        });
      }
    };
    exports2.InvalidParamsRpcError = InvalidParamsRpcError;
    Object.defineProperty(InvalidParamsRpcError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32602
    });
    var InternalRpcError = class _InternalRpcError extends RpcError {
      constructor(cause) {
        super(cause, {
          code: _InternalRpcError.code,
          name: "InternalRpcError",
          shortMessage: "An internal error was received."
        });
      }
    };
    exports2.InternalRpcError = InternalRpcError;
    Object.defineProperty(InternalRpcError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32603
    });
    var InvalidInputRpcError = class _InvalidInputRpcError extends RpcError {
      constructor(cause) {
        super(cause, {
          code: _InvalidInputRpcError.code,
          name: "InvalidInputRpcError",
          shortMessage: [
            "Missing or invalid parameters.",
            "Double check you have provided the correct parameters."
          ].join("\n")
        });
      }
    };
    exports2.InvalidInputRpcError = InvalidInputRpcError;
    Object.defineProperty(InvalidInputRpcError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32e3
    });
    var ResourceNotFoundRpcError = class _ResourceNotFoundRpcError extends RpcError {
      constructor(cause) {
        super(cause, {
          code: _ResourceNotFoundRpcError.code,
          name: "ResourceNotFoundRpcError",
          shortMessage: "Requested resource not found."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ResourceNotFoundRpcError"
        });
      }
    };
    exports2.ResourceNotFoundRpcError = ResourceNotFoundRpcError;
    Object.defineProperty(ResourceNotFoundRpcError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32001
    });
    var ResourceUnavailableRpcError = class _ResourceUnavailableRpcError extends RpcError {
      constructor(cause) {
        super(cause, {
          code: _ResourceUnavailableRpcError.code,
          name: "ResourceUnavailableRpcError",
          shortMessage: "Requested resource not available."
        });
      }
    };
    exports2.ResourceUnavailableRpcError = ResourceUnavailableRpcError;
    Object.defineProperty(ResourceUnavailableRpcError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32002
    });
    var TransactionRejectedRpcError = class _TransactionRejectedRpcError extends RpcError {
      constructor(cause) {
        super(cause, {
          code: _TransactionRejectedRpcError.code,
          name: "TransactionRejectedRpcError",
          shortMessage: "Transaction creation failed."
        });
      }
    };
    exports2.TransactionRejectedRpcError = TransactionRejectedRpcError;
    Object.defineProperty(TransactionRejectedRpcError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32003
    });
    var MethodNotSupportedRpcError = class _MethodNotSupportedRpcError extends RpcError {
      constructor(cause, { method } = {}) {
        super(cause, {
          code: _MethodNotSupportedRpcError.code,
          name: "MethodNotSupportedRpcError",
          shortMessage: `Method${method ? ` "${method}"` : ""} is not implemented.`
        });
      }
    };
    exports2.MethodNotSupportedRpcError = MethodNotSupportedRpcError;
    Object.defineProperty(MethodNotSupportedRpcError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32004
    });
    var LimitExceededRpcError = class _LimitExceededRpcError extends RpcError {
      constructor(cause) {
        super(cause, {
          code: _LimitExceededRpcError.code,
          name: "LimitExceededRpcError",
          shortMessage: "Request exceeds defined limit."
        });
      }
    };
    exports2.LimitExceededRpcError = LimitExceededRpcError;
    Object.defineProperty(LimitExceededRpcError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32005
    });
    var JsonRpcVersionUnsupportedError = class _JsonRpcVersionUnsupportedError extends RpcError {
      constructor(cause) {
        super(cause, {
          code: _JsonRpcVersionUnsupportedError.code,
          name: "JsonRpcVersionUnsupportedError",
          shortMessage: "Version of JSON-RPC protocol is not supported."
        });
      }
    };
    exports2.JsonRpcVersionUnsupportedError = JsonRpcVersionUnsupportedError;
    Object.defineProperty(JsonRpcVersionUnsupportedError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32006
    });
    var UserRejectedRequestError = class _UserRejectedRequestError extends ProviderRpcError {
      constructor(cause) {
        super(cause, {
          code: _UserRejectedRequestError.code,
          name: "UserRejectedRequestError",
          shortMessage: "User rejected the request."
        });
      }
    };
    exports2.UserRejectedRequestError = UserRejectedRequestError;
    Object.defineProperty(UserRejectedRequestError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4001
    });
    var UnauthorizedProviderError = class _UnauthorizedProviderError extends ProviderRpcError {
      constructor(cause) {
        super(cause, {
          code: _UnauthorizedProviderError.code,
          name: "UnauthorizedProviderError",
          shortMessage: "The requested method and/or account has not been authorized by the user."
        });
      }
    };
    exports2.UnauthorizedProviderError = UnauthorizedProviderError;
    Object.defineProperty(UnauthorizedProviderError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4100
    });
    var UnsupportedProviderMethodError = class _UnsupportedProviderMethodError extends ProviderRpcError {
      constructor(cause, { method } = {}) {
        super(cause, {
          code: _UnsupportedProviderMethodError.code,
          name: "UnsupportedProviderMethodError",
          shortMessage: `The Provider does not support the requested method${method ? ` " ${method}"` : ""}.`
        });
      }
    };
    exports2.UnsupportedProviderMethodError = UnsupportedProviderMethodError;
    Object.defineProperty(UnsupportedProviderMethodError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4200
    });
    var ProviderDisconnectedError = class _ProviderDisconnectedError extends ProviderRpcError {
      constructor(cause) {
        super(cause, {
          code: _ProviderDisconnectedError.code,
          name: "ProviderDisconnectedError",
          shortMessage: "The Provider is disconnected from all chains."
        });
      }
    };
    exports2.ProviderDisconnectedError = ProviderDisconnectedError;
    Object.defineProperty(ProviderDisconnectedError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4900
    });
    var ChainDisconnectedError = class _ChainDisconnectedError extends ProviderRpcError {
      constructor(cause) {
        super(cause, {
          code: _ChainDisconnectedError.code,
          name: "ChainDisconnectedError",
          shortMessage: "The Provider is not connected to the requested chain."
        });
      }
    };
    exports2.ChainDisconnectedError = ChainDisconnectedError;
    Object.defineProperty(ChainDisconnectedError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4901
    });
    var SwitchChainError = class _SwitchChainError extends ProviderRpcError {
      constructor(cause) {
        super(cause, {
          code: _SwitchChainError.code,
          name: "SwitchChainError",
          shortMessage: "An error occurred when attempting to switch chain."
        });
      }
    };
    exports2.SwitchChainError = SwitchChainError;
    Object.defineProperty(SwitchChainError, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4902
    });
    var UnknownRpcError = class extends RpcError {
      constructor(cause) {
        super(cause, {
          name: "UnknownRpcError",
          shortMessage: "An unknown RPC error occurred."
        });
      }
    };
    exports2.UnknownRpcError = UnknownRpcError;
  }
});

// node_modules/viem/_cjs/utils/errors/getNodeError.js
var require_getNodeError = __commonJS({
  "node_modules/viem/_cjs/utils/errors/getNodeError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.containsNodeError = containsNodeError;
    exports2.getNodeError = getNodeError;
    var base_js_1 = require_base();
    var node_js_1 = require_node();
    var request_js_1 = require_request();
    var rpc_js_1 = require_rpc();
    function containsNodeError(err) {
      return err instanceof rpc_js_1.TransactionRejectedRpcError || err instanceof rpc_js_1.InvalidInputRpcError || err instanceof request_js_1.RpcRequestError && err.code === node_js_1.ExecutionRevertedError.code;
    }
    function getNodeError(err, args) {
      const message = (err.details || "").toLowerCase();
      const executionRevertedError = err instanceof base_js_1.BaseError ? err.walk((e) => e?.code === node_js_1.ExecutionRevertedError.code) : err;
      if (executionRevertedError instanceof base_js_1.BaseError)
        return new node_js_1.ExecutionRevertedError({
          cause: err,
          message: executionRevertedError.details
        });
      if (node_js_1.ExecutionRevertedError.nodeMessage.test(message))
        return new node_js_1.ExecutionRevertedError({
          cause: err,
          message: err.details
        });
      if (node_js_1.FeeCapTooHighError.nodeMessage.test(message))
        return new node_js_1.FeeCapTooHighError({
          cause: err,
          maxFeePerGas: args?.maxFeePerGas
        });
      if (node_js_1.FeeCapTooLowError.nodeMessage.test(message))
        return new node_js_1.FeeCapTooLowError({
          cause: err,
          maxFeePerGas: args?.maxFeePerGas
        });
      if (node_js_1.NonceTooHighError.nodeMessage.test(message))
        return new node_js_1.NonceTooHighError({ cause: err, nonce: args?.nonce });
      if (node_js_1.NonceTooLowError.nodeMessage.test(message))
        return new node_js_1.NonceTooLowError({ cause: err, nonce: args?.nonce });
      if (node_js_1.NonceMaxValueError.nodeMessage.test(message))
        return new node_js_1.NonceMaxValueError({ cause: err, nonce: args?.nonce });
      if (node_js_1.InsufficientFundsError.nodeMessage.test(message))
        return new node_js_1.InsufficientFundsError({ cause: err });
      if (node_js_1.IntrinsicGasTooHighError.nodeMessage.test(message))
        return new node_js_1.IntrinsicGasTooHighError({ cause: err, gas: args?.gas });
      if (node_js_1.IntrinsicGasTooLowError.nodeMessage.test(message))
        return new node_js_1.IntrinsicGasTooLowError({ cause: err, gas: args?.gas });
      if (node_js_1.TransactionTypeNotSupportedError.nodeMessage.test(message))
        return new node_js_1.TransactionTypeNotSupportedError({ cause: err });
      if (node_js_1.TipAboveFeeCapError.nodeMessage.test(message))
        return new node_js_1.TipAboveFeeCapError({
          cause: err,
          maxFeePerGas: args?.maxFeePerGas,
          maxPriorityFeePerGas: args?.maxPriorityFeePerGas
        });
      return new node_js_1.UnknownNodeError({
        cause: err
      });
    }
  }
});

// node_modules/viem/_cjs/utils/errors/getEstimateGasError.js
var require_getEstimateGasError = __commonJS({
  "node_modules/viem/_cjs/utils/errors/getEstimateGasError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEstimateGasError = getEstimateGasError;
    var estimateGas_js_1 = require_estimateGas();
    var node_js_1 = require_node();
    var getNodeError_js_1 = require_getNodeError();
    function getEstimateGasError(err, { docsPath, ...args }) {
      const cause = (() => {
        const cause2 = (0, getNodeError_js_1.getNodeError)(err, args);
        if (cause2 instanceof node_js_1.UnknownNodeError)
          return err;
        return cause2;
      })();
      return new estimateGas_js_1.EstimateGasExecutionError(cause, {
        docsPath,
        ...args
      });
    }
  }
});

// node_modules/viem/_cjs/utils/formatters/extract.js
var require_extract = __commonJS({
  "node_modules/viem/_cjs/utils/formatters/extract.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extract = extract;
    function extract(value_, { format }) {
      if (!format)
        return {};
      const value = {};
      function extract_(formatted2) {
        const keys = Object.keys(formatted2);
        for (const key of keys) {
          if (key in value_)
            value[key] = value_[key];
          if (formatted2[key] && typeof formatted2[key] === "object" && !Array.isArray(formatted2[key]))
            extract_(formatted2[key]);
        }
      }
      const formatted = format(value_ || {});
      extract_(formatted);
      return value;
    }
  }
});

// node_modules/viem/_cjs/errors/stateOverride.js
var require_stateOverride = __commonJS({
  "node_modules/viem/_cjs/errors/stateOverride.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StateAssignmentConflictError = exports2.AccountStateConflictError = void 0;
    exports2.prettyStateMapping = prettyStateMapping;
    exports2.prettyStateOverride = prettyStateOverride;
    var base_js_1 = require_base();
    var AccountStateConflictError = class extends base_js_1.BaseError {
      constructor({ address }) {
        super(`State for account "${address}" is set multiple times.`, {
          name: "AccountStateConflictError"
        });
      }
    };
    exports2.AccountStateConflictError = AccountStateConflictError;
    var StateAssignmentConflictError = class extends base_js_1.BaseError {
      constructor() {
        super("state and stateDiff are set on the same account.", {
          name: "StateAssignmentConflictError"
        });
      }
    };
    exports2.StateAssignmentConflictError = StateAssignmentConflictError;
    function prettyStateMapping(stateMapping) {
      return stateMapping.reduce((pretty, { slot, value }) => {
        return `${pretty}        ${slot}: ${value}
`;
      }, "");
    }
    function prettyStateOverride(stateOverride) {
      return stateOverride.reduce((pretty, { address, ...state }) => {
        let val = `${pretty}    ${address}:
`;
        if (state.nonce)
          val += `      nonce: ${state.nonce}
`;
        if (state.balance)
          val += `      balance: ${state.balance}
`;
        if (state.code)
          val += `      code: ${state.code}
`;
        if (state.state) {
          val += "      state:\n";
          val += prettyStateMapping(state.state);
        }
        if (state.stateDiff) {
          val += "      stateDiff:\n";
          val += prettyStateMapping(state.stateDiff);
        }
        return val;
      }, "  State Override:\n").slice(0, -1);
    }
  }
});

// node_modules/viem/_cjs/utils/stateOverride.js
var require_stateOverride2 = __commonJS({
  "node_modules/viem/_cjs/utils/stateOverride.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeStateMapping = serializeStateMapping;
    exports2.serializeAccountStateOverride = serializeAccountStateOverride;
    exports2.serializeStateOverride = serializeStateOverride;
    var address_js_1 = require_address();
    var data_js_1 = require_data();
    var stateOverride_js_1 = require_stateOverride();
    var isAddress_js_1 = require_isAddress();
    var toHex_js_1 = require_toHex();
    function serializeStateMapping(stateMapping) {
      if (!stateMapping || stateMapping.length === 0)
        return void 0;
      return stateMapping.reduce((acc, { slot, value }) => {
        if (slot.length !== 66)
          throw new data_js_1.InvalidBytesLengthError({
            size: slot.length,
            targetSize: 66,
            type: "hex"
          });
        if (value.length !== 66)
          throw new data_js_1.InvalidBytesLengthError({
            size: value.length,
            targetSize: 66,
            type: "hex"
          });
        acc[slot] = value;
        return acc;
      }, {});
    }
    function serializeAccountStateOverride(parameters) {
      const { balance, nonce, state, stateDiff, code } = parameters;
      const rpcAccountStateOverride = {};
      if (code !== void 0)
        rpcAccountStateOverride.code = code;
      if (balance !== void 0)
        rpcAccountStateOverride.balance = (0, toHex_js_1.numberToHex)(balance);
      if (nonce !== void 0)
        rpcAccountStateOverride.nonce = (0, toHex_js_1.numberToHex)(nonce);
      if (state !== void 0)
        rpcAccountStateOverride.state = serializeStateMapping(state);
      if (stateDiff !== void 0) {
        if (rpcAccountStateOverride.state)
          throw new stateOverride_js_1.StateAssignmentConflictError();
        rpcAccountStateOverride.stateDiff = serializeStateMapping(stateDiff);
      }
      return rpcAccountStateOverride;
    }
    function serializeStateOverride(parameters) {
      if (!parameters)
        return void 0;
      const rpcStateOverride = {};
      for (const { address, ...accountState } of parameters) {
        if (!(0, isAddress_js_1.isAddress)(address, { strict: false }))
          throw new address_js_1.InvalidAddressError({ address });
        if (rpcStateOverride[address])
          throw new stateOverride_js_1.AccountStateConflictError({ address });
        rpcStateOverride[address] = serializeAccountStateOverride(accountState);
      }
      return rpcStateOverride;
    }
  }
});

// node_modules/viem/_cjs/utils/transaction/assertRequest.js
var require_assertRequest = __commonJS({
  "node_modules/viem/_cjs/utils/transaction/assertRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertRequest = assertRequest;
    var parseAccount_js_1 = require_parseAccount();
    var number_js_1 = require_number();
    var address_js_1 = require_address();
    var node_js_1 = require_node();
    var transaction_js_1 = require_transaction2();
    var isAddress_js_1 = require_isAddress();
    function assertRequest(args) {
      const { account: account_, gasPrice, maxFeePerGas, maxPriorityFeePerGas, to } = args;
      const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : void 0;
      if (account && !(0, isAddress_js_1.isAddress)(account.address))
        throw new address_js_1.InvalidAddressError({ address: account.address });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (typeof gasPrice !== "undefined" && (typeof maxFeePerGas !== "undefined" || typeof maxPriorityFeePerGas !== "undefined"))
        throw new transaction_js_1.FeeConflictError();
      if (maxFeePerGas && maxFeePerGas > number_js_1.maxUint256)
        throw new node_js_1.FeeCapTooHighError({ maxFeePerGas });
      if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas)
        throw new node_js_1.TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });
    }
  }
});

// node_modules/viem/_cjs/actions/public/getBalance.js
var require_getBalance = __commonJS({
  "node_modules/viem/_cjs/actions/public/getBalance.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBalance = getBalance;
    var toHex_js_1 = require_toHex();
    async function getBalance(client, { address, blockNumber, blockTag = "latest" }) {
      const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      const balance = await client.request({
        method: "eth_getBalance",
        params: [address, blockNumberHex || blockTag]
      });
      return BigInt(balance);
    }
  }
});

// node_modules/viem/_cjs/actions/public/estimateGas.js
var require_estimateGas2 = __commonJS({
  "node_modules/viem/_cjs/actions/public/estimateGas.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.estimateGas = estimateGas;
    var parseAccount_js_1 = require_parseAccount();
    var base_js_1 = require_base();
    var recoverAuthorizationAddress_js_1 = require_recoverAuthorizationAddress();
    var toHex_js_1 = require_toHex();
    var getEstimateGasError_js_1 = require_getEstimateGasError();
    var extract_js_1 = require_extract();
    var transactionRequest_js_1 = require_transactionRequest();
    var stateOverride_js_1 = require_stateOverride2();
    var assertRequest_js_1 = require_assertRequest();
    var prepareTransactionRequest_js_1 = require_prepareTransactionRequest();
    var getBalance_js_1 = require_getBalance();
    async function estimateGas(client, args) {
      const account_ = args.account ?? client.account;
      const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : void 0;
      try {
        let estimateGas_rpc = function(parameters) {
          const { block: block2, request: request2, rpcStateOverride: rpcStateOverride2 } = parameters;
          return client.request({
            method: "eth_estimateGas",
            params: rpcStateOverride2 ? [request2, block2 ?? "latest", rpcStateOverride2] : block2 ? [request2, block2] : [request2]
          });
        };
        const { accessList, authorizationList, blobs, blobVersionedHashes, blockNumber, blockTag, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, value, stateOverride, ...rest } = await (0, prepareTransactionRequest_js_1.prepareTransactionRequest)(client, {
          ...args,
          parameters: account?.type === "local" ? void 0 : ["blobVersionedHashes"]
        });
        const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
        const block = blockNumberHex || blockTag;
        const rpcStateOverride = (0, stateOverride_js_1.serializeStateOverride)(stateOverride);
        const to = await (async () => {
          if (rest.to)
            return rest.to;
          if (authorizationList && authorizationList.length > 0)
            return await (0, recoverAuthorizationAddress_js_1.recoverAuthorizationAddress)({
              authorization: authorizationList[0]
            }).catch(() => {
              throw new base_js_1.BaseError("`to` is required. Could not infer from `authorizationList`");
            });
          return void 0;
        })();
        (0, assertRequest_js_1.assertRequest)(args);
        const chainFormat = client.chain?.formatters?.transactionRequest?.format;
        const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;
        const request = format({
          ...(0, extract_js_1.extract)(rest, { format: chainFormat }),
          from: account?.address,
          accessList,
          authorizationList,
          blobs,
          blobVersionedHashes,
          data,
          gas,
          gasPrice,
          maxFeePerBlobGas,
          maxFeePerGas,
          maxPriorityFeePerGas,
          nonce,
          to,
          value
        });
        let estimate = BigInt(await estimateGas_rpc({ block, request, rpcStateOverride }));
        if (authorizationList) {
          const value2 = await (0, getBalance_js_1.getBalance)(client, { address: request.from });
          const estimates = await Promise.all(authorizationList.map(async (authorization) => {
            const { contractAddress } = authorization;
            const estimate2 = await estimateGas_rpc({
              block,
              request: {
                authorizationList: void 0,
                data,
                from: account?.address,
                to: contractAddress,
                value: (0, toHex_js_1.numberToHex)(value2)
              },
              rpcStateOverride
            }).catch(() => 100000n);
            return 2n * BigInt(estimate2);
          }));
          estimate += estimates.reduce((acc, curr) => acc + curr, 0n);
        }
        return estimate;
      } catch (err) {
        throw (0, getEstimateGasError_js_1.getEstimateGasError)(err, {
          ...args,
          account,
          chain: client.chain
        });
      }
    }
  }
});

// node_modules/viem/_cjs/actions/public/getTransactionCount.js
var require_getTransactionCount = __commonJS({
  "node_modules/viem/_cjs/actions/public/getTransactionCount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransactionCount = getTransactionCount;
    var fromHex_js_1 = require_fromHex();
    var toHex_js_1 = require_toHex();
    async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
      const count = await client.request({
        method: "eth_getTransactionCount",
        params: [address, blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : blockTag]
      }, { dedupe: Boolean(blockNumber) });
      return (0, fromHex_js_1.hexToNumber)(count);
    }
  }
});

// node_modules/viem/_cjs/actions/public/getChainId.js
var require_getChainId = __commonJS({
  "node_modules/viem/_cjs/actions/public/getChainId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChainId = getChainId;
    var fromHex_js_1 = require_fromHex();
    async function getChainId(client) {
      const chainIdHex = await client.request({
        method: "eth_chainId"
      }, { dedupe: true });
      return (0, fromHex_js_1.hexToNumber)(chainIdHex);
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/prepareTransactionRequest.js
var require_prepareTransactionRequest = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/prepareTransactionRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultParameters = void 0;
    exports2.prepareTransactionRequest = prepareTransactionRequest;
    var parseAccount_js_1 = require_parseAccount();
    var estimateFeesPerGas_js_1 = require_estimateFeesPerGas();
    var estimateGas_js_1 = require_estimateGas2();
    var getBlock_js_1 = require_getBlock();
    var getTransactionCount_js_1 = require_getTransactionCount();
    var fee_js_1 = require_fee();
    var blobsToCommitments_js_1 = require_blobsToCommitments();
    var blobsToProofs_js_1 = require_blobsToProofs();
    var commitmentsToVersionedHashes_js_1 = require_commitmentsToVersionedHashes();
    var toBlobSidecars_js_1 = require_toBlobSidecars();
    var getAction_js_1 = require_getAction();
    var assertRequest_js_1 = require_assertRequest();
    var getTransactionType_js_1 = require_getTransactionType();
    var getChainId_js_1 = require_getChainId();
    exports2.defaultParameters = [
      "blobVersionedHashes",
      "chainId",
      "fees",
      "gas",
      "nonce",
      "type"
    ];
    async function prepareTransactionRequest(client, args) {
      const { account: account_ = client.account, blobs, chain, gas, kzg, nonce, nonceManager, parameters = exports2.defaultParameters, type } = args;
      const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : void 0;
      const request = { ...args, ...account ? { from: account?.address } : {} };
      let block;
      async function getBlock() {
        if (block)
          return block;
        block = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({ blockTag: "latest" });
        return block;
      }
      let chainId;
      async function getChainId() {
        if (chainId)
          return chainId;
        if (chain)
          return chain.id;
        if (typeof args.chainId !== "undefined")
          return args.chainId;
        const chainId_ = await (0, getAction_js_1.getAction)(client, getChainId_js_1.getChainId, "getChainId")({});
        chainId = chainId_;
        return chainId;
      }
      if ((parameters.includes("blobVersionedHashes") || parameters.includes("sidecars")) && blobs && kzg) {
        const commitments = (0, blobsToCommitments_js_1.blobsToCommitments)({ blobs, kzg });
        if (parameters.includes("blobVersionedHashes")) {
          const versionedHashes = (0, commitmentsToVersionedHashes_js_1.commitmentsToVersionedHashes)({
            commitments,
            to: "hex"
          });
          request.blobVersionedHashes = versionedHashes;
        }
        if (parameters.includes("sidecars")) {
          const proofs = (0, blobsToProofs_js_1.blobsToProofs)({ blobs, commitments, kzg });
          const sidecars = (0, toBlobSidecars_js_1.toBlobSidecars)({
            blobs,
            commitments,
            proofs,
            to: "hex"
          });
          request.sidecars = sidecars;
        }
      }
      if (parameters.includes("chainId"))
        request.chainId = await getChainId();
      if (parameters.includes("nonce") && typeof nonce === "undefined" && account) {
        if (nonceManager) {
          const chainId2 = await getChainId();
          request.nonce = await nonceManager.consume({
            address: account.address,
            chainId: chainId2,
            client
          });
        } else {
          request.nonce = await (0, getAction_js_1.getAction)(client, getTransactionCount_js_1.getTransactionCount, "getTransactionCount")({
            address: account.address,
            blockTag: "pending"
          });
        }
      }
      if ((parameters.includes("fees") || parameters.includes("type")) && typeof type === "undefined") {
        try {
          request.type = (0, getTransactionType_js_1.getTransactionType)(request);
        } catch {
          const block2 = await getBlock();
          request.type = typeof block2?.baseFeePerGas === "bigint" ? "eip1559" : "legacy";
        }
      }
      if (parameters.includes("fees")) {
        if (request.type !== "legacy" && request.type !== "eip2930") {
          if (typeof request.maxFeePerGas === "undefined" || typeof request.maxPriorityFeePerGas === "undefined") {
            const block2 = await getBlock();
            const { maxFeePerGas, maxPriorityFeePerGas } = await (0, estimateFeesPerGas_js_1.internal_estimateFeesPerGas)(client, {
              block: block2,
              chain,
              request
            });
            if (typeof args.maxPriorityFeePerGas === "undefined" && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas)
              throw new fee_js_1.MaxFeePerGasTooLowError({
                maxPriorityFeePerGas
              });
            request.maxPriorityFeePerGas = maxPriorityFeePerGas;
            request.maxFeePerGas = maxFeePerGas;
          }
        } else {
          if (typeof args.maxFeePerGas !== "undefined" || typeof args.maxPriorityFeePerGas !== "undefined")
            throw new fee_js_1.Eip1559FeesNotSupportedError();
          const block2 = await getBlock();
          const { gasPrice: gasPrice_ } = await (0, estimateFeesPerGas_js_1.internal_estimateFeesPerGas)(client, {
            block: block2,
            chain,
            request,
            type: "legacy"
          });
          request.gasPrice = gasPrice_;
        }
      }
      if (parameters.includes("gas") && typeof gas === "undefined")
        request.gas = await (0, getAction_js_1.getAction)(client, estimateGas_js_1.estimateGas, "estimateGas")({
          ...request,
          account: account ? { address: account.address, type: "json-rpc" } : void 0
        });
      (0, assertRequest_js_1.assertRequest)(request);
      delete request.parameters;
      return request;
    }
  }
});

// node_modules/viem/_cjs/errors/account.js
var require_account = __commonJS({
  "node_modules/viem/_cjs/errors/account.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AccountTypeNotSupportedError = exports2.AccountNotFoundError = void 0;
    var base_js_1 = require_base();
    var AccountNotFoundError = class extends base_js_1.BaseError {
      constructor({ docsPath } = {}) {
        super([
          "Could not find an Account to execute with this Action.",
          "Please provide an Account with the `account` argument on the Action, or by supplying an `account` to the Client."
        ].join("\n"), {
          docsPath,
          docsSlug: "account",
          name: "AccountNotFoundError"
        });
      }
    };
    exports2.AccountNotFoundError = AccountNotFoundError;
    var AccountTypeNotSupportedError = class extends base_js_1.BaseError {
      constructor({ docsPath, metaMessages, type }) {
        super(`Account type "${type}" is not supported.`, {
          docsPath,
          metaMessages,
          name: "AccountTypeNotSupportedError"
        });
      }
    };
    exports2.AccountTypeNotSupportedError = AccountTypeNotSupportedError;
  }
});

// node_modules/viem/_cjs/constants/solidity.js
var require_solidity = __commonJS({
  "node_modules/viem/_cjs/constants/solidity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.solidityPanic = exports2.solidityError = exports2.panicReasons = void 0;
    exports2.panicReasons = {
      1: "An `assert` condition failed.",
      17: "Arithmetic operation resulted in underflow or overflow.",
      18: "Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).",
      33: "Attempted to convert to an invalid type.",
      34: "Attempted to access a storage byte array that is incorrectly encoded.",
      49: "Performed `.pop()` on an empty array",
      50: "Array index is out of bounds.",
      65: "Allocated too much memory or created an array which is too large.",
      81: "Attempted to call a zero-initialized variable of internal function type."
    };
    exports2.solidityError = {
      inputs: [
        {
          name: "message",
          type: "string"
        }
      ],
      name: "Error",
      type: "error"
    };
    exports2.solidityPanic = {
      inputs: [
        {
          name: "reason",
          type: "uint256"
        }
      ],
      name: "Panic",
      type: "error"
    };
  }
});

// node_modules/viem/_cjs/utils/abi/formatAbiItem.js
var require_formatAbiItem = __commonJS({
  "node_modules/viem/_cjs/utils/abi/formatAbiItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatAbiItem = formatAbiItem;
    exports2.formatAbiParams = formatAbiParams;
    var abi_js_1 = require_abi();
    function formatAbiItem(abiItem, { includeName = false } = {}) {
      if (abiItem.type !== "function" && abiItem.type !== "event" && abiItem.type !== "error")
        throw new abi_js_1.InvalidDefinitionTypeError(abiItem.type);
      return `${abiItem.name}(${formatAbiParams(abiItem.inputs, { includeName })})`;
    }
    function formatAbiParams(params, { includeName = false } = {}) {
      if (!params)
        return "";
      return params.map((param) => formatAbiParam(param, { includeName })).join(includeName ? ", " : ",");
    }
    function formatAbiParam(param, { includeName }) {
      if (param.type.startsWith("tuple")) {
        return `(${formatAbiParams(param.components, { includeName })})${param.type.slice("tuple".length)}`;
      }
      return param.type + (includeName && param.name ? ` ${param.name}` : "");
    }
  }
});

// node_modules/viem/_cjs/errors/abi.js
var require_abi = __commonJS({
  "node_modules/viem/_cjs/errors/abi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnsupportedPackedAbiType = exports2.InvalidDefinitionTypeError = exports2.InvalidArrayError = exports2.InvalidAbiDecodingTypeError = exports2.InvalidAbiEncodingTypeError = exports2.DecodeLogTopicsMismatch = exports2.DecodeLogDataMismatch = exports2.BytesSizeMismatchError = exports2.AbiItemAmbiguityError = exports2.AbiFunctionSignatureNotFoundError = exports2.AbiFunctionOutputsNotFoundError = exports2.AbiFunctionNotFoundError = exports2.AbiEventNotFoundError = exports2.AbiEventSignatureNotFoundError = exports2.AbiEventSignatureEmptyTopicsError = exports2.AbiErrorSignatureNotFoundError = exports2.AbiErrorNotFoundError = exports2.AbiErrorInputsNotFoundError = exports2.AbiEncodingLengthMismatchError = exports2.AbiEncodingBytesSizeMismatchError = exports2.AbiEncodingArrayLengthMismatchError = exports2.AbiDecodingZeroDataError = exports2.AbiDecodingDataSizeTooSmallError = exports2.AbiDecodingDataSizeInvalidError = exports2.AbiConstructorParamsNotFoundError = exports2.AbiConstructorNotFoundError = void 0;
    var formatAbiItem_js_1 = require_formatAbiItem();
    var size_js_1 = require_size();
    var base_js_1 = require_base();
    var AbiConstructorNotFoundError = class extends base_js_1.BaseError {
      constructor({ docsPath }) {
        super([
          "A constructor was not found on the ABI.",
          "Make sure you are using the correct ABI and that the constructor exists on it."
        ].join("\n"), {
          docsPath,
          name: "AbiConstructorNotFoundError"
        });
      }
    };
    exports2.AbiConstructorNotFoundError = AbiConstructorNotFoundError;
    var AbiConstructorParamsNotFoundError = class extends base_js_1.BaseError {
      constructor({ docsPath }) {
        super([
          "Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.",
          "Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists."
        ].join("\n"), {
          docsPath,
          name: "AbiConstructorParamsNotFoundError"
        });
      }
    };
    exports2.AbiConstructorParamsNotFoundError = AbiConstructorParamsNotFoundError;
    var AbiDecodingDataSizeInvalidError = class extends base_js_1.BaseError {
      constructor({ data, size }) {
        super([
          `Data size of ${size} bytes is invalid.`,
          "Size must be in increments of 32 bytes (size % 32 === 0)."
        ].join("\n"), {
          metaMessages: [`Data: ${data} (${size} bytes)`],
          name: "AbiDecodingDataSizeInvalidError"
        });
      }
    };
    exports2.AbiDecodingDataSizeInvalidError = AbiDecodingDataSizeInvalidError;
    var AbiDecodingDataSizeTooSmallError = class extends base_js_1.BaseError {
      constructor({ data, params, size }) {
        super([`Data size of ${size} bytes is too small for given parameters.`].join("\n"), {
          metaMessages: [
            `Params: (${(0, formatAbiItem_js_1.formatAbiParams)(params, { includeName: true })})`,
            `Data:   ${data} (${size} bytes)`
          ],
          name: "AbiDecodingDataSizeTooSmallError"
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "params", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "size", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.data = data;
        this.params = params;
        this.size = size;
      }
    };
    exports2.AbiDecodingDataSizeTooSmallError = AbiDecodingDataSizeTooSmallError;
    var AbiDecodingZeroDataError = class extends base_js_1.BaseError {
      constructor() {
        super('Cannot decode zero data ("0x") with ABI parameters.', {
          name: "AbiDecodingZeroDataError"
        });
      }
    };
    exports2.AbiDecodingZeroDataError = AbiDecodingZeroDataError;
    var AbiEncodingArrayLengthMismatchError = class extends base_js_1.BaseError {
      constructor({ expectedLength, givenLength, type }) {
        super([
          `ABI encoding array length mismatch for type ${type}.`,
          `Expected length: ${expectedLength}`,
          `Given length: ${givenLength}`
        ].join("\n"), { name: "AbiEncodingArrayLengthMismatchError" });
      }
    };
    exports2.AbiEncodingArrayLengthMismatchError = AbiEncodingArrayLengthMismatchError;
    var AbiEncodingBytesSizeMismatchError = class extends base_js_1.BaseError {
      constructor({ expectedSize, value }) {
        super(`Size of bytes "${value}" (bytes${(0, size_js_1.size)(value)}) does not match expected size (bytes${expectedSize}).`, { name: "AbiEncodingBytesSizeMismatchError" });
      }
    };
    exports2.AbiEncodingBytesSizeMismatchError = AbiEncodingBytesSizeMismatchError;
    var AbiEncodingLengthMismatchError = class extends base_js_1.BaseError {
      constructor({ expectedLength, givenLength }) {
        super([
          "ABI encoding params/values length mismatch.",
          `Expected length (params): ${expectedLength}`,
          `Given length (values): ${givenLength}`
        ].join("\n"), { name: "AbiEncodingLengthMismatchError" });
      }
    };
    exports2.AbiEncodingLengthMismatchError = AbiEncodingLengthMismatchError;
    var AbiErrorInputsNotFoundError = class extends base_js_1.BaseError {
      constructor(errorName, { docsPath }) {
        super([
          `Arguments (\`args\`) were provided to "${errorName}", but "${errorName}" on the ABI does not contain any parameters (\`inputs\`).`,
          "Cannot encode error result without knowing what the parameter types are.",
          "Make sure you are using the correct ABI and that the inputs exist on it."
        ].join("\n"), {
          docsPath,
          name: "AbiErrorInputsNotFoundError"
        });
      }
    };
    exports2.AbiErrorInputsNotFoundError = AbiErrorInputsNotFoundError;
    var AbiErrorNotFoundError = class extends base_js_1.BaseError {
      constructor(errorName, { docsPath } = {}) {
        super([
          `Error ${errorName ? `"${errorName}" ` : ""}not found on ABI.`,
          "Make sure you are using the correct ABI and that the error exists on it."
        ].join("\n"), {
          docsPath,
          name: "AbiErrorNotFoundError"
        });
      }
    };
    exports2.AbiErrorNotFoundError = AbiErrorNotFoundError;
    var AbiErrorSignatureNotFoundError = class extends base_js_1.BaseError {
      constructor(signature, { docsPath }) {
        super([
          `Encoded error signature "${signature}" not found on ABI.`,
          "Make sure you are using the correct ABI and that the error exists on it.",
          `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`
        ].join("\n"), {
          docsPath,
          name: "AbiErrorSignatureNotFoundError"
        });
        Object.defineProperty(this, "signature", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.signature = signature;
      }
    };
    exports2.AbiErrorSignatureNotFoundError = AbiErrorSignatureNotFoundError;
    var AbiEventSignatureEmptyTopicsError = class extends base_js_1.BaseError {
      constructor({ docsPath }) {
        super("Cannot extract event signature from empty topics.", {
          docsPath,
          name: "AbiEventSignatureEmptyTopicsError"
        });
      }
    };
    exports2.AbiEventSignatureEmptyTopicsError = AbiEventSignatureEmptyTopicsError;
    var AbiEventSignatureNotFoundError = class extends base_js_1.BaseError {
      constructor(signature, { docsPath }) {
        super([
          `Encoded event signature "${signature}" not found on ABI.`,
          "Make sure you are using the correct ABI and that the event exists on it.",
          `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`
        ].join("\n"), {
          docsPath,
          name: "AbiEventSignatureNotFoundError"
        });
      }
    };
    exports2.AbiEventSignatureNotFoundError = AbiEventSignatureNotFoundError;
    var AbiEventNotFoundError = class extends base_js_1.BaseError {
      constructor(eventName, { docsPath } = {}) {
        super([
          `Event ${eventName ? `"${eventName}" ` : ""}not found on ABI.`,
          "Make sure you are using the correct ABI and that the event exists on it."
        ].join("\n"), {
          docsPath,
          name: "AbiEventNotFoundError"
        });
      }
    };
    exports2.AbiEventNotFoundError = AbiEventNotFoundError;
    var AbiFunctionNotFoundError = class extends base_js_1.BaseError {
      constructor(functionName, { docsPath } = {}) {
        super([
          `Function ${functionName ? `"${functionName}" ` : ""}not found on ABI.`,
          "Make sure you are using the correct ABI and that the function exists on it."
        ].join("\n"), {
          docsPath,
          name: "AbiFunctionNotFoundError"
        });
      }
    };
    exports2.AbiFunctionNotFoundError = AbiFunctionNotFoundError;
    var AbiFunctionOutputsNotFoundError = class extends base_js_1.BaseError {
      constructor(functionName, { docsPath }) {
        super([
          `Function "${functionName}" does not contain any \`outputs\` on ABI.`,
          "Cannot decode function result without knowing what the parameter types are.",
          "Make sure you are using the correct ABI and that the function exists on it."
        ].join("\n"), {
          docsPath,
          name: "AbiFunctionOutputsNotFoundError"
        });
      }
    };
    exports2.AbiFunctionOutputsNotFoundError = AbiFunctionOutputsNotFoundError;
    var AbiFunctionSignatureNotFoundError = class extends base_js_1.BaseError {
      constructor(signature, { docsPath }) {
        super([
          `Encoded function signature "${signature}" not found on ABI.`,
          "Make sure you are using the correct ABI and that the function exists on it.",
          `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`
        ].join("\n"), {
          docsPath,
          name: "AbiFunctionSignatureNotFoundError"
        });
      }
    };
    exports2.AbiFunctionSignatureNotFoundError = AbiFunctionSignatureNotFoundError;
    var AbiItemAmbiguityError = class extends base_js_1.BaseError {
      constructor(x, y) {
        super("Found ambiguous types in overloaded ABI items.", {
          metaMessages: [
            `\`${x.type}\` in \`${(0, formatAbiItem_js_1.formatAbiItem)(x.abiItem)}\`, and`,
            `\`${y.type}\` in \`${(0, formatAbiItem_js_1.formatAbiItem)(y.abiItem)}\``,
            "",
            "These types encode differently and cannot be distinguished at runtime.",
            "Remove one of the ambiguous items in the ABI."
          ],
          name: "AbiItemAmbiguityError"
        });
      }
    };
    exports2.AbiItemAmbiguityError = AbiItemAmbiguityError;
    var BytesSizeMismatchError = class extends base_js_1.BaseError {
      constructor({ expectedSize, givenSize }) {
        super(`Expected bytes${expectedSize}, got bytes${givenSize}.`, {
          name: "BytesSizeMismatchError"
        });
      }
    };
    exports2.BytesSizeMismatchError = BytesSizeMismatchError;
    var DecodeLogDataMismatch = class extends base_js_1.BaseError {
      constructor({ abiItem, data, params, size }) {
        super([
          `Data size of ${size} bytes is too small for non-indexed event parameters.`
        ].join("\n"), {
          metaMessages: [
            `Params: (${(0, formatAbiItem_js_1.formatAbiParams)(params, { includeName: true })})`,
            `Data:   ${data} (${size} bytes)`
          ],
          name: "DecodeLogDataMismatch"
        });
        Object.defineProperty(this, "abiItem", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "params", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "size", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.abiItem = abiItem;
        this.data = data;
        this.params = params;
        this.size = size;
      }
    };
    exports2.DecodeLogDataMismatch = DecodeLogDataMismatch;
    var DecodeLogTopicsMismatch = class extends base_js_1.BaseError {
      constructor({ abiItem, param }) {
        super([
          `Expected a topic for indexed event parameter${param.name ? ` "${param.name}"` : ""} on event "${(0, formatAbiItem_js_1.formatAbiItem)(abiItem, { includeName: true })}".`
        ].join("\n"), { name: "DecodeLogTopicsMismatch" });
        Object.defineProperty(this, "abiItem", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.abiItem = abiItem;
      }
    };
    exports2.DecodeLogTopicsMismatch = DecodeLogTopicsMismatch;
    var InvalidAbiEncodingTypeError = class extends base_js_1.BaseError {
      constructor(type, { docsPath }) {
        super([
          `Type "${type}" is not a valid encoding type.`,
          "Please provide a valid ABI type."
        ].join("\n"), { docsPath, name: "InvalidAbiEncodingType" });
      }
    };
    exports2.InvalidAbiEncodingTypeError = InvalidAbiEncodingTypeError;
    var InvalidAbiDecodingTypeError = class extends base_js_1.BaseError {
      constructor(type, { docsPath }) {
        super([
          `Type "${type}" is not a valid decoding type.`,
          "Please provide a valid ABI type."
        ].join("\n"), { docsPath, name: "InvalidAbiDecodingType" });
      }
    };
    exports2.InvalidAbiDecodingTypeError = InvalidAbiDecodingTypeError;
    var InvalidArrayError = class extends base_js_1.BaseError {
      constructor(value) {
        super([`Value "${value}" is not a valid array.`].join("\n"), {
          name: "InvalidArrayError"
        });
      }
    };
    exports2.InvalidArrayError = InvalidArrayError;
    var InvalidDefinitionTypeError = class extends base_js_1.BaseError {
      constructor(type) {
        super([
          `"${type}" is not a valid definition type.`,
          'Valid types: "function", "event", "error"'
        ].join("\n"), { name: "InvalidDefinitionTypeError" });
      }
    };
    exports2.InvalidDefinitionTypeError = InvalidDefinitionTypeError;
    var UnsupportedPackedAbiType = class extends base_js_1.BaseError {
      constructor(type) {
        super(`Type "${type}" is not supported for packed encoding.`, {
          name: "UnsupportedPackedAbiType"
        });
      }
    };
    exports2.UnsupportedPackedAbiType = UnsupportedPackedAbiType;
  }
});

// node_modules/viem/_cjs/utils/hash/hashSignature.js
var require_hashSignature = __commonJS({
  "node_modules/viem/_cjs/utils/hash/hashSignature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashSignature = hashSignature;
    var toBytes_js_1 = require_toBytes();
    var keccak256_js_1 = require_keccak256();
    var hash = (value) => (0, keccak256_js_1.keccak256)((0, toBytes_js_1.toBytes)(value));
    function hashSignature(sig) {
      return hash(sig);
    }
  }
});

// node_modules/abitype/dist/cjs/version.js
var require_version2 = __commonJS({
  "node_modules/abitype/dist/cjs/version.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.version = void 0;
    exports2.version = "1.0.6";
  }
});

// node_modules/abitype/dist/cjs/errors.js
var require_errors = __commonJS({
  "node_modules/abitype/dist/cjs/errors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseError = void 0;
    var version_js_1 = require_version2();
    var BaseError = class _BaseError extends Error {
      constructor(shortMessage, args = {}) {
        const details = args.cause instanceof _BaseError ? args.cause.details : args.cause?.message ? args.cause.message : args.details;
        const docsPath = args.cause instanceof _BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;
        const message = [
          shortMessage || "An error occurred.",
          "",
          ...args.metaMessages ? [...args.metaMessages, ""] : [],
          ...docsPath ? [`Docs: https://abitype.dev${docsPath}`] : [],
          ...details ? [`Details: ${details}`] : [],
          `Version: abitype@${version_js_1.version}`
        ].join("\n");
        super(message);
        Object.defineProperty(this, "details", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "docsPath", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "metaMessages", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "shortMessage", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiTypeError"
        });
        if (args.cause)
          this.cause = args.cause;
        this.details = details;
        this.docsPath = docsPath;
        this.metaMessages = args.metaMessages;
        this.shortMessage = shortMessage;
      }
    };
    exports2.BaseError = BaseError;
  }
});

// node_modules/abitype/dist/cjs/narrow.js
var require_narrow = __commonJS({
  "node_modules/abitype/dist/cjs/narrow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.narrow = narrow;
    function narrow(value) {
      return value;
    }
  }
});

// node_modules/abitype/dist/cjs/regex.js
var require_regex = __commonJS({
  "node_modules/abitype/dist/cjs/regex.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isTupleRegex = exports2.integerRegex = exports2.bytesRegex = void 0;
    exports2.execTyped = execTyped;
    function execTyped(regex, string) {
      const match = regex.exec(string);
      return match?.groups;
    }
    exports2.bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
    exports2.integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
    exports2.isTupleRegex = /^\(.+?\).*?$/;
  }
});

// node_modules/abitype/dist/cjs/human-readable/formatAbiParameter.js
var require_formatAbiParameter = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/formatAbiParameter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatAbiParameter = formatAbiParameter;
    var regex_js_1 = require_regex();
    var tupleRegex = /^tuple(?<array>(\[(\d*)\])*)$/;
    function formatAbiParameter(abiParameter) {
      let type = abiParameter.type;
      if (tupleRegex.test(abiParameter.type) && "components" in abiParameter) {
        type = "(";
        const length = abiParameter.components.length;
        for (let i = 0; i < length; i++) {
          const component = abiParameter.components[i];
          type += formatAbiParameter(component);
          if (i < length - 1)
            type += ", ";
        }
        const result = (0, regex_js_1.execTyped)(tupleRegex, abiParameter.type);
        type += `)${result?.array ?? ""}`;
        return formatAbiParameter({
          ...abiParameter,
          type
        });
      }
      if ("indexed" in abiParameter && abiParameter.indexed)
        type = `${type} indexed`;
      if (abiParameter.name)
        return `${type} ${abiParameter.name}`;
      return type;
    }
  }
});

// node_modules/abitype/dist/cjs/human-readable/formatAbiParameters.js
var require_formatAbiParameters = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/formatAbiParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatAbiParameters = formatAbiParameters;
    var formatAbiParameter_js_1 = require_formatAbiParameter();
    function formatAbiParameters(abiParameters) {
      let params = "";
      const length = abiParameters.length;
      for (let i = 0; i < length; i++) {
        const abiParameter = abiParameters[i];
        params += (0, formatAbiParameter_js_1.formatAbiParameter)(abiParameter);
        if (i !== length - 1)
          params += ", ";
      }
      return params;
    }
  }
});

// node_modules/abitype/dist/cjs/human-readable/formatAbiItem.js
var require_formatAbiItem2 = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/formatAbiItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatAbiItem = formatAbiItem;
    var formatAbiParameters_js_1 = require_formatAbiParameters();
    function formatAbiItem(abiItem) {
      if (abiItem.type === "function")
        return `function ${abiItem.name}(${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.inputs)})${abiItem.stateMutability && abiItem.stateMutability !== "nonpayable" ? ` ${abiItem.stateMutability}` : ""}${abiItem.outputs.length ? ` returns (${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.outputs)})` : ""}`;
      if (abiItem.type === "event")
        return `event ${abiItem.name}(${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.inputs)})`;
      if (abiItem.type === "error")
        return `error ${abiItem.name}(${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.inputs)})`;
      if (abiItem.type === "constructor")
        return `constructor(${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.inputs)})${abiItem.stateMutability === "payable" ? " payable" : ""}`;
      if (abiItem.type === "fallback")
        return "fallback()";
      return "receive() external payable";
    }
  }
});

// node_modules/abitype/dist/cjs/human-readable/formatAbi.js
var require_formatAbi = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/formatAbi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatAbi = formatAbi;
    var formatAbiItem_js_1 = require_formatAbiItem2();
    function formatAbi(abi) {
      const signatures = [];
      const length = abi.length;
      for (let i = 0; i < length; i++) {
        const abiItem = abi[i];
        const signature = (0, formatAbiItem_js_1.formatAbiItem)(abiItem);
        signatures.push(signature);
      }
      return signatures;
    }
  }
});

// node_modules/abitype/dist/cjs/human-readable/runtime/signatures.js
var require_signatures = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/runtime/signatures.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.functionModifiers = exports2.eventModifiers = exports2.modifiers = void 0;
    exports2.isErrorSignature = isErrorSignature;
    exports2.execErrorSignature = execErrorSignature;
    exports2.isEventSignature = isEventSignature;
    exports2.execEventSignature = execEventSignature;
    exports2.isFunctionSignature = isFunctionSignature;
    exports2.execFunctionSignature = execFunctionSignature;
    exports2.isStructSignature = isStructSignature;
    exports2.execStructSignature = execStructSignature;
    exports2.isConstructorSignature = isConstructorSignature;
    exports2.execConstructorSignature = execConstructorSignature;
    exports2.isFallbackSignature = isFallbackSignature;
    exports2.isReceiveSignature = isReceiveSignature;
    var regex_js_1 = require_regex();
    var errorSignatureRegex = /^error (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
    function isErrorSignature(signature) {
      return errorSignatureRegex.test(signature);
    }
    function execErrorSignature(signature) {
      return (0, regex_js_1.execTyped)(errorSignatureRegex, signature);
    }
    var eventSignatureRegex = /^event (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
    function isEventSignature(signature) {
      return eventSignatureRegex.test(signature);
    }
    function execEventSignature(signature) {
      return (0, regex_js_1.execTyped)(eventSignatureRegex, signature);
    }
    var functionSignatureRegex = /^function (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns\s?\((?<returns>.*?)\))?$/;
    function isFunctionSignature(signature) {
      return functionSignatureRegex.test(signature);
    }
    function execFunctionSignature(signature) {
      return (0, regex_js_1.execTyped)(functionSignatureRegex, signature);
    }
    var structSignatureRegex = /^struct (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*) \{(?<properties>.*?)\}$/;
    function isStructSignature(signature) {
      return structSignatureRegex.test(signature);
    }
    function execStructSignature(signature) {
      return (0, regex_js_1.execTyped)(structSignatureRegex, signature);
    }
    var constructorSignatureRegex = /^constructor\((?<parameters>.*?)\)(?:\s(?<stateMutability>payable{1}))?$/;
    function isConstructorSignature(signature) {
      return constructorSignatureRegex.test(signature);
    }
    function execConstructorSignature(signature) {
      return (0, regex_js_1.execTyped)(constructorSignatureRegex, signature);
    }
    var fallbackSignatureRegex = /^fallback\(\) external(?:\s(?<stateMutability>payable{1}))?$/;
    function isFallbackSignature(signature) {
      return fallbackSignatureRegex.test(signature);
    }
    var receiveSignatureRegex = /^receive\(\) external payable$/;
    function isReceiveSignature(signature) {
      return receiveSignatureRegex.test(signature);
    }
    exports2.modifiers = /* @__PURE__ */ new Set([
      "memory",
      "indexed",
      "storage",
      "calldata"
    ]);
    exports2.eventModifiers = /* @__PURE__ */ new Set(["indexed"]);
    exports2.functionModifiers = /* @__PURE__ */ new Set([
      "calldata",
      "memory",
      "storage"
    ]);
  }
});

// node_modules/abitype/dist/cjs/human-readable/errors/abiItem.js
var require_abiItem = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/errors/abiItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnknownSolidityTypeError = exports2.UnknownTypeError = exports2.InvalidAbiItemError = void 0;
    var errors_js_1 = require_errors();
    var InvalidAbiItemError = class extends errors_js_1.BaseError {
      constructor({ signature }) {
        super("Failed to parse ABI item.", {
          details: `parseAbiItem(${JSON.stringify(signature, null, 2)})`,
          docsPath: "/api/human#parseabiitem-1"
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAbiItemError"
        });
      }
    };
    exports2.InvalidAbiItemError = InvalidAbiItemError;
    var UnknownTypeError = class extends errors_js_1.BaseError {
      constructor({ type }) {
        super("Unknown type.", {
          metaMessages: [
            `Type "${type}" is not a valid ABI type. Perhaps you forgot to include a struct signature?`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnknownTypeError"
        });
      }
    };
    exports2.UnknownTypeError = UnknownTypeError;
    var UnknownSolidityTypeError = class extends errors_js_1.BaseError {
      constructor({ type }) {
        super("Unknown type.", {
          metaMessages: [`Type "${type}" is not a valid ABI type.`]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnknownSolidityTypeError"
        });
      }
    };
    exports2.UnknownSolidityTypeError = UnknownSolidityTypeError;
  }
});

// node_modules/abitype/dist/cjs/human-readable/errors/abiParameter.js
var require_abiParameter = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/errors/abiParameter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidAbiTypeParameterError = exports2.InvalidFunctionModifierError = exports2.InvalidModifierError = exports2.SolidityProtectedKeywordError = exports2.InvalidParameterError = exports2.InvalidAbiParametersError = exports2.InvalidAbiParameterError = void 0;
    var errors_js_1 = require_errors();
    var InvalidAbiParameterError = class extends errors_js_1.BaseError {
      constructor({ param }) {
        super("Failed to parse ABI parameter.", {
          details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,
          docsPath: "/api/human#parseabiparameter-1"
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAbiParameterError"
        });
      }
    };
    exports2.InvalidAbiParameterError = InvalidAbiParameterError;
    var InvalidAbiParametersError = class extends errors_js_1.BaseError {
      constructor({ params }) {
        super("Failed to parse ABI parameters.", {
          details: `parseAbiParameters(${JSON.stringify(params, null, 2)})`,
          docsPath: "/api/human#parseabiparameters-1"
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAbiParametersError"
        });
      }
    };
    exports2.InvalidAbiParametersError = InvalidAbiParametersError;
    var InvalidParameterError = class extends errors_js_1.BaseError {
      constructor({ param }) {
        super("Invalid ABI parameter.", {
          details: param
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidParameterError"
        });
      }
    };
    exports2.InvalidParameterError = InvalidParameterError;
    var SolidityProtectedKeywordError = class extends errors_js_1.BaseError {
      constructor({ param, name }) {
        super("Invalid ABI parameter.", {
          details: param,
          metaMessages: [
            `"${name}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "SolidityProtectedKeywordError"
        });
      }
    };
    exports2.SolidityProtectedKeywordError = SolidityProtectedKeywordError;
    var InvalidModifierError = class extends errors_js_1.BaseError {
      constructor({ param, type, modifier }) {
        super("Invalid ABI parameter.", {
          details: param,
          metaMessages: [
            `Modifier "${modifier}" not allowed${type ? ` in "${type}" type` : ""}.`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidModifierError"
        });
      }
    };
    exports2.InvalidModifierError = InvalidModifierError;
    var InvalidFunctionModifierError = class extends errors_js_1.BaseError {
      constructor({ param, type, modifier }) {
        super("Invalid ABI parameter.", {
          details: param,
          metaMessages: [
            `Modifier "${modifier}" not allowed${type ? ` in "${type}" type` : ""}.`,
            `Data location can only be specified for array, struct, or mapping types, but "${modifier}" was given.`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidFunctionModifierError"
        });
      }
    };
    exports2.InvalidFunctionModifierError = InvalidFunctionModifierError;
    var InvalidAbiTypeParameterError = class extends errors_js_1.BaseError {
      constructor({ abiParameter }) {
        super("Invalid ABI parameter.", {
          details: JSON.stringify(abiParameter, null, 2),
          metaMessages: ["ABI parameter type is invalid."]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAbiTypeParameterError"
        });
      }
    };
    exports2.InvalidAbiTypeParameterError = InvalidAbiTypeParameterError;
  }
});

// node_modules/abitype/dist/cjs/human-readable/errors/signature.js
var require_signature = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/errors/signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidStructSignatureError = exports2.UnknownSignatureError = exports2.InvalidSignatureError = void 0;
    var errors_js_1 = require_errors();
    var InvalidSignatureError = class extends errors_js_1.BaseError {
      constructor({ signature, type }) {
        super(`Invalid ${type} signature.`, {
          details: signature
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidSignatureError"
        });
      }
    };
    exports2.InvalidSignatureError = InvalidSignatureError;
    var UnknownSignatureError = class extends errors_js_1.BaseError {
      constructor({ signature }) {
        super("Unknown signature.", {
          details: signature
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnknownSignatureError"
        });
      }
    };
    exports2.UnknownSignatureError = UnknownSignatureError;
    var InvalidStructSignatureError = class extends errors_js_1.BaseError {
      constructor({ signature }) {
        super("Invalid struct signature.", {
          details: signature,
          metaMessages: ["No properties exist."]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidStructSignatureError"
        });
      }
    };
    exports2.InvalidStructSignatureError = InvalidStructSignatureError;
  }
});

// node_modules/abitype/dist/cjs/human-readable/errors/struct.js
var require_struct = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/errors/struct.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CircularReferenceError = void 0;
    var errors_js_1 = require_errors();
    var CircularReferenceError = class extends errors_js_1.BaseError {
      constructor({ type }) {
        super("Circular reference detected.", {
          metaMessages: [`Struct "${type}" is a circular reference.`]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "CircularReferenceError"
        });
      }
    };
    exports2.CircularReferenceError = CircularReferenceError;
  }
});

// node_modules/abitype/dist/cjs/human-readable/errors/splitParameters.js
var require_splitParameters = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/errors/splitParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidParenthesisError = void 0;
    var errors_js_1 = require_errors();
    var InvalidParenthesisError = class extends errors_js_1.BaseError {
      constructor({ current, depth }) {
        super("Unbalanced parentheses.", {
          metaMessages: [
            `"${current.trim()}" has too many ${depth > 0 ? "opening" : "closing"} parentheses.`
          ],
          details: `Depth "${depth}"`
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidParenthesisError"
        });
      }
    };
    exports2.InvalidParenthesisError = InvalidParenthesisError;
  }
});

// node_modules/abitype/dist/cjs/human-readable/runtime/cache.js
var require_cache = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/runtime/cache.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parameterCache = void 0;
    exports2.getParameterCacheKey = getParameterCacheKey;
    function getParameterCacheKey(param, type) {
      if (type)
        return `${type}:${param}`;
      return param;
    }
    exports2.parameterCache = /* @__PURE__ */ new Map([
      ["address", { type: "address" }],
      ["bool", { type: "bool" }],
      ["bytes", { type: "bytes" }],
      ["bytes32", { type: "bytes32" }],
      ["int", { type: "int256" }],
      ["int256", { type: "int256" }],
      ["string", { type: "string" }],
      ["uint", { type: "uint256" }],
      ["uint8", { type: "uint8" }],
      ["uint16", { type: "uint16" }],
      ["uint24", { type: "uint24" }],
      ["uint32", { type: "uint32" }],
      ["uint64", { type: "uint64" }],
      ["uint96", { type: "uint96" }],
      ["uint112", { type: "uint112" }],
      ["uint160", { type: "uint160" }],
      ["uint192", { type: "uint192" }],
      ["uint256", { type: "uint256" }],
      ["address owner", { type: "address", name: "owner" }],
      ["address to", { type: "address", name: "to" }],
      ["bool approved", { type: "bool", name: "approved" }],
      ["bytes _data", { type: "bytes", name: "_data" }],
      ["bytes data", { type: "bytes", name: "data" }],
      ["bytes signature", { type: "bytes", name: "signature" }],
      ["bytes32 hash", { type: "bytes32", name: "hash" }],
      ["bytes32 r", { type: "bytes32", name: "r" }],
      ["bytes32 root", { type: "bytes32", name: "root" }],
      ["bytes32 s", { type: "bytes32", name: "s" }],
      ["string name", { type: "string", name: "name" }],
      ["string symbol", { type: "string", name: "symbol" }],
      ["string tokenURI", { type: "string", name: "tokenURI" }],
      ["uint tokenId", { type: "uint256", name: "tokenId" }],
      ["uint8 v", { type: "uint8", name: "v" }],
      ["uint256 balance", { type: "uint256", name: "balance" }],
      ["uint256 tokenId", { type: "uint256", name: "tokenId" }],
      ["uint256 value", { type: "uint256", name: "value" }],
      [
        "event:address indexed from",
        { type: "address", name: "from", indexed: true }
      ],
      ["event:address indexed to", { type: "address", name: "to", indexed: true }],
      [
        "event:uint indexed tokenId",
        { type: "uint256", name: "tokenId", indexed: true }
      ],
      [
        "event:uint256 indexed tokenId",
        { type: "uint256", name: "tokenId", indexed: true }
      ]
    ]);
  }
});

// node_modules/abitype/dist/cjs/human-readable/runtime/utils.js
var require_utils6 = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/runtime/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseSignature = parseSignature;
    exports2.parseAbiParameter = parseAbiParameter;
    exports2.splitParameters = splitParameters;
    exports2.isSolidityType = isSolidityType;
    exports2.isSolidityKeyword = isSolidityKeyword;
    exports2.isValidDataLocation = isValidDataLocation;
    var regex_js_1 = require_regex();
    var abiItem_js_1 = require_abiItem();
    var abiParameter_js_1 = require_abiParameter();
    var signature_js_1 = require_signature();
    var splitParameters_js_1 = require_splitParameters();
    var cache_js_1 = require_cache();
    var signatures_js_1 = require_signatures();
    function parseSignature(signature, structs = {}) {
      if ((0, signatures_js_1.isFunctionSignature)(signature)) {
        const match = (0, signatures_js_1.execFunctionSignature)(signature);
        if (!match)
          throw new signature_js_1.InvalidSignatureError({ signature, type: "function" });
        const inputParams = splitParameters(match.parameters);
        const inputs = [];
        const inputLength = inputParams.length;
        for (let i = 0; i < inputLength; i++) {
          inputs.push(parseAbiParameter(inputParams[i], {
            modifiers: signatures_js_1.functionModifiers,
            structs,
            type: "function"
          }));
        }
        const outputs = [];
        if (match.returns) {
          const outputParams = splitParameters(match.returns);
          const outputLength = outputParams.length;
          for (let i = 0; i < outputLength; i++) {
            outputs.push(parseAbiParameter(outputParams[i], {
              modifiers: signatures_js_1.functionModifiers,
              structs,
              type: "function"
            }));
          }
        }
        return {
          name: match.name,
          type: "function",
          stateMutability: match.stateMutability ?? "nonpayable",
          inputs,
          outputs
        };
      }
      if ((0, signatures_js_1.isEventSignature)(signature)) {
        const match = (0, signatures_js_1.execEventSignature)(signature);
        if (!match)
          throw new signature_js_1.InvalidSignatureError({ signature, type: "event" });
        const params = splitParameters(match.parameters);
        const abiParameters = [];
        const length = params.length;
        for (let i = 0; i < length; i++) {
          abiParameters.push(parseAbiParameter(params[i], {
            modifiers: signatures_js_1.eventModifiers,
            structs,
            type: "event"
          }));
        }
        return { name: match.name, type: "event", inputs: abiParameters };
      }
      if ((0, signatures_js_1.isErrorSignature)(signature)) {
        const match = (0, signatures_js_1.execErrorSignature)(signature);
        if (!match)
          throw new signature_js_1.InvalidSignatureError({ signature, type: "error" });
        const params = splitParameters(match.parameters);
        const abiParameters = [];
        const length = params.length;
        for (let i = 0; i < length; i++) {
          abiParameters.push(parseAbiParameter(params[i], { structs, type: "error" }));
        }
        return { name: match.name, type: "error", inputs: abiParameters };
      }
      if ((0, signatures_js_1.isConstructorSignature)(signature)) {
        const match = (0, signatures_js_1.execConstructorSignature)(signature);
        if (!match)
          throw new signature_js_1.InvalidSignatureError({ signature, type: "constructor" });
        const params = splitParameters(match.parameters);
        const abiParameters = [];
        const length = params.length;
        for (let i = 0; i < length; i++) {
          abiParameters.push(parseAbiParameter(params[i], { structs, type: "constructor" }));
        }
        return {
          type: "constructor",
          stateMutability: match.stateMutability ?? "nonpayable",
          inputs: abiParameters
        };
      }
      if ((0, signatures_js_1.isFallbackSignature)(signature))
        return { type: "fallback" };
      if ((0, signatures_js_1.isReceiveSignature)(signature))
        return {
          type: "receive",
          stateMutability: "payable"
        };
      throw new signature_js_1.UnknownSignatureError({ signature });
    }
    var abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;
    var abiParameterWithTupleRegex = /^\((?<type>.+?)\)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;
    var dynamicIntegerRegex = /^u?int$/;
    function parseAbiParameter(param, options2) {
      const parameterCacheKey = (0, cache_js_1.getParameterCacheKey)(param, options2?.type);
      if (cache_js_1.parameterCache.has(parameterCacheKey))
        return cache_js_1.parameterCache.get(parameterCacheKey);
      const isTuple = regex_js_1.isTupleRegex.test(param);
      const match = (0, regex_js_1.execTyped)(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);
      if (!match)
        throw new abiParameter_js_1.InvalidParameterError({ param });
      if (match.name && isSolidityKeyword(match.name))
        throw new abiParameter_js_1.SolidityProtectedKeywordError({ param, name: match.name });
      const name = match.name ? { name: match.name } : {};
      const indexed = match.modifier === "indexed" ? { indexed: true } : {};
      const structs = options2?.structs ?? {};
      let type;
      let components = {};
      if (isTuple) {
        type = "tuple";
        const params = splitParameters(match.type);
        const components_ = [];
        const length = params.length;
        for (let i = 0; i < length; i++) {
          components_.push(parseAbiParameter(params[i], { structs }));
        }
        components = { components: components_ };
      } else if (match.type in structs) {
        type = "tuple";
        components = { components: structs[match.type] };
      } else if (dynamicIntegerRegex.test(match.type)) {
        type = `${match.type}256`;
      } else {
        type = match.type;
        if (!(options2?.type === "struct") && !isSolidityType(type))
          throw new abiItem_js_1.UnknownSolidityTypeError({ type });
      }
      if (match.modifier) {
        if (!options2?.modifiers?.has?.(match.modifier))
          throw new abiParameter_js_1.InvalidModifierError({
            param,
            type: options2?.type,
            modifier: match.modifier
          });
        if (signatures_js_1.functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array))
          throw new abiParameter_js_1.InvalidFunctionModifierError({
            param,
            type: options2?.type,
            modifier: match.modifier
          });
      }
      const abiParameter = {
        type: `${type}${match.array ?? ""}`,
        ...name,
        ...indexed,
        ...components
      };
      cache_js_1.parameterCache.set(parameterCacheKey, abiParameter);
      return abiParameter;
    }
    function splitParameters(params, result = [], current = "", depth = 0) {
      const length = params.trim().length;
      for (let i = 0; i < length; i++) {
        const char = params[i];
        const tail = params.slice(i + 1);
        switch (char) {
          case ",":
            return depth === 0 ? splitParameters(tail, [...result, current.trim()]) : splitParameters(tail, result, `${current}${char}`, depth);
          case "(":
            return splitParameters(tail, result, `${current}${char}`, depth + 1);
          case ")":
            return splitParameters(tail, result, `${current}${char}`, depth - 1);
          default:
            return splitParameters(tail, result, `${current}${char}`, depth);
        }
      }
      if (current === "")
        return result;
      if (depth !== 0)
        throw new splitParameters_js_1.InvalidParenthesisError({ current, depth });
      result.push(current.trim());
      return result;
    }
    function isSolidityType(type) {
      return type === "address" || type === "bool" || type === "function" || type === "string" || regex_js_1.bytesRegex.test(type) || regex_js_1.integerRegex.test(type);
    }
    var protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;
    function isSolidityKeyword(name) {
      return name === "address" || name === "bool" || name === "function" || name === "string" || name === "tuple" || regex_js_1.bytesRegex.test(name) || regex_js_1.integerRegex.test(name) || protectedKeywordsRegex.test(name);
    }
    function isValidDataLocation(type, isArray) {
      return isArray || type === "bytes" || type === "string" || type === "tuple";
    }
  }
});

// node_modules/abitype/dist/cjs/human-readable/runtime/structs.js
var require_structs = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/runtime/structs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseStructs = parseStructs;
    var regex_js_1 = require_regex();
    var abiItem_js_1 = require_abiItem();
    var abiParameter_js_1 = require_abiParameter();
    var signature_js_1 = require_signature();
    var struct_js_1 = require_struct();
    var signatures_js_1 = require_signatures();
    var utils_js_1 = require_utils6();
    function parseStructs(signatures) {
      const shallowStructs = {};
      const signaturesLength = signatures.length;
      for (let i = 0; i < signaturesLength; i++) {
        const signature = signatures[i];
        if (!(0, signatures_js_1.isStructSignature)(signature))
          continue;
        const match = (0, signatures_js_1.execStructSignature)(signature);
        if (!match)
          throw new signature_js_1.InvalidSignatureError({ signature, type: "struct" });
        const properties = match.properties.split(";");
        const components = [];
        const propertiesLength = properties.length;
        for (let k = 0; k < propertiesLength; k++) {
          const property = properties[k];
          const trimmed = property.trim();
          if (!trimmed)
            continue;
          const abiParameter = (0, utils_js_1.parseAbiParameter)(trimmed, {
            type: "struct"
          });
          components.push(abiParameter);
        }
        if (!components.length)
          throw new signature_js_1.InvalidStructSignatureError({ signature });
        shallowStructs[match.name] = components;
      }
      const resolvedStructs = {};
      const entries = Object.entries(shallowStructs);
      const entriesLength = entries.length;
      for (let i = 0; i < entriesLength; i++) {
        const [name, parameters] = entries[i];
        resolvedStructs[name] = resolveStructs(parameters, shallowStructs);
      }
      return resolvedStructs;
    }
    var typeWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?$/;
    function resolveStructs(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {
      const components = [];
      const length = abiParameters.length;
      for (let i = 0; i < length; i++) {
        const abiParameter = abiParameters[i];
        const isTuple = regex_js_1.isTupleRegex.test(abiParameter.type);
        if (isTuple)
          components.push(abiParameter);
        else {
          const match = (0, regex_js_1.execTyped)(typeWithoutTupleRegex, abiParameter.type);
          if (!match?.type)
            throw new abiParameter_js_1.InvalidAbiTypeParameterError({ abiParameter });
          const { array, type } = match;
          if (type in structs) {
            if (ancestors.has(type))
              throw new struct_js_1.CircularReferenceError({ type });
            components.push({
              ...abiParameter,
              type: `tuple${array ?? ""}`,
              components: resolveStructs(structs[type] ?? [], structs, /* @__PURE__ */ new Set([...ancestors, type]))
            });
          } else {
            if ((0, utils_js_1.isSolidityType)(type))
              components.push(abiParameter);
            else
              throw new abiItem_js_1.UnknownTypeError({ type });
          }
        }
      }
      return components;
    }
  }
});

// node_modules/abitype/dist/cjs/human-readable/parseAbi.js
var require_parseAbi = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/parseAbi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAbi = parseAbi;
    var signatures_js_1 = require_signatures();
    var structs_js_1 = require_structs();
    var utils_js_1 = require_utils6();
    function parseAbi(signatures) {
      const structs = (0, structs_js_1.parseStructs)(signatures);
      const abi = [];
      const length = signatures.length;
      for (let i = 0; i < length; i++) {
        const signature = signatures[i];
        if ((0, signatures_js_1.isStructSignature)(signature))
          continue;
        abi.push((0, utils_js_1.parseSignature)(signature, structs));
      }
      return abi;
    }
  }
});

// node_modules/abitype/dist/cjs/human-readable/parseAbiItem.js
var require_parseAbiItem = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/parseAbiItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAbiItem = parseAbiItem;
    var abiItem_js_1 = require_abiItem();
    var signatures_js_1 = require_signatures();
    var structs_js_1 = require_structs();
    var utils_js_1 = require_utils6();
    function parseAbiItem(signature) {
      let abiItem;
      if (typeof signature === "string")
        abiItem = (0, utils_js_1.parseSignature)(signature);
      else {
        const structs = (0, structs_js_1.parseStructs)(signature);
        const length = signature.length;
        for (let i = 0; i < length; i++) {
          const signature_ = signature[i];
          if ((0, signatures_js_1.isStructSignature)(signature_))
            continue;
          abiItem = (0, utils_js_1.parseSignature)(signature_, structs);
          break;
        }
      }
      if (!abiItem)
        throw new abiItem_js_1.InvalidAbiItemError({ signature });
      return abiItem;
    }
  }
});

// node_modules/abitype/dist/cjs/human-readable/parseAbiParameter.js
var require_parseAbiParameter = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/parseAbiParameter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAbiParameter = parseAbiParameter;
    var abiParameter_js_1 = require_abiParameter();
    var signatures_js_1 = require_signatures();
    var structs_js_1 = require_structs();
    var utils_js_1 = require_utils6();
    function parseAbiParameter(param) {
      let abiParameter;
      if (typeof param === "string")
        abiParameter = (0, utils_js_1.parseAbiParameter)(param, {
          modifiers: signatures_js_1.modifiers
        });
      else {
        const structs = (0, structs_js_1.parseStructs)(param);
        const length = param.length;
        for (let i = 0; i < length; i++) {
          const signature = param[i];
          if ((0, signatures_js_1.isStructSignature)(signature))
            continue;
          abiParameter = (0, utils_js_1.parseAbiParameter)(signature, { modifiers: signatures_js_1.modifiers, structs });
          break;
        }
      }
      if (!abiParameter)
        throw new abiParameter_js_1.InvalidAbiParameterError({ param });
      return abiParameter;
    }
  }
});

// node_modules/abitype/dist/cjs/human-readable/parseAbiParameters.js
var require_parseAbiParameters = __commonJS({
  "node_modules/abitype/dist/cjs/human-readable/parseAbiParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAbiParameters = parseAbiParameters;
    var abiParameter_js_1 = require_abiParameter();
    var signatures_js_1 = require_signatures();
    var structs_js_1 = require_structs();
    var utils_js_1 = require_utils6();
    var utils_js_2 = require_utils6();
    function parseAbiParameters(params) {
      const abiParameters = [];
      if (typeof params === "string") {
        const parameters = (0, utils_js_1.splitParameters)(params);
        const length = parameters.length;
        for (let i = 0; i < length; i++) {
          abiParameters.push((0, utils_js_2.parseAbiParameter)(parameters[i], { modifiers: signatures_js_1.modifiers }));
        }
      } else {
        const structs = (0, structs_js_1.parseStructs)(params);
        const length = params.length;
        for (let i = 0; i < length; i++) {
          const signature = params[i];
          if ((0, signatures_js_1.isStructSignature)(signature))
            continue;
          const parameters = (0, utils_js_1.splitParameters)(signature);
          const length2 = parameters.length;
          for (let k = 0; k < length2; k++) {
            abiParameters.push((0, utils_js_2.parseAbiParameter)(parameters[k], { modifiers: signatures_js_1.modifiers, structs }));
          }
        }
      }
      if (abiParameters.length === 0)
        throw new abiParameter_js_1.InvalidAbiParametersError({ params });
      return abiParameters;
    }
  }
});

// node_modules/abitype/dist/cjs/exports/index.js
var require_exports = __commonJS({
  "node_modules/abitype/dist/cjs/exports/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CircularReferenceError = exports2.InvalidParenthesisError = exports2.UnknownSignatureError = exports2.InvalidSignatureError = exports2.InvalidStructSignatureError = exports2.InvalidAbiParameterError = exports2.InvalidAbiParametersError = exports2.InvalidParameterError = exports2.SolidityProtectedKeywordError = exports2.InvalidModifierError = exports2.InvalidFunctionModifierError = exports2.InvalidAbiTypeParameterError = exports2.UnknownSolidityTypeError = exports2.InvalidAbiItemError = exports2.UnknownTypeError = exports2.parseAbiParameters = exports2.parseAbiParameter = exports2.parseAbiItem = exports2.parseAbi = exports2.formatAbiParameters = exports2.formatAbiParameter = exports2.formatAbiItem = exports2.formatAbi = exports2.narrow = exports2.BaseError = void 0;
    var errors_js_1 = require_errors();
    Object.defineProperty(exports2, "BaseError", { enumerable: true, get: function() {
      return errors_js_1.BaseError;
    } });
    var narrow_js_1 = require_narrow();
    Object.defineProperty(exports2, "narrow", { enumerable: true, get: function() {
      return narrow_js_1.narrow;
    } });
    var formatAbi_js_1 = require_formatAbi();
    Object.defineProperty(exports2, "formatAbi", { enumerable: true, get: function() {
      return formatAbi_js_1.formatAbi;
    } });
    var formatAbiItem_js_1 = require_formatAbiItem2();
    Object.defineProperty(exports2, "formatAbiItem", { enumerable: true, get: function() {
      return formatAbiItem_js_1.formatAbiItem;
    } });
    var formatAbiParameter_js_1 = require_formatAbiParameter();
    Object.defineProperty(exports2, "formatAbiParameter", { enumerable: true, get: function() {
      return formatAbiParameter_js_1.formatAbiParameter;
    } });
    var formatAbiParameters_js_1 = require_formatAbiParameters();
    Object.defineProperty(exports2, "formatAbiParameters", { enumerable: true, get: function() {
      return formatAbiParameters_js_1.formatAbiParameters;
    } });
    var parseAbi_js_1 = require_parseAbi();
    Object.defineProperty(exports2, "parseAbi", { enumerable: true, get: function() {
      return parseAbi_js_1.parseAbi;
    } });
    var parseAbiItem_js_1 = require_parseAbiItem();
    Object.defineProperty(exports2, "parseAbiItem", { enumerable: true, get: function() {
      return parseAbiItem_js_1.parseAbiItem;
    } });
    var parseAbiParameter_js_1 = require_parseAbiParameter();
    Object.defineProperty(exports2, "parseAbiParameter", { enumerable: true, get: function() {
      return parseAbiParameter_js_1.parseAbiParameter;
    } });
    var parseAbiParameters_js_1 = require_parseAbiParameters();
    Object.defineProperty(exports2, "parseAbiParameters", { enumerable: true, get: function() {
      return parseAbiParameters_js_1.parseAbiParameters;
    } });
    var abiItem_js_1 = require_abiItem();
    Object.defineProperty(exports2, "UnknownTypeError", { enumerable: true, get: function() {
      return abiItem_js_1.UnknownTypeError;
    } });
    Object.defineProperty(exports2, "InvalidAbiItemError", { enumerable: true, get: function() {
      return abiItem_js_1.InvalidAbiItemError;
    } });
    Object.defineProperty(exports2, "UnknownSolidityTypeError", { enumerable: true, get: function() {
      return abiItem_js_1.UnknownSolidityTypeError;
    } });
    var abiParameter_js_1 = require_abiParameter();
    Object.defineProperty(exports2, "InvalidAbiTypeParameterError", { enumerable: true, get: function() {
      return abiParameter_js_1.InvalidAbiTypeParameterError;
    } });
    Object.defineProperty(exports2, "InvalidFunctionModifierError", { enumerable: true, get: function() {
      return abiParameter_js_1.InvalidFunctionModifierError;
    } });
    Object.defineProperty(exports2, "InvalidModifierError", { enumerable: true, get: function() {
      return abiParameter_js_1.InvalidModifierError;
    } });
    Object.defineProperty(exports2, "SolidityProtectedKeywordError", { enumerable: true, get: function() {
      return abiParameter_js_1.SolidityProtectedKeywordError;
    } });
    Object.defineProperty(exports2, "InvalidParameterError", { enumerable: true, get: function() {
      return abiParameter_js_1.InvalidParameterError;
    } });
    Object.defineProperty(exports2, "InvalidAbiParametersError", { enumerable: true, get: function() {
      return abiParameter_js_1.InvalidAbiParametersError;
    } });
    Object.defineProperty(exports2, "InvalidAbiParameterError", { enumerable: true, get: function() {
      return abiParameter_js_1.InvalidAbiParameterError;
    } });
    var signature_js_1 = require_signature();
    Object.defineProperty(exports2, "InvalidStructSignatureError", { enumerable: true, get: function() {
      return signature_js_1.InvalidStructSignatureError;
    } });
    Object.defineProperty(exports2, "InvalidSignatureError", { enumerable: true, get: function() {
      return signature_js_1.InvalidSignatureError;
    } });
    Object.defineProperty(exports2, "UnknownSignatureError", { enumerable: true, get: function() {
      return signature_js_1.UnknownSignatureError;
    } });
    var splitParameters_js_1 = require_splitParameters();
    Object.defineProperty(exports2, "InvalidParenthesisError", { enumerable: true, get: function() {
      return splitParameters_js_1.InvalidParenthesisError;
    } });
    var struct_js_1 = require_struct();
    Object.defineProperty(exports2, "CircularReferenceError", { enumerable: true, get: function() {
      return struct_js_1.CircularReferenceError;
    } });
  }
});

// node_modules/viem/_cjs/utils/hash/normalizeSignature.js
var require_normalizeSignature = __commonJS({
  "node_modules/viem/_cjs/utils/hash/normalizeSignature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.normalizeSignature = normalizeSignature;
    var base_js_1 = require_base();
    function normalizeSignature(signature) {
      let active = true;
      let current = "";
      let level = 0;
      let result = "";
      let valid = false;
      for (let i = 0; i < signature.length; i++) {
        const char = signature[i];
        if (["(", ")", ","].includes(char))
          active = true;
        if (char === "(")
          level++;
        if (char === ")")
          level--;
        if (!active)
          continue;
        if (level === 0) {
          if (char === " " && ["event", "function", ""].includes(result))
            result = "";
          else {
            result += char;
            if (char === ")") {
              valid = true;
              break;
            }
          }
          continue;
        }
        if (char === " ") {
          if (signature[i - 1] !== "," && current !== "," && current !== ",(") {
            current = "";
            active = false;
          }
          continue;
        }
        result += char;
        current += char;
      }
      if (!valid)
        throw new base_js_1.BaseError("Unable to normalize signature.");
      return result;
    }
  }
});

// node_modules/viem/_cjs/utils/hash/toSignature.js
var require_toSignature = __commonJS({
  "node_modules/viem/_cjs/utils/hash/toSignature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toSignature = void 0;
    var abitype_1 = require_exports();
    var normalizeSignature_js_1 = require_normalizeSignature();
    var toSignature = (def) => {
      const def_ = (() => {
        if (typeof def === "string")
          return def;
        return (0, abitype_1.formatAbiItem)(def);
      })();
      return (0, normalizeSignature_js_1.normalizeSignature)(def_);
    };
    exports2.toSignature = toSignature;
  }
});

// node_modules/viem/_cjs/utils/hash/toSignatureHash.js
var require_toSignatureHash = __commonJS({
  "node_modules/viem/_cjs/utils/hash/toSignatureHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toSignatureHash = toSignatureHash;
    var hashSignature_js_1 = require_hashSignature();
    var toSignature_js_1 = require_toSignature();
    function toSignatureHash(fn) {
      return (0, hashSignature_js_1.hashSignature)((0, toSignature_js_1.toSignature)(fn));
    }
  }
});

// node_modules/viem/_cjs/utils/hash/toFunctionSelector.js
var require_toFunctionSelector = __commonJS({
  "node_modules/viem/_cjs/utils/hash/toFunctionSelector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toFunctionSelector = void 0;
    var slice_js_1 = require_slice();
    var toSignatureHash_js_1 = require_toSignatureHash();
    var toFunctionSelector = (fn) => (0, slice_js_1.slice)((0, toSignatureHash_js_1.toSignatureHash)(fn), 0, 4);
    exports2.toFunctionSelector = toFunctionSelector;
  }
});

// node_modules/viem/_cjs/utils/encoding/fromBytes.js
var require_fromBytes = __commonJS({
  "node_modules/viem/_cjs/utils/encoding/fromBytes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromBytes = fromBytes;
    exports2.bytesToBigInt = bytesToBigInt;
    exports2.bytesToBool = bytesToBool;
    exports2.bytesToNumber = bytesToNumber;
    exports2.bytesToString = bytesToString;
    var encoding_js_1 = require_encoding();
    var trim_js_1 = require_trim();
    var fromHex_js_1 = require_fromHex();
    var toHex_js_1 = require_toHex();
    function fromBytes(bytes, toOrOpts) {
      const opts = typeof toOrOpts === "string" ? { to: toOrOpts } : toOrOpts;
      const to = opts.to;
      if (to === "number")
        return bytesToNumber(bytes, opts);
      if (to === "bigint")
        return bytesToBigInt(bytes, opts);
      if (to === "boolean")
        return bytesToBool(bytes, opts);
      if (to === "string")
        return bytesToString(bytes, opts);
      return (0, toHex_js_1.bytesToHex)(bytes, opts);
    }
    function bytesToBigInt(bytes, opts = {}) {
      if (typeof opts.size !== "undefined")
        (0, fromHex_js_1.assertSize)(bytes, { size: opts.size });
      const hex = (0, toHex_js_1.bytesToHex)(bytes, opts);
      return (0, fromHex_js_1.hexToBigInt)(hex, opts);
    }
    function bytesToBool(bytes_, opts = {}) {
      let bytes = bytes_;
      if (typeof opts.size !== "undefined") {
        (0, fromHex_js_1.assertSize)(bytes, { size: opts.size });
        bytes = (0, trim_js_1.trim)(bytes);
      }
      if (bytes.length > 1 || bytes[0] > 1)
        throw new encoding_js_1.InvalidBytesBooleanError(bytes);
      return Boolean(bytes[0]);
    }
    function bytesToNumber(bytes, opts = {}) {
      if (typeof opts.size !== "undefined")
        (0, fromHex_js_1.assertSize)(bytes, { size: opts.size });
      const hex = (0, toHex_js_1.bytesToHex)(bytes, opts);
      return (0, fromHex_js_1.hexToNumber)(hex, opts);
    }
    function bytesToString(bytes_, opts = {}) {
      let bytes = bytes_;
      if (typeof opts.size !== "undefined") {
        (0, fromHex_js_1.assertSize)(bytes, { size: opts.size });
        bytes = (0, trim_js_1.trim)(bytes, { dir: "right" });
      }
      return new TextDecoder().decode(bytes);
    }
  }
});

// node_modules/viem/_cjs/utils/abi/encodeAbiParameters.js
var require_encodeAbiParameters = __commonJS({
  "node_modules/viem/_cjs/utils/abi/encodeAbiParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeAbiParameters = encodeAbiParameters;
    exports2.getArrayComponents = getArrayComponents;
    var abi_js_1 = require_abi();
    var address_js_1 = require_address();
    var base_js_1 = require_base();
    var isAddress_js_1 = require_isAddress();
    var concat_js_1 = require_concat();
    var pad_js_1 = require_pad();
    var size_js_1 = require_size();
    var slice_js_1 = require_slice();
    var toHex_js_1 = require_toHex();
    function encodeAbiParameters(params, values) {
      if (params.length !== values.length)
        throw new abi_js_1.AbiEncodingLengthMismatchError({
          expectedLength: params.length,
          givenLength: values.length
        });
      const preparedParams = prepareParams({
        params,
        values
      });
      const data = encodeParams(preparedParams);
      if (data.length === 0)
        return "0x";
      return data;
    }
    function prepareParams({ params, values }) {
      const preparedParams = [];
      for (let i = 0; i < params.length; i++) {
        preparedParams.push(prepareParam({ param: params[i], value: values[i] }));
      }
      return preparedParams;
    }
    function prepareParam({ param, value }) {
      const arrayComponents = getArrayComponents(param.type);
      if (arrayComponents) {
        const [length, type] = arrayComponents;
        return encodeArray(value, { length, param: { ...param, type } });
      }
      if (param.type === "tuple") {
        return encodeTuple(value, {
          param
        });
      }
      if (param.type === "address") {
        return encodeAddress(value);
      }
      if (param.type === "bool") {
        return encodeBool(value);
      }
      if (param.type.startsWith("uint") || param.type.startsWith("int")) {
        const signed = param.type.startsWith("int");
        return encodeNumber(value, { signed });
      }
      if (param.type.startsWith("bytes")) {
        return encodeBytes(value, { param });
      }
      if (param.type === "string") {
        return encodeString(value);
      }
      throw new abi_js_1.InvalidAbiEncodingTypeError(param.type, {
        docsPath: "/docs/contract/encodeAbiParameters"
      });
    }
    function encodeParams(preparedParams) {
      let staticSize = 0;
      for (let i = 0; i < preparedParams.length; i++) {
        const { dynamic, encoded } = preparedParams[i];
        if (dynamic)
          staticSize += 32;
        else
          staticSize += (0, size_js_1.size)(encoded);
      }
      const staticParams = [];
      const dynamicParams = [];
      let dynamicSize = 0;
      for (let i = 0; i < preparedParams.length; i++) {
        const { dynamic, encoded } = preparedParams[i];
        if (dynamic) {
          staticParams.push((0, toHex_js_1.numberToHex)(staticSize + dynamicSize, { size: 32 }));
          dynamicParams.push(encoded);
          dynamicSize += (0, size_js_1.size)(encoded);
        } else {
          staticParams.push(encoded);
        }
      }
      return (0, concat_js_1.concat)([...staticParams, ...dynamicParams]);
    }
    function encodeAddress(value) {
      if (!(0, isAddress_js_1.isAddress)(value))
        throw new address_js_1.InvalidAddressError({ address: value });
      return { dynamic: false, encoded: (0, pad_js_1.padHex)(value.toLowerCase()) };
    }
    function encodeArray(value, { length, param }) {
      const dynamic = length === null;
      if (!Array.isArray(value))
        throw new abi_js_1.InvalidArrayError(value);
      if (!dynamic && value.length !== length)
        throw new abi_js_1.AbiEncodingArrayLengthMismatchError({
          expectedLength: length,
          givenLength: value.length,
          type: `${param.type}[${length}]`
        });
      let dynamicChild = false;
      const preparedParams = [];
      for (let i = 0; i < value.length; i++) {
        const preparedParam = prepareParam({ param, value: value[i] });
        if (preparedParam.dynamic)
          dynamicChild = true;
        preparedParams.push(preparedParam);
      }
      if (dynamic || dynamicChild) {
        const data = encodeParams(preparedParams);
        if (dynamic) {
          const length2 = (0, toHex_js_1.numberToHex)(preparedParams.length, { size: 32 });
          return {
            dynamic: true,
            encoded: preparedParams.length > 0 ? (0, concat_js_1.concat)([length2, data]) : length2
          };
        }
        if (dynamicChild)
          return { dynamic: true, encoded: data };
      }
      return {
        dynamic: false,
        encoded: (0, concat_js_1.concat)(preparedParams.map(({ encoded }) => encoded))
      };
    }
    function encodeBytes(value, { param }) {
      const [, paramSize] = param.type.split("bytes");
      const bytesSize = (0, size_js_1.size)(value);
      if (!paramSize) {
        let value_ = value;
        if (bytesSize % 32 !== 0)
          value_ = (0, pad_js_1.padHex)(value_, {
            dir: "right",
            size: Math.ceil((value.length - 2) / 2 / 32) * 32
          });
        return {
          dynamic: true,
          encoded: (0, concat_js_1.concat)([(0, pad_js_1.padHex)((0, toHex_js_1.numberToHex)(bytesSize, { size: 32 })), value_])
        };
      }
      if (bytesSize !== Number.parseInt(paramSize))
        throw new abi_js_1.AbiEncodingBytesSizeMismatchError({
          expectedSize: Number.parseInt(paramSize),
          value
        });
      return { dynamic: false, encoded: (0, pad_js_1.padHex)(value, { dir: "right" }) };
    }
    function encodeBool(value) {
      if (typeof value !== "boolean")
        throw new base_js_1.BaseError(`Invalid boolean value: "${value}" (type: ${typeof value}). Expected: \`true\` or \`false\`.`);
      return { dynamic: false, encoded: (0, pad_js_1.padHex)((0, toHex_js_1.boolToHex)(value)) };
    }
    function encodeNumber(value, { signed }) {
      return {
        dynamic: false,
        encoded: (0, toHex_js_1.numberToHex)(value, {
          size: 32,
          signed
        })
      };
    }
    function encodeString(value) {
      const hexValue = (0, toHex_js_1.stringToHex)(value);
      const partsLength = Math.ceil((0, size_js_1.size)(hexValue) / 32);
      const parts = [];
      for (let i = 0; i < partsLength; i++) {
        parts.push((0, pad_js_1.padHex)((0, slice_js_1.slice)(hexValue, i * 32, (i + 1) * 32), {
          dir: "right"
        }));
      }
      return {
        dynamic: true,
        encoded: (0, concat_js_1.concat)([
          (0, pad_js_1.padHex)((0, toHex_js_1.numberToHex)((0, size_js_1.size)(hexValue), { size: 32 })),
          ...parts
        ])
      };
    }
    function encodeTuple(value, { param }) {
      let dynamic = false;
      const preparedParams = [];
      for (let i = 0; i < param.components.length; i++) {
        const param_ = param.components[i];
        const index = Array.isArray(value) ? i : param_.name;
        const preparedParam = prepareParam({
          param: param_,
          value: value[index]
        });
        preparedParams.push(preparedParam);
        if (preparedParam.dynamic)
          dynamic = true;
      }
      return {
        dynamic,
        encoded: dynamic ? encodeParams(preparedParams) : (0, concat_js_1.concat)(preparedParams.map(({ encoded }) => encoded))
      };
    }
    function getArrayComponents(type) {
      const matches = type.match(/^(.*)\[(\d+)?\]$/);
      return matches ? [matches[2] ? Number(matches[2]) : null, matches[1]] : void 0;
    }
  }
});

// node_modules/viem/_cjs/utils/abi/decodeAbiParameters.js
var require_decodeAbiParameters = __commonJS({
  "node_modules/viem/_cjs/utils/abi/decodeAbiParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeAbiParameters = decodeAbiParameters;
    var abi_js_1 = require_abi();
    var getAddress_js_1 = require_getAddress();
    var cursor_js_1 = require_cursor2();
    var size_js_1 = require_size();
    var slice_js_1 = require_slice();
    var trim_js_1 = require_trim();
    var fromBytes_js_1 = require_fromBytes();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    function decodeAbiParameters(params, data) {
      const bytes = typeof data === "string" ? (0, toBytes_js_1.hexToBytes)(data) : data;
      const cursor = (0, cursor_js_1.createCursor)(bytes);
      if ((0, size_js_1.size)(bytes) === 0 && params.length > 0)
        throw new abi_js_1.AbiDecodingZeroDataError();
      if ((0, size_js_1.size)(data) && (0, size_js_1.size)(data) < 32)
        throw new abi_js_1.AbiDecodingDataSizeTooSmallError({
          data: typeof data === "string" ? data : (0, toHex_js_1.bytesToHex)(data),
          params,
          size: (0, size_js_1.size)(data)
        });
      let consumed = 0;
      const values = [];
      for (let i = 0; i < params.length; ++i) {
        const param = params[i];
        cursor.setPosition(consumed);
        const [data2, consumed_] = decodeParameter(cursor, param, {
          staticPosition: 0
        });
        consumed += consumed_;
        values.push(data2);
      }
      return values;
    }
    function decodeParameter(cursor, param, { staticPosition }) {
      const arrayComponents = (0, encodeAbiParameters_js_1.getArrayComponents)(param.type);
      if (arrayComponents) {
        const [length, type] = arrayComponents;
        return decodeArray(cursor, { ...param, type }, { length, staticPosition });
      }
      if (param.type === "tuple")
        return decodeTuple(cursor, param, { staticPosition });
      if (param.type === "address")
        return decodeAddress(cursor);
      if (param.type === "bool")
        return decodeBool(cursor);
      if (param.type.startsWith("bytes"))
        return decodeBytes(cursor, param, { staticPosition });
      if (param.type.startsWith("uint") || param.type.startsWith("int"))
        return decodeNumber(cursor, param);
      if (param.type === "string")
        return decodeString(cursor, { staticPosition });
      throw new abi_js_1.InvalidAbiDecodingTypeError(param.type, {
        docsPath: "/docs/contract/decodeAbiParameters"
      });
    }
    var sizeOfLength = 32;
    var sizeOfOffset = 32;
    function decodeAddress(cursor) {
      const value = cursor.readBytes(32);
      return [(0, getAddress_js_1.checksumAddress)((0, toHex_js_1.bytesToHex)((0, slice_js_1.sliceBytes)(value, -20))), 32];
    }
    function decodeArray(cursor, param, { length, staticPosition }) {
      if (!length) {
        const offset = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(sizeOfOffset));
        const start = staticPosition + offset;
        const startOfData = start + sizeOfLength;
        cursor.setPosition(start);
        const length2 = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(sizeOfLength));
        const dynamicChild = hasDynamicChild(param);
        let consumed2 = 0;
        const value2 = [];
        for (let i = 0; i < length2; ++i) {
          cursor.setPosition(startOfData + (dynamicChild ? i * 32 : consumed2));
          const [data, consumed_] = decodeParameter(cursor, param, {
            staticPosition: startOfData
          });
          consumed2 += consumed_;
          value2.push(data);
        }
        cursor.setPosition(staticPosition + 32);
        return [value2, 32];
      }
      if (hasDynamicChild(param)) {
        const offset = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(sizeOfOffset));
        const start = staticPosition + offset;
        const value2 = [];
        for (let i = 0; i < length; ++i) {
          cursor.setPosition(start + i * 32);
          const [data] = decodeParameter(cursor, param, {
            staticPosition: start
          });
          value2.push(data);
        }
        cursor.setPosition(staticPosition + 32);
        return [value2, 32];
      }
      let consumed = 0;
      const value = [];
      for (let i = 0; i < length; ++i) {
        const [data, consumed_] = decodeParameter(cursor, param, {
          staticPosition: staticPosition + consumed
        });
        consumed += consumed_;
        value.push(data);
      }
      return [value, consumed];
    }
    function decodeBool(cursor) {
      return [(0, fromBytes_js_1.bytesToBool)(cursor.readBytes(32), { size: 32 }), 32];
    }
    function decodeBytes(cursor, param, { staticPosition }) {
      const [_, size] = param.type.split("bytes");
      if (!size) {
        const offset = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(32));
        cursor.setPosition(staticPosition + offset);
        const length = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(32));
        if (length === 0) {
          cursor.setPosition(staticPosition + 32);
          return ["0x", 32];
        }
        const data = cursor.readBytes(length);
        cursor.setPosition(staticPosition + 32);
        return [(0, toHex_js_1.bytesToHex)(data), 32];
      }
      const value = (0, toHex_js_1.bytesToHex)(cursor.readBytes(Number.parseInt(size), 32));
      return [value, 32];
    }
    function decodeNumber(cursor, param) {
      const signed = param.type.startsWith("int");
      const size = Number.parseInt(param.type.split("int")[1] || "256");
      const value = cursor.readBytes(32);
      return [
        size > 48 ? (0, fromBytes_js_1.bytesToBigInt)(value, { signed }) : (0, fromBytes_js_1.bytesToNumber)(value, { signed }),
        32
      ];
    }
    function decodeTuple(cursor, param, { staticPosition }) {
      const hasUnnamedChild = param.components.length === 0 || param.components.some(({ name }) => !name);
      const value = hasUnnamedChild ? [] : {};
      let consumed = 0;
      if (hasDynamicChild(param)) {
        const offset = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(sizeOfOffset));
        const start = staticPosition + offset;
        for (let i = 0; i < param.components.length; ++i) {
          const component = param.components[i];
          cursor.setPosition(start + consumed);
          const [data, consumed_] = decodeParameter(cursor, component, {
            staticPosition: start
          });
          consumed += consumed_;
          value[hasUnnamedChild ? i : component?.name] = data;
        }
        cursor.setPosition(staticPosition + 32);
        return [value, 32];
      }
      for (let i = 0; i < param.components.length; ++i) {
        const component = param.components[i];
        const [data, consumed_] = decodeParameter(cursor, component, {
          staticPosition
        });
        value[hasUnnamedChild ? i : component?.name] = data;
        consumed += consumed_;
      }
      return [value, consumed];
    }
    function decodeString(cursor, { staticPosition }) {
      const offset = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(32));
      const start = staticPosition + offset;
      cursor.setPosition(start);
      const length = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(32));
      if (length === 0) {
        cursor.setPosition(staticPosition + 32);
        return ["", 32];
      }
      const data = cursor.readBytes(length, 32);
      const value = (0, fromBytes_js_1.bytesToString)((0, trim_js_1.trim)(data));
      cursor.setPosition(staticPosition + 32);
      return [value, 32];
    }
    function hasDynamicChild(param) {
      const { type } = param;
      if (type === "string")
        return true;
      if (type === "bytes")
        return true;
      if (type.endsWith("[]"))
        return true;
      if (type === "tuple")
        return param.components?.some(hasDynamicChild);
      const arrayComponents = (0, encodeAbiParameters_js_1.getArrayComponents)(param.type);
      if (arrayComponents && hasDynamicChild({ ...param, type: arrayComponents[1] }))
        return true;
      return false;
    }
  }
});

// node_modules/viem/_cjs/utils/abi/decodeErrorResult.js
var require_decodeErrorResult = __commonJS({
  "node_modules/viem/_cjs/utils/abi/decodeErrorResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeErrorResult = decodeErrorResult;
    var solidity_js_1 = require_solidity();
    var abi_js_1 = require_abi();
    var slice_js_1 = require_slice();
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    var formatAbiItem_js_1 = require_formatAbiItem();
    function decodeErrorResult(parameters) {
      const { abi, data } = parameters;
      const signature = (0, slice_js_1.slice)(data, 0, 4);
      if (signature === "0x")
        throw new abi_js_1.AbiDecodingZeroDataError();
      const abi_ = [...abi || [], solidity_js_1.solidityError, solidity_js_1.solidityPanic];
      const abiItem = abi_.find((x) => x.type === "error" && signature === (0, toFunctionSelector_js_1.toFunctionSelector)((0, formatAbiItem_js_1.formatAbiItem)(x)));
      if (!abiItem)
        throw new abi_js_1.AbiErrorSignatureNotFoundError(signature, {
          docsPath: "/docs/contract/decodeErrorResult"
        });
      return {
        abiItem,
        args: "inputs" in abiItem && abiItem.inputs && abiItem.inputs.length > 0 ? (0, decodeAbiParameters_js_1.decodeAbiParameters)(abiItem.inputs, (0, slice_js_1.slice)(data, 4)) : void 0,
        errorName: abiItem.name
      };
    }
  }
});

// node_modules/viem/_cjs/utils/abi/formatAbiItemWithArgs.js
var require_formatAbiItemWithArgs = __commonJS({
  "node_modules/viem/_cjs/utils/abi/formatAbiItemWithArgs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatAbiItemWithArgs = formatAbiItemWithArgs;
    var stringify_js_1 = require_stringify();
    function formatAbiItemWithArgs({ abiItem, args, includeFunctionName = true, includeName = false }) {
      if (!("name" in abiItem))
        return;
      if (!("inputs" in abiItem))
        return;
      if (!abiItem.inputs)
        return;
      return `${includeFunctionName ? abiItem.name : ""}(${abiItem.inputs.map((input, i) => `${includeName && input.name ? `${input.name}: ` : ""}${typeof args[i] === "object" ? (0, stringify_js_1.stringify)(args[i]) : args[i]}`).join(", ")})`;
    }
  }
});

// node_modules/viem/_cjs/utils/hash/toEventSelector.js
var require_toEventSelector = __commonJS({
  "node_modules/viem/_cjs/utils/hash/toEventSelector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toEventSelector = void 0;
    var toSignatureHash_js_1 = require_toSignatureHash();
    exports2.toEventSelector = toSignatureHash_js_1.toSignatureHash;
  }
});

// node_modules/viem/_cjs/utils/abi/getAbiItem.js
var require_getAbiItem = __commonJS({
  "node_modules/viem/_cjs/utils/abi/getAbiItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAbiItem = getAbiItem;
    exports2.isArgOfType = isArgOfType;
    exports2.getAmbiguousTypes = getAmbiguousTypes;
    var abi_js_1 = require_abi();
    var isHex_js_1 = require_isHex();
    var isAddress_js_1 = require_isAddress();
    var toEventSelector_js_1 = require_toEventSelector();
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    function getAbiItem(parameters) {
      const { abi, args = [], name } = parameters;
      const isSelector = (0, isHex_js_1.isHex)(name, { strict: false });
      const abiItems = abi.filter((abiItem) => {
        if (isSelector) {
          if (abiItem.type === "function")
            return (0, toFunctionSelector_js_1.toFunctionSelector)(abiItem) === name;
          if (abiItem.type === "event")
            return (0, toEventSelector_js_1.toEventSelector)(abiItem) === name;
          return false;
        }
        return "name" in abiItem && abiItem.name === name;
      });
      if (abiItems.length === 0)
        return void 0;
      if (abiItems.length === 1)
        return abiItems[0];
      let matchedAbiItem = void 0;
      for (const abiItem of abiItems) {
        if (!("inputs" in abiItem))
          continue;
        if (!args || args.length === 0) {
          if (!abiItem.inputs || abiItem.inputs.length === 0)
            return abiItem;
          continue;
        }
        if (!abiItem.inputs)
          continue;
        if (abiItem.inputs.length === 0)
          continue;
        if (abiItem.inputs.length !== args.length)
          continue;
        const matched = args.every((arg, index) => {
          const abiParameter = "inputs" in abiItem && abiItem.inputs[index];
          if (!abiParameter)
            return false;
          return isArgOfType(arg, abiParameter);
        });
        if (matched) {
          if (matchedAbiItem && "inputs" in matchedAbiItem && matchedAbiItem.inputs) {
            const ambiguousTypes = getAmbiguousTypes(abiItem.inputs, matchedAbiItem.inputs, args);
            if (ambiguousTypes)
              throw new abi_js_1.AbiItemAmbiguityError({
                abiItem,
                type: ambiguousTypes[0]
              }, {
                abiItem: matchedAbiItem,
                type: ambiguousTypes[1]
              });
          }
          matchedAbiItem = abiItem;
        }
      }
      if (matchedAbiItem)
        return matchedAbiItem;
      return abiItems[0];
    }
    function isArgOfType(arg, abiParameter) {
      const argType = typeof arg;
      const abiParameterType = abiParameter.type;
      switch (abiParameterType) {
        case "address":
          return (0, isAddress_js_1.isAddress)(arg, { strict: false });
        case "bool":
          return argType === "boolean";
        case "function":
          return argType === "string";
        case "string":
          return argType === "string";
        default: {
          if (abiParameterType === "tuple" && "components" in abiParameter)
            return Object.values(abiParameter.components).every((component, index) => {
              return isArgOfType(Object.values(arg)[index], component);
            });
          if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType))
            return argType === "number" || argType === "bigint";
          if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))
            return argType === "string" || arg instanceof Uint8Array;
          if (/[a-z]+[1-9]{0,3}(\[[0-9]{0,}\])+$/.test(abiParameterType)) {
            return Array.isArray(arg) && arg.every((x) => isArgOfType(x, {
              ...abiParameter,
              type: abiParameterType.replace(/(\[[0-9]{0,}\])$/, "")
            }));
          }
          return false;
        }
      }
    }
    function getAmbiguousTypes(sourceParameters, targetParameters, args) {
      for (const parameterIndex in sourceParameters) {
        const sourceParameter = sourceParameters[parameterIndex];
        const targetParameter = targetParameters[parameterIndex];
        if (sourceParameter.type === "tuple" && targetParameter.type === "tuple" && "components" in sourceParameter && "components" in targetParameter)
          return getAmbiguousTypes(sourceParameter.components, targetParameter.components, args[parameterIndex]);
        const types = [sourceParameter.type, targetParameter.type];
        const ambiguous = (() => {
          if (types.includes("address") && types.includes("bytes20"))
            return true;
          if (types.includes("address") && types.includes("string"))
            return (0, isAddress_js_1.isAddress)(args[parameterIndex], { strict: false });
          if (types.includes("address") && types.includes("bytes"))
            return (0, isAddress_js_1.isAddress)(args[parameterIndex], { strict: false });
          return false;
        })();
        if (ambiguous)
          return types;
      }
      return;
    }
  }
});

// node_modules/viem/_cjs/errors/contract.js
var require_contract = __commonJS({
  "node_modules/viem/_cjs/errors/contract.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RawContractError = exports2.CounterfactualDeploymentFailedError = exports2.ContractFunctionZeroDataError = exports2.ContractFunctionRevertedError = exports2.ContractFunctionExecutionError = exports2.CallExecutionError = void 0;
    var parseAccount_js_1 = require_parseAccount();
    var solidity_js_1 = require_solidity();
    var decodeErrorResult_js_1 = require_decodeErrorResult();
    var formatAbiItem_js_1 = require_formatAbiItem();
    var formatAbiItemWithArgs_js_1 = require_formatAbiItemWithArgs();
    var getAbiItem_js_1 = require_getAbiItem();
    var formatEther_js_1 = require_formatEther();
    var formatGwei_js_1 = require_formatGwei();
    var abi_js_1 = require_abi();
    var base_js_1 = require_base();
    var stateOverride_js_1 = require_stateOverride();
    var transaction_js_1 = require_transaction2();
    var utils_js_1 = require_utils5();
    var CallExecutionError = class extends base_js_1.BaseError {
      constructor(cause, { account: account_, docsPath, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride }) {
        const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : void 0;
        let prettyArgs = (0, transaction_js_1.prettyPrint)({
          from: account?.address,
          to,
          value: typeof value !== "undefined" && `${(0, formatEther_js_1.formatEther)(value)} ${chain?.nativeCurrency?.symbol || "ETH"}`,
          data,
          gas,
          gasPrice: typeof gasPrice !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(gasPrice)} gwei`,
          maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(maxFeePerGas)} gwei`,
          maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(maxPriorityFeePerGas)} gwei`,
          nonce
        });
        if (stateOverride) {
          prettyArgs += `
${(0, stateOverride_js_1.prettyStateOverride)(stateOverride)}`;
        }
        super(cause.shortMessage, {
          cause,
          docsPath,
          metaMessages: [
            ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
            "Raw Call Arguments:",
            prettyArgs
          ].filter(Boolean),
          name: "CallExecutionError"
        });
        Object.defineProperty(this, "cause", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.cause = cause;
      }
    };
    exports2.CallExecutionError = CallExecutionError;
    var ContractFunctionExecutionError = class extends base_js_1.BaseError {
      constructor(cause, { abi, args, contractAddress, docsPath, functionName, sender }) {
        const abiItem = (0, getAbiItem_js_1.getAbiItem)({ abi, args, name: functionName });
        const formattedArgs = abiItem ? (0, formatAbiItemWithArgs_js_1.formatAbiItemWithArgs)({
          abiItem,
          args,
          includeFunctionName: false,
          includeName: false
        }) : void 0;
        const functionWithParams = abiItem ? (0, formatAbiItem_js_1.formatAbiItem)(abiItem, { includeName: true }) : void 0;
        const prettyArgs = (0, transaction_js_1.prettyPrint)({
          address: contractAddress && (0, utils_js_1.getContractAddress)(contractAddress),
          function: functionWithParams,
          args: formattedArgs && formattedArgs !== "()" && `${[...Array(functionName?.length ?? 0).keys()].map(() => " ").join("")}${formattedArgs}`,
          sender
        });
        super(cause.shortMessage || `An unknown error occurred while executing the contract function "${functionName}".`, {
          cause,
          docsPath,
          metaMessages: [
            ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
            prettyArgs && "Contract Call:",
            prettyArgs
          ].filter(Boolean),
          name: "ContractFunctionExecutionError"
        });
        Object.defineProperty(this, "abi", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "args", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "cause", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "contractAddress", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "formattedArgs", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "functionName", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "sender", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.abi = abi;
        this.args = args;
        this.cause = cause;
        this.contractAddress = contractAddress;
        this.functionName = functionName;
        this.sender = sender;
      }
    };
    exports2.ContractFunctionExecutionError = ContractFunctionExecutionError;
    var ContractFunctionRevertedError = class extends base_js_1.BaseError {
      constructor({ abi, data, functionName, message }) {
        let cause;
        let decodedData = void 0;
        let metaMessages;
        let reason;
        if (data && data !== "0x") {
          try {
            decodedData = (0, decodeErrorResult_js_1.decodeErrorResult)({ abi, data });
            const { abiItem, errorName, args: errorArgs } = decodedData;
            if (errorName === "Error") {
              reason = errorArgs[0];
            } else if (errorName === "Panic") {
              const [firstArg] = errorArgs;
              reason = solidity_js_1.panicReasons[firstArg];
            } else {
              const errorWithParams = abiItem ? (0, formatAbiItem_js_1.formatAbiItem)(abiItem, { includeName: true }) : void 0;
              const formattedArgs = abiItem && errorArgs ? (0, formatAbiItemWithArgs_js_1.formatAbiItemWithArgs)({
                abiItem,
                args: errorArgs,
                includeFunctionName: false,
                includeName: false
              }) : void 0;
              metaMessages = [
                errorWithParams ? `Error: ${errorWithParams}` : "",
                formattedArgs && formattedArgs !== "()" ? `       ${[...Array(errorName?.length ?? 0).keys()].map(() => " ").join("")}${formattedArgs}` : ""
              ];
            }
          } catch (err) {
            cause = err;
          }
        } else if (message)
          reason = message;
        let signature;
        if (cause instanceof abi_js_1.AbiErrorSignatureNotFoundError) {
          signature = cause.signature;
          metaMessages = [
            `Unable to decode signature "${signature}" as it was not found on the provided ABI.`,
            "Make sure you are using the correct ABI and that the error exists on it.",
            `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`
          ];
        }
        super(reason && reason !== "execution reverted" || signature ? [
          `The contract function "${functionName}" reverted with the following ${signature ? "signature" : "reason"}:`,
          reason || signature
        ].join("\n") : `The contract function "${functionName}" reverted.`, {
          cause,
          metaMessages,
          name: "ContractFunctionRevertedError"
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "reason", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "signature", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.data = decodedData;
        this.reason = reason;
        this.signature = signature;
      }
    };
    exports2.ContractFunctionRevertedError = ContractFunctionRevertedError;
    var ContractFunctionZeroDataError = class extends base_js_1.BaseError {
      constructor({ functionName }) {
        super(`The contract function "${functionName}" returned no data ("0x").`, {
          metaMessages: [
            "This could be due to any of the following:",
            `  - The contract does not have the function "${functionName}",`,
            "  - The parameters passed to the contract function may be invalid, or",
            "  - The address is not a contract."
          ],
          name: "ContractFunctionZeroDataError"
        });
      }
    };
    exports2.ContractFunctionZeroDataError = ContractFunctionZeroDataError;
    var CounterfactualDeploymentFailedError = class extends base_js_1.BaseError {
      constructor({ factory }) {
        super(`Deployment for counterfactual contract call failed${factory ? ` for factory "${factory}".` : ""}`, {
          metaMessages: [
            "Please ensure:",
            "- The `factory` is a valid contract deployment factory (ie. Create2 Factory, ERC-4337 Factory, etc).",
            "- The `factoryData` is a valid encoded function call for contract deployment function on the factory."
          ],
          name: "CounterfactualDeploymentFailedError"
        });
      }
    };
    exports2.CounterfactualDeploymentFailedError = CounterfactualDeploymentFailedError;
    var RawContractError = class extends base_js_1.BaseError {
      constructor({ data, message }) {
        super(message || "", { name: "RawContractError" });
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: 3
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.data = data;
      }
    };
    exports2.RawContractError = RawContractError;
  }
});

// node_modules/viem/_cjs/utils/errors/getCallError.js
var require_getCallError = __commonJS({
  "node_modules/viem/_cjs/utils/errors/getCallError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCallError = getCallError;
    var contract_js_1 = require_contract();
    var node_js_1 = require_node();
    var getNodeError_js_1 = require_getNodeError();
    function getCallError(err, { docsPath, ...args }) {
      const cause = (() => {
        const cause2 = (0, getNodeError_js_1.getNodeError)(err, args);
        if (cause2 instanceof node_js_1.UnknownNodeError)
          return err;
        return cause2;
      })();
      return new contract_js_1.CallExecutionError(cause, {
        docsPath,
        ...args
      });
    }
  }
});

// node_modules/viem/_cjs/linea/actions/estimateGas.js
var require_estimateGas3 = __commonJS({
  "node_modules/viem/_cjs/linea/actions/estimateGas.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.estimateGas = estimateGas;
    var parseAccount_js_1 = require_parseAccount();
    var prepareTransactionRequest_js_1 = require_prepareTransactionRequest();
    var account_js_1 = require_account();
    var toHex_js_1 = require_toHex();
    var getCallError_js_1 = require_getCallError();
    var extract_js_1 = require_extract();
    var transactionRequest_js_1 = require_transactionRequest();
    var assertRequest_js_1 = require_assertRequest();
    async function estimateGas(client, args) {
      const { account: account_ = client.account } = args;
      if (!account_)
        throw new account_js_1.AccountNotFoundError();
      const account = (0, parseAccount_js_1.parseAccount)(account_);
      try {
        const { accessList, blockNumber, blockTag, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = account?.type === "local" ? await (0, prepareTransactionRequest_js_1.prepareTransactionRequest)(client, args) : args;
        const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
        const block = blockNumberHex || blockTag;
        (0, assertRequest_js_1.assertRequest)(args);
        const chainFormat = client.chain?.formatters?.transactionRequest?.format;
        const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;
        const request = format({
          ...(0, extract_js_1.extract)(rest, { format: chainFormat }),
          from: account?.address,
          accessList,
          data,
          gas,
          gasPrice,
          maxFeePerGas,
          maxPriorityFeePerGas,
          nonce,
          to,
          value
        });
        const { baseFeePerGas, gasLimit, priorityFeePerGas } = await client.request({
          method: "linea_estimateGas",
          params: block ? [request, block] : [request]
        });
        return {
          baseFeePerGas: BigInt(baseFeePerGas),
          gasLimit: BigInt(gasLimit),
          priorityFeePerGas: BigInt(priorityFeePerGas)
        };
      } catch (err) {
        throw (0, getCallError_js_1.getCallError)(err, {
          ...args,
          account,
          chain: client.chain
        });
      }
    }
  }
});

// node_modules/viem/_cjs/linea/chainConfig.js
var require_chainConfig4 = __commonJS({
  "node_modules/viem/_cjs/linea/chainConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chainConfig = void 0;
    var estimateGas_js_1 = require_estimateGas3();
    exports2.chainConfig = {
      fees: {
        estimateFeesPerGas,
        async maxPriorityFeePerGas({ block, client, request }) {
          const response = await estimateFeesPerGas({
            block,
            client,
            multiply: (x) => x,
            request,
            type: "eip1559"
          });
          if (!response?.maxPriorityFeePerGas)
            return null;
          return response.maxPriorityFeePerGas;
        }
      }
    };
    async function estimateFeesPerGas({ client, multiply, request, type }) {
      try {
        const response = await (0, estimateGas_js_1.estimateGas)(client, {
          ...request,
          account: request?.account
        });
        const { priorityFeePerGas: maxPriorityFeePerGas } = response;
        const baseFeePerGas = multiply(BigInt(response.baseFeePerGas));
        const maxFeePerGas = baseFeePerGas + maxPriorityFeePerGas;
        if (type === "legacy")
          return { gasPrice: maxFeePerGas };
        return {
          maxFeePerGas,
          maxPriorityFeePerGas
        };
      } catch {
        return null;
      }
    }
  }
});

// node_modules/viem/_cjs/chains/definitions/linea.js
var require_linea = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/linea.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.linea = void 0;
    var chainConfig_js_1 = require_chainConfig4();
    var defineChain_js_1 = require_defineChain();
    exports2.linea = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 59144,
      name: "Linea Mainnet",
      nativeCurrency: { name: "Linea Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.linea.build"],
          webSocket: ["wss://rpc.linea.build"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://lineascan.build",
          apiUrl: "https://api.lineascan.build/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 42
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/lineaGoerli.js
var require_lineaGoerli = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/lineaGoerli.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lineaGoerli = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.lineaGoerli = (0, defineChain_js_1.defineChain)({
      id: 59140,
      name: "Linea Goerli Testnet",
      nativeCurrency: { name: "Linea Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.goerli.linea.build"],
          webSocket: ["wss://rpc.goerli.linea.build"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://goerli.lineascan.build",
          apiUrl: "https://api-goerli.lineascan.build/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 498623
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/lineaSepolia.js
var require_lineaSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/lineaSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lineaSepolia = void 0;
    var chainConfig_js_1 = require_chainConfig4();
    var defineChain_js_1 = require_defineChain();
    exports2.lineaSepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 59141,
      name: "Linea Sepolia Testnet",
      nativeCurrency: { name: "Linea Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.sepolia.linea.build"],
          webSocket: ["wss://rpc.sepolia.linea.build"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://sepolia.lineascan.build",
          apiUrl: "https://api-sepolia.lineascan.build/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 227427
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/lineaTestnet.js
var require_lineaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/lineaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lineaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.lineaTestnet = (0, defineChain_js_1.defineChain)({
      id: 59140,
      name: "Linea Goerli Testnet",
      nativeCurrency: { name: "Linea Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.goerli.linea.build"],
          webSocket: ["wss://rpc.goerli.linea.build"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://goerli.lineascan.build",
          apiUrl: "https://goerli.lineascan.build/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 498623
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/lisk.js
var require_lisk = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/lisk.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lisk = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.lisk = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 1135,
      name: "Lisk",
      network: "lisk",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.api.lisk.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://blockscout.lisk.com",
          apiUrl: "https://blockscout.lisk.com/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        multicall3: {
          address: "0xA9d71E1dd7ca26F26e656E66d6AA81ed7f745bf0"
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0x113cB99283AF242Da0A0C54347667edF531Aa7d6"
          }
        },
        portal: {
          [sourceId]: {
            address: "0x26dB93F8b8b4f7016240af62F7730979d353f9A7"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x2658723Bf70c7667De6B25F99fcce13A16D25d08"
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/liskSepolia.js
var require_liskSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/liskSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.liskSepolia = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.liskSepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 4202,
      network: "lisk-sepolia",
      name: "Lisk Sepolia",
      nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.sepolia-api.lisk.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://sepolia-blockscout.lisk.com",
          apiUrl: "https://sepolia-blockscout.lisk.com/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0xA0E35F56C318DE1bD5D9ca6A94Fe7e37C5663348"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11"
        },
        portal: {
          [sourceId]: {
            address: "0xe3d90F21490686Ec7eF37BE788E02dfC12787264"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x1Fb30e446eA791cd1f011675E5F3f5311b70faF5"
          }
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/localhost.js
var require_localhost = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/localhost.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.localhost = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.localhost = (0, defineChain_js_1.defineChain)({
      id: 1337,
      name: "Localhost",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["http://127.0.0.1:8545"] }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/loop.js
var require_loop = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/loop.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loop = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.loop = (0, defineChain_js_1.defineChain)({
      id: 15551,
      name: "LoopNetwork Mainnet",
      nativeCurrency: {
        name: "LOOP",
        symbol: "LOOP",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://api.mainnetloop.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "LoopNetwork Blockchain Explorer",
          url: "https://explorer.mainnetloop.com/"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/lukso.js
var require_lukso = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/lukso.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lukso = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.lukso = (0, defineChain_js_1.defineChain)({
      id: 42,
      network: "lukso",
      name: "LUKSO",
      nativeCurrency: {
        name: "LUKSO",
        symbol: "LYX",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.mainnet.lukso.network"],
          webSocket: ["wss://ws-rpc.mainnet.lukso.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "LUKSO Mainnet Explorer",
          url: "https://explorer.execution.mainnet.lukso.network",
          apiUrl: "https://api.explorer.execution.mainnet.lukso.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 468183
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/luksoTestnet.js
var require_luksoTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/luksoTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.luksoTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.luksoTestnet = (0, defineChain_js_1.defineChain)({
      id: 4201,
      name: "LUKSO Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "LUKSO Testnet",
        symbol: "LYXt"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.lukso.network"],
          webSocket: ["wss://ws-rpc.testnet.lukso.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "LUKSO Testnet Explorer",
          url: "https://explorer.execution.testnet.lukso.network",
          apiUrl: "https://api.explorer.execution.testnet.lukso.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 605348
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/lycan.js
var require_lycan = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/lycan.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lycan = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.lycan = (0, defineChain_js_1.defineChain)({
      id: 721,
      name: "Lycan",
      nativeCurrency: {
        decimals: 18,
        name: "Lycan",
        symbol: "LYC"
      },
      rpcUrls: {
        default: {
          http: [
            "https://rpc.lycanchain.com",
            "https://us-east.lycanchain.com",
            "https://us-west.lycanchain.com",
            "https://eu-north.lycanchain.com",
            "https://eu-west.lycanchain.com",
            "https://asia-southeast.lycanchain.com"
          ],
          webSocket: [
            "wss://rpc.lycanchain.com",
            "wss://us-east.lycanchain.com",
            "wss://us-west.lycanchain.com",
            "wss://eu-north.lycanchain.com",
            "wss://eu-west.lycanchain.com",
            "wss://asia-southeast.lycanchain.com"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "Lycan Explorer",
          url: "https://explorer.lycanchain.com"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/lyra.js
var require_lyra = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/lyra.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lyra = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.lyra = (0, defineChain_js_1.defineChain)({
      id: 957,
      name: "Lyra Chain",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.lyra.finance"]
        }
      },
      blockExplorers: {
        default: {
          name: "Lyra Explorer",
          url: "https://explorer.lyra.finance",
          apiUrl: "https://explorer.lyra.finance/api/v2"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1935198
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/mainnet.js
var require_mainnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/mainnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mainnet = (0, defineChain_js_1.defineChain)({
      id: 1,
      name: "Ethereum",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://cloudflare-eth.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://etherscan.io",
          apiUrl: "https://api.etherscan.io/api"
        }
      },
      contracts: {
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        },
        ensUniversalResolver: {
          address: "0xce01f8eee7E479C928F8919abD53E553a36CeF67",
          blockCreated: 19258213
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14353601
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/mandala.js
var require_mandala = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/mandala.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mandala = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mandala = (0, defineChain_js_1.defineChain)({
      id: 595,
      name: "Mandala TC9",
      network: "mandala",
      nativeCurrency: {
        name: "Mandala",
        symbol: "mACA",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://eth-rpc-tc9.aca-staging.network"],
          webSocket: ["wss://eth-rpc-tc9.aca-staging.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Mandala Blockscout",
          url: "https://blockscout.mandala.aca-staging.network",
          apiUrl: "https://blockscout.mandala.aca-staging.network/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/manta.js
var require_manta = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/manta.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.manta = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.manta = (0, defineChain_js_1.defineChain)({
      id: 169,
      name: "Manta Pacific Mainnet",
      network: "manta",
      nativeCurrency: {
        decimals: 18,
        name: "ETH",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://pacific-rpc.manta.network/http"] }
      },
      blockExplorers: {
        default: {
          name: "Manta Explorer",
          url: "https://pacific-explorer.manta.network",
          apiUrl: "https://pacific-explorer.manta.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 332890
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/mantaSepoliaTestnet.js
var require_mantaSepoliaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/mantaSepoliaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mantaSepoliaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mantaSepoliaTestnet = (0, defineChain_js_1.defineChain)({
      id: 3441006,
      name: "Manta Pacific Sepolia Testnet",
      network: "manta-sepolia",
      nativeCurrency: {
        decimals: 18,
        name: "ETH",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://pacific-rpc.sepolia-testnet.manta.network/http"]
        }
      },
      blockExplorers: {
        default: {
          name: "Manta Sepolia Testnet Explorer",
          url: "https://pacific-explorer.sepolia-testnet.manta.network",
          apiUrl: "https://pacific-explorer.sepolia-testnet.manta.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca54918f7B525C8df894668846506767412b53E3",
          blockCreated: 479584
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/mantaTestnet.js
var require_mantaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/mantaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mantaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mantaTestnet = (0, defineChain_js_1.defineChain)({
      id: 3441005,
      name: "Manta Pacific Testnet",
      network: "manta-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "ETH",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://manta-testnet.calderachain.xyz/http"] }
      },
      blockExplorers: {
        default: {
          name: "Manta Testnet Explorer",
          url: "https://pacific-explorer.testnet.manta.network",
          apiUrl: "https://pacific-explorer.testnet.manta.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0x211B1643b95Fe76f11eD8880EE810ABD9A4cf56C",
          blockCreated: 419915
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/mantle.js
var require_mantle = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/mantle.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mantle = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mantle = (0, defineChain_js_1.defineChain)({
      id: 5e3,
      name: "Mantle",
      nativeCurrency: {
        decimals: 18,
        name: "MNT",
        symbol: "MNT"
      },
      rpcUrls: {
        default: { http: ["https://rpc.mantle.xyz"] }
      },
      blockExplorers: {
        default: {
          name: "Mantle Explorer",
          url: "https://mantlescan.xyz/",
          apiUrl: "https://api.mantlescan.xyz/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 304717
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/mantleSepoliaTestnet.js
var require_mantleSepoliaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/mantleSepoliaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mantleSepoliaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mantleSepoliaTestnet = (0, defineChain_js_1.defineChain)({
      id: 5003,
      name: "Mantle Sepolia Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "MNT",
        symbol: "MNT"
      },
      rpcUrls: {
        default: { http: ["https://rpc.sepolia.mantle.xyz"] }
      },
      blockExplorers: {
        default: {
          name: "Mantle Testnet Explorer",
          url: "https://explorer.sepolia.mantle.xyz/",
          apiUrl: "https://explorer.sepolia.mantle.xyz/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 4584012
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/mantleTestnet.js
var require_mantleTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/mantleTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mantleTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mantleTestnet = (0, defineChain_js_1.defineChain)({
      id: 5001,
      name: "Mantle Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "MNT",
        symbol: "MNT"
      },
      rpcUrls: {
        default: { http: ["https://rpc.testnet.mantle.xyz"] }
      },
      blockExplorers: {
        default: {
          name: "Mantle Testnet Explorer",
          url: "https://explorer.testnet.mantle.xyz",
          apiUrl: "https://explorer.testnet.mantle.xyz/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 561333
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/mapProtocol.js
var require_mapProtocol = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/mapProtocol.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mapProtocol = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mapProtocol = (0, defineChain_js_1.defineChain)({
      id: 22776,
      name: "MAP Protocol",
      nativeCurrency: {
        decimals: 18,
        name: "MAPO",
        symbol: "MAPO"
      },
      rpcUrls: {
        default: { http: ["https://rpc.maplabs.io"] }
      },
      blockExplorers: {
        default: {
          name: "MAPO Scan",
          url: "https://maposcan.io"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/matchain.js
var require_matchain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/matchain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.matchain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.matchain = (0, defineChain_js_1.defineChain)({
      id: 698,
      name: "Matchain",
      nativeCurrency: {
        name: "BNB",
        symbol: "BNB",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://rpc.matchain.io"] }
      },
      blockExplorers: {
        default: {
          name: "Matchain Scan",
          url: "https://matchscan.io"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/matchainTestnet.js
var require_matchainTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/matchainTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.matchainTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.matchainTestnet = (0, defineChain_js_1.defineChain)({
      id: 699,
      name: "Matchain Testnet",
      nativeCurrency: {
        name: "BNB",
        symbol: "BNB",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://testnet-rpc.matchain.io"] }
      },
      blockExplorers: {
        default: {
          name: "Matchain Scan",
          url: "https://testnet.matchscan.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/merlin.js
var require_merlin = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/merlin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.merlin = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.merlin = (0, defineChain_js_1.defineChain)({
      id: 4200,
      name: "Merlin",
      nativeCurrency: {
        name: "BTC",
        symbol: "BTC",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://rpc.merlinchain.io"] }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://scan.merlinchain.io",
          apiUrl: "https://scan.merlinchain.io/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/metachain.js
var require_metachain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/metachain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.metachain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.metachain = (0, defineChain_js_1.defineChain)({
      id: 571,
      name: "MetaChain Mainnet",
      nativeCurrency: { name: "Metatime Coin", symbol: "MTC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.metatime.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "MetaExplorer",
          url: "https://explorer.metatime.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0x0000000000000000000000000000000000003001",
          blockCreated: 0
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/metachainIstanbul.js
var require_metachainIstanbul = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/metachainIstanbul.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.metachainIstanbul = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.metachainIstanbul = (0, defineChain_js_1.defineChain)({
      id: 1453,
      name: "MetaChain Istanbul",
      nativeCurrency: { name: "Metatime Coin", symbol: "MTC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://istanbul-rpc.metachain.dev"]
        }
      },
      blockExplorers: {
        default: {
          name: "MetaExplorer",
          url: "https://istanbul-explorer.metachain.dev"
        }
      },
      contracts: {
        multicall3: {
          address: "0x0000000000000000000000000000000000003001",
          blockCreated: 0
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/metalL2.js
var require_metalL2 = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/metalL2.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.metalL2 = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.metalL2 = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 1750,
      name: "Metal L2",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.metall2.com"],
          webSocket: ["wss://rpc.metall2.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Explorer",
          url: "https://explorer.metall2.com",
          apiUrl: "https://explorer.metall2.com/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0x3B1F7aDa0Fcc26B13515af752Dd07fB1CAc11426"
          }
        },
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 0
        },
        portal: {
          [sourceId]: {
            address: "0x3F37aBdE2C6b5B2ed6F8045787Df1ED1E3753956"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x6d0f65D59b55B0FEC5d2d15365154DcADC140BF3"
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/meter.js
var require_meter = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/meter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.meter = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.meter = (0, defineChain_js_1.defineChain)({
      id: 82,
      name: "Meter",
      nativeCurrency: {
        decimals: 18,
        name: "MTR",
        symbol: "MTR"
      },
      rpcUrls: {
        default: { http: ["https://rpc.meter.io"] }
      },
      blockExplorers: {
        default: {
          name: "MeterScan",
          url: "https://scan.meter.io"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/meterTestnet.js
var require_meterTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/meterTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.meterTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.meterTestnet = (0, defineChain_js_1.defineChain)({
      id: 83,
      name: "Meter Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "MTR",
        symbol: "MTR"
      },
      rpcUrls: {
        default: { http: ["https://rpctest.meter.io"] }
      },
      blockExplorers: {
        default: {
          name: "MeterTestnetScan",
          url: "https://scan-warringstakes.meter.io"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/metis.js
var require_metis = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/metis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.metis = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.metis = (0, defineChain_js_1.defineChain)({
      id: 1088,
      name: "Metis",
      nativeCurrency: {
        decimals: 18,
        name: "Metis",
        symbol: "METIS"
      },
      rpcUrls: {
        default: { http: ["https://andromeda.metis.io/?owner=1088"] }
      },
      blockExplorers: {
        default: {
          name: "Metis Explorer",
          url: "https://explorer.metis.io",
          apiUrl: "https://api.routescan.io/v2/network/mainnet/evm/1088/etherscan/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 2338552
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/metisGoerli.js
var require_metisGoerli = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/metisGoerli.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.metisGoerli = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.metisGoerli = (0, defineChain_js_1.defineChain)({
      id: 599,
      name: "Metis Goerli",
      nativeCurrency: {
        decimals: 18,
        name: "Metis Goerli",
        symbol: "METIS"
      },
      rpcUrls: {
        default: { http: ["https://goerli.gateway.metisdevops.link"] }
      },
      blockExplorers: {
        default: {
          name: "Metis Goerli Explorer",
          url: "https://goerli.explorer.metisdevops.link",
          apiUrl: "https://goerli.explorer.metisdevops.link/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1006207
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/mev.js
var require_mev = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/mev.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mev = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mev = (0, defineChain_js_1.defineChain)({
      id: 7518,
      name: "MEVerse Chain Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "MEVerse",
        symbol: "MEV"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.meversemainnet.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Explorer",
          url: "https://www.meversescan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 86881340
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/mevTestnet.js
var require_mevTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/mevTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mevTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mevTestnet = (0, defineChain_js_1.defineChain)({
      id: 4759,
      name: "MEVerse Chain Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "MEVerse",
        symbol: "MEV"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.meversetestnet.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Explorer",
          url: "https://testnet.meversescan.io/"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 64371115
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/mint.js
var require_mint = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/mint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mint = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mint = (0, defineChain_js_1.defineChain)({
      id: 185,
      name: "Mint Mainnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.mintchain.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Mintchain explorer",
          url: "https://explorer.mintchain.io"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/mintSepoliaTestnet.js
var require_mintSepoliaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/mintSepoliaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mintSepoliaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mintSepoliaTestnet = (0, defineChain_js_1.defineChain)({
      id: 1686,
      name: "Mint Sepolia Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet-rpc.mintchain.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Mintchain Testnet explorer",
          url: "https://testnet-explorer.mintchain.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/mode.js
var require_mode = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/mode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mode = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.mode = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 34443,
      name: "Mode Mainnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.mode.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Modescan",
          url: "https://modescan.io"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 2465882
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0x4317ba146D4933D889518a3e5E11Fe7a53199b04"
          }
        },
        portal: {
          [sourceId]: {
            address: "0x8B34b14c7c7123459Cf3076b8Cb929BE097d0C07"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x735aDBbE72226BD52e818E7181953f42E3b0FF21"
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/modeTestnet.js
var require_modeTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/modeTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.modeTestnet = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.modeTestnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 919,
      name: "Mode Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia.mode.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://sepolia.explorer.mode.network",
          apiUrl: "https://sepolia.explorer.mode.network/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0x2634BD65ba27AB63811c74A63118ACb312701Bfa",
            blockCreated: 3778393
          }
        },
        portal: {
          [sourceId]: {
            address: "0x320e1580effF37E008F1C92700d1eBa47c1B23fD",
            blockCreated: 3778395
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0xbC5C679879B2965296756CD959C3C739769995E2",
            blockCreated: 3778392
          }
        },
        multicall3: {
          address: "0xBAba8373113Fb7a68f195deF18732e01aF8eDfCF",
          blockCreated: 3019007
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/moonbaseAlpha.js
var require_moonbaseAlpha = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/moonbaseAlpha.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moonbaseAlpha = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.moonbaseAlpha = (0, defineChain_js_1.defineChain)({
      id: 1287,
      name: "Moonbase Alpha",
      nativeCurrency: {
        decimals: 18,
        name: "DEV",
        symbol: "DEV"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.api.moonbase.moonbeam.network"],
          webSocket: ["wss://wss.api.moonbase.moonbeam.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Moonscan",
          url: "https://moonbase.moonscan.io",
          apiUrl: "https://moonbase.moonscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1850686
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/moonbeam.js
var require_moonbeam = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/moonbeam.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moonbeam = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.moonbeam = (0, defineChain_js_1.defineChain)({
      id: 1284,
      name: "Moonbeam",
      nativeCurrency: {
        decimals: 18,
        name: "GLMR",
        symbol: "GLMR"
      },
      rpcUrls: {
        default: {
          http: ["https://moonbeam.public.blastapi.io"],
          webSocket: ["wss://moonbeam.public.blastapi.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Moonscan",
          url: "https://moonscan.io",
          apiUrl: "https://api-moonbeam.moonscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 609002
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/moonbeamDev.js
var require_moonbeamDev = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/moonbeamDev.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moonbeamDev = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.moonbeamDev = (0, defineChain_js_1.defineChain)({
      id: 1281,
      name: "Moonbeam Development Node",
      nativeCurrency: {
        decimals: 18,
        name: "DEV",
        symbol: "DEV"
      },
      rpcUrls: {
        default: {
          http: ["http://127.0.0.1:9944"],
          webSocket: ["wss://127.0.0.1:9944"]
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/moonriver.js
var require_moonriver = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/moonriver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moonriver = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.moonriver = (0, defineChain_js_1.defineChain)({
      id: 1285,
      name: "Moonriver",
      nativeCurrency: {
        decimals: 18,
        name: "MOVR",
        symbol: "MOVR"
      },
      rpcUrls: {
        default: {
          http: ["https://moonriver.public.blastapi.io"],
          webSocket: ["wss://moonriver.public.blastapi.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Moonscan",
          url: "https://moonriver.moonscan.io",
          apiUrl: "https://api-moonriver.moonscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1597904
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/morphHolesky.js
var require_morphHolesky = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/morphHolesky.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.morphHolesky = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.morphHolesky = (0, defineChain_js_1.defineChain)({
      id: 2810,
      name: "Morph Holesky",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-quicknode-holesky.morphl2.io"],
          webSocket: ["wss://rpc-quicknode-holesky.morphl2.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Morph Holesky Explorer",
          url: "https://explorer-holesky.morphl2.io",
          apiUrl: "https://explorer-api-holesky.morphl2.io/api?"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/morphSepolia.js
var require_morphSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/morphSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.morphSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.morphSepolia = (0, defineChain_js_1.defineChain)({
      id: 2710,
      name: "Morph Sepolia",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-testnet.morphl2.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Morph Testnet Explorer",
          url: "https://explorer-testnet.morphl2.io",
          apiUrl: "https://explorer-api-testnet.morphl2.io/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/nautilus.js
var require_nautilus = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/nautilus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nautilus = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.nautilus = (0, defineChain_js_1.defineChain)({
      id: 22222,
      name: "Nautilus Mainnet",
      nativeCurrency: { name: "ZBC", symbol: "ZBC", decimals: 9 },
      rpcUrls: {
        default: {
          http: ["https://api.nautilus.nautchain.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "NautScan",
          url: "https://nautscan.com"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/neonDevnet.js
var require_neonDevnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/neonDevnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.neonDevnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.neonDevnet = (0, defineChain_js_1.defineChain)({
      id: 245022926,
      name: "Neon EVM DevNet",
      nativeCurrency: { name: "NEON", symbol: "NEON", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://devnet.neonevm.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Neonscan",
          url: "https://devnet.neonscan.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 205206112
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/neonMainnet.js
var require_neonMainnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/neonMainnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.neonMainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.neonMainnet = (0, defineChain_js_1.defineChain)({
      id: 245022934,
      network: "neonMainnet",
      name: "Neon EVM MainNet",
      nativeCurrency: { name: "NEON", symbol: "NEON", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://neon-proxy-mainnet.solana.p2p.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Neonscan",
          url: "https://neonscan.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 206545524
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/nexi.js
var require_nexi = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/nexi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nexi = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.nexi = (0, defineChain_js_1.defineChain)({
      id: 4242,
      name: "Nexi",
      nativeCurrency: { name: "Nexi", symbol: "NEXI", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.chain.nexi.technology"]
        }
      },
      blockExplorers: {
        default: {
          name: "NexiScan",
          url: "https://www.nexiscan.com",
          apiUrl: "https://www.nexiscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0x0277A46Cc69A57eE3A6C8c158bA874832F718B8E",
          blockCreated: 25770160
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/nexilix.js
var require_nexilix = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/nexilix.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nexilix = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.nexilix = (0, defineChain_js_1.defineChain)({
      id: 240,
      name: "Nexilix Smart Chain",
      nativeCurrency: {
        decimals: 18,
        name: "Nexilix",
        symbol: "NEXILIX"
      },
      rpcUrls: {
        default: { http: ["https://rpcurl.pos.nexilix.com"] }
      },
      blockExplorers: {
        default: {
          name: "NexilixScan",
          url: "https://scan.nexilix.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0x58381c8e2BF9d0C2C4259cA14BdA9Afe02831244",
          blockCreated: 74448
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/oasys.js
var require_oasys = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/oasys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.oasys = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.oasys = (0, defineChain_js_1.defineChain)({
      id: 248,
      name: "Oasys",
      nativeCurrency: { name: "Oasys", symbol: "OAS", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.mainnet.oasys.games"]
        }
      },
      blockExplorers: {
        default: {
          name: "OasysScan",
          url: "https://scan.oasys.games",
          apiUrl: "https://scan.oasys.games/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/oasisTestnet.js
var require_oasisTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/oasisTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.oasisTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.oasisTestnet = (0, defineChain_js_1.defineChain)({
      id: 4090,
      network: "oasis-testnet",
      name: "Oasis Testnet",
      nativeCurrency: { name: "Fasttoken", symbol: "FTN", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc1.oasis.bahamutchain.com"] }
      },
      blockExplorers: {
        default: {
          name: "Ftnscan",
          url: "https://oasis.ftnscan.com",
          apiUrl: "https://oasis.ftnscan.com/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/odysseyTestnet.js
var require_odysseyTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/odysseyTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.odysseyTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.odysseyTestnet = (0, defineChain_js_1.defineChain)({
      id: 911867,
      name: "Odyssey Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://odyssey.ithaca.xyz"] }
      },
      blockExplorers: {
        default: {
          name: "Odyssey Explorer",
          url: "https://odyssey-explorer.ithaca.xyz",
          apiUrl: "https://odyssey-explorer.ithaca.xyz/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/okc.js
var require_okc = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/okc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.okc = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.okc = (0, defineChain_js_1.defineChain)({
      id: 66,
      name: "OKC",
      nativeCurrency: {
        decimals: 18,
        name: "OKT",
        symbol: "OKT"
      },
      rpcUrls: {
        default: { http: ["https://exchainrpc.okex.org"] }
      },
      blockExplorers: {
        default: {
          name: "oklink",
          url: "https://www.oklink.com/okc"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 10364792
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/optimism.js
var require_optimism = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/optimism.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.optimism = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.optimism = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 10,
      name: "OP Mainnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.optimism.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Optimism Explorer",
          url: "https://optimistic.etherscan.io",
          apiUrl: "https://api-optimistic.etherscan.io/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        disputeGameFactory: {
          [sourceId]: {
            address: "0xe5965Ab5962eDc7477C8520243A95517CD252fA9"
          }
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0xdfe97868233d1aa22e815a266982f2cf17685a27"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 4286263
        },
        portal: {
          [sourceId]: {
            address: "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1"
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/optimismGoerli.js
var require_optimismGoerli = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/optimismGoerli.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.optimismGoerli = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 5;
    exports2.optimismGoerli = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 420,
      name: "Optimism Goerli",
      nativeCurrency: { name: "Goerli Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://goerli.optimism.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://goerli-optimism.etherscan.io",
          apiUrl: "https://goerli-optimism.etherscan.io/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0xE6Dfba0953616Bacab0c9A8ecb3a9BBa77FC15c0"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 49461
        },
        portal: {
          [sourceId]: {
            address: "0x5b47E1A08Ea6d985D6649300584e6722Ec4B1383"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x636Af16bf2f682dD3109e60102b8E1A089FedAa8"
          }
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/optimismSepolia.js
var require_optimismSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/optimismSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.optimismSepolia = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.optimismSepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 11155420,
      name: "OP Sepolia",
      nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia.optimism.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://optimism-sepolia.blockscout.com",
          apiUrl: "https://optimism-sepolia.blockscout.com/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        disputeGameFactory: {
          [sourceId]: {
            address: "0x05F9613aDB30026FFd634f38e5C4dFd30a197Fa1"
          }
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0x90E9c4f8a994a250F6aEfd61CAFb4F2e895D458F"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1620204
        },
        portal: {
          [sourceId]: {
            address: "0x16Fc5058F25648194471939df75CF27A2fdC48BC"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0xFBb0621E0B23b5478B630BD55a5f21f67730B0F1"
          }
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/optopia.js
var require_optopia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/optopia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.optopia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.optopia = (0, defineChain_js_1.defineChain)({
      id: 62050,
      name: "Optopia",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc-mainnet.optopia.ai"] }
      },
      blockExplorers: {
        default: {
          name: "Optopia Explorer",
          url: "https://scan.optopia.ai"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/optopiaTestnet.js
var require_optopiaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/optopiaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.optopiaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.optopiaTestnet = (0, defineChain_js_1.defineChain)({
      id: 62049,
      name: "Optopia Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc-testnet.optopia.ai"] }
      },
      blockExplorers: {
        default: {
          name: "Optopia Explorer",
          url: "https://scan-testnet.optopia.ai"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/opBNB.js
var require_opBNB = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/opBNB.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.opBNB = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 56;
    exports2.opBNB = (0, defineChain_js_1.defineChain)({
      id: 204,
      name: "opBNB",
      nativeCurrency: {
        name: "BNB",
        symbol: "BNB",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://opbnb-mainnet-rpc.bnbchain.org"] }
      },
      blockExplorers: {
        default: {
          name: "opBNB (BSCScan)",
          url: "https://opbnb.bscscan.com",
          apiUrl: "https://api-opbnb.bscscan.com/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 512881
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0x153CAB79f4767E2ff862C94aa49573294B13D169"
          }
        },
        portal: {
          [sourceId]: {
            address: "0x1876EA7702C0ad0C6A2ae6036DE7733edfBca519"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0xF05F0e4362859c3331Cb9395CBC201E3Fa6757Ea"
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/opBNBTestnet.js
var require_opBNBTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/opBNBTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.opBNBTestnet = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 97;
    exports2.opBNBTestnet = (0, defineChain_js_1.defineChain)({
      id: 5611,
      name: "opBNB Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "tBNB",
        symbol: "tBNB"
      },
      rpcUrls: {
        default: { http: ["https://opbnb-testnet-rpc.bnbchain.org"] }
      },
      blockExplorers: {
        default: {
          name: "opbnbscan",
          url: "https://testnet.opbnbscan.com"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3705108
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0xFf2394Bb843012562f4349C6632a0EcB92fC8810"
          }
        },
        portal: {
          [sourceId]: {
            address: "0x4386C8ABf2009aC0c263462Da568DD9d46e52a31"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x677311Fd2cCc511Bbc0f581E8d9a07B033D5E840"
          }
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/oortmainnetDev.js
var require_oortmainnetDev = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/oortmainnetDev.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.oortMainnetDev = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.oortMainnetDev = (0, defineChain_js_1.defineChain)({
      id: 9700,
      name: "OORT MainnetDev",
      nativeCurrency: {
        decimals: 18,
        name: "OORT",
        symbol: "OORT"
      },
      rpcUrls: {
        default: { http: ["https://dev-rpc.oortech.com"] }
      },
      blockExplorers: {
        default: {
          name: "OORT MainnetDev Explorer",
          url: "https://dev-scan.oortech.com"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/orderly.js
var require_orderly = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/orderly.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.orderly = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.orderly = (0, defineChain_js_1.defineChain)({
      id: 291,
      name: "Orderly",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.orderly.network"] }
      },
      blockExplorers: {
        default: {
          name: "Orderly Explorer",
          url: "https://explorer.orderly.network"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/orderlySepolia.js
var require_orderlySepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/orderlySepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.orderlySepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.orderlySepolia = (0, defineChain_js_1.defineChain)({
      id: 4460,
      name: "Orderly Sepolia",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://l2-orderly-l2-4460-sepolia-8tc3sd7dvy.t.conduit.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "Orderly Explorer",
          url: "https://explorerl2new-orderly-l2-4460-sepolia-8tc3sd7dvy.t.conduit.xyz"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/otimDevnet.js
var require_otimDevnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/otimDevnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.otimDevnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.otimDevnet = (0, defineChain_js_1.defineChain)({
      id: 41144114,
      name: "Otim Devnet",
      nativeCurrency: {
        decimals: 18,
        name: "ETH",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["http://devnet.otim.xyz"]
        }
      },
      contracts: {
        batchInvoker: {
          address: "0x5FbDB2315678afecb367f032d93F642f64180aa3"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/palm.js
var require_palm = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/palm.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.palm = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.palm = (0, defineChain_js_1.defineChain)({
      id: 11297108109,
      name: "Palm",
      nativeCurrency: {
        decimals: 18,
        name: "PALM",
        symbol: "PALM"
      },
      rpcUrls: {
        default: {
          http: ["https://palm-mainnet.public.blastapi.io"],
          webSocket: ["wss://palm-mainnet.public.blastapi.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Chainlens",
          url: "https://palm.chainlens.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 15429248
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/palmTestnet.js
var require_palmTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/palmTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.palmTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.palmTestnet = (0, defineChain_js_1.defineChain)({
      id: 11297108099,
      name: "Palm Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "PALM",
        symbol: "PALM"
      },
      rpcUrls: {
        default: {
          http: ["https://palm-mainnet.public.blastapi.io"],
          webSocket: ["wss://palm-mainnet.public.blastapi.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Chainlens",
          url: "https://palm.chainlens.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 15429248
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/playfiAlbireo.js
var require_playfiAlbireo = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/playfiAlbireo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.playfiAlbireo = void 0;
    var defineChain_js_1 = require_defineChain();
    var chainConfig_js_1 = require_chainConfig();
    exports2.playfiAlbireo = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 1612127,
      name: "PlayFi Albireo Testnet",
      network: "albireo",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://albireo-rpc.playfi.ai"],
          webSocket: ["wss://albireo-rpc-ws.playfi.ai/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "PlayFi Albireo Explorer",
          url: "https://albireo-explorer.playfi.ai"
        }
      },
      contracts: {
        multicall3: {
          address: "0xF9cda624FBC7e059355ce98a31693d299FACd963"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/pgn.js
var require_pgn = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/pgn.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pgn = void 0;
    var formatters_js_1 = require_formatters2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.pgn = (0, defineChain_js_1.defineChain)({
      id: 424,
      network: "pgn",
      name: "PGN",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.publicgoods.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "PGN Explorer",
          url: "https://explorer.publicgoods.network",
          apiUrl: "https://explorer.publicgoods.network/api"
        }
      },
      contracts: {
        l2OutputOracle: {
          [sourceId]: {
            address: "0x9E6204F750cD866b299594e2aC9eA824E2e5f95c"
          }
        },
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3380209
        },
        portal: {
          [sourceId]: {
            address: "0xb26Fd985c5959bBB382BAFdD0b879E149e48116c"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0xD0204B9527C1bA7bD765Fa5CCD9355d38338272b"
          }
        }
      },
      formatters: formatters_js_1.formatters,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/pgnTestnet.js
var require_pgnTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/pgnTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pgnTestnet = void 0;
    var formatters_js_1 = require_formatters2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.pgnTestnet = (0, defineChain_js_1.defineChain)({
      id: 58008,
      network: "pgn-testnet",
      name: "PGN ",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia.publicgoods.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "PGN Testnet Explorer",
          url: "https://explorer.sepolia.publicgoods.network",
          apiUrl: "https://explorer.sepolia.publicgoods.network/api"
        }
      },
      contracts: {
        l2OutputOracle: {
          [sourceId]: {
            address: "0xD5bAc3152ffC25318F848B3DD5dA6C85171BaEEe"
          }
        },
        portal: {
          [sourceId]: {
            address: "0xF04BdD5353Bb0EFF6CA60CfcC78594278eBfE179"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0xFaE6abCAF30D23e233AC7faF747F2fC3a5a6Bfa3"
          }
        },
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3754925
        }
      },
      formatters: formatters_js_1.formatters,
      sourceId,
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/phoenix.js
var require_phoenix = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/phoenix.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.phoenix = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.phoenix = (0, defineChain_js_1.defineChain)({
      id: 13381,
      name: "Phoenix Blockchain",
      nativeCurrency: { name: "Phoenix", symbol: "PHX", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.phoenixplorer.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Phoenixplorer",
          url: "https://phoenixplorer.com",
          apiUrl: "https://phoenixplorer.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0x498cF757a575cFF2c2Ed9f532f56Efa797f86442",
          blockCreated: 5620192
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/plinga.js
var require_plinga = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/plinga.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.plinga = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.plinga = (0, defineChain_js_1.defineChain)({
      id: 242,
      name: "Plinga",
      nativeCurrency: { name: "Plinga", symbol: "PLINGA", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpcurl.mainnet.plgchain.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Plgscan",
          url: "https://www.plgscan.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0x0989576160f2e7092908BB9479631b901060b6e4",
          blockCreated: 204489
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/plumeTestnet.js
var require_plumeTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/plumeTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.plumeTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.plumeTestnet = (0, defineChain_js_1.defineChain)({
      id: 161221135,
      name: "Plume Testnet",
      nativeCurrency: {
        name: "Plume Sepolia Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://testnet-rpc.plumenetwork.xyz/http"],
          webSocket: ["wss://testnet-rpc.plumenetwork.xyz/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://testnet-explorer.plumenetwork.xyz",
          apiUrl: "https://testnet-explorer.plumenetwork.xyz/api"
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/polygon.js
var require_polygon = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/polygon.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.polygon = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.polygon = (0, defineChain_js_1.defineChain)({
      id: 137,
      name: "Polygon",
      nativeCurrency: { name: "POL", symbol: "POL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://polygon-rpc.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "PolygonScan",
          url: "https://polygonscan.com",
          apiUrl: "https://api.polygonscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 25770160
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/polygonAmoy.js
var require_polygonAmoy = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/polygonAmoy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.polygonAmoy = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.polygonAmoy = (0, defineChain_js_1.defineChain)({
      id: 80002,
      name: "Polygon Amoy",
      nativeCurrency: { name: "MATIC", symbol: "MATIC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-amoy.polygon.technology"]
        }
      },
      blockExplorers: {
        default: {
          name: "PolygonScan",
          url: "https://amoy.polygonscan.com",
          apiUrl: "https://api-amoy.polygonscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 3127388
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/polygonMumbai.js
var require_polygonMumbai = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/polygonMumbai.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.polygonMumbai = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.polygonMumbai = (0, defineChain_js_1.defineChain)({
      id: 80001,
      name: "Polygon Mumbai",
      nativeCurrency: { name: "MATIC", symbol: "MATIC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.ankr.com/polygon_mumbai"]
        }
      },
      blockExplorers: {
        default: {
          name: "PolygonScan",
          url: "https://mumbai.polygonscan.com",
          apiUrl: "https://api-testnet.polygonscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 25770160
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/polygonZkEvm.js
var require_polygonZkEvm = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/polygonZkEvm.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.polygonZkEvm = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.polygonZkEvm = (0, defineChain_js_1.defineChain)({
      id: 1101,
      name: "Polygon zkEVM",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://zkevm-rpc.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "PolygonScan",
          url: "https://zkevm.polygonscan.com",
          apiUrl: "https://api-zkevm.polygonscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 57746
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/polygonZkEvmCardona.js
var require_polygonZkEvmCardona = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/polygonZkEvmCardona.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.polygonZkEvmCardona = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.polygonZkEvmCardona = (0, defineChain_js_1.defineChain)({
      id: 2442,
      name: "Polygon zkEVM Cardona",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.cardona.zkevm-rpc.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "PolygonScan",
          url: "https://cardona-zkevm.polygonscan.com",
          apiUrl: "https://cardona-zkevm.polygonscan.com/api"
        }
      },
      testnet: true,
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 114091
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/polygonZkEvmTestnet.js
var require_polygonZkEvmTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/polygonZkEvmTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.polygonZkEvmTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.polygonZkEvmTestnet = (0, defineChain_js_1.defineChain)({
      id: 1442,
      name: "Polygon zkEVM Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.public.zkevm-test.net"]
        }
      },
      blockExplorers: {
        default: {
          name: "PolygonScan",
          url: "https://testnet-zkevm.polygonscan.com",
          apiUrl: "https://testnet-zkevm.polygonscan.com/api"
        }
      },
      testnet: true,
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 525686
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/pulsechain.js
var require_pulsechain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/pulsechain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pulsechain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.pulsechain = (0, defineChain_js_1.defineChain)({
      id: 369,
      name: "PulseChain",
      nativeCurrency: { name: "Pulse", symbol: "PLS", decimals: 18 },
      testnet: false,
      rpcUrls: {
        default: {
          http: ["https://rpc.pulsechain.com"],
          webSocket: ["wss://ws.pulsechain.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "PulseScan",
          url: "https://scan.pulsechain.com",
          apiUrl: "https://api.scan.pulsechain.com/api"
        }
      },
      contracts: {
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14353601
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/pulsechainV4.js
var require_pulsechainV4 = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/pulsechainV4.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pulsechainV4 = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.pulsechainV4 = (0, defineChain_js_1.defineChain)({
      id: 943,
      name: "PulseChain V4",
      testnet: true,
      nativeCurrency: { name: "V4 Pulse", symbol: "v4PLS", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.v4.testnet.pulsechain.com"],
          webSocket: ["wss://ws.v4.testnet.pulsechain.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "PulseScan",
          url: "https://scan.v4.testnet.pulsechain.com",
          apiUrl: "https://scan.v4.testnet.pulsechain.com/api"
        }
      },
      contracts: {
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14353601
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/ql1.js
var require_ql1 = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/ql1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ql1 = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.ql1 = (0, defineChain_js_1.defineChain)({
      id: 766,
      name: "QL1",
      nativeCurrency: {
        decimals: 18,
        name: "QOM",
        symbol: "QOM"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.qom.one"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ql1 Explorer",
          url: "https://scan.qom.one"
        }
      },
      contracts: {
        multicall3: {
          address: "0x7A52370716ea730585884F5BDB0f6E60C39b8C64"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/qMainnet.js
var require_qMainnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/qMainnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.qMainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.qMainnet = (0, defineChain_js_1.defineChain)({
      id: 35441,
      name: "Q Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Q",
        symbol: "Q"
      },
      rpcUrls: {
        default: { http: ["https://rpc.q.org"] }
      },
      blockExplorers: {
        default: {
          name: "Q Mainnet Explorer",
          url: "https://explorer.q.org",
          apiUrl: "https://explorer.q.org/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/qTestnet.js
var require_qTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/qTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.qTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.qTestnet = (0, defineChain_js_1.defineChain)({
      id: 35443,
      name: "Q Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Q",
        symbol: "Q"
      },
      rpcUrls: {
        default: { http: ["https://rpc.qtestnet.org"] }
      },
      blockExplorers: {
        default: {
          name: "Q Testnet Explorer",
          url: "https://explorer.qtestnet.org",
          apiUrl: "https://explorer.qtestnet.org/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/real.js
var require_real = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/real.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.real = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.real = (0, defineChain_js_1.defineChain)({
      id: 111188,
      name: "re.al",
      nativeCurrency: {
        name: "reETH",
        decimals: 18,
        symbol: "reETH"
      },
      rpcUrls: {
        default: { http: ["https://real.drpc.org"] }
      },
      blockExplorers: {
        default: {
          name: "re.al Explorer",
          url: "https://explorer.re.al",
          apiUrl: "https://explorer.re.al/api/v2"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 695
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/redbellyTestnet.js
var require_redbellyTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/redbellyTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.redbellyTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.redbellyTestnet = (0, defineChain_js_1.defineChain)({
      id: 153,
      name: "Redbelly Network Testnet",
      nativeCurrency: {
        name: "Redbelly Native Coin",
        symbol: "RBNT",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://governors.testnet.redbelly.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ethernal",
          url: "https://explorer.testnet.redbelly.network",
          apiUrl: "https://ethernal.fly.dev/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/redstone.js
var require_redstone = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/redstone.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.redstone = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.redstone = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      name: "Redstone",
      id: 690,
      sourceId,
      nativeCurrency: { decimals: 18, name: "Ether", symbol: "ETH" },
      rpcUrls: {
        default: {
          http: ["https://rpc.redstonechain.com"],
          webSocket: ["wss://rpc.redstonechain.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://explorer.redstone.xyz"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11"
        },
        portal: {
          [sourceId]: {
            address: "0xC7bCb0e8839a28A1cFadd1CF716de9016CdA51ae",
            blockCreated: 19578329
          }
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0xa426A052f657AEEefc298b3B5c35a470e4739d69",
            blockCreated: 19578337
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0xc473ca7E02af24c129c2eEf51F2aDf0411c1Df69",
            blockCreated: 19578331
          }
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/reyaNetwork.js
var require_reyaNetwork = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/reyaNetwork.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.reyaNetwork = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.reyaNetwork = (0, defineChain_js_1.defineChain)({
      id: 1729,
      name: "Reya Network",
      nativeCurrency: { decimals: 18, name: "Ether", symbol: "ETH" },
      rpcUrls: {
        default: {
          http: ["https://rpc.reya.network"],
          webSocket: ["wss://ws.reya.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Reya Network Explorer",
          url: "https://explorer.reya.network"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/rollux.js
var require_rollux = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/rollux.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rollux = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.rollux = (0, defineChain_js_1.defineChain)({
      id: 570,
      name: "Rollux Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Syscoin",
        symbol: "SYS"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.rollux.com"],
          webSocket: ["wss://rpc.rollux.com/wss"]
        }
      },
      blockExplorers: {
        default: {
          name: "RolluxExplorer",
          url: "https://explorer.rollux.com",
          apiUrl: "https://explorer.rollux.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 119222
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/rolluxTestnet.js
var require_rolluxTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/rolluxTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rolluxTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.rolluxTestnet = (0, defineChain_js_1.defineChain)({
      id: 57e3,
      name: "Rollux Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Syscoin",
        symbol: "SYS"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc-tanenbaum.rollux.com/"],
          webSocket: ["wss://rpc-tanenbaum.rollux.com/wss"]
        }
      },
      blockExplorers: {
        default: {
          name: "RolluxTestnetExplorer",
          url: "https://rollux.tanenbaum.io",
          apiUrl: "https://rollux.tanenbaum.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1813675
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/ronin.js
var require_ronin = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/ronin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ronin = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.ronin = (0, defineChain_js_1.defineChain)({
      id: 2020,
      name: "Ronin",
      nativeCurrency: { name: "RON", symbol: "RON", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://api.roninchain.com/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ronin Explorer",
          url: "https://app.roninchain.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 26023535
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/root.js
var require_root = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/root.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.root = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.root = (0, defineChain_js_1.defineChain)({
      id: 7668,
      name: "The Root Network",
      nativeCurrency: {
        decimals: 18,
        name: "XRP",
        symbol: "XRP"
      },
      rpcUrls: {
        default: {
          http: ["https://root.rootnet.live/archive"],
          webSocket: ["wss://root.rootnet.live/archive/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Rootscan",
          url: "https://rootscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xc9C2E2429AeC354916c476B30d729deDdC94988d",
          blockCreated: 9218338
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/rootPorcini.js
var require_rootPorcini = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/rootPorcini.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rootPorcini = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.rootPorcini = (0, defineChain_js_1.defineChain)({
      id: 7672,
      name: "The Root Network - Porcini",
      nativeCurrency: {
        decimals: 18,
        name: "XRP",
        symbol: "XRP"
      },
      rpcUrls: {
        default: {
          http: ["https://porcini.rootnet.app/archive"],
          webSocket: ["wss://porcini.rootnet.app/archive/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Rootscan",
          url: "https://porcini.rootscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xc9C2E2429AeC354916c476B30d729deDdC94988d",
          blockCreated: 10555692
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/rootstock.js
var require_rootstock = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/rootstock.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rootstock = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.rootstock = (0, defineChain_js_1.defineChain)({
      id: 30,
      name: "Rootstock Mainnet",
      network: "rootstock",
      nativeCurrency: {
        decimals: 18,
        name: "Rootstock Bitcoin",
        symbol: "RBTC"
      },
      rpcUrls: {
        default: { http: ["https://public-node.rsk.co"] }
      },
      blockExplorers: {
        default: {
          name: "RSK Explorer",
          url: "https://explorer.rsk.co"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 4249540
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/rootstockTestnet.js
var require_rootstockTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/rootstockTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rootstockTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.rootstockTestnet = (0, defineChain_js_1.defineChain)({
      id: 31,
      name: "Rootstock Testnet",
      network: "rootstock",
      nativeCurrency: {
        decimals: 18,
        name: "Rootstock Bitcoin",
        symbol: "tRBTC"
      },
      rpcUrls: {
        default: { http: ["https://public-node.testnet.rsk.co"] }
      },
      blockExplorers: {
        default: {
          name: "RSK Explorer",
          url: "https://explorer.testnet.rootstock.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/rss3.js
var require_rss3 = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/rss3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rss3 = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.rss3 = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 12553,
      name: "RSS3 VSL Mainnet",
      nativeCurrency: { name: "RSS3", symbol: "RSS3", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.rss3.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "RSS3 VSL Mainnet Scan",
          url: "https://scan.rss3.io",
          apiUrl: "https://scan.rss3.io/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0xE6f24d2C32B3109B18ed33cF08eFb490b1e09C10"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14193
        },
        portal: {
          [sourceId]: {
            address: "0x6A12432491bbbE8d3babf75F759766774C778Db4",
            blockCreated: 19387057
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x4cbab69108Aa72151EDa5A3c164eA86845f18438"
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/rss3Sepolia.js
var require_rss3Sepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/rss3Sepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rss3Sepolia = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.rss3Sepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 2331,
      name: "RSS3 VSL Sepolia Testnet",
      nativeCurrency: { name: "RSS3", symbol: "RSS3", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.rss3.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "RSS3 VSL Sepolia Testnet Scan",
          url: "https://scan.testnet.rss3.io",
          apiUrl: "https://scan.testnet.rss3.io/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0xDb5c46C3Eaa6Ed6aE8b2379785DF7dd029C0dC81"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 55697
        },
        portal: {
          [sourceId]: {
            address: "0xcBD77E8E1E7F06B25baDe67142cdE82652Da7b57",
            blockCreated: 5345035
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0xdDD29bb63B0839FB1cE0eE439Ff027738595D07B"
          }
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/saigon.js
var require_saigon = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/saigon.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.saigon = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.saigon = (0, defineChain_js_1.defineChain)({
      id: 2021,
      name: "Saigon Testnet",
      nativeCurrency: { name: "RON", symbol: "RON", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://saigon-testnet.roninchain.com/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Saigon Explorer",
          url: "https://saigon-app.roninchain.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 18736871
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/sapphire.js
var require_sapphire = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/sapphire.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sapphire = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.sapphire = (0, defineChain_js_1.defineChain)({
      id: 23294,
      name: "Oasis Sapphire",
      network: "sapphire",
      nativeCurrency: { name: "Sapphire Rose", symbol: "ROSE", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sapphire.oasis.io"],
          webSocket: ["wss://sapphire.oasis.io/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Oasis Explorer",
          url: "https://explorer.oasis.io/mainnet/sapphire"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 734531
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/sapphireTestnet.js
var require_sapphireTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/sapphireTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sapphireTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.sapphireTestnet = (0, defineChain_js_1.defineChain)({
      id: 23295,
      name: "Oasis Sapphire Testnet",
      network: "sapphire-testnet",
      nativeCurrency: { name: "Sapphire Test Rose", symbol: "TEST", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.sapphire.oasis.dev"],
          webSocket: ["wss://testnet.sapphire.oasis.dev/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Oasis Explorer",
          url: "https://explorer.oasis.io/testnet/sapphire"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/satoshivm.js
var require_satoshivm = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/satoshivm.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.satoshiVM = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.satoshiVM = (0, defineChain_js_1.defineChain)({
      id: 3109,
      name: "SatoshiVM Alpha Mainnet",
      nativeCurrency: {
        name: "BTC",
        symbol: "BTC",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://alpha-rpc-node-http.svmscan.io"] }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://svmscan.io",
          apiUrl: "https://svmscan.io/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/satoshivmTestnet.js
var require_satoshivmTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/satoshivmTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.satoshiVMTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.satoshiVMTestnet = (0, defineChain_js_1.defineChain)({
      id: 3110,
      name: "SatoshiVM Testnet",
      nativeCurrency: {
        name: "BTC",
        symbol: "BTC",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://test-rpc-node-http.svmscan.io"] }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://testnet.svmscan.io",
          apiUrl: "https://testnet.svmscan.io/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/scroll.js
var require_scroll = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/scroll.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.scroll = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.scroll = (0, defineChain_js_1.defineChain)({
      id: 534352,
      name: "Scroll",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.scroll.io"],
          webSocket: ["wss://wss-rpc.scroll.io/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Scrollscan",
          url: "https://scrollscan.com",
          apiUrl: "https://api.scrollscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/scrollSepolia.js
var require_scrollSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/scrollSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.scrollSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.scrollSepolia = (0, defineChain_js_1.defineChain)({
      id: 534351,
      name: "Scroll Sepolia",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia-rpc.scroll.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Scrollscan",
          url: "https://sepolia.scrollscan.com",
          apiUrl: "https://api-sepolia.scrollscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 9473
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/sei.js
var require_sei = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/sei.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sei = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.sei = (0, defineChain_js_1.defineChain)({
      id: 1329,
      name: "Sei Network",
      nativeCurrency: { name: "Sei", symbol: "SEI", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://evm-rpc.sei-apis.com/"],
          webSocket: ["wss://evm-ws.sei-apis.com/"]
        }
      },
      blockExplorers: {
        default: {
          name: "Seitrace",
          url: "https://seitrace.com",
          apiUrl: "https://seitrace.com/pacific-1/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/seiDevnet.js
var require_seiDevnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/seiDevnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.seiDevnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.seiDevnet = (0, defineChain_js_1.defineChain)({
      id: 713715,
      name: "Sei Devnet",
      nativeCurrency: { name: "Sei", symbol: "SEI", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://evm-rpc-arctic-1.sei-apis.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Seitrace",
          url: "https://seitrace.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/seiTestnet.js
var require_seiTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/seiTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.seiTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.seiTestnet = (0, defineChain_js_1.defineChain)({
      id: 1328,
      name: "Sei Testnet",
      nativeCurrency: { name: "Sei", symbol: "SEI", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://evm-rpc-testnet.sei-apis.com"],
          webSocket: ["wss://evm-ws-testnet.sei-apis.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Seitrace",
          url: "https://seitrace.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/sepolia.js
var require_sepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/sepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.sepolia = (0, defineChain_js_1.defineChain)({
      id: 11155111,
      name: "Sepolia",
      nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc2.sepolia.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://sepolia.etherscan.io",
          apiUrl: "https://api-sepolia.etherscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 751532
        },
        ensRegistry: { address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e" },
        ensUniversalResolver: {
          address: "0xc8Af999e38273D658BE1b921b88A9Ddf005769cC",
          blockCreated: 5317080
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/shape.js
var require_shape = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/shape.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shape = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.shape = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 360,
      name: "Shape",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.shape.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "shapescan",
          url: "https://shapescan.xyz",
          apiUrl: "https://shapescan.xyz/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0x6Ef8c69CfE4635d866e3E02732068022c06e724D",
            blockCreated: 20369940
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1
        },
        portal: {
          [sourceId]: {
            address: "0xEB06fFa16011B5628BaB98E29776361c83741dd3",
            blockCreated: 20369933
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x62Edd5f4930Ea92dCa3fB81689bDD9b9d076b57B",
            blockCreated: 20369935
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/shapeSepolia.js
var require_shapeSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/shapeSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shapeSepolia = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.shapeSepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 11011,
      name: "Shape Sepolia Testnet",
      nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia.shape.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://explorer-sepolia.shape.network/",
          apiUrl: "https://explorer-sepolia.shape.network/api/v2"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/shimmer.js
var require_shimmer = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/shimmer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shimmer = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.shimmer = (0, defineChain_js_1.defineChain)({
      id: 148,
      name: "Shimmer",
      network: "shimmer",
      nativeCurrency: {
        decimals: 18,
        name: "Shimmer",
        symbol: "SMR"
      },
      rpcUrls: {
        default: {
          http: ["https://json-rpc.evm.shimmer.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Shimmer Network Explorer",
          url: "https://explorer.evm.shimmer.network",
          apiUrl: "https://explorer.evm.shimmer.network/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/shimmerTestnet.js
var require_shimmerTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/shimmerTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shimmerTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.shimmerTestnet = (0, defineChain_js_1.defineChain)({
      id: 1073,
      name: "Shimmer Testnet",
      network: "shimmer-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Shimmer",
        symbol: "SMR"
      },
      rpcUrls: {
        default: {
          http: ["https://json-rpc.evm.testnet.shimmer.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Shimmer Network Explorer",
          url: "https://explorer.evm.testnet.shimmer.network",
          apiUrl: "https://explorer.evm.testnet.shimmer.network/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/brawl.js
var require_brawl = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/brawl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleBlockBrawlers = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleBlockBrawlers = (0, defineChain_js_1.defineChain)({
      id: 391845894,
      name: "SKALE | Block Brawlers",
      nativeCurrency: { name: "BRAWL", symbol: "BRAWL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/frayed-decent-antares"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/frayed-decent-antares"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://frayed-decent-antares.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/calypso.js
var require_calypso = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/calypso.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleCalypso = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleCalypso = (0, defineChain_js_1.defineChain)({
      id: 1564830818,
      name: "SKALE | Calypso NFT Hub",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/honorable-steel-rasalhague"],
          webSocket: [
            "wss://mainnet.skalenodes.com/v1/ws/honorable-steel-rasalhague"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://honorable-steel-rasalhague.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3107626
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/calypsoTestnet.js
var require_calypsoTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/calypsoTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleCalypsoTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleCalypsoTestnet = (0, defineChain_js_1.defineChain)({
      id: 974399131,
      name: "SKALE Calypso Testnet",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.skalenodes.com/v1/giant-half-dual-testnet"],
          webSocket: ["wss://testnet.skalenodes.com/v1/ws/giant-half-dual-testnet"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://giant-half-dual-testnet.explorer.testnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 103220
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/cryptoBlades.js
var require_cryptoBlades = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/cryptoBlades.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleCryptoBlades = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleCryptoBlades = (0, defineChain_js_1.defineChain)({
      id: 1026062157,
      name: "SKALE | CryptoBlades",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/affectionate-immediate-pollux"],
          webSocket: [
            "wss://mainnet.skalenodes.com/v1/ws/affectionate-immediate-pollux"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://affectionate-immediate-pollux.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/cryptoColosseum.js
var require_cryptoColosseum = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/cryptoColosseum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleCryptoColosseum = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleCryptoColosseum = (0, defineChain_js_1.defineChain)({
      id: 1032942172,
      name: "SKALE | Crypto Colosseum",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/haunting-devoted-deneb"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/haunting-devoted-deneb"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://haunting-devoted-deneb.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/europa.js
var require_europa = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/europa.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleEuropa = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleEuropa = (0, defineChain_js_1.defineChain)({
      id: 2046399126,
      name: "SKALE | Europa Liquidity Hub",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/elated-tan-skat"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/elated-tan-skat"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://elated-tan-skat.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3113495
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/europaTestnet.js
var require_europaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/europaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleEuropaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleEuropaTestnet = (0, defineChain_js_1.defineChain)({
      id: 1444673419,
      name: "SKALE Europa Testnet",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.skalenodes.com/v1/juicy-low-small-testnet"],
          webSocket: ["wss://testnet.skalenodes.com/v1/ws/juicy-low-small-testnet"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://juicy-low-small-testnet.explorer.testnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 110858
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/exorde.js
var require_exorde = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/exorde.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleExorde = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleExorde = (0, defineChain_js_1.defineChain)({
      id: 2139927552,
      name: "SKALE | Exorde",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/light-vast-diphda"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/light-vast-diphda"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://light-vast-diphda.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/humanProtocol.js
var require_humanProtocol = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/humanProtocol.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleHumanProtocol = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleHumanProtocol = (0, defineChain_js_1.defineChain)({
      id: 1273227453,
      name: "SKALE | Human Protocol",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/wan-red-ain"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/wan-red-ain"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://wan-red-ain.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/nebula.js
var require_nebula = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/nebula.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleNebula = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleNebula = (0, defineChain_js_1.defineChain)({
      id: 1482601649,
      name: "SKALE | Nebula Gaming Hub",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/green-giddy-denebola"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/green-giddy-denebola"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://green-giddy-denebola.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 2372986
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/nebulaTestnet.js
var require_nebulaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/nebulaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleNebulaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleNebulaTestnet = (0, defineChain_js_1.defineChain)({
      id: 37084624,
      name: "SKALE Nebula Testnet",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.skalenodes.com/v1/lanky-ill-funny-testnet"],
          webSocket: ["wss://testnet.skalenodes.com/v1/ws/lanky-ill-funny-testnet"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://lanky-ill-funny-testnet.explorer.testnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 105141
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/razor.js
var require_razor = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/razor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleRazor = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleRazor = (0, defineChain_js_1.defineChain)({
      id: 278611351,
      name: "SKALE | Razor Network",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/turbulent-unique-scheat"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/turbulent-unique-scheat"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://turbulent-unique-scheat.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/titan.js
var require_titan = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/titan.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleTitan = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleTitan = (0, defineChain_js_1.defineChain)({
      id: 1350216234,
      name: "SKALE | Titan Community Hub",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/parallel-stormy-spica"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/parallel-stormy-spica"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://parallel-stormy-spica.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 2076458
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/skale/titanTestnet.js
var require_titanTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/skale/titanTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleTitanTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleTitanTestnet = (0, defineChain_js_1.defineChain)({
      id: 1020352220,
      name: "SKALE Titan Hub",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.skalenodes.com/v1/aware-fake-trim-testnet"],
          webSocket: ["wss://testnet.skalenodes.com/v1/ws/aware-fake-trim-testnet"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://aware-fake-trim-testnet.explorer.testnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 104072
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/sketchpad.js
var require_sketchpad = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/sketchpad.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sketchpad = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.sketchpad = (0, defineChain_js_1.defineChain)({
      id: 984123,
      name: "Forma Sketchpad",
      network: "sketchpad",
      nativeCurrency: {
        symbol: "TIA",
        name: "TIA",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.sketchpad-1.forma.art"],
          webSocket: ["wss://ws.sketchpad-1.forma.art"]
        }
      },
      blockExplorers: {
        default: {
          name: "Sketchpad Explorer",
          url: "https://explorer.sketchpad-1.forma.art"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/snax.js
var require_snax = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/snax.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.snax = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.snax = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 2192,
      network: "snaxchain-mainnet",
      name: "SnaxChain",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.snaxchain.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Snax Explorer",
          url: "https://explorer.snaxchain.io",
          apiUrl: "https://explorer.snaxchain.io/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        disputeGameFactory: {
          [sourceId]: {
            address: "0x472562Fcf26D6b2793f8E0b0fB660ba0E5e08A46"
          }
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0x2172e492Fc807F5d5645D0E3543f139ECF539294"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11"
        },
        portal: {
          [sourceId]: {
            address: "0x79f446D024d74D0Bb6E699C131c703463c5D65E9"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x6534Bdb6b5c060d3e6aa833433333135eFE8E0aA"
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/snaxTestnet.js
var require_snaxTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/snaxTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.snaxTestnet = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.snaxTestnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 13001,
      network: "snaxchain-testnet",
      name: "SnaxChain Testnet",
      nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.snaxchain.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Snax Explorer",
          url: "https://testnet-explorer.snaxchain.io",
          apiUrl: "https://testnet-explorer.snaxchain.io/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        disputeGameFactory: {
          [sourceId]: {
            address: "0x206a75d89d45F146C54020F132FF93bEDD09f55E"
          }
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0x60e3A368a4cdCEf85ffB964e372726F56A46221e"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11"
        },
        portal: {
          [sourceId]: {
            address: "0xb5afdd0E8dDF081Ef90e8A3e0c7b5798e66E954E"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0xbd37E1a59D4C00C9A46F75018dffd84061bC5f74"
          }
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/soneiumMinato.js
var require_soneiumMinato = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/soneiumMinato.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.soneiumMinato = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.soneiumMinato = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 1946,
      name: "Soneium Minato Testnet",
      nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.minato.soneium.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://explorer-testnet.soneium.org",
          apiUrl: "https://explorer-testnet.soneium.org/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        disputeGameFactory: {
          [sourceId]: {
            address: "0xF69dB6cA559C52d9A4BB6e2B2901f490Ca35Fbf6"
          }
        },
        l2OutputOracle: {
          [sourceId]: {
            address: "0x710e5286C746eC38beeB7538d0146f60D27be343"
          }
        },
        portal: {
          [sourceId]: {
            address: "0x65ea1489741A5D72fFdD8e6485B216bBdcC15Af3",
            blockCreated: 6466136
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x5f5a404A5edabcDD80DB05E8e54A78c9EBF000C2",
            blockCreated: 6466136
          }
        },
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/songbird.js
var require_songbird = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/songbird.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.songbird = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.songbird = (0, defineChain_js_1.defineChain)({
      id: 19,
      name: "Songbird Canary-Network",
      nativeCurrency: {
        decimals: 18,
        name: "Songbird",
        symbol: "SGB"
      },
      rpcUrls: {
        default: { http: ["https://songbird-api.flare.network/ext/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "Songbird Explorer",
          url: "https://songbird-explorer.flare.network",
          apiUrl: "https://songbird-explorer.flare.network/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/songbirdTestnet.js
var require_songbirdTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/songbirdTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.songbirdTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.songbirdTestnet = (0, defineChain_js_1.defineChain)({
      id: 16,
      name: "Songbird Testnet Coston",
      nativeCurrency: {
        decimals: 18,
        name: "Coston Flare",
        symbol: "CFLR"
      },
      rpcUrls: {
        default: { http: ["https://coston-api.flare.network/ext/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "Coston Explorer",
          url: "https://coston-explorer.flare.network",
          apiUrl: "https://coston-explorer.flare.network/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/sophonTestnet.js
var require_sophonTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/sophonTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sophonTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    var chainConfig_js_1 = require_chainConfig();
    exports2.sophonTestnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 531050104,
      name: "Sophon Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Sophon",
        symbol: "SOPH"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.sophon.xyz"],
          webSocket: ["wss://rpc.testnet.sophon.xyz/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Sophon Block Explorer",
          url: "https://explorer.testnet.sophon.xyz"
        }
      },
      contracts: {
        multicall3: {
          address: "0x83c04d112adedA2C6D9037bb6ecb42E7f0b108Af",
          blockCreated: 15642
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/spicy.js
var require_spicy = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/spicy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.spicy = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.spicy = (0, defineChain_js_1.defineChain)({
      id: 88882,
      name: "Chiliz Spicy Testnet",
      network: "chiliz-spicy-Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "CHZ",
        symbol: "CHZ"
      },
      rpcUrls: {
        default: {
          http: [
            "https://spicy-rpc.chiliz.com",
            "https://chiliz-spicy-rpc.publicnode.com"
          ],
          webSocket: [
            "wss://spicy-rpc-ws.chiliz.com",
            "wss://chiliz-spicy-rpc.publicnode.com"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "Chiliz Explorer",
          url: "http://spicy-explorer.chiliz.com",
          apiUrl: "http://spicy-explorer.chiliz.com/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/shardeumSphinx.js
var require_shardeumSphinx = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/shardeumSphinx.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shardeumSphinx = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.shardeumSphinx = (0, defineChain_js_1.defineChain)({
      id: 8082,
      name: "Shardeum Sphinx",
      nativeCurrency: { name: "SHARDEUM", symbol: "SHM", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sphinx.shardeum.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Shardeum Explorer",
          url: "https://explorer-sphinx.shardeum.org"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/shibarium.js
var require_shibarium = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/shibarium.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shibarium = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.shibarium = (0, defineChain_js_1.defineChain)({
      id: 109,
      name: "Shibarium",
      network: "shibarium",
      nativeCurrency: { name: "Bone", symbol: "BONE", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.shibrpc.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://shibariumscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0x864Bf681ADD6052395188A89101A1B37d3B4C961",
          blockCreated: 265900
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/shibariumTestnet.js
var require_shibariumTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/shibariumTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shibariumTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.shibariumTestnet = (0, defineChain_js_1.defineChain)({
      id: 157,
      name: "Puppynet Shibarium",
      nativeCurrency: {
        decimals: 18,
        name: "Bone",
        symbol: "BONE"
      },
      rpcUrls: {
        default: { http: ["https://puppynet.shibrpc.com"] }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://puppyscan.shib.io",
          apiUrl: "https://puppyscan.shib.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xA4029b74FBA366c926eDFA7Dd10B21C621170a4c",
          blockCreated: 3035769
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/shiden.js
var require_shiden = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/shiden.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shiden = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.shiden = (0, defineChain_js_1.defineChain)({
      id: 336,
      name: "Shiden",
      nativeCurrency: {
        decimals: 18,
        name: "SDN",
        symbol: "SDN"
      },
      rpcUrls: {
        default: {
          http: ["https://shiden.public.blastapi.io"],
          webSocket: ["wss://shiden-rpc.dwellir.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Shiden Scan",
          url: "https://shiden.subscan.io"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/storyTestnet.js
var require_storyTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/storyTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.storyTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.storyTestnet = (0, defineChain_js_1.defineChain)({
      id: 1513,
      name: "Story Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "IP",
        symbol: "IP"
      },
      rpcUrls: {
        default: { http: ["https://testnet.storyrpc.io"] }
      },
      blockExplorers: {
        default: {
          name: "Story Testnet Explorer",
          url: "https://testnet.storyscan.xyz"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/silicon.js
var require_silicon = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/silicon.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.silicon = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.silicon = (0, defineChain_js_1.defineChain)({
      id: 2355,
      name: "Silicon zkEVM",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: [
            "https://rpc.silicon.network",
            "https://silicon-mainnet.nodeinfra.com"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "SiliconScope",
          url: "https://scope.silicon.network"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/siliconSepolia.js
var require_siliconSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/siliconSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.siliconSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.siliconSepolia = (0, defineChain_js_1.defineChain)({
      id: 1722641160,
      name: "Silicon Sepolia zkEVM",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: [
            "https://rpc-sepolia.silicon.network",
            "https://silicon-testnet.nodeinfra.com"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "SiliconSepoliaScope",
          url: "https://scope-sepolia.silicon.network"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/stratis.js
var require_stratis = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/stratis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stratis = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.stratis = (0, defineChain_js_1.defineChain)({
      id: 105105,
      name: "Stratis Mainnet",
      network: "stratis",
      nativeCurrency: {
        name: "Stratis",
        symbol: "STRAX",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.stratisevm.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Stratis Explorer",
          url: "https://explorer.stratisevm.com"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/superlumio.js
var require_superlumio = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/superlumio.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.superlumio = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.superlumio = (0, defineChain_js_1.defineChain)({
      id: 8866,
      name: "SuperLumio",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.lumio.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Lumio explorer",
          url: "https://explorer.lumio.io"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/superposition.js
var require_superposition = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/superposition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.superposition = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.superposition = (0, defineChain_js_1.defineChain)({
      id: 55244,
      name: "Superposition",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.superposition.so"] }
      },
      blockExplorers: {
        default: {
          name: "Superposition Explorer",
          url: "https://explorer.superposition.so"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/swan.js
var require_swan = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/swan.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.swan = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.swan = (0, defineChain_js_1.defineChain)({
      id: 254,
      name: "Swan Chain Mainnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://mainnet-rpc.swanchain.org"] }
      },
      blockExplorers: {
        default: {
          name: "Swan Explorer",
          url: "https://swanscan.io"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/swanProximaTestnet.js
var require_swanProximaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/swanProximaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.swanProximaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.swanProximaTestnet = (0, defineChain_js_1.defineChain)({
      id: 20241133,
      name: "Swan Proxima Testnet",
      nativeCurrency: { name: "Swan Ether", symbol: "sETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc-proxima.swanchain.io	"] }
      },
      blockExplorers: {
        default: {
          name: "Swan Explorer",
          url: "https://proxima-explorer.swanchain.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/swanSaturnTestnet.js
var require_swanSaturnTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/swanSaturnTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.swanSaturnTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.swanSaturnTestnet = (0, defineChain_js_1.defineChain)({
      id: 2024,
      name: "Swan Saturn Testnet",
      nativeCurrency: { name: "Swan Ether", symbol: "sETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://saturn-rpc.swanchain.io"] }
      },
      blockExplorers: {
        default: {
          name: "Swan Explorer",
          url: "https://saturn-explorer.swanchain.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/syscoin.js
var require_syscoin = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/syscoin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.syscoin = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.syscoin = (0, defineChain_js_1.defineChain)({
      id: 57,
      name: "Syscoin Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Syscoin",
        symbol: "SYS"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.syscoin.org"],
          webSocket: ["wss://rpc.syscoin.org/wss"]
        }
      },
      blockExplorers: {
        default: {
          name: "SyscoinExplorer",
          url: "https://explorer.syscoin.org",
          apiUrl: "https://explorer.syscoin.org/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 287139
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/syscoinTestnet.js
var require_syscoinTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/syscoinTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.syscoinTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.syscoinTestnet = (0, defineChain_js_1.defineChain)({
      id: 5700,
      name: "Syscoin Tanenbaum Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Syscoin",
        symbol: "SYS"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.tanenbaum.io"],
          webSocket: ["wss://rpc.tanenbaum.io/wss"]
        }
      },
      blockExplorers: {
        default: {
          name: "SyscoinTestnetExplorer",
          url: "https://tanenbaum.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 271288
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/taraxa.js
var require_taraxa = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/taraxa.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.taraxa = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.taraxa = (0, defineChain_js_1.defineChain)({
      id: 841,
      name: "Taraxa Mainnet",
      nativeCurrency: { name: "Tara", symbol: "TARA", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.mainnet.taraxa.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Taraxa Explorer",
          url: "https://explorer.mainnet.taraxa.io"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/taiko.js
var require_taiko = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/taiko.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.taiko = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.taiko = (0, defineChain_js_1.defineChain)({
      id: 167e3,
      name: "Taiko Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.mainnet.taiko.xyz"],
          webSocket: ["wss://ws.mainnet.taiko.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "Taikoscan",
          url: "https://taikoscan.io",
          apiUrl: "https://api.taikoscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcb2436774C3e191c85056d248EF4260ce5f27A9D"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/taikoHekla.js
var require_taikoHekla = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/taikoHekla.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.taikoHekla = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.taikoHekla = (0, defineChain_js_1.defineChain)({
      id: 167009,
      name: "Taiko Hekla L2",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.hekla.taiko.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "Taikoscan",
          url: "https://hekla.taikoscan.network"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/taikoJolnir.js
var require_taikoJolnir = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/taikoJolnir.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.taikoJolnir = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.taikoJolnir = (0, defineChain_js_1.defineChain)({
      id: 167007,
      name: "Taiko Jolnir (Alpha-5 Testnet)",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.jolnir.taiko.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://explorer.jolnir.taiko.xyz"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 732706
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/taikoKatla.js
var require_taikoKatla = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/taikoKatla.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.taikoKatla = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.taikoKatla = (0, defineChain_js_1.defineChain)({
      id: 167008,
      name: "Taiko Katla (Alpha-6 Testnet)",
      network: "tko-katla",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.katla.taiko.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://explorer.katla.taiko.xyz"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/taikoTestnetSepolia.js
var require_taikoTestnetSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/taikoTestnetSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.taikoTestnetSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.taikoTestnetSepolia = (0, defineChain_js_1.defineChain)({
      id: 167005,
      name: "Taiko (Alpha-3 Testnet)",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.test.taiko.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://explorer.test.taiko.xyz"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/taraxaTestnet.js
var require_taraxaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/taraxaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.taraxaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.taraxaTestnet = (0, defineChain_js_1.defineChain)({
      id: 842,
      name: "Taraxa Testnet",
      nativeCurrency: { name: "Tara", symbol: "TARA", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.taraxa.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Taraxa Explorer",
          url: "https://explorer.testnet.taraxa.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/telcoinTestnet.js
var require_telcoinTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/telcoinTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.telcoinTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.telcoinTestnet = (0, defineChain_js_1.defineChain)({
      id: 2017,
      name: "Telcoin Adiri Testnet",
      nativeCurrency: { name: "Telcoin", symbol: "TEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.telcoin.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "telscan",
          url: "https://telscan.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/telos.js
var require_telos = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/telos.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.telos = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.telos = (0, defineChain_js_1.defineChain)({
      id: 40,
      name: "Telos",
      nativeCurrency: {
        decimals: 18,
        name: "Telos",
        symbol: "TLOS"
      },
      rpcUrls: {
        default: { http: ["https://mainnet.telos.net/evm"] }
      },
      blockExplorers: {
        default: {
          name: "Teloscan",
          url: "https://www.teloscan.io/"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 246530709
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/telosTestnet.js
var require_telosTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/telosTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.telosTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.telosTestnet = (0, defineChain_js_1.defineChain)({
      id: 41,
      name: "Telos",
      nativeCurrency: {
        decimals: 18,
        name: "Telos",
        symbol: "TLOS"
      },
      rpcUrls: {
        default: { http: ["https://testnet.telos.net/evm"] }
      },
      blockExplorers: {
        default: {
          name: "Teloscan (testnet)",
          url: "https://testnet.teloscan.io/"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/tenet.js
var require_tenet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/tenet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.tenet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.tenet = (0, defineChain_js_1.defineChain)({
      id: 1559,
      name: "Tenet",
      network: "tenet-mainnet",
      nativeCurrency: {
        name: "TENET",
        symbol: "TENET",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://rpc.tenet.org"] }
      },
      blockExplorers: {
        default: {
          name: "TenetScan Mainnet",
          url: "https://tenetscan.io",
          apiUrl: "https://tenetscan.io/api"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/thaiChain.js
var require_thaiChain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/thaiChain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.thaiChain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.thaiChain = (0, defineChain_js_1.defineChain)({
      id: 7,
      name: "ThaiChain",
      nativeCurrency: { name: "TCH", symbol: "TCH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.thaichain.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://exp.thaichain.org",
          apiUrl: "https://exp.thaichain.org/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0x0DaD6130e832c21719C5CE3bae93454E16A84826",
          blockCreated: 4806386
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/thunderTestnet.js
var require_thunderTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/thunderTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.thunderTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.thunderTestnet = (0, defineChain_js_1.defineChain)({
      id: 997,
      name: "5ireChain Thunder Testnet",
      nativeCurrency: { name: "5ire Token", symbol: "5IRE", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-testnet.5ire.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "5ireChain Explorer",
          url: "https://explorer.5ire.network"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/tron.js
var require_tron = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/tron.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.tron = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.tron = (0, defineChain_js_1.defineChain)({
      id: 728126428,
      name: "Tron",
      nativeCurrency: { name: "TRON", symbol: "TRX", decimals: 6 },
      rpcUrls: {
        default: {
          http: ["https://api.trongrid.io/jsonrpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Tronscan",
          url: "https://tronscan.org",
          apiUrl: "https://apilist.tronscanapi.com/api"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/ultron.js
var require_ultron = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/ultron.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ultron = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.ultron = (0, defineChain_js_1.defineChain)({
      id: 1231,
      name: "Ultron Mainnet",
      nativeCurrency: { name: "ULX", symbol: "ULX", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://ultron-rpc.net"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ultron Scan",
          url: "https://ulxscan.com"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/ultronTestnet.js
var require_ultronTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/ultronTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ultronTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.ultronTestnet = (0, defineChain_js_1.defineChain)({
      id: 1230,
      name: "Ultron Testnet",
      nativeCurrency: { name: "ULX", symbol: "ULX", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://ultron-dev.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ultron Scan",
          url: "https://explorer.ultron-dev.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/unichainSepolia.js
var require_unichainSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/unichainSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.unichainSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.unichainSepolia = (0, defineChain_js_1.defineChain)({
      id: 1301,
      name: "Unichain Sepolia",
      nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://sepolia.unichain.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Uniscan",
          url: "https://sepolia.uniscan.xyz",
          apiUrl: "https://api-sepolia.uniscan.xyz"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 0
        }
      },
      testnet: true,
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/unique.js
var require_unique = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/unique.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.unique = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.unique = (0, defineChain_js_1.defineChain)({
      id: 8880,
      name: "Unique Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "UNQ",
        symbol: "UNQ"
      },
      rpcUrls: {
        default: { http: ["https://rpc.unique.network"] }
      },
      blockExplorers: {
        default: {
          name: "Unique Subscan",
          url: "https://unique.subscan.io/"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/uniqueQuartz.js
var require_uniqueQuartz = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/uniqueQuartz.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uniqueQuartz = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.uniqueQuartz = (0, defineChain_js_1.defineChain)({
      id: 8881,
      name: "Quartz Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "QTZ",
        symbol: "QTZ"
      },
      rpcUrls: {
        default: { http: ["https://rpc-quartz.unique.network"] }
      },
      blockExplorers: {
        default: {
          name: "Quartz Subscan",
          url: "https://quartz.subscan.io/"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/uniqueOpal.js
var require_uniqueOpal = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/uniqueOpal.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uniqueOpal = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.uniqueOpal = (0, defineChain_js_1.defineChain)({
      id: 8882,
      name: "Opal Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "OPL",
        symbol: "OPL"
      },
      rpcUrls: {
        default: { http: ["https://rpc-opal.unique.network"] }
      },
      blockExplorers: {
        default: {
          name: "Opal Subscan",
          url: "https://opal.subscan.io/"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/unreal.js
var require_unreal = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/unreal.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.unreal = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.unreal = (0, defineChain_js_1.defineChain)({
      id: 18233,
      name: "Unreal",
      nativeCurrency: {
        name: "reETH",
        decimals: 18,
        symbol: "reETH"
      },
      rpcUrls: {
        default: { http: ["https://rpc.unreal-orbit.gelato.digital"] }
      },
      blockExplorers: {
        default: {
          name: "Unreal Explorer",
          url: "https://unreal.blockscout.com",
          apiUrl: "https://unreal.blockscout.com/api/v2"
        }
      },
      testnet: true,
      contracts: {
        multicall3: {
          address: "0x8b6B0e60D8CD84898Ea8b981065A12F876eA5677",
          blockCreated: 1745
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/vechain.js
var require_vechain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/vechain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.vechain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.vechain = (0, defineChain_js_1.defineChain)({
      id: 100009,
      name: "Vechain",
      nativeCurrency: { name: "VeChain", symbol: "VET", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.vechain.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Vechain Explorer",
          url: "https://explore.vechain.org"
        },
        vechainStats: {
          name: "Vechain Stats",
          url: "https://vechainstats.com"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/viction.js
var require_viction = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/viction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.viction = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.viction = (0, defineChain_js_1.defineChain)({
      id: 88,
      name: "Viction",
      nativeCurrency: { name: "Viction", symbol: "VIC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.viction.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "VIC Scan",
          url: "https://vicscan.xyz"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/victionTestnet.js
var require_victionTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/victionTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.victionTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.victionTestnet = (0, defineChain_js_1.defineChain)({
      id: 89,
      name: "Viction Testnet",
      nativeCurrency: { name: "Viction", symbol: "VIC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-testnet.viction.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "VIC Scan",
          url: "https://testnet.vicscan.xyz"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 12170179
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/vision.js
var require_vision = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/vision.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.vision = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.vision = (0, defineChain_js_1.defineChain)({
      id: 888888,
      name: "Vision",
      nativeCurrency: { name: "VISION", symbol: "VS", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://infragrid.v.network/ethereum/compatible"]
        }
      },
      blockExplorers: {
        default: {
          name: "Vision Scan",
          url: "https://visionscan.org"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/visionTestnet.js
var require_visionTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/visionTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.visionTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.visionTestnet = (0, defineChain_js_1.defineChain)({
      id: 666666,
      name: "Vision Testnet",
      nativeCurrency: { name: "VISION", symbol: "VS", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://vpioneer.infragrid.v.network/ethereum/compatible"]
        }
      },
      blockExplorers: {
        default: {
          name: "Vision Scan",
          url: "https://visionscan.org/?chain=vpioneer"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/wanchain.js
var require_wanchain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/wanchain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wanchain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.wanchain = (0, defineChain_js_1.defineChain)({
      id: 888,
      name: "Wanchain",
      nativeCurrency: { name: "WANCHAIN", symbol: "WAN", decimals: 18 },
      rpcUrls: {
        default: {
          http: [
            "https://gwan-ssl.wandevs.org:56891",
            "https://gwan2-ssl.wandevs.org"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "WanScan",
          url: "https://wanscan.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcDF6A1566e78EB4594c86Fe73Fcdc82429e97fbB",
          blockCreated: 25312390
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/wanchainTestnet.js
var require_wanchainTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/wanchainTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wanchainTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.wanchainTestnet = (0, defineChain_js_1.defineChain)({
      id: 999,
      name: "Wanchain Testnet",
      nativeCurrency: { name: "WANCHAIN", symbol: "WANt", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://gwan-ssl.wandevs.org:46891"]
        }
      },
      blockExplorers: {
        default: {
          name: "WanScanTest",
          url: "https://wanscan.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0x11c89bF4496c39FB80535Ffb4c92715839CC5324",
          blockCreated: 24743448
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/weavevmAlphanet.js
var require_weavevmAlphanet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/weavevmAlphanet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.weaveVMAlphanet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.weaveVMAlphanet = (0, defineChain_js_1.defineChain)({
      id: 9496,
      name: "WeaveVM Alphanet",
      nativeCurrency: { name: "Testnet WeaveVM", symbol: "tWVM", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://testnet-rpc.wvm.dev"] }
      },
      blockExplorers: {
        default: {
          name: "WeaveVM Alphanet Explorer",
          url: "https://explorer.wvm.dev"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/wemix.js
var require_wemix = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/wemix.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wemix = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.wemix = (0, defineChain_js_1.defineChain)({
      id: 1111,
      name: "WEMIX",
      network: "wemix-mainnet",
      nativeCurrency: { name: "WEMIX", symbol: "WEMIX", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://api.wemix.com"] }
      },
      blockExplorers: {
        default: {
          name: "wemixExplorer",
          url: "https://explorer.wemix.com"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/wemixTestnet.js
var require_wemixTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/wemixTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wemixTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.wemixTestnet = (0, defineChain_js_1.defineChain)({
      id: 1112,
      name: "WEMIX Testnet",
      network: "wemix-testnet",
      nativeCurrency: { name: "WEMIX", symbol: "tWEMIX", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://api.test.wemix.com"] }
      },
      blockExplorers: {
        default: {
          name: "wemixExplorer",
          url: "https://testnet.wemixscan.com",
          apiUrl: "https://testnet.wemixscan.com/api"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/worldchain.js
var require_worldchain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/worldchain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.worldchain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.worldchain = (0, defineChain_js_1.defineChain)({
      id: 480,
      name: "World Chain",
      network: "worldchain",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://worldchain-mainnet.g.alchemy.com/public"] }
      },
      blockExplorers: {
        default: {
          name: "World Chain Explorer",
          url: "https://worldchain-mainnet.explorer.alchemy.com"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/worldchainSepolia.js
var require_worldchainSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/worldchainSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.worldchainSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.worldchainSepolia = (0, defineChain_js_1.defineChain)({
      id: 4801,
      name: "World Chain Sepolia",
      network: "worldchain-sepolia",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://worldchain-sepolia.g.alchemy.com/public"] },
        public: { http: ["https://worldchain-sepolia.g.alchemy.com/public"] }
      },
      blockExplorers: {
        default: {
          name: "World Chain Sepolia Explorer",
          url: "https://worldchain-sepolia.explorer.alchemy.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/xLayerTestnet.js
var require_xLayerTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/xLayerTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.x1Testnet = exports2.xLayerTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.xLayerTestnet = (0, defineChain_js_1.defineChain)({
      id: 195,
      name: "X1 Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "OKB",
        symbol: "OKB"
      },
      rpcUrls: {
        default: { http: ["https://xlayertestrpc.okx.com"] }
      },
      blockExplorers: {
        default: {
          name: "OKLink",
          url: "https://www.oklink.com/xlayer-test"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 624344
        }
      },
      testnet: true
    });
    exports2.x1Testnet = exports2.xLayerTestnet;
  }
});

// node_modules/viem/_cjs/chains/definitions/xLayer.js
var require_xLayer = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/xLayer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.xLayer = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.xLayer = (0, defineChain_js_1.defineChain)({
      id: 196,
      name: "X Layer Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "OKB",
        symbol: "OKB"
      },
      rpcUrls: {
        default: { http: ["https://rpc.xlayer.tech"] }
      },
      blockExplorers: {
        default: {
          name: "OKLink",
          url: "https://www.oklink.com/xlayer",
          apiUrl: "https://www.oklink.com/api/v5/explorer/xlayer/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 47416
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/xai.js
var require_xai = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/xai.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.xai = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.xai = (0, defineChain_js_1.defineChain)({
      id: 660279,
      name: "Xai Mainnet",
      nativeCurrency: { name: "Xai", symbol: "XAI", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://xai-chain.net/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://explorer.xai-chain.net"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 222549
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/xaiTestnet.js
var require_xaiTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/xaiTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.xaiTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.xaiTestnet = (0, defineChain_js_1.defineChain)({
      id: 37714555429,
      name: "Xai Testnet",
      nativeCurrency: { name: "sXai", symbol: "sXAI", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet-v2.xai-chain.net/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://testnet-explorer-v2.xai-chain.net"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/xdc.js
var require_xdc = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/xdc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.xdc = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.xdc = (0, defineChain_js_1.defineChain)({
      id: 50,
      name: "XinFin Network",
      nativeCurrency: {
        decimals: 18,
        name: "XDC",
        symbol: "XDC"
      },
      rpcUrls: {
        default: { http: ["https://rpc.xinfin.network"] }
      },
      blockExplorers: {
        default: {
          name: "Blocksscan",
          url: "https://xdc.blocksscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 71542788
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/xdcTestnet.js
var require_xdcTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/xdcTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.xdcTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.xdcTestnet = (0, defineChain_js_1.defineChain)({
      id: 51,
      name: "Apothem Network",
      nativeCurrency: {
        decimals: 18,
        name: "TXDC",
        symbol: "TXDC"
      },
      rpcUrls: {
        default: { http: ["https://erpc.apothem.network"] }
      },
      blockExplorers: {
        default: {
          name: "Blocksscan",
          url: "https://apothem.blocksscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 59765389
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/xrSepolia.js
var require_xrSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/xrSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.xrSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.xrSepolia = (0, defineChain_js_1.defineChain)({
      id: 2730,
      name: "XR Sepolia",
      nativeCurrency: {
        decimals: 18,
        name: "tXR",
        symbol: "tXR"
      },
      rpcUrls: {
        default: { http: ["https://xr-sepolia-testnet.rpc.caldera.xyz/http"] }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://xr-sepolia-testnet.explorer.caldera.xyz"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/yooldoVerse.js
var require_yooldoVerse = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/yooldoVerse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.yooldoVerse = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.yooldoVerse = (0, defineChain_js_1.defineChain)({
      id: 50005,
      name: "Yooldo Verse",
      nativeCurrency: { name: "OAS", symbol: "OAS", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.yooldo-verse.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "Yooldo Verse Explorer",
          url: "https://explorer.yooldo-verse.xyz"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/yooldoVerseTestnet.js
var require_yooldoVerseTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/yooldoVerseTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.yooldoVerseTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.yooldoVerseTestnet = (0, defineChain_js_1.defineChain)({
      id: 50006,
      name: "Yooldo Verse Testnet",
      nativeCurrency: { name: "OAS", symbol: "OAS", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.yooldo-verse.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "Yooldo Verse Testnet Explorer",
          url: "https://explorer.testnet.yooldo-verse.xyz"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zenchainTestnet.js
var require_zenchainTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zenchainTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zenchainTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zenchainTestnet = (0, defineChain_js_1.defineChain)({
      id: 8408,
      name: "Zenchain Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "ZCX",
        symbol: "ZCX"
      },
      rpcUrls: {
        default: {
          http: ["https://zenchain-testnet.api.onfinality.io/public"],
          webSocket: ["wss://zenchain-testnet.api.onfinality.io/public-ws"]
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 230019
        }
      },
      blockExplorers: {
        default: {
          name: "Zentrace",
          url: "https://zentrace.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zetachain.js
var require_zetachain = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zetachain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zetachain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zetachain = (0, defineChain_js_1.defineChain)({
      id: 7e3,
      name: "ZetaChain",
      nativeCurrency: {
        decimals: 18,
        name: "Zeta",
        symbol: "ZETA"
      },
      rpcUrls: {
        default: {
          http: ["https://zetachain-evm.blockpi.network/v1/rpc/public"]
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1632781
        }
      },
      blockExplorers: {
        default: {
          name: "ZetaScan",
          url: "https://explorer.zetachain.com"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zetachainAthensTestnet.js
var require_zetachainAthensTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zetachainAthensTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zetachainAthensTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zetachainAthensTestnet = (0, defineChain_js_1.defineChain)({
      id: 7001,
      name: "ZetaChain Athens Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Zeta",
        symbol: "aZETA"
      },
      rpcUrls: {
        default: {
          http: ["https://zetachain-athens-evm.blockpi.network/v1/rpc/public"]
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 2715217
        }
      },
      blockExplorers: {
        default: {
          name: "ZetaScan",
          url: "https://athens.explorer.zetachain.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zhejiang.js
var require_zhejiang = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zhejiang.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zhejiang = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zhejiang = (0, defineChain_js_1.defineChain)({
      id: 1337803,
      name: "Zhejiang",
      nativeCurrency: { name: "Zhejiang Ether", symbol: "ZhejETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.zhejiang.ethpandaops.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Beaconchain",
          url: "https://zhejiang.beaconcha.in"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zilliqa.js
var require_zilliqa = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zilliqa.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zilliqa = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zilliqa = (0, defineChain_js_1.defineChain)({
      id: 32769,
      name: "Zilliqa",
      network: "zilliqa",
      nativeCurrency: { name: "Zilliqa", symbol: "ZIL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://api.zilliqa.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ethernal",
          url: "https://evmx.zilliqa.com"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zilliqaTestnet.js
var require_zilliqaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zilliqaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zilliqaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zilliqaTestnet = (0, defineChain_js_1.defineChain)({
      id: 33101,
      name: "Zilliqa Testnet",
      network: "zilliqa-testnet",
      nativeCurrency: { name: "Zilliqa", symbol: "ZIL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://dev-api.zilliqa.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ethernal",
          url: "https://evmx.testnet.zilliqa.com"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zkFair.js
var require_zkFair = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zkFair.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zkFair = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zkFair = (0, defineChain_js_1.defineChain)({
      id: 42766,
      name: "ZKFair Mainnet",
      network: "zkfair-mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "USD Coin",
        symbol: "USDC"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.zkfair.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "zkFair Explorer",
          url: "https://scan.zkfair.io",
          apiUrl: "https://scan.zkfair.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 6090959
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zkFairTestnet.js
var require_zkFairTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zkFairTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zkFairTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zkFairTestnet = (0, defineChain_js_1.defineChain)({
      id: 43851,
      name: "ZKFair Testnet",
      network: "zkfair-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "USD Coin",
        symbol: "USDC"
      },
      rpcUrls: {
        default: {
          http: ["https://testnet-rpc.zkfair.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "zkFair Explorer",
          url: "https://testnet-scan.zkfair.io"
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zkLinkNova.js
var require_zkLinkNova = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zkLinkNova.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zkLinkNova = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zkLinkNova = (0, defineChain_js_1.defineChain)({
      id: 810180,
      name: "zkLink Nova",
      nativeCurrency: {
        decimals: 18,
        name: "ETH",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://rpc.zklink.io"] }
      },
      blockExplorers: {
        default: {
          name: "zkLink Nova Block Explorer",
          url: "https://explorer.zklink.io"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zkLinkNovaSepoliaTestnet.js
var require_zkLinkNovaSepoliaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zkLinkNovaSepoliaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zkLinkNovaSepoliaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zkLinkNovaSepoliaTestnet = (0, defineChain_js_1.defineChain)({
      id: 810181,
      name: "zkLink Nova Sepolia Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "ETH",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://sepolia.rpc.zklink.io"] }
      },
      blockExplorers: {
        default: {
          name: "zkLink Nova Block Explorer",
          url: "https://sepolia.explorer.zklink.io"
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zksync.js
var require_zksync = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zksync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zksync = void 0;
    var defineChain_js_1 = require_defineChain();
    var chainConfig_js_1 = require_chainConfig();
    exports2.zksync = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 324,
      name: "ZKsync Era",
      network: "zksync-era",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://mainnet.era.zksync.io"],
          webSocket: ["wss://mainnet.era.zksync.io/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://era.zksync.network/",
          apiUrl: "https://api-era.zksync.network/api"
        },
        native: {
          name: "ZKsync Explorer",
          url: "https://explorer.zksync.io/",
          apiUrl: "https://block-explorer-api.mainnet.zksync.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xF9cda624FBC7e059355ce98a31693d299FACd963"
        },
        universalSignatureVerifier: {
          address: "0xfB688330379976DA81eB64Fe4BF50d7401763B9C",
          blockCreated: 45659388
        }
      }
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zksyncInMemoryNode.js
var require_zksyncInMemoryNode = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zksyncInMemoryNode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zksyncInMemoryNode = void 0;
    var defineChain_js_1 = require_defineChain();
    var chainConfig_js_1 = require_chainConfig();
    exports2.zksyncInMemoryNode = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 260,
      name: "ZKsync InMemory Node",
      network: "zksync-in-memory-node",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["http://localhost:8011"]
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zksyncLocalNode.js
var require_zksyncLocalNode = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zksyncLocalNode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zksyncLocalNode = void 0;
    var defineChain_js_1 = require_defineChain();
    var chainConfig_js_1 = require_chainConfig();
    exports2.zksyncLocalNode = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 270,
      name: "ZKsync CLI Local Node",
      network: "zksync-cli-local-node",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["http://localhost:3050"]
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zksyncSepoliaTestnet.js
var require_zksyncSepoliaTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zksyncSepoliaTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zksyncSepoliaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    var chainConfig_js_1 = require_chainConfig();
    exports2.zksyncSepoliaTestnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 300,
      name: "ZKsync Sepolia Testnet",
      network: "zksync-sepolia-testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia.era.zksync.dev"],
          webSocket: ["wss://sepolia.era.zksync.dev/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://sepolia-era.zksync.network/",
          apiUrl: "https://api-sepolia-era.zksync.network/api"
        },
        native: {
          name: "ZKsync Explorer",
          url: "https://sepolia.explorer.zksync.io/",
          blockExplorerApi: "https://block-explorer-api.sepolia.zksync.dev/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xF9cda624FBC7e059355ce98a31693d299FACd963"
        },
        universalSignatureVerifier: {
          address: "0xfB688330379976DA81eB64Fe4BF50d7401763B9C",
          blockCreated: 3855712
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zora.js
var require_zora = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zora.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zora = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 1;
    exports2.zora = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 7777777,
      name: "Zora",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.zora.energy"],
          webSocket: ["wss://rpc.zora.energy"]
        }
      },
      blockExplorers: {
        default: {
          name: "Explorer",
          url: "https://explorer.zora.energy",
          apiUrl: "https://explorer.zora.energy/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0x9E6204F750cD866b299594e2aC9eA824E2e5f95c"
          }
        },
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 5882
        },
        portal: {
          [sourceId]: {
            address: "0x1a0ad011913A150f69f6A19DF447A0CfD9551054"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x3e2Ea9B92B7E48A52296fD261dc26fd995284631"
          }
        }
      },
      sourceId
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zoraSepolia.js
var require_zoraSepolia = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zoraSepolia.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zoraSepolia = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 11155111;
    exports2.zoraSepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 999999999,
      name: "Zora Sepolia",
      network: "zora-sepolia",
      nativeCurrency: {
        decimals: 18,
        name: "Zora Sepolia",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://sepolia.rpc.zora.energy"],
          webSocket: ["wss://sepolia.rpc.zora.energy"]
        }
      },
      blockExplorers: {
        default: {
          name: "Zora Sepolia Explorer",
          url: "https://sepolia.explorer.zora.energy/",
          apiUrl: "https://sepolia.explorer.zora.energy/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId]: {
            address: "0x2615B481Bd3E5A1C0C7Ca3Da1bdc663E8615Ade9"
          }
        },
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 83160
        },
        portal: {
          [sourceId]: {
            address: "0xeffE2C6cA9Ab797D418f0D91eA60807713f3536f"
          }
        },
        l1StandardBridge: {
          [sourceId]: {
            address: "0x5376f1D543dcbB5BD416c56C189e4cB7399fCcCB"
          }
        }
      },
      sourceId,
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zoraTestnet.js
var require_zoraTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zoraTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zoraTestnet = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    var sourceId = 5;
    exports2.zoraTestnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 999,
      name: "Zora Goerli Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Zora Goerli",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://testnet.rpc.zora.energy"],
          webSocket: ["wss://testnet.rpc.zora.energy"]
        }
      },
      blockExplorers: {
        default: {
          name: "Explorer",
          url: "https://testnet.explorer.zora.energy",
          apiUrl: "https://testnet.explorer.zora.energy/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 189123
        },
        portal: {
          [sourceId]: {
            address: "0xDb9F51790365e7dc196e7D072728df39Be958ACe"
          }
        }
      },
      sourceId,
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zircuit.js
var require_zircuit = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zircuit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zircuit = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zircuit = (0, defineChain_js_1.defineChain)({
      id: 48900,
      name: "Zircuit Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: [
            "https://zircuit1-mainnet.p2pify.com",
            "https://zircuit1-mainnet.liquify.com",
            "https://zircuit-mainnet.drpc.org"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "Zircuit Explorer",
          url: "https://explorer.zircuit.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11"
        }
      },
      testnet: false
    });
  }
});

// node_modules/viem/_cjs/chains/definitions/zircuitTestnet.js
var require_zircuitTestnet = __commonJS({
  "node_modules/viem/_cjs/chains/definitions/zircuitTestnet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zircuitTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zircuitTestnet = (0, defineChain_js_1.defineChain)({
      id: 48899,
      name: "Zircuit Testnet",
      nativeCurrency: { name: "ETH", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: [
            "https://zircuit1-testnet.p2pify.com",
            "https://zircuit1-testnet.liquify.com"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "Zircuit Testnet Explorer",
          url: "https://explorer.testnet.zircuit.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 6040287
        }
      },
      testnet: true
    });
  }
});

// node_modules/viem/_cjs/chains/index.js
var require_chains = __commonJS({
  "node_modules/viem/_cjs/chains/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.boba = exports2.bobSepolia = exports2.bob = exports2.blastSepolia = exports2.blast = exports2.bitTorrentTestnet = exports2.bitTorrent = exports2.bitlayerTestnet = exports2.bitlayer = exports2.bitkubTestnet = exports2.bitkub = exports2.bevmMainnet = exports2.berachainTestnetbArtio = exports2.berachainTestnet = exports2.bearNetworkChainTestnet = exports2.bearNetworkChainMainnet = exports2.beamTestnet = exports2.beam = exports2.baseSepolia = exports2.baseGoerli = exports2.base = exports2.bahamut = exports2.b3 = exports2.b3Sepolia = exports2.avalancheFuji = exports2.avalanche = exports2.auroria = exports2.auroraTestnet = exports2.aurora = exports2.atletaOlympia = exports2.artelaTestnet = exports2.areonNetworkTestnet = exports2.areonNetwork = exports2.arbitrumSepolia = exports2.astarZkyoto = exports2.astarZkEVM = exports2.astar = exports2.assetChainTestnet = exports2.assetChain = exports2.arbitrumNova = exports2.arbitrumGoerli = exports2.arbitrum = exports2.apexTestnet = exports2.anvil = exports2.ancient8Sepolia = exports2.ancient8 = exports2.alienxHalTestnet = exports2.alienx = exports2.acala = exports2.abstractTestnet = void 0;
    exports2.edgelessTestnet = exports2.edgeless = exports2.dreyerxTestnet = exports2.dreyerxMainnet = exports2.dosChainTestnet = exports2.dosChain = exports2.dogechain = exports2.dodochainTestnet = exports2.dfk = exports2.degen = exports2.defichainEvmTestnet = exports2.defichainEvm = exports2.dchainTestnet = exports2.dchain = exports2.darwinia = exports2.cyberTestnet = exports2.cyber = exports2.curtis = exports2.crossbell = exports2.cronosTestnet = exports2.cronoszkEVMTestnet = exports2.cronoszkEVM = exports2.cronos = exports2.crab = exports2.coreDao = exports2.confluxESpaceTestnet = exports2.confluxESpace = exports2.classic = exports2.chips = exports2.chiliz = exports2.chang = exports2.celoAlfajores = exports2.celo = exports2.canto = exports2.cannon = exports2.bxnTestnet = exports2.bxn = exports2.btrTestnet = exports2.btr = exports2.bsquaredTestnet = exports2.bsquared = exports2.bscGreenfield = exports2.bscTestnet = exports2.bsc = exports2.bronosTestnet = exports2.bronos = exports2.bounceBitTestnet = exports2.bounceBit = exports2.botanixTestnet = exports2.bobaSepolia = void 0;
    exports2.goerli = exports2.gobi = exports2.goChain = exports2.garnet = exports2.karura = exports2.jbcTestnet = exports2.jbc = exports2.iotexTestnet = exports2.iotex = exports2.fusionTestnet = exports2.fusion = exports2.fuseSparknet = exports2.fuse = exports2.funkiSepolia = exports2.funkiMainnet = exports2.fraxtalTestnet = exports2.fraxtal = exports2.foundry = exports2.forma = exports2.fluenceTestnet = exports2.fluenceStage = exports2.fluence = exports2.flowTestnet = exports2.flowMainnet = exports2.flowPreviewnet = exports2.flareTestnet = exports2.flare = exports2.filecoinHyperspace = exports2.filecoinCalibration = exports2.filecoin = exports2.fibo = exports2.fantomTestnet = exports2.fantomSonicTestnet = exports2.fantom = exports2.electroneumTestnet = exports2.electroneum = exports2.elastosTestnet = exports2.elastos = exports2.ektaTestnet = exports2.ekta = exports2.evmosTestnet = exports2.evmos = exports2.etherlinkTestnet = exports2.etherlink = exports2.eosTestnet = exports2.eos = exports2.eon = exports2.elysiumTestnet = exports2.edgewareTestnet = exports2.edgeware = void 0;
    exports2.luksoTestnet = exports2.lukso = exports2.loop = exports2.localhost = exports2.liskSepolia = exports2.lisk = exports2.lineaTestnet = exports2.lineaSepolia = exports2.lineaGoerli = exports2.linea = exports2.lightlinkPhoenix = exports2.lightlinkPegasus = exports2.l3xTestnet = exports2.l3x = exports2.kromaSepolia = exports2.kroma = exports2.koi = exports2.kairos = exports2.kaia = exports2.klaytnBaobab = exports2.klaytn = exports2.kinto = exports2.kcc = exports2.kavaTestnet = exports2.kava = exports2.kakarotStarknetSepolia = exports2.kakarotSepolia = exports2.iotaTestnet = exports2.iota = exports2.inEVM = exports2.immutableZkEvmTestnet = exports2.immutableZkEvm = exports2.hychainTestnet = exports2.hychain = exports2.holesky = exports2.hemiSepolia = exports2.hela = exports2.hederaPreviewnet = exports2.hederaTestnet = exports2.hedera = exports2.haqqTestedge2 = exports2.haqqMainnet = exports2.hashkeyTestnet = exports2.harmonyOne = exports2.hardhat = exports2.ham = exports2.guruTestnet = exports2.gravity = exports2.gnosisChiado = exports2.gnosis = void 0;
    exports2.oortMainnetDev = exports2.opBNBTestnet = exports2.opBNB = exports2.optopiaTestnet = exports2.optopia = exports2.optimismSepolia = exports2.optimismGoerli = exports2.optimism = exports2.okc = exports2.odysseyTestnet = exports2.oasisTestnet = exports2.oasys = exports2.nexilix = exports2.nexi = exports2.neonMainnet = exports2.neonDevnet = exports2.nautilus = exports2.morphSepolia = exports2.morphHolesky = exports2.moonriver = exports2.moonbeamDev = exports2.moonbeam = exports2.moonbaseAlpha = exports2.modeTestnet = exports2.mode = exports2.mintSepoliaTestnet = exports2.mint = exports2.mevTestnet = exports2.mev = exports2.metisGoerli = exports2.metis = exports2.meterTestnet = exports2.meter = exports2.metalL2 = exports2.metachainIstanbul = exports2.metachain = exports2.merlin = exports2.matchainTestnet = exports2.matchain = exports2.mapProtocol = exports2.mantleTestnet = exports2.mantleSepoliaTestnet = exports2.mantle = exports2.mantaTestnet = exports2.mantaSepoliaTestnet = exports2.manta = exports2.mandala = exports2.mainnet = exports2.lyra = exports2.lycan = void 0;
    exports2.skaleBlockBrawlers = exports2.shimmerTestnet = exports2.shimmer = exports2.shapeSepolia = exports2.shape = exports2.sepolia = exports2.seiTestnet = exports2.seiDevnet = exports2.sei = exports2.scrollSepolia = exports2.satoshiVMTestnet = exports2.satoshiVM = exports2.sapphireTestnet = exports2.sapphire = exports2.saigon = exports2.rss3Sepolia = exports2.rss3 = exports2.rootstockTestnet = exports2.rootstock = exports2.rootPorcini = exports2.root = exports2.ronin = exports2.rolluxTestnet = exports2.rollux = exports2.reyaNetwork = exports2.redstone = exports2.redbellyTestnet = exports2.real = exports2.qTestnet = exports2.qMainnet = exports2.ql1 = exports2.pulsechainV4 = exports2.pulsechain = exports2.polygonZkEvmTestnet = exports2.polygonZkEvmCardona = exports2.polygonZkEvm = exports2.polygonMumbai = exports2.polygonAmoy = exports2.polygon = exports2.plumeTestnet = exports2.plinga = exports2.phoenix = exports2.pgnTestnet = exports2.pgn = exports2.playfiAlbireo = exports2.palmTestnet = exports2.palm = exports2.otimDevnet = exports2.orderlySepolia = exports2.orderly = void 0;
    exports2.tron = exports2.thunderTestnet = exports2.thaiChain = exports2.tenet = exports2.telosTestnet = exports2.telos = exports2.telcoinTestnet = exports2.taraxaTestnet = exports2.taikoTestnetSepolia = exports2.taikoKatla = exports2.taikoJolnir = exports2.taikoHekla = exports2.taiko = exports2.taraxa = exports2.syscoinTestnet = exports2.syscoin = exports2.swanSaturnTestnet = exports2.swanProximaTestnet = exports2.swan = exports2.superposition = exports2.superlumio = exports2.stratis = exports2.siliconSepolia = exports2.silicon = exports2.storyTestnet = exports2.shiden = exports2.shibariumTestnet = exports2.shibarium = exports2.shardeumSphinx = exports2.spicy = exports2.sophonTestnet = exports2.songbirdTestnet = exports2.songbird = exports2.soneiumMinato = exports2.snaxTestnet = exports2.snax = exports2.sketchpad = exports2.skaleTitanTestnet = exports2.skaleTitan = exports2.skaleRazor = exports2.skaleNebulaTestnet = exports2.skaleNebula = exports2.skaleHumanProtocol = exports2.skaleExorde = exports2.skaleEuropaTestnet = exports2.skaleEuropa = exports2.skaleCryptoColosseum = exports2.skaleCryptoBlades = exports2.skaleCalypsoTestnet = exports2.skaleCalypso = void 0;
    exports2.zoraTestnet = exports2.zoraSepolia = exports2.zora = exports2.zksyncSepoliaTestnet = exports2.zkSyncSepoliaTestnet = exports2.zksyncLocalNode = exports2.zkSyncLocalNode = exports2.zksyncInMemoryNode = exports2.zkSyncInMemoryNode = exports2.zksync = exports2.zkSync = exports2.zkLinkNovaSepoliaTestnet = exports2.zkLinkNova = exports2.zkFairTestnet = exports2.zkFair = exports2.zilliqaTestnet = exports2.zilliqa = exports2.zhejiang = exports2.zetachainAthensTestnet = exports2.zetachain = exports2.zenchainTestnet = exports2.yooldoVerseTestnet = exports2.yooldoVerse = exports2.xrSepolia = exports2.xdcTestnet = exports2.xdc = exports2.xaiTestnet = exports2.xai = exports2.xLayer = exports2.x1Testnet = exports2.xLayerTestnet = exports2.worldchainSepolia = exports2.worldchain = exports2.wemixTestnet = exports2.wemix = exports2.weaveVMAlphanet = exports2.wanchainTestnet = exports2.wanchain = exports2.visionTestnet = exports2.vision = exports2.victionTestnet = exports2.viction = exports2.vechain = exports2.unreal = exports2.uniqueOpal = exports2.uniqueQuartz = exports2.unique = exports2.unichainSepolia = exports2.ultronTestnet = exports2.ultron = void 0;
    exports2.zircuitTestnet = exports2.zircuit = void 0;
    var abstractTestnet_js_1 = require_abstractTestnet();
    Object.defineProperty(exports2, "abstractTestnet", { enumerable: true, get: function() {
      return abstractTestnet_js_1.abstractTestnet;
    } });
    var acala_js_1 = require_acala();
    Object.defineProperty(exports2, "acala", { enumerable: true, get: function() {
      return acala_js_1.acala;
    } });
    var alienX_js_1 = require_alienX();
    Object.defineProperty(exports2, "alienx", { enumerable: true, get: function() {
      return alienX_js_1.alienx;
    } });
    var alienXHalTestnet_js_1 = require_alienXHalTestnet();
    Object.defineProperty(exports2, "alienxHalTestnet", { enumerable: true, get: function() {
      return alienXHalTestnet_js_1.alienxHalTestnet;
    } });
    var ancient8_js_1 = require_ancient8();
    Object.defineProperty(exports2, "ancient8", { enumerable: true, get: function() {
      return ancient8_js_1.ancient8;
    } });
    var ancient8Sepolia_js_1 = require_ancient8Sepolia();
    Object.defineProperty(exports2, "ancient8Sepolia", { enumerable: true, get: function() {
      return ancient8Sepolia_js_1.ancient8Sepolia;
    } });
    var anvil_js_1 = require_anvil();
    Object.defineProperty(exports2, "anvil", { enumerable: true, get: function() {
      return anvil_js_1.anvil;
    } });
    var apexTestnet_js_1 = require_apexTestnet();
    Object.defineProperty(exports2, "apexTestnet", { enumerable: true, get: function() {
      return apexTestnet_js_1.apexTestnet;
    } });
    var arbitrum_js_1 = require_arbitrum();
    Object.defineProperty(exports2, "arbitrum", { enumerable: true, get: function() {
      return arbitrum_js_1.arbitrum;
    } });
    var arbitrumGoerli_js_1 = require_arbitrumGoerli();
    Object.defineProperty(exports2, "arbitrumGoerli", { enumerable: true, get: function() {
      return arbitrumGoerli_js_1.arbitrumGoerli;
    } });
    var arbitrumNova_js_1 = require_arbitrumNova();
    Object.defineProperty(exports2, "arbitrumNova", { enumerable: true, get: function() {
      return arbitrumNova_js_1.arbitrumNova;
    } });
    var assetChain_js_1 = require_assetChain();
    Object.defineProperty(exports2, "assetChain", { enumerable: true, get: function() {
      return assetChain_js_1.assetChain;
    } });
    var assetChainTestnet_js_1 = require_assetChainTestnet();
    Object.defineProperty(exports2, "assetChainTestnet", { enumerable: true, get: function() {
      return assetChainTestnet_js_1.assetChainTestnet;
    } });
    var astar_js_1 = require_astar();
    Object.defineProperty(exports2, "astar", { enumerable: true, get: function() {
      return astar_js_1.astar;
    } });
    var astarZkEVM_js_1 = require_astarZkEVM();
    Object.defineProperty(exports2, "astarZkEVM", { enumerable: true, get: function() {
      return astarZkEVM_js_1.astarZkEVM;
    } });
    var astarZkyoto_js_1 = require_astarZkyoto();
    Object.defineProperty(exports2, "astarZkyoto", { enumerable: true, get: function() {
      return astarZkyoto_js_1.astarZkyoto;
    } });
    var arbitrumSepolia_js_1 = require_arbitrumSepolia();
    Object.defineProperty(exports2, "arbitrumSepolia", { enumerable: true, get: function() {
      return arbitrumSepolia_js_1.arbitrumSepolia;
    } });
    var areonNetwork_js_1 = require_areonNetwork();
    Object.defineProperty(exports2, "areonNetwork", { enumerable: true, get: function() {
      return areonNetwork_js_1.areonNetwork;
    } });
    var areonNetworkTestnet_js_1 = require_areonNetworkTestnet();
    Object.defineProperty(exports2, "areonNetworkTestnet", { enumerable: true, get: function() {
      return areonNetworkTestnet_js_1.areonNetworkTestnet;
    } });
    var artelaTestnet_js_1 = require_artelaTestnet();
    Object.defineProperty(exports2, "artelaTestnet", { enumerable: true, get: function() {
      return artelaTestnet_js_1.artelaTestnet;
    } });
    var atletaOlympia_js_1 = require_atletaOlympia();
    Object.defineProperty(exports2, "atletaOlympia", { enumerable: true, get: function() {
      return atletaOlympia_js_1.atletaOlympia;
    } });
    var aurora_js_1 = require_aurora();
    Object.defineProperty(exports2, "aurora", { enumerable: true, get: function() {
      return aurora_js_1.aurora;
    } });
    var auroraTestnet_js_1 = require_auroraTestnet();
    Object.defineProperty(exports2, "auroraTestnet", { enumerable: true, get: function() {
      return auroraTestnet_js_1.auroraTestnet;
    } });
    var auroria_js_1 = require_auroria();
    Object.defineProperty(exports2, "auroria", { enumerable: true, get: function() {
      return auroria_js_1.auroria;
    } });
    var avalanche_js_1 = require_avalanche();
    Object.defineProperty(exports2, "avalanche", { enumerable: true, get: function() {
      return avalanche_js_1.avalanche;
    } });
    var avalancheFuji_js_1 = require_avalancheFuji();
    Object.defineProperty(exports2, "avalancheFuji", { enumerable: true, get: function() {
      return avalancheFuji_js_1.avalancheFuji;
    } });
    var b3Sepolia_js_1 = require_b3Sepolia();
    Object.defineProperty(exports2, "b3Sepolia", { enumerable: true, get: function() {
      return b3Sepolia_js_1.b3Sepolia;
    } });
    var b3_js_1 = require_b3();
    Object.defineProperty(exports2, "b3", { enumerable: true, get: function() {
      return b3_js_1.b3;
    } });
    var bahamut_js_1 = require_bahamut();
    Object.defineProperty(exports2, "bahamut", { enumerable: true, get: function() {
      return bahamut_js_1.bahamut;
    } });
    var base_js_1 = require_base2();
    Object.defineProperty(exports2, "base", { enumerable: true, get: function() {
      return base_js_1.base;
    } });
    var baseGoerli_js_1 = require_baseGoerli();
    Object.defineProperty(exports2, "baseGoerli", { enumerable: true, get: function() {
      return baseGoerli_js_1.baseGoerli;
    } });
    var baseSepolia_js_1 = require_baseSepolia();
    Object.defineProperty(exports2, "baseSepolia", { enumerable: true, get: function() {
      return baseSepolia_js_1.baseSepolia;
    } });
    var beam_js_1 = require_beam();
    Object.defineProperty(exports2, "beam", { enumerable: true, get: function() {
      return beam_js_1.beam;
    } });
    var beamTestnet_js_1 = require_beamTestnet();
    Object.defineProperty(exports2, "beamTestnet", { enumerable: true, get: function() {
      return beamTestnet_js_1.beamTestnet;
    } });
    var bearNetworkChainMainnet_js_1 = require_bearNetworkChainMainnet();
    Object.defineProperty(exports2, "bearNetworkChainMainnet", { enumerable: true, get: function() {
      return bearNetworkChainMainnet_js_1.bearNetworkChainMainnet;
    } });
    var bearNetworkChainTestnet_js_1 = require_bearNetworkChainTestnet();
    Object.defineProperty(exports2, "bearNetworkChainTestnet", { enumerable: true, get: function() {
      return bearNetworkChainTestnet_js_1.bearNetworkChainTestnet;
    } });
    var berachainTestnet_js_1 = require_berachainTestnet();
    Object.defineProperty(exports2, "berachainTestnet", { enumerable: true, get: function() {
      return berachainTestnet_js_1.berachainTestnet;
    } });
    var berachainTestnetbArtio_js_1 = require_berachainTestnetbArtio();
    Object.defineProperty(exports2, "berachainTestnetbArtio", { enumerable: true, get: function() {
      return berachainTestnetbArtio_js_1.berachainTestnetbArtio;
    } });
    var bevmMainnet_js_1 = require_bevmMainnet();
    Object.defineProperty(exports2, "bevmMainnet", { enumerable: true, get: function() {
      return bevmMainnet_js_1.bevmMainnet;
    } });
    var bitkub_js_1 = require_bitkub();
    Object.defineProperty(exports2, "bitkub", { enumerable: true, get: function() {
      return bitkub_js_1.bitkub;
    } });
    var bitkubTestnet_js_1 = require_bitkubTestnet();
    Object.defineProperty(exports2, "bitkubTestnet", { enumerable: true, get: function() {
      return bitkubTestnet_js_1.bitkubTestnet;
    } });
    var bitlayer_js_1 = require_bitlayer();
    Object.defineProperty(exports2, "bitlayer", { enumerable: true, get: function() {
      return bitlayer_js_1.bitlayer;
    } });
    var bitlayerTestnet_js_1 = require_bitlayerTestnet();
    Object.defineProperty(exports2, "bitlayerTestnet", { enumerable: true, get: function() {
      return bitlayerTestnet_js_1.bitlayerTestnet;
    } });
    var bitTorrent_js_1 = require_bitTorrent();
    Object.defineProperty(exports2, "bitTorrent", { enumerable: true, get: function() {
      return bitTorrent_js_1.bitTorrent;
    } });
    var bitTorrentTestnet_js_1 = require_bitTorrentTestnet();
    Object.defineProperty(exports2, "bitTorrentTestnet", { enumerable: true, get: function() {
      return bitTorrentTestnet_js_1.bitTorrentTestnet;
    } });
    var blast_js_1 = require_blast();
    Object.defineProperty(exports2, "blast", { enumerable: true, get: function() {
      return blast_js_1.blast;
    } });
    var blastSepolia_js_1 = require_blastSepolia();
    Object.defineProperty(exports2, "blastSepolia", { enumerable: true, get: function() {
      return blastSepolia_js_1.blastSepolia;
    } });
    var bob_js_1 = require_bob();
    Object.defineProperty(exports2, "bob", { enumerable: true, get: function() {
      return bob_js_1.bob;
    } });
    var bobSepolia_js_1 = require_bobSepolia();
    Object.defineProperty(exports2, "bobSepolia", { enumerable: true, get: function() {
      return bobSepolia_js_1.bobSepolia;
    } });
    var boba_js_1 = require_boba();
    Object.defineProperty(exports2, "boba", { enumerable: true, get: function() {
      return boba_js_1.boba;
    } });
    var bobaSepolia_js_1 = require_bobaSepolia();
    Object.defineProperty(exports2, "bobaSepolia", { enumerable: true, get: function() {
      return bobaSepolia_js_1.bobaSepolia;
    } });
    var botanixTestnet_js_1 = require_botanixTestnet();
    Object.defineProperty(exports2, "botanixTestnet", { enumerable: true, get: function() {
      return botanixTestnet_js_1.botanixTestnet;
    } });
    var bounceBit_js_1 = require_bounceBit();
    Object.defineProperty(exports2, "bounceBit", { enumerable: true, get: function() {
      return bounceBit_js_1.bounceBit;
    } });
    var bounceBitTestnet_js_1 = require_bounceBitTestnet();
    Object.defineProperty(exports2, "bounceBitTestnet", { enumerable: true, get: function() {
      return bounceBitTestnet_js_1.bounceBitTestnet;
    } });
    var bronos_js_1 = require_bronos();
    Object.defineProperty(exports2, "bronos", { enumerable: true, get: function() {
      return bronos_js_1.bronos;
    } });
    var bronosTestnet_js_1 = require_bronosTestnet();
    Object.defineProperty(exports2, "bronosTestnet", { enumerable: true, get: function() {
      return bronosTestnet_js_1.bronosTestnet;
    } });
    var bsc_js_1 = require_bsc();
    Object.defineProperty(exports2, "bsc", { enumerable: true, get: function() {
      return bsc_js_1.bsc;
    } });
    var bscTestnet_js_1 = require_bscTestnet();
    Object.defineProperty(exports2, "bscTestnet", { enumerable: true, get: function() {
      return bscTestnet_js_1.bscTestnet;
    } });
    var bscGreenfield_js_1 = require_bscGreenfield();
    Object.defineProperty(exports2, "bscGreenfield", { enumerable: true, get: function() {
      return bscGreenfield_js_1.bscGreenfield;
    } });
    var bsquared_js_1 = require_bsquared();
    Object.defineProperty(exports2, "bsquared", { enumerable: true, get: function() {
      return bsquared_js_1.bsquared;
    } });
    var bsquaredTestnet_js_1 = require_bsquaredTestnet();
    Object.defineProperty(exports2, "bsquaredTestnet", { enumerable: true, get: function() {
      return bsquaredTestnet_js_1.bsquaredTestnet;
    } });
    var btr_js_1 = require_btr();
    Object.defineProperty(exports2, "btr", { enumerable: true, get: function() {
      return btr_js_1.btr;
    } });
    var btrTestnet_js_1 = require_btrTestnet();
    Object.defineProperty(exports2, "btrTestnet", { enumerable: true, get: function() {
      return btrTestnet_js_1.btrTestnet;
    } });
    var bxn_js_1 = require_bxn();
    Object.defineProperty(exports2, "bxn", { enumerable: true, get: function() {
      return bxn_js_1.bxn;
    } });
    var bxnTestnet_js_1 = require_bxnTestnet();
    Object.defineProperty(exports2, "bxnTestnet", { enumerable: true, get: function() {
      return bxnTestnet_js_1.bxnTestnet;
    } });
    var cannon_js_1 = require_cannon();
    Object.defineProperty(exports2, "cannon", { enumerable: true, get: function() {
      return cannon_js_1.cannon;
    } });
    var canto_js_1 = require_canto();
    Object.defineProperty(exports2, "canto", { enumerable: true, get: function() {
      return canto_js_1.canto;
    } });
    var celo_js_1 = require_celo();
    Object.defineProperty(exports2, "celo", { enumerable: true, get: function() {
      return celo_js_1.celo;
    } });
    var celoAlfajores_js_1 = require_celoAlfajores();
    Object.defineProperty(exports2, "celoAlfajores", { enumerable: true, get: function() {
      return celoAlfajores_js_1.celoAlfajores;
    } });
    var chang_js_1 = require_chang();
    Object.defineProperty(exports2, "chang", { enumerable: true, get: function() {
      return chang_js_1.chang;
    } });
    var chiliz_js_1 = require_chiliz();
    Object.defineProperty(exports2, "chiliz", { enumerable: true, get: function() {
      return chiliz_js_1.chiliz;
    } });
    var chips_js_1 = require_chips();
    Object.defineProperty(exports2, "chips", { enumerable: true, get: function() {
      return chips_js_1.chips;
    } });
    var classic_js_1 = require_classic();
    Object.defineProperty(exports2, "classic", { enumerable: true, get: function() {
      return classic_js_1.classic;
    } });
    var confluxESpace_js_1 = require_confluxESpace();
    Object.defineProperty(exports2, "confluxESpace", { enumerable: true, get: function() {
      return confluxESpace_js_1.confluxESpace;
    } });
    var confluxESpaceTestnet_js_1 = require_confluxESpaceTestnet();
    Object.defineProperty(exports2, "confluxESpaceTestnet", { enumerable: true, get: function() {
      return confluxESpaceTestnet_js_1.confluxESpaceTestnet;
    } });
    var coreDao_js_1 = require_coreDao();
    Object.defineProperty(exports2, "coreDao", { enumerable: true, get: function() {
      return coreDao_js_1.coreDao;
    } });
    var crab_js_1 = require_crab();
    Object.defineProperty(exports2, "crab", { enumerable: true, get: function() {
      return crab_js_1.crab;
    } });
    var cronos_js_1 = require_cronos();
    Object.defineProperty(exports2, "cronos", { enumerable: true, get: function() {
      return cronos_js_1.cronos;
    } });
    var cronoszkEVM_js_1 = require_cronoszkEVM();
    Object.defineProperty(exports2, "cronoszkEVM", { enumerable: true, get: function() {
      return cronoszkEVM_js_1.cronoszkEVM;
    } });
    var cronoszkEVMTestnet_js_1 = require_cronoszkEVMTestnet();
    Object.defineProperty(exports2, "cronoszkEVMTestnet", { enumerable: true, get: function() {
      return cronoszkEVMTestnet_js_1.cronoszkEVMTestnet;
    } });
    var cronosTestnet_js_1 = require_cronosTestnet();
    Object.defineProperty(exports2, "cronosTestnet", { enumerable: true, get: function() {
      return cronosTestnet_js_1.cronosTestnet;
    } });
    var crossbell_js_1 = require_crossbell();
    Object.defineProperty(exports2, "crossbell", { enumerable: true, get: function() {
      return crossbell_js_1.crossbell;
    } });
    var curtis_js_1 = require_curtis();
    Object.defineProperty(exports2, "curtis", { enumerable: true, get: function() {
      return curtis_js_1.curtis;
    } });
    var cyber_js_1 = require_cyber();
    Object.defineProperty(exports2, "cyber", { enumerable: true, get: function() {
      return cyber_js_1.cyber;
    } });
    var cyberTestnet_js_1 = require_cyberTestnet();
    Object.defineProperty(exports2, "cyberTestnet", { enumerable: true, get: function() {
      return cyberTestnet_js_1.cyberTestnet;
    } });
    var darwinia_js_1 = require_darwinia();
    Object.defineProperty(exports2, "darwinia", { enumerable: true, get: function() {
      return darwinia_js_1.darwinia;
    } });
    var dchain_js_1 = require_dchain();
    Object.defineProperty(exports2, "dchain", { enumerable: true, get: function() {
      return dchain_js_1.dchain;
    } });
    var dchainTestnet_js_1 = require_dchainTestnet();
    Object.defineProperty(exports2, "dchainTestnet", { enumerable: true, get: function() {
      return dchainTestnet_js_1.dchainTestnet;
    } });
    var defichainEvm_js_1 = require_defichainEvm();
    Object.defineProperty(exports2, "defichainEvm", { enumerable: true, get: function() {
      return defichainEvm_js_1.defichainEvm;
    } });
    var defichainEvmTestnet_js_1 = require_defichainEvmTestnet();
    Object.defineProperty(exports2, "defichainEvmTestnet", { enumerable: true, get: function() {
      return defichainEvmTestnet_js_1.defichainEvmTestnet;
    } });
    var degen_js_1 = require_degen();
    Object.defineProperty(exports2, "degen", { enumerable: true, get: function() {
      return degen_js_1.degen;
    } });
    var dfk_js_1 = require_dfk();
    Object.defineProperty(exports2, "dfk", { enumerable: true, get: function() {
      return dfk_js_1.dfk;
    } });
    var dodochainTestnet_js_1 = require_dodochainTestnet();
    Object.defineProperty(exports2, "dodochainTestnet", { enumerable: true, get: function() {
      return dodochainTestnet_js_1.dodochainTestnet;
    } });
    var dogechain_js_1 = require_dogechain();
    Object.defineProperty(exports2, "dogechain", { enumerable: true, get: function() {
      return dogechain_js_1.dogechain;
    } });
    var dosChain_js_1 = require_dosChain();
    Object.defineProperty(exports2, "dosChain", { enumerable: true, get: function() {
      return dosChain_js_1.dosChain;
    } });
    var dosChainTestnet_js_1 = require_dosChainTestnet();
    Object.defineProperty(exports2, "dosChainTestnet", { enumerable: true, get: function() {
      return dosChainTestnet_js_1.dosChainTestnet;
    } });
    var dreyerxMainnet_js_1 = require_dreyerxMainnet();
    Object.defineProperty(exports2, "dreyerxMainnet", { enumerable: true, get: function() {
      return dreyerxMainnet_js_1.dreyerxMainnet;
    } });
    var dreyerxTestnet_js_1 = require_dreyerxTestnet();
    Object.defineProperty(exports2, "dreyerxTestnet", { enumerable: true, get: function() {
      return dreyerxTestnet_js_1.dreyerxTestnet;
    } });
    var edgeless_js_1 = require_edgeless();
    Object.defineProperty(exports2, "edgeless", { enumerable: true, get: function() {
      return edgeless_js_1.edgeless;
    } });
    var edgelessTestnet_js_1 = require_edgelessTestnet();
    Object.defineProperty(exports2, "edgelessTestnet", { enumerable: true, get: function() {
      return edgelessTestnet_js_1.edgelessTestnet;
    } });
    var edgeware_js_1 = require_edgeware();
    Object.defineProperty(exports2, "edgeware", { enumerable: true, get: function() {
      return edgeware_js_1.edgeware;
    } });
    var edgewareTestnet_js_1 = require_edgewareTestnet();
    Object.defineProperty(exports2, "edgewareTestnet", { enumerable: true, get: function() {
      return edgewareTestnet_js_1.edgewareTestnet;
    } });
    var elysiumTestnet_js_1 = require_elysiumTestnet();
    Object.defineProperty(exports2, "elysiumTestnet", { enumerable: true, get: function() {
      return elysiumTestnet_js_1.elysiumTestnet;
    } });
    var eon_js_1 = require_eon();
    Object.defineProperty(exports2, "eon", { enumerable: true, get: function() {
      return eon_js_1.eon;
    } });
    var eos_js_1 = require_eos();
    Object.defineProperty(exports2, "eos", { enumerable: true, get: function() {
      return eos_js_1.eos;
    } });
    var eosTestnet_js_1 = require_eosTestnet();
    Object.defineProperty(exports2, "eosTestnet", { enumerable: true, get: function() {
      return eosTestnet_js_1.eosTestnet;
    } });
    var etherlink_js_1 = require_etherlink();
    Object.defineProperty(exports2, "etherlink", { enumerable: true, get: function() {
      return etherlink_js_1.etherlink;
    } });
    var etherlinkTestnet_js_1 = require_etherlinkTestnet();
    Object.defineProperty(exports2, "etherlinkTestnet", { enumerable: true, get: function() {
      return etherlinkTestnet_js_1.etherlinkTestnet;
    } });
    var evmos_js_1 = require_evmos();
    Object.defineProperty(exports2, "evmos", { enumerable: true, get: function() {
      return evmos_js_1.evmos;
    } });
    var evmosTestnet_js_1 = require_evmosTestnet();
    Object.defineProperty(exports2, "evmosTestnet", { enumerable: true, get: function() {
      return evmosTestnet_js_1.evmosTestnet;
    } });
    var ekta_js_1 = require_ekta();
    Object.defineProperty(exports2, "ekta", { enumerable: true, get: function() {
      return ekta_js_1.ekta;
    } });
    var ektaTestnet_js_1 = require_ektaTestnet();
    Object.defineProperty(exports2, "ektaTestnet", { enumerable: true, get: function() {
      return ektaTestnet_js_1.ektaTestnet;
    } });
    var elastos_js_1 = require_elastos();
    Object.defineProperty(exports2, "elastos", { enumerable: true, get: function() {
      return elastos_js_1.elastos;
    } });
    var elastosTestnet_js_1 = require_elastosTestnet();
    Object.defineProperty(exports2, "elastosTestnet", { enumerable: true, get: function() {
      return elastosTestnet_js_1.elastosTestnet;
    } });
    var electroneum_js_1 = require_electroneum();
    Object.defineProperty(exports2, "electroneum", { enumerable: true, get: function() {
      return electroneum_js_1.electroneum;
    } });
    var electroneumTestnet_js_1 = require_electroneumTestnet();
    Object.defineProperty(exports2, "electroneumTestnet", { enumerable: true, get: function() {
      return electroneumTestnet_js_1.electroneumTestnet;
    } });
    var fantom_js_1 = require_fantom();
    Object.defineProperty(exports2, "fantom", { enumerable: true, get: function() {
      return fantom_js_1.fantom;
    } });
    var fantomSonicTestnet_js_1 = require_fantomSonicTestnet();
    Object.defineProperty(exports2, "fantomSonicTestnet", { enumerable: true, get: function() {
      return fantomSonicTestnet_js_1.fantomSonicTestnet;
    } });
    var fantomTestnet_js_1 = require_fantomTestnet();
    Object.defineProperty(exports2, "fantomTestnet", { enumerable: true, get: function() {
      return fantomTestnet_js_1.fantomTestnet;
    } });
    var fibo_js_1 = require_fibo();
    Object.defineProperty(exports2, "fibo", { enumerable: true, get: function() {
      return fibo_js_1.fibo;
    } });
    var filecoin_js_1 = require_filecoin();
    Object.defineProperty(exports2, "filecoin", { enumerable: true, get: function() {
      return filecoin_js_1.filecoin;
    } });
    var filecoinCalibration_js_1 = require_filecoinCalibration();
    Object.defineProperty(exports2, "filecoinCalibration", { enumerable: true, get: function() {
      return filecoinCalibration_js_1.filecoinCalibration;
    } });
    var filecoinHyperspace_js_1 = require_filecoinHyperspace();
    Object.defineProperty(exports2, "filecoinHyperspace", { enumerable: true, get: function() {
      return filecoinHyperspace_js_1.filecoinHyperspace;
    } });
    var flare_js_1 = require_flare();
    Object.defineProperty(exports2, "flare", { enumerable: true, get: function() {
      return flare_js_1.flare;
    } });
    var flareTestnet_js_1 = require_flareTestnet();
    Object.defineProperty(exports2, "flareTestnet", { enumerable: true, get: function() {
      return flareTestnet_js_1.flareTestnet;
    } });
    var flowPreviewnet_js_1 = require_flowPreviewnet();
    Object.defineProperty(exports2, "flowPreviewnet", { enumerable: true, get: function() {
      return flowPreviewnet_js_1.flowPreviewnet;
    } });
    var flowMainnet_js_1 = require_flowMainnet();
    Object.defineProperty(exports2, "flowMainnet", { enumerable: true, get: function() {
      return flowMainnet_js_1.flowMainnet;
    } });
    var flowTestnet_js_1 = require_flowTestnet();
    Object.defineProperty(exports2, "flowTestnet", { enumerable: true, get: function() {
      return flowTestnet_js_1.flowTestnet;
    } });
    var fluence_js_1 = require_fluence();
    Object.defineProperty(exports2, "fluence", { enumerable: true, get: function() {
      return fluence_js_1.fluence;
    } });
    var fluenceStage_js_1 = require_fluenceStage();
    Object.defineProperty(exports2, "fluenceStage", { enumerable: true, get: function() {
      return fluenceStage_js_1.fluenceStage;
    } });
    var fluenceTestnet_js_1 = require_fluenceTestnet();
    Object.defineProperty(exports2, "fluenceTestnet", { enumerable: true, get: function() {
      return fluenceTestnet_js_1.fluenceTestnet;
    } });
    var forma_js_1 = require_forma();
    Object.defineProperty(exports2, "forma", { enumerable: true, get: function() {
      return forma_js_1.forma;
    } });
    var foundry_js_1 = require_foundry();
    Object.defineProperty(exports2, "foundry", { enumerable: true, get: function() {
      return foundry_js_1.foundry;
    } });
    var fraxtal_js_1 = require_fraxtal();
    Object.defineProperty(exports2, "fraxtal", { enumerable: true, get: function() {
      return fraxtal_js_1.fraxtal;
    } });
    var fraxtalTestnet_js_1 = require_fraxtalTestnet();
    Object.defineProperty(exports2, "fraxtalTestnet", { enumerable: true, get: function() {
      return fraxtalTestnet_js_1.fraxtalTestnet;
    } });
    var funkiMainnet_js_1 = require_funkiMainnet();
    Object.defineProperty(exports2, "funkiMainnet", { enumerable: true, get: function() {
      return funkiMainnet_js_1.funkiMainnet;
    } });
    var funkiSepolia_js_1 = require_funkiSepolia();
    Object.defineProperty(exports2, "funkiSepolia", { enumerable: true, get: function() {
      return funkiSepolia_js_1.funkiSepolia;
    } });
    var fuse_js_1 = require_fuse();
    Object.defineProperty(exports2, "fuse", { enumerable: true, get: function() {
      return fuse_js_1.fuse;
    } });
    var fuseSparknet_js_1 = require_fuseSparknet();
    Object.defineProperty(exports2, "fuseSparknet", { enumerable: true, get: function() {
      return fuseSparknet_js_1.fuseSparknet;
    } });
    var fusion_js_1 = require_fusion();
    Object.defineProperty(exports2, "fusion", { enumerable: true, get: function() {
      return fusion_js_1.fusion;
    } });
    var fusionTestnet_js_1 = require_fusionTestnet();
    Object.defineProperty(exports2, "fusionTestnet", { enumerable: true, get: function() {
      return fusionTestnet_js_1.fusionTestnet;
    } });
    var iotex_js_1 = require_iotex();
    Object.defineProperty(exports2, "iotex", { enumerable: true, get: function() {
      return iotex_js_1.iotex;
    } });
    var iotexTestnet_js_1 = require_iotexTestnet();
    Object.defineProperty(exports2, "iotexTestnet", { enumerable: true, get: function() {
      return iotexTestnet_js_1.iotexTestnet;
    } });
    var jbc_js_1 = require_jbc();
    Object.defineProperty(exports2, "jbc", { enumerable: true, get: function() {
      return jbc_js_1.jbc;
    } });
    var jbcTestnet_js_1 = require_jbcTestnet();
    Object.defineProperty(exports2, "jbcTestnet", { enumerable: true, get: function() {
      return jbcTestnet_js_1.jbcTestnet;
    } });
    var karura_js_1 = require_karura();
    Object.defineProperty(exports2, "karura", { enumerable: true, get: function() {
      return karura_js_1.karura;
    } });
    var garnet_js_1 = require_garnet();
    Object.defineProperty(exports2, "garnet", { enumerable: true, get: function() {
      return garnet_js_1.garnet;
    } });
    var goChain_js_1 = require_goChain();
    Object.defineProperty(exports2, "goChain", { enumerable: true, get: function() {
      return goChain_js_1.goChain;
    } });
    var gobi_js_1 = require_gobi();
    Object.defineProperty(exports2, "gobi", { enumerable: true, get: function() {
      return gobi_js_1.gobi;
    } });
    var goerli_js_1 = require_goerli();
    Object.defineProperty(exports2, "goerli", { enumerable: true, get: function() {
      return goerli_js_1.goerli;
    } });
    var gnosis_js_1 = require_gnosis();
    Object.defineProperty(exports2, "gnosis", { enumerable: true, get: function() {
      return gnosis_js_1.gnosis;
    } });
    var gnosisChiado_js_1 = require_gnosisChiado();
    Object.defineProperty(exports2, "gnosisChiado", { enumerable: true, get: function() {
      return gnosisChiado_js_1.gnosisChiado;
    } });
    var gravity_js_1 = require_gravity();
    Object.defineProperty(exports2, "gravity", { enumerable: true, get: function() {
      return gravity_js_1.gravity;
    } });
    var guruTestnet_js_1 = require_guruTestnet();
    Object.defineProperty(exports2, "guruTestnet", { enumerable: true, get: function() {
      return guruTestnet_js_1.guruTestnet;
    } });
    var ham_js_1 = require_ham();
    Object.defineProperty(exports2, "ham", { enumerable: true, get: function() {
      return ham_js_1.ham;
    } });
    var hardhat_js_1 = require_hardhat();
    Object.defineProperty(exports2, "hardhat", { enumerable: true, get: function() {
      return hardhat_js_1.hardhat;
    } });
    var harmonyOne_js_1 = require_harmonyOne();
    Object.defineProperty(exports2, "harmonyOne", { enumerable: true, get: function() {
      return harmonyOne_js_1.harmonyOne;
    } });
    var hashkeyChainTestnet_js_1 = require_hashkeyChainTestnet();
    Object.defineProperty(exports2, "hashkeyTestnet", { enumerable: true, get: function() {
      return hashkeyChainTestnet_js_1.hashkeyTestnet;
    } });
    var haqqMainnet_js_1 = require_haqqMainnet();
    Object.defineProperty(exports2, "haqqMainnet", { enumerable: true, get: function() {
      return haqqMainnet_js_1.haqqMainnet;
    } });
    var haqqTestedge2_js_1 = require_haqqTestedge2();
    Object.defineProperty(exports2, "haqqTestedge2", { enumerable: true, get: function() {
      return haqqTestedge2_js_1.haqqTestedge2;
    } });
    var hedera_js_1 = require_hedera();
    Object.defineProperty(exports2, "hedera", { enumerable: true, get: function() {
      return hedera_js_1.hedera;
    } });
    var hederaTestnet_js_1 = require_hederaTestnet();
    Object.defineProperty(exports2, "hederaTestnet", { enumerable: true, get: function() {
      return hederaTestnet_js_1.hederaTestnet;
    } });
    var hederaPreviewnet_js_1 = require_hederaPreviewnet();
    Object.defineProperty(exports2, "hederaPreviewnet", { enumerable: true, get: function() {
      return hederaPreviewnet_js_1.hederaPreviewnet;
    } });
    var hela_js_1 = require_hela();
    Object.defineProperty(exports2, "hela", { enumerable: true, get: function() {
      return hela_js_1.hela;
    } });
    var hemiSepolia_js_1 = require_hemiSepolia();
    Object.defineProperty(exports2, "hemiSepolia", { enumerable: true, get: function() {
      return hemiSepolia_js_1.hemiSepolia;
    } });
    var holesky_js_1 = require_holesky();
    Object.defineProperty(exports2, "holesky", { enumerable: true, get: function() {
      return holesky_js_1.holesky;
    } });
    var hychain_js_1 = require_hychain();
    Object.defineProperty(exports2, "hychain", { enumerable: true, get: function() {
      return hychain_js_1.hychain;
    } });
    var hychainTestnet_js_1 = require_hychainTestnet();
    Object.defineProperty(exports2, "hychainTestnet", { enumerable: true, get: function() {
      return hychainTestnet_js_1.hychainTestnet;
    } });
    var immutableZkEvm_js_1 = require_immutableZkEvm();
    Object.defineProperty(exports2, "immutableZkEvm", { enumerable: true, get: function() {
      return immutableZkEvm_js_1.immutableZkEvm;
    } });
    var immutableZkEvmTestnet_js_1 = require_immutableZkEvmTestnet();
    Object.defineProperty(exports2, "immutableZkEvmTestnet", { enumerable: true, get: function() {
      return immutableZkEvmTestnet_js_1.immutableZkEvmTestnet;
    } });
    var inEVM_js_1 = require_inEVM();
    Object.defineProperty(exports2, "inEVM", { enumerable: true, get: function() {
      return inEVM_js_1.inEVM;
    } });
    var iota_js_1 = require_iota();
    Object.defineProperty(exports2, "iota", { enumerable: true, get: function() {
      return iota_js_1.iota;
    } });
    var iotaTestnet_js_1 = require_iotaTestnet();
    Object.defineProperty(exports2, "iotaTestnet", { enumerable: true, get: function() {
      return iotaTestnet_js_1.iotaTestnet;
    } });
    var kakarotSepolia_js_1 = require_kakarotSepolia();
    Object.defineProperty(exports2, "kakarotSepolia", { enumerable: true, get: function() {
      return kakarotSepolia_js_1.kakarotSepolia;
    } });
    var kakarotStarknetSepolia_js_1 = require_kakarotStarknetSepolia();
    Object.defineProperty(exports2, "kakarotStarknetSepolia", { enumerable: true, get: function() {
      return kakarotStarknetSepolia_js_1.kakarotStarknetSepolia;
    } });
    var kava_js_1 = require_kava();
    Object.defineProperty(exports2, "kava", { enumerable: true, get: function() {
      return kava_js_1.kava;
    } });
    var kavaTestnet_js_1 = require_kavaTestnet();
    Object.defineProperty(exports2, "kavaTestnet", { enumerable: true, get: function() {
      return kavaTestnet_js_1.kavaTestnet;
    } });
    var kcc_js_1 = require_kcc();
    Object.defineProperty(exports2, "kcc", { enumerable: true, get: function() {
      return kcc_js_1.kcc;
    } });
    var kinto_js_1 = require_kinto();
    Object.defineProperty(exports2, "kinto", { enumerable: true, get: function() {
      return kinto_js_1.kinto;
    } });
    var klaytn_js_1 = require_klaytn();
    Object.defineProperty(exports2, "klaytn", { enumerable: true, get: function() {
      return klaytn_js_1.klaytn;
    } });
    var klaytnBaobab_js_1 = require_klaytnBaobab();
    Object.defineProperty(exports2, "klaytnBaobab", { enumerable: true, get: function() {
      return klaytnBaobab_js_1.klaytnBaobab;
    } });
    var kaia_js_1 = require_kaia();
    Object.defineProperty(exports2, "kaia", { enumerable: true, get: function() {
      return kaia_js_1.kaia;
    } });
    var kairos_js_1 = require_kairos();
    Object.defineProperty(exports2, "kairos", { enumerable: true, get: function() {
      return kairos_js_1.kairos;
    } });
    var koi_js_1 = require_koi();
    Object.defineProperty(exports2, "koi", { enumerable: true, get: function() {
      return koi_js_1.koi;
    } });
    var kroma_js_1 = require_kroma();
    Object.defineProperty(exports2, "kroma", { enumerable: true, get: function() {
      return kroma_js_1.kroma;
    } });
    var kromaSepolia_js_1 = require_kromaSepolia();
    Object.defineProperty(exports2, "kromaSepolia", { enumerable: true, get: function() {
      return kromaSepolia_js_1.kromaSepolia;
    } });
    var l3x_js_1 = require_l3x();
    Object.defineProperty(exports2, "l3x", { enumerable: true, get: function() {
      return l3x_js_1.l3x;
    } });
    var l3xTestnet_js_1 = require_l3xTestnet();
    Object.defineProperty(exports2, "l3xTestnet", { enumerable: true, get: function() {
      return l3xTestnet_js_1.l3xTestnet;
    } });
    var lightlinkPegasus_js_1 = require_lightlinkPegasus();
    Object.defineProperty(exports2, "lightlinkPegasus", { enumerable: true, get: function() {
      return lightlinkPegasus_js_1.lightlinkPegasus;
    } });
    var lightlinkPhoenix_js_1 = require_lightlinkPhoenix();
    Object.defineProperty(exports2, "lightlinkPhoenix", { enumerable: true, get: function() {
      return lightlinkPhoenix_js_1.lightlinkPhoenix;
    } });
    var linea_js_1 = require_linea();
    Object.defineProperty(exports2, "linea", { enumerable: true, get: function() {
      return linea_js_1.linea;
    } });
    var lineaGoerli_js_1 = require_lineaGoerli();
    Object.defineProperty(exports2, "lineaGoerli", { enumerable: true, get: function() {
      return lineaGoerli_js_1.lineaGoerli;
    } });
    var lineaSepolia_js_1 = require_lineaSepolia();
    Object.defineProperty(exports2, "lineaSepolia", { enumerable: true, get: function() {
      return lineaSepolia_js_1.lineaSepolia;
    } });
    var lineaTestnet_js_1 = require_lineaTestnet();
    Object.defineProperty(exports2, "lineaTestnet", { enumerable: true, get: function() {
      return lineaTestnet_js_1.lineaTestnet;
    } });
    var lisk_js_1 = require_lisk();
    Object.defineProperty(exports2, "lisk", { enumerable: true, get: function() {
      return lisk_js_1.lisk;
    } });
    var liskSepolia_js_1 = require_liskSepolia();
    Object.defineProperty(exports2, "liskSepolia", { enumerable: true, get: function() {
      return liskSepolia_js_1.liskSepolia;
    } });
    var localhost_js_1 = require_localhost();
    Object.defineProperty(exports2, "localhost", { enumerable: true, get: function() {
      return localhost_js_1.localhost;
    } });
    var loop_js_1 = require_loop();
    Object.defineProperty(exports2, "loop", { enumerable: true, get: function() {
      return loop_js_1.loop;
    } });
    var lukso_js_1 = require_lukso();
    Object.defineProperty(exports2, "lukso", { enumerable: true, get: function() {
      return lukso_js_1.lukso;
    } });
    var luksoTestnet_js_1 = require_luksoTestnet();
    Object.defineProperty(exports2, "luksoTestnet", { enumerable: true, get: function() {
      return luksoTestnet_js_1.luksoTestnet;
    } });
    var lycan_js_1 = require_lycan();
    Object.defineProperty(exports2, "lycan", { enumerable: true, get: function() {
      return lycan_js_1.lycan;
    } });
    var lyra_js_1 = require_lyra();
    Object.defineProperty(exports2, "lyra", { enumerable: true, get: function() {
      return lyra_js_1.lyra;
    } });
    var mainnet_js_1 = require_mainnet();
    Object.defineProperty(exports2, "mainnet", { enumerable: true, get: function() {
      return mainnet_js_1.mainnet;
    } });
    var mandala_js_1 = require_mandala();
    Object.defineProperty(exports2, "mandala", { enumerable: true, get: function() {
      return mandala_js_1.mandala;
    } });
    var manta_js_1 = require_manta();
    Object.defineProperty(exports2, "manta", { enumerable: true, get: function() {
      return manta_js_1.manta;
    } });
    var mantaSepoliaTestnet_js_1 = require_mantaSepoliaTestnet();
    Object.defineProperty(exports2, "mantaSepoliaTestnet", { enumerable: true, get: function() {
      return mantaSepoliaTestnet_js_1.mantaSepoliaTestnet;
    } });
    var mantaTestnet_js_1 = require_mantaTestnet();
    Object.defineProperty(exports2, "mantaTestnet", { enumerable: true, get: function() {
      return mantaTestnet_js_1.mantaTestnet;
    } });
    var mantle_js_1 = require_mantle();
    Object.defineProperty(exports2, "mantle", { enumerable: true, get: function() {
      return mantle_js_1.mantle;
    } });
    var mantleSepoliaTestnet_js_1 = require_mantleSepoliaTestnet();
    Object.defineProperty(exports2, "mantleSepoliaTestnet", { enumerable: true, get: function() {
      return mantleSepoliaTestnet_js_1.mantleSepoliaTestnet;
    } });
    var mantleTestnet_js_1 = require_mantleTestnet();
    Object.defineProperty(exports2, "mantleTestnet", { enumerable: true, get: function() {
      return mantleTestnet_js_1.mantleTestnet;
    } });
    var mapProtocol_js_1 = require_mapProtocol();
    Object.defineProperty(exports2, "mapProtocol", { enumerable: true, get: function() {
      return mapProtocol_js_1.mapProtocol;
    } });
    var matchain_js_1 = require_matchain();
    Object.defineProperty(exports2, "matchain", { enumerable: true, get: function() {
      return matchain_js_1.matchain;
    } });
    var matchainTestnet_js_1 = require_matchainTestnet();
    Object.defineProperty(exports2, "matchainTestnet", { enumerable: true, get: function() {
      return matchainTestnet_js_1.matchainTestnet;
    } });
    var merlin_js_1 = require_merlin();
    Object.defineProperty(exports2, "merlin", { enumerable: true, get: function() {
      return merlin_js_1.merlin;
    } });
    var metachain_js_1 = require_metachain();
    Object.defineProperty(exports2, "metachain", { enumerable: true, get: function() {
      return metachain_js_1.metachain;
    } });
    var metachainIstanbul_js_1 = require_metachainIstanbul();
    Object.defineProperty(exports2, "metachainIstanbul", { enumerable: true, get: function() {
      return metachainIstanbul_js_1.metachainIstanbul;
    } });
    var metalL2_js_1 = require_metalL2();
    Object.defineProperty(exports2, "metalL2", { enumerable: true, get: function() {
      return metalL2_js_1.metalL2;
    } });
    var meter_js_1 = require_meter();
    Object.defineProperty(exports2, "meter", { enumerable: true, get: function() {
      return meter_js_1.meter;
    } });
    var meterTestnet_js_1 = require_meterTestnet();
    Object.defineProperty(exports2, "meterTestnet", { enumerable: true, get: function() {
      return meterTestnet_js_1.meterTestnet;
    } });
    var metis_js_1 = require_metis();
    Object.defineProperty(exports2, "metis", { enumerable: true, get: function() {
      return metis_js_1.metis;
    } });
    var metisGoerli_js_1 = require_metisGoerli();
    Object.defineProperty(exports2, "metisGoerli", { enumerable: true, get: function() {
      return metisGoerli_js_1.metisGoerli;
    } });
    var mev_js_1 = require_mev();
    Object.defineProperty(exports2, "mev", { enumerable: true, get: function() {
      return mev_js_1.mev;
    } });
    var mevTestnet_js_1 = require_mevTestnet();
    Object.defineProperty(exports2, "mevTestnet", { enumerable: true, get: function() {
      return mevTestnet_js_1.mevTestnet;
    } });
    var mint_js_1 = require_mint();
    Object.defineProperty(exports2, "mint", { enumerable: true, get: function() {
      return mint_js_1.mint;
    } });
    var mintSepoliaTestnet_js_1 = require_mintSepoliaTestnet();
    Object.defineProperty(exports2, "mintSepoliaTestnet", { enumerable: true, get: function() {
      return mintSepoliaTestnet_js_1.mintSepoliaTestnet;
    } });
    var mode_js_1 = require_mode();
    Object.defineProperty(exports2, "mode", { enumerable: true, get: function() {
      return mode_js_1.mode;
    } });
    var modeTestnet_js_1 = require_modeTestnet();
    Object.defineProperty(exports2, "modeTestnet", { enumerable: true, get: function() {
      return modeTestnet_js_1.modeTestnet;
    } });
    var moonbaseAlpha_js_1 = require_moonbaseAlpha();
    Object.defineProperty(exports2, "moonbaseAlpha", { enumerable: true, get: function() {
      return moonbaseAlpha_js_1.moonbaseAlpha;
    } });
    var moonbeam_js_1 = require_moonbeam();
    Object.defineProperty(exports2, "moonbeam", { enumerable: true, get: function() {
      return moonbeam_js_1.moonbeam;
    } });
    var moonbeamDev_js_1 = require_moonbeamDev();
    Object.defineProperty(exports2, "moonbeamDev", { enumerable: true, get: function() {
      return moonbeamDev_js_1.moonbeamDev;
    } });
    var moonriver_js_1 = require_moonriver();
    Object.defineProperty(exports2, "moonriver", { enumerable: true, get: function() {
      return moonriver_js_1.moonriver;
    } });
    var morphHolesky_js_1 = require_morphHolesky();
    Object.defineProperty(exports2, "morphHolesky", { enumerable: true, get: function() {
      return morphHolesky_js_1.morphHolesky;
    } });
    var morphSepolia_js_1 = require_morphSepolia();
    Object.defineProperty(exports2, "morphSepolia", { enumerable: true, get: function() {
      return morphSepolia_js_1.morphSepolia;
    } });
    var nautilus_js_1 = require_nautilus();
    Object.defineProperty(exports2, "nautilus", { enumerable: true, get: function() {
      return nautilus_js_1.nautilus;
    } });
    var neonDevnet_js_1 = require_neonDevnet();
    Object.defineProperty(exports2, "neonDevnet", { enumerable: true, get: function() {
      return neonDevnet_js_1.neonDevnet;
    } });
    var neonMainnet_js_1 = require_neonMainnet();
    Object.defineProperty(exports2, "neonMainnet", { enumerable: true, get: function() {
      return neonMainnet_js_1.neonMainnet;
    } });
    var nexi_js_1 = require_nexi();
    Object.defineProperty(exports2, "nexi", { enumerable: true, get: function() {
      return nexi_js_1.nexi;
    } });
    var nexilix_js_1 = require_nexilix();
    Object.defineProperty(exports2, "nexilix", { enumerable: true, get: function() {
      return nexilix_js_1.nexilix;
    } });
    var oasys_js_1 = require_oasys();
    Object.defineProperty(exports2, "oasys", { enumerable: true, get: function() {
      return oasys_js_1.oasys;
    } });
    var oasisTestnet_js_1 = require_oasisTestnet();
    Object.defineProperty(exports2, "oasisTestnet", { enumerable: true, get: function() {
      return oasisTestnet_js_1.oasisTestnet;
    } });
    var odysseyTestnet_js_1 = require_odysseyTestnet();
    Object.defineProperty(exports2, "odysseyTestnet", { enumerable: true, get: function() {
      return odysseyTestnet_js_1.odysseyTestnet;
    } });
    var okc_js_1 = require_okc();
    Object.defineProperty(exports2, "okc", { enumerable: true, get: function() {
      return okc_js_1.okc;
    } });
    var optimism_js_1 = require_optimism();
    Object.defineProperty(exports2, "optimism", { enumerable: true, get: function() {
      return optimism_js_1.optimism;
    } });
    var optimismGoerli_js_1 = require_optimismGoerli();
    Object.defineProperty(exports2, "optimismGoerli", { enumerable: true, get: function() {
      return optimismGoerli_js_1.optimismGoerli;
    } });
    var optimismSepolia_js_1 = require_optimismSepolia();
    Object.defineProperty(exports2, "optimismSepolia", { enumerable: true, get: function() {
      return optimismSepolia_js_1.optimismSepolia;
    } });
    var optopia_js_1 = require_optopia();
    Object.defineProperty(exports2, "optopia", { enumerable: true, get: function() {
      return optopia_js_1.optopia;
    } });
    var optopiaTestnet_js_1 = require_optopiaTestnet();
    Object.defineProperty(exports2, "optopiaTestnet", { enumerable: true, get: function() {
      return optopiaTestnet_js_1.optopiaTestnet;
    } });
    var opBNB_js_1 = require_opBNB();
    Object.defineProperty(exports2, "opBNB", { enumerable: true, get: function() {
      return opBNB_js_1.opBNB;
    } });
    var opBNBTestnet_js_1 = require_opBNBTestnet();
    Object.defineProperty(exports2, "opBNBTestnet", { enumerable: true, get: function() {
      return opBNBTestnet_js_1.opBNBTestnet;
    } });
    var oortmainnetDev_js_1 = require_oortmainnetDev();
    Object.defineProperty(exports2, "oortMainnetDev", { enumerable: true, get: function() {
      return oortmainnetDev_js_1.oortMainnetDev;
    } });
    var orderly_js_1 = require_orderly();
    Object.defineProperty(exports2, "orderly", { enumerable: true, get: function() {
      return orderly_js_1.orderly;
    } });
    var orderlySepolia_js_1 = require_orderlySepolia();
    Object.defineProperty(exports2, "orderlySepolia", { enumerable: true, get: function() {
      return orderlySepolia_js_1.orderlySepolia;
    } });
    var otimDevnet_js_1 = require_otimDevnet();
    Object.defineProperty(exports2, "otimDevnet", { enumerable: true, get: function() {
      return otimDevnet_js_1.otimDevnet;
    } });
    var palm_js_1 = require_palm();
    Object.defineProperty(exports2, "palm", { enumerable: true, get: function() {
      return palm_js_1.palm;
    } });
    var palmTestnet_js_1 = require_palmTestnet();
    Object.defineProperty(exports2, "palmTestnet", { enumerable: true, get: function() {
      return palmTestnet_js_1.palmTestnet;
    } });
    var playfiAlbireo_js_1 = require_playfiAlbireo();
    Object.defineProperty(exports2, "playfiAlbireo", { enumerable: true, get: function() {
      return playfiAlbireo_js_1.playfiAlbireo;
    } });
    var pgn_js_1 = require_pgn();
    Object.defineProperty(exports2, "pgn", { enumerable: true, get: function() {
      return pgn_js_1.pgn;
    } });
    var pgnTestnet_js_1 = require_pgnTestnet();
    Object.defineProperty(exports2, "pgnTestnet", { enumerable: true, get: function() {
      return pgnTestnet_js_1.pgnTestnet;
    } });
    var phoenix_js_1 = require_phoenix();
    Object.defineProperty(exports2, "phoenix", { enumerable: true, get: function() {
      return phoenix_js_1.phoenix;
    } });
    var plinga_js_1 = require_plinga();
    Object.defineProperty(exports2, "plinga", { enumerable: true, get: function() {
      return plinga_js_1.plinga;
    } });
    var plumeTestnet_js_1 = require_plumeTestnet();
    Object.defineProperty(exports2, "plumeTestnet", { enumerable: true, get: function() {
      return plumeTestnet_js_1.plumeTestnet;
    } });
    var polygon_js_1 = require_polygon();
    Object.defineProperty(exports2, "polygon", { enumerable: true, get: function() {
      return polygon_js_1.polygon;
    } });
    var polygonAmoy_js_1 = require_polygonAmoy();
    Object.defineProperty(exports2, "polygonAmoy", { enumerable: true, get: function() {
      return polygonAmoy_js_1.polygonAmoy;
    } });
    var polygonMumbai_js_1 = require_polygonMumbai();
    Object.defineProperty(exports2, "polygonMumbai", { enumerable: true, get: function() {
      return polygonMumbai_js_1.polygonMumbai;
    } });
    var polygonZkEvm_js_1 = require_polygonZkEvm();
    Object.defineProperty(exports2, "polygonZkEvm", { enumerable: true, get: function() {
      return polygonZkEvm_js_1.polygonZkEvm;
    } });
    var polygonZkEvmCardona_js_1 = require_polygonZkEvmCardona();
    Object.defineProperty(exports2, "polygonZkEvmCardona", { enumerable: true, get: function() {
      return polygonZkEvmCardona_js_1.polygonZkEvmCardona;
    } });
    var polygonZkEvmTestnet_js_1 = require_polygonZkEvmTestnet();
    Object.defineProperty(exports2, "polygonZkEvmTestnet", { enumerable: true, get: function() {
      return polygonZkEvmTestnet_js_1.polygonZkEvmTestnet;
    } });
    var pulsechain_js_1 = require_pulsechain();
    Object.defineProperty(exports2, "pulsechain", { enumerable: true, get: function() {
      return pulsechain_js_1.pulsechain;
    } });
    var pulsechainV4_js_1 = require_pulsechainV4();
    Object.defineProperty(exports2, "pulsechainV4", { enumerable: true, get: function() {
      return pulsechainV4_js_1.pulsechainV4;
    } });
    var ql1_js_1 = require_ql1();
    Object.defineProperty(exports2, "ql1", { enumerable: true, get: function() {
      return ql1_js_1.ql1;
    } });
    var qMainnet_js_1 = require_qMainnet();
    Object.defineProperty(exports2, "qMainnet", { enumerable: true, get: function() {
      return qMainnet_js_1.qMainnet;
    } });
    var qTestnet_js_1 = require_qTestnet();
    Object.defineProperty(exports2, "qTestnet", { enumerable: true, get: function() {
      return qTestnet_js_1.qTestnet;
    } });
    var real_js_1 = require_real();
    Object.defineProperty(exports2, "real", { enumerable: true, get: function() {
      return real_js_1.real;
    } });
    var redbellyTestnet_js_1 = require_redbellyTestnet();
    Object.defineProperty(exports2, "redbellyTestnet", { enumerable: true, get: function() {
      return redbellyTestnet_js_1.redbellyTestnet;
    } });
    var redstone_js_1 = require_redstone();
    Object.defineProperty(exports2, "redstone", { enumerable: true, get: function() {
      return redstone_js_1.redstone;
    } });
    var reyaNetwork_js_1 = require_reyaNetwork();
    Object.defineProperty(exports2, "reyaNetwork", { enumerable: true, get: function() {
      return reyaNetwork_js_1.reyaNetwork;
    } });
    var rollux_js_1 = require_rollux();
    Object.defineProperty(exports2, "rollux", { enumerable: true, get: function() {
      return rollux_js_1.rollux;
    } });
    var rolluxTestnet_js_1 = require_rolluxTestnet();
    Object.defineProperty(exports2, "rolluxTestnet", { enumerable: true, get: function() {
      return rolluxTestnet_js_1.rolluxTestnet;
    } });
    var ronin_js_1 = require_ronin();
    Object.defineProperty(exports2, "ronin", { enumerable: true, get: function() {
      return ronin_js_1.ronin;
    } });
    var root_js_1 = require_root();
    Object.defineProperty(exports2, "root", { enumerable: true, get: function() {
      return root_js_1.root;
    } });
    var rootPorcini_js_1 = require_rootPorcini();
    Object.defineProperty(exports2, "rootPorcini", { enumerable: true, get: function() {
      return rootPorcini_js_1.rootPorcini;
    } });
    var rootstock_js_1 = require_rootstock();
    Object.defineProperty(exports2, "rootstock", { enumerable: true, get: function() {
      return rootstock_js_1.rootstock;
    } });
    var rootstockTestnet_js_1 = require_rootstockTestnet();
    Object.defineProperty(exports2, "rootstockTestnet", { enumerable: true, get: function() {
      return rootstockTestnet_js_1.rootstockTestnet;
    } });
    var rss3_js_1 = require_rss3();
    Object.defineProperty(exports2, "rss3", { enumerable: true, get: function() {
      return rss3_js_1.rss3;
    } });
    var rss3Sepolia_js_1 = require_rss3Sepolia();
    Object.defineProperty(exports2, "rss3Sepolia", { enumerable: true, get: function() {
      return rss3Sepolia_js_1.rss3Sepolia;
    } });
    var saigon_js_1 = require_saigon();
    Object.defineProperty(exports2, "saigon", { enumerable: true, get: function() {
      return saigon_js_1.saigon;
    } });
    var sapphire_js_1 = require_sapphire();
    Object.defineProperty(exports2, "sapphire", { enumerable: true, get: function() {
      return sapphire_js_1.sapphire;
    } });
    var sapphireTestnet_js_1 = require_sapphireTestnet();
    Object.defineProperty(exports2, "sapphireTestnet", { enumerable: true, get: function() {
      return sapphireTestnet_js_1.sapphireTestnet;
    } });
    var satoshivm_js_1 = require_satoshivm();
    Object.defineProperty(exports2, "satoshiVM", { enumerable: true, get: function() {
      return satoshivm_js_1.satoshiVM;
    } });
    var satoshivmTestnet_js_1 = require_satoshivmTestnet();
    Object.defineProperty(exports2, "satoshiVMTestnet", { enumerable: true, get: function() {
      return satoshivmTestnet_js_1.satoshiVMTestnet;
    } });
    var scroll_js_1 = require_scroll();
    Object.defineProperty(exports2, "scroll", { enumerable: true, get: function() {
      return scroll_js_1.scroll;
    } });
    var scrollSepolia_js_1 = require_scrollSepolia();
    Object.defineProperty(exports2, "scrollSepolia", { enumerable: true, get: function() {
      return scrollSepolia_js_1.scrollSepolia;
    } });
    var sei_js_1 = require_sei();
    Object.defineProperty(exports2, "sei", { enumerable: true, get: function() {
      return sei_js_1.sei;
    } });
    var seiDevnet_js_1 = require_seiDevnet();
    Object.defineProperty(exports2, "seiDevnet", { enumerable: true, get: function() {
      return seiDevnet_js_1.seiDevnet;
    } });
    var seiTestnet_js_1 = require_seiTestnet();
    Object.defineProperty(exports2, "seiTestnet", { enumerable: true, get: function() {
      return seiTestnet_js_1.seiTestnet;
    } });
    var sepolia_js_1 = require_sepolia();
    Object.defineProperty(exports2, "sepolia", { enumerable: true, get: function() {
      return sepolia_js_1.sepolia;
    } });
    var shape_js_1 = require_shape();
    Object.defineProperty(exports2, "shape", { enumerable: true, get: function() {
      return shape_js_1.shape;
    } });
    var shapeSepolia_js_1 = require_shapeSepolia();
    Object.defineProperty(exports2, "shapeSepolia", { enumerable: true, get: function() {
      return shapeSepolia_js_1.shapeSepolia;
    } });
    var shimmer_js_1 = require_shimmer();
    Object.defineProperty(exports2, "shimmer", { enumerable: true, get: function() {
      return shimmer_js_1.shimmer;
    } });
    var shimmerTestnet_js_1 = require_shimmerTestnet();
    Object.defineProperty(exports2, "shimmerTestnet", { enumerable: true, get: function() {
      return shimmerTestnet_js_1.shimmerTestnet;
    } });
    var brawl_js_1 = require_brawl();
    Object.defineProperty(exports2, "skaleBlockBrawlers", { enumerable: true, get: function() {
      return brawl_js_1.skaleBlockBrawlers;
    } });
    var calypso_js_1 = require_calypso();
    Object.defineProperty(exports2, "skaleCalypso", { enumerable: true, get: function() {
      return calypso_js_1.skaleCalypso;
    } });
    var calypsoTestnet_js_1 = require_calypsoTestnet();
    Object.defineProperty(exports2, "skaleCalypsoTestnet", { enumerable: true, get: function() {
      return calypsoTestnet_js_1.skaleCalypsoTestnet;
    } });
    var cryptoBlades_js_1 = require_cryptoBlades();
    Object.defineProperty(exports2, "skaleCryptoBlades", { enumerable: true, get: function() {
      return cryptoBlades_js_1.skaleCryptoBlades;
    } });
    var cryptoColosseum_js_1 = require_cryptoColosseum();
    Object.defineProperty(exports2, "skaleCryptoColosseum", { enumerable: true, get: function() {
      return cryptoColosseum_js_1.skaleCryptoColosseum;
    } });
    var europa_js_1 = require_europa();
    Object.defineProperty(exports2, "skaleEuropa", { enumerable: true, get: function() {
      return europa_js_1.skaleEuropa;
    } });
    var europaTestnet_js_1 = require_europaTestnet();
    Object.defineProperty(exports2, "skaleEuropaTestnet", { enumerable: true, get: function() {
      return europaTestnet_js_1.skaleEuropaTestnet;
    } });
    var exorde_js_1 = require_exorde();
    Object.defineProperty(exports2, "skaleExorde", { enumerable: true, get: function() {
      return exorde_js_1.skaleExorde;
    } });
    var humanProtocol_js_1 = require_humanProtocol();
    Object.defineProperty(exports2, "skaleHumanProtocol", { enumerable: true, get: function() {
      return humanProtocol_js_1.skaleHumanProtocol;
    } });
    var nebula_js_1 = require_nebula();
    Object.defineProperty(exports2, "skaleNebula", { enumerable: true, get: function() {
      return nebula_js_1.skaleNebula;
    } });
    var nebulaTestnet_js_1 = require_nebulaTestnet();
    Object.defineProperty(exports2, "skaleNebulaTestnet", { enumerable: true, get: function() {
      return nebulaTestnet_js_1.skaleNebulaTestnet;
    } });
    var razor_js_1 = require_razor();
    Object.defineProperty(exports2, "skaleRazor", { enumerable: true, get: function() {
      return razor_js_1.skaleRazor;
    } });
    var titan_js_1 = require_titan();
    Object.defineProperty(exports2, "skaleTitan", { enumerable: true, get: function() {
      return titan_js_1.skaleTitan;
    } });
    var titanTestnet_js_1 = require_titanTestnet();
    Object.defineProperty(exports2, "skaleTitanTestnet", { enumerable: true, get: function() {
      return titanTestnet_js_1.skaleTitanTestnet;
    } });
    var sketchpad_js_1 = require_sketchpad();
    Object.defineProperty(exports2, "sketchpad", { enumerable: true, get: function() {
      return sketchpad_js_1.sketchpad;
    } });
    var snax_js_1 = require_snax();
    Object.defineProperty(exports2, "snax", { enumerable: true, get: function() {
      return snax_js_1.snax;
    } });
    var snaxTestnet_js_1 = require_snaxTestnet();
    Object.defineProperty(exports2, "snaxTestnet", { enumerable: true, get: function() {
      return snaxTestnet_js_1.snaxTestnet;
    } });
    var soneiumMinato_js_1 = require_soneiumMinato();
    Object.defineProperty(exports2, "soneiumMinato", { enumerable: true, get: function() {
      return soneiumMinato_js_1.soneiumMinato;
    } });
    var songbird_js_1 = require_songbird();
    Object.defineProperty(exports2, "songbird", { enumerable: true, get: function() {
      return songbird_js_1.songbird;
    } });
    var songbirdTestnet_js_1 = require_songbirdTestnet();
    Object.defineProperty(exports2, "songbirdTestnet", { enumerable: true, get: function() {
      return songbirdTestnet_js_1.songbirdTestnet;
    } });
    var sophonTestnet_js_1 = require_sophonTestnet();
    Object.defineProperty(exports2, "sophonTestnet", { enumerable: true, get: function() {
      return sophonTestnet_js_1.sophonTestnet;
    } });
    var spicy_js_1 = require_spicy();
    Object.defineProperty(exports2, "spicy", { enumerable: true, get: function() {
      return spicy_js_1.spicy;
    } });
    var shardeumSphinx_js_1 = require_shardeumSphinx();
    Object.defineProperty(exports2, "shardeumSphinx", { enumerable: true, get: function() {
      return shardeumSphinx_js_1.shardeumSphinx;
    } });
    var shibarium_js_1 = require_shibarium();
    Object.defineProperty(exports2, "shibarium", { enumerable: true, get: function() {
      return shibarium_js_1.shibarium;
    } });
    var shibariumTestnet_js_1 = require_shibariumTestnet();
    Object.defineProperty(exports2, "shibariumTestnet", { enumerable: true, get: function() {
      return shibariumTestnet_js_1.shibariumTestnet;
    } });
    var shiden_js_1 = require_shiden();
    Object.defineProperty(exports2, "shiden", { enumerable: true, get: function() {
      return shiden_js_1.shiden;
    } });
    var storyTestnet_js_1 = require_storyTestnet();
    Object.defineProperty(exports2, "storyTestnet", { enumerable: true, get: function() {
      return storyTestnet_js_1.storyTestnet;
    } });
    var silicon_js_1 = require_silicon();
    Object.defineProperty(exports2, "silicon", { enumerable: true, get: function() {
      return silicon_js_1.silicon;
    } });
    var siliconSepolia_js_1 = require_siliconSepolia();
    Object.defineProperty(exports2, "siliconSepolia", { enumerable: true, get: function() {
      return siliconSepolia_js_1.siliconSepolia;
    } });
    var stratis_js_1 = require_stratis();
    Object.defineProperty(exports2, "stratis", { enumerable: true, get: function() {
      return stratis_js_1.stratis;
    } });
    var superlumio_js_1 = require_superlumio();
    Object.defineProperty(exports2, "superlumio", { enumerable: true, get: function() {
      return superlumio_js_1.superlumio;
    } });
    var superposition_js_1 = require_superposition();
    Object.defineProperty(exports2, "superposition", { enumerable: true, get: function() {
      return superposition_js_1.superposition;
    } });
    var swan_js_1 = require_swan();
    Object.defineProperty(exports2, "swan", { enumerable: true, get: function() {
      return swan_js_1.swan;
    } });
    var swanProximaTestnet_js_1 = require_swanProximaTestnet();
    Object.defineProperty(exports2, "swanProximaTestnet", { enumerable: true, get: function() {
      return swanProximaTestnet_js_1.swanProximaTestnet;
    } });
    var swanSaturnTestnet_js_1 = require_swanSaturnTestnet();
    Object.defineProperty(exports2, "swanSaturnTestnet", { enumerable: true, get: function() {
      return swanSaturnTestnet_js_1.swanSaturnTestnet;
    } });
    var syscoin_js_1 = require_syscoin();
    Object.defineProperty(exports2, "syscoin", { enumerable: true, get: function() {
      return syscoin_js_1.syscoin;
    } });
    var syscoinTestnet_js_1 = require_syscoinTestnet();
    Object.defineProperty(exports2, "syscoinTestnet", { enumerable: true, get: function() {
      return syscoinTestnet_js_1.syscoinTestnet;
    } });
    var taraxa_js_1 = require_taraxa();
    Object.defineProperty(exports2, "taraxa", { enumerable: true, get: function() {
      return taraxa_js_1.taraxa;
    } });
    var taiko_js_1 = require_taiko();
    Object.defineProperty(exports2, "taiko", { enumerable: true, get: function() {
      return taiko_js_1.taiko;
    } });
    var taikoHekla_js_1 = require_taikoHekla();
    Object.defineProperty(exports2, "taikoHekla", { enumerable: true, get: function() {
      return taikoHekla_js_1.taikoHekla;
    } });
    var taikoJolnir_js_1 = require_taikoJolnir();
    Object.defineProperty(exports2, "taikoJolnir", { enumerable: true, get: function() {
      return taikoJolnir_js_1.taikoJolnir;
    } });
    var taikoKatla_js_1 = require_taikoKatla();
    Object.defineProperty(exports2, "taikoKatla", { enumerable: true, get: function() {
      return taikoKatla_js_1.taikoKatla;
    } });
    var taikoTestnetSepolia_js_1 = require_taikoTestnetSepolia();
    Object.defineProperty(exports2, "taikoTestnetSepolia", { enumerable: true, get: function() {
      return taikoTestnetSepolia_js_1.taikoTestnetSepolia;
    } });
    var taraxaTestnet_js_1 = require_taraxaTestnet();
    Object.defineProperty(exports2, "taraxaTestnet", { enumerable: true, get: function() {
      return taraxaTestnet_js_1.taraxaTestnet;
    } });
    var telcoinTestnet_js_1 = require_telcoinTestnet();
    Object.defineProperty(exports2, "telcoinTestnet", { enumerable: true, get: function() {
      return telcoinTestnet_js_1.telcoinTestnet;
    } });
    var telos_js_1 = require_telos();
    Object.defineProperty(exports2, "telos", { enumerable: true, get: function() {
      return telos_js_1.telos;
    } });
    var telosTestnet_js_1 = require_telosTestnet();
    Object.defineProperty(exports2, "telosTestnet", { enumerable: true, get: function() {
      return telosTestnet_js_1.telosTestnet;
    } });
    var tenet_js_1 = require_tenet();
    Object.defineProperty(exports2, "tenet", { enumerable: true, get: function() {
      return tenet_js_1.tenet;
    } });
    var thaiChain_js_1 = require_thaiChain();
    Object.defineProperty(exports2, "thaiChain", { enumerable: true, get: function() {
      return thaiChain_js_1.thaiChain;
    } });
    var thunderTestnet_js_1 = require_thunderTestnet();
    Object.defineProperty(exports2, "thunderTestnet", { enumerable: true, get: function() {
      return thunderTestnet_js_1.thunderTestnet;
    } });
    var tron_js_1 = require_tron();
    Object.defineProperty(exports2, "tron", { enumerable: true, get: function() {
      return tron_js_1.tron;
    } });
    var ultron_js_1 = require_ultron();
    Object.defineProperty(exports2, "ultron", { enumerable: true, get: function() {
      return ultron_js_1.ultron;
    } });
    var ultronTestnet_js_1 = require_ultronTestnet();
    Object.defineProperty(exports2, "ultronTestnet", { enumerable: true, get: function() {
      return ultronTestnet_js_1.ultronTestnet;
    } });
    var unichainSepolia_js_1 = require_unichainSepolia();
    Object.defineProperty(exports2, "unichainSepolia", { enumerable: true, get: function() {
      return unichainSepolia_js_1.unichainSepolia;
    } });
    var unique_js_1 = require_unique();
    Object.defineProperty(exports2, "unique", { enumerable: true, get: function() {
      return unique_js_1.unique;
    } });
    var uniqueQuartz_js_1 = require_uniqueQuartz();
    Object.defineProperty(exports2, "uniqueQuartz", { enumerable: true, get: function() {
      return uniqueQuartz_js_1.uniqueQuartz;
    } });
    var uniqueOpal_js_1 = require_uniqueOpal();
    Object.defineProperty(exports2, "uniqueOpal", { enumerable: true, get: function() {
      return uniqueOpal_js_1.uniqueOpal;
    } });
    var unreal_js_1 = require_unreal();
    Object.defineProperty(exports2, "unreal", { enumerable: true, get: function() {
      return unreal_js_1.unreal;
    } });
    var vechain_js_1 = require_vechain();
    Object.defineProperty(exports2, "vechain", { enumerable: true, get: function() {
      return vechain_js_1.vechain;
    } });
    var viction_js_1 = require_viction();
    Object.defineProperty(exports2, "viction", { enumerable: true, get: function() {
      return viction_js_1.viction;
    } });
    var victionTestnet_js_1 = require_victionTestnet();
    Object.defineProperty(exports2, "victionTestnet", { enumerable: true, get: function() {
      return victionTestnet_js_1.victionTestnet;
    } });
    var vision_js_1 = require_vision();
    Object.defineProperty(exports2, "vision", { enumerable: true, get: function() {
      return vision_js_1.vision;
    } });
    var visionTestnet_js_1 = require_visionTestnet();
    Object.defineProperty(exports2, "visionTestnet", { enumerable: true, get: function() {
      return visionTestnet_js_1.visionTestnet;
    } });
    var wanchain_js_1 = require_wanchain();
    Object.defineProperty(exports2, "wanchain", { enumerable: true, get: function() {
      return wanchain_js_1.wanchain;
    } });
    var wanchainTestnet_js_1 = require_wanchainTestnet();
    Object.defineProperty(exports2, "wanchainTestnet", { enumerable: true, get: function() {
      return wanchainTestnet_js_1.wanchainTestnet;
    } });
    var weavevmAlphanet_js_1 = require_weavevmAlphanet();
    Object.defineProperty(exports2, "weaveVMAlphanet", { enumerable: true, get: function() {
      return weavevmAlphanet_js_1.weaveVMAlphanet;
    } });
    var wemix_js_1 = require_wemix();
    Object.defineProperty(exports2, "wemix", { enumerable: true, get: function() {
      return wemix_js_1.wemix;
    } });
    var wemixTestnet_js_1 = require_wemixTestnet();
    Object.defineProperty(exports2, "wemixTestnet", { enumerable: true, get: function() {
      return wemixTestnet_js_1.wemixTestnet;
    } });
    var worldchain_js_1 = require_worldchain();
    Object.defineProperty(exports2, "worldchain", { enumerable: true, get: function() {
      return worldchain_js_1.worldchain;
    } });
    var worldchainSepolia_js_1 = require_worldchainSepolia();
    Object.defineProperty(exports2, "worldchainSepolia", { enumerable: true, get: function() {
      return worldchainSepolia_js_1.worldchainSepolia;
    } });
    var xLayerTestnet_js_1 = require_xLayerTestnet();
    Object.defineProperty(exports2, "xLayerTestnet", { enumerable: true, get: function() {
      return xLayerTestnet_js_1.xLayerTestnet;
    } });
    Object.defineProperty(exports2, "x1Testnet", { enumerable: true, get: function() {
      return xLayerTestnet_js_1.x1Testnet;
    } });
    var xLayer_js_1 = require_xLayer();
    Object.defineProperty(exports2, "xLayer", { enumerable: true, get: function() {
      return xLayer_js_1.xLayer;
    } });
    var xai_js_1 = require_xai();
    Object.defineProperty(exports2, "xai", { enumerable: true, get: function() {
      return xai_js_1.xai;
    } });
    var xaiTestnet_js_1 = require_xaiTestnet();
    Object.defineProperty(exports2, "xaiTestnet", { enumerable: true, get: function() {
      return xaiTestnet_js_1.xaiTestnet;
    } });
    var xdc_js_1 = require_xdc();
    Object.defineProperty(exports2, "xdc", { enumerable: true, get: function() {
      return xdc_js_1.xdc;
    } });
    var xdcTestnet_js_1 = require_xdcTestnet();
    Object.defineProperty(exports2, "xdcTestnet", { enumerable: true, get: function() {
      return xdcTestnet_js_1.xdcTestnet;
    } });
    var xrSepolia_js_1 = require_xrSepolia();
    Object.defineProperty(exports2, "xrSepolia", { enumerable: true, get: function() {
      return xrSepolia_js_1.xrSepolia;
    } });
    var yooldoVerse_js_1 = require_yooldoVerse();
    Object.defineProperty(exports2, "yooldoVerse", { enumerable: true, get: function() {
      return yooldoVerse_js_1.yooldoVerse;
    } });
    var yooldoVerseTestnet_js_1 = require_yooldoVerseTestnet();
    Object.defineProperty(exports2, "yooldoVerseTestnet", { enumerable: true, get: function() {
      return yooldoVerseTestnet_js_1.yooldoVerseTestnet;
    } });
    var zenchainTestnet_js_1 = require_zenchainTestnet();
    Object.defineProperty(exports2, "zenchainTestnet", { enumerable: true, get: function() {
      return zenchainTestnet_js_1.zenchainTestnet;
    } });
    var zetachain_js_1 = require_zetachain();
    Object.defineProperty(exports2, "zetachain", { enumerable: true, get: function() {
      return zetachain_js_1.zetachain;
    } });
    var zetachainAthensTestnet_js_1 = require_zetachainAthensTestnet();
    Object.defineProperty(exports2, "zetachainAthensTestnet", { enumerable: true, get: function() {
      return zetachainAthensTestnet_js_1.zetachainAthensTestnet;
    } });
    var zhejiang_js_1 = require_zhejiang();
    Object.defineProperty(exports2, "zhejiang", { enumerable: true, get: function() {
      return zhejiang_js_1.zhejiang;
    } });
    var zilliqa_js_1 = require_zilliqa();
    Object.defineProperty(exports2, "zilliqa", { enumerable: true, get: function() {
      return zilliqa_js_1.zilliqa;
    } });
    var zilliqaTestnet_js_1 = require_zilliqaTestnet();
    Object.defineProperty(exports2, "zilliqaTestnet", { enumerable: true, get: function() {
      return zilliqaTestnet_js_1.zilliqaTestnet;
    } });
    var zkFair_js_1 = require_zkFair();
    Object.defineProperty(exports2, "zkFair", { enumerable: true, get: function() {
      return zkFair_js_1.zkFair;
    } });
    var zkFairTestnet_js_1 = require_zkFairTestnet();
    Object.defineProperty(exports2, "zkFairTestnet", { enumerable: true, get: function() {
      return zkFairTestnet_js_1.zkFairTestnet;
    } });
    var zkLinkNova_js_1 = require_zkLinkNova();
    Object.defineProperty(exports2, "zkLinkNova", { enumerable: true, get: function() {
      return zkLinkNova_js_1.zkLinkNova;
    } });
    var zkLinkNovaSepoliaTestnet_js_1 = require_zkLinkNovaSepoliaTestnet();
    Object.defineProperty(exports2, "zkLinkNovaSepoliaTestnet", { enumerable: true, get: function() {
      return zkLinkNovaSepoliaTestnet_js_1.zkLinkNovaSepoliaTestnet;
    } });
    var zksync_js_1 = require_zksync();
    Object.defineProperty(exports2, "zkSync", { enumerable: true, get: function() {
      return zksync_js_1.zksync;
    } });
    Object.defineProperty(exports2, "zksync", { enumerable: true, get: function() {
      return zksync_js_1.zksync;
    } });
    var zksyncInMemoryNode_js_1 = require_zksyncInMemoryNode();
    Object.defineProperty(exports2, "zkSyncInMemoryNode", { enumerable: true, get: function() {
      return zksyncInMemoryNode_js_1.zksyncInMemoryNode;
    } });
    Object.defineProperty(exports2, "zksyncInMemoryNode", { enumerable: true, get: function() {
      return zksyncInMemoryNode_js_1.zksyncInMemoryNode;
    } });
    var zksyncLocalNode_js_1 = require_zksyncLocalNode();
    Object.defineProperty(exports2, "zkSyncLocalNode", { enumerable: true, get: function() {
      return zksyncLocalNode_js_1.zksyncLocalNode;
    } });
    Object.defineProperty(exports2, "zksyncLocalNode", { enumerable: true, get: function() {
      return zksyncLocalNode_js_1.zksyncLocalNode;
    } });
    var zksyncSepoliaTestnet_js_1 = require_zksyncSepoliaTestnet();
    Object.defineProperty(exports2, "zkSyncSepoliaTestnet", { enumerable: true, get: function() {
      return zksyncSepoliaTestnet_js_1.zksyncSepoliaTestnet;
    } });
    Object.defineProperty(exports2, "zksyncSepoliaTestnet", { enumerable: true, get: function() {
      return zksyncSepoliaTestnet_js_1.zksyncSepoliaTestnet;
    } });
    var zora_js_1 = require_zora();
    Object.defineProperty(exports2, "zora", { enumerable: true, get: function() {
      return zora_js_1.zora;
    } });
    var zoraSepolia_js_1 = require_zoraSepolia();
    Object.defineProperty(exports2, "zoraSepolia", { enumerable: true, get: function() {
      return zoraSepolia_js_1.zoraSepolia;
    } });
    var zoraTestnet_js_1 = require_zoraTestnet();
    Object.defineProperty(exports2, "zoraTestnet", { enumerable: true, get: function() {
      return zoraTestnet_js_1.zoraTestnet;
    } });
    var zircuit_js_1 = require_zircuit();
    Object.defineProperty(exports2, "zircuit", { enumerable: true, get: function() {
      return zircuit_js_1.zircuit;
    } });
    var zircuitTestnet_js_1 = require_zircuitTestnet();
    Object.defineProperty(exports2, "zircuitTestnet", { enumerable: true, get: function() {
      return zircuitTestnet_js_1.zircuitTestnet;
    } });
  }
});

// node_modules/viem/_cjs/errors/log.js
var require_log2 = __commonJS({
  "node_modules/viem/_cjs/errors/log.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FilterTypeNotSupportedError = void 0;
    var base_js_1 = require_base();
    var FilterTypeNotSupportedError = class extends base_js_1.BaseError {
      constructor(type) {
        super(`Filter type "${type}" is not supported.`, {
          name: "FilterTypeNotSupportedError"
        });
      }
    };
    exports2.FilterTypeNotSupportedError = FilterTypeNotSupportedError;
  }
});

// node_modules/viem/_cjs/utils/abi/encodeEventTopics.js
var require_encodeEventTopics = __commonJS({
  "node_modules/viem/_cjs/utils/abi/encodeEventTopics.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeEventTopics = encodeEventTopics;
    var abi_js_1 = require_abi();
    var log_js_1 = require_log2();
    var toBytes_js_1 = require_toBytes();
    var keccak256_js_1 = require_keccak256();
    var toEventSelector_js_1 = require_toEventSelector();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var formatAbiItem_js_1 = require_formatAbiItem();
    var getAbiItem_js_1 = require_getAbiItem();
    var docsPath = "/docs/contract/encodeEventTopics";
    function encodeEventTopics(parameters) {
      const { abi, eventName, args } = parameters;
      let abiItem = abi[0];
      if (eventName) {
        const item = (0, getAbiItem_js_1.getAbiItem)({ abi, name: eventName });
        if (!item)
          throw new abi_js_1.AbiEventNotFoundError(eventName, { docsPath });
        abiItem = item;
      }
      if (abiItem.type !== "event")
        throw new abi_js_1.AbiEventNotFoundError(void 0, { docsPath });
      const definition = (0, formatAbiItem_js_1.formatAbiItem)(abiItem);
      const signature = (0, toEventSelector_js_1.toEventSelector)(definition);
      let topics = [];
      if (args && "inputs" in abiItem) {
        const indexedInputs = abiItem.inputs?.filter((param) => "indexed" in param && param.indexed);
        const args_ = Array.isArray(args) ? args : Object.values(args).length > 0 ? indexedInputs?.map((x) => args[x.name]) ?? [] : [];
        if (args_.length > 0) {
          topics = indexedInputs?.map((param, i) => {
            if (Array.isArray(args_[i]))
              return args_[i].map((_, j) => encodeArg({ param, value: args_[i][j] }));
            return args_[i] ? encodeArg({ param, value: args_[i] }) : null;
          }) ?? [];
        }
      }
      return [signature, ...topics];
    }
    function encodeArg({ param, value }) {
      if (param.type === "string" || param.type === "bytes")
        return (0, keccak256_js_1.keccak256)((0, toBytes_js_1.toBytes)(value));
      if (param.type === "tuple" || param.type.match(/^(.*)\[(\d+)?\]$/))
        throw new log_js_1.FilterTypeNotSupportedError(param.type);
      return (0, encodeAbiParameters_js_1.encodeAbiParameters)([param], [value]);
    }
  }
});

// node_modules/viem/_cjs/utils/filters/createFilterRequestScope.js
var require_createFilterRequestScope = __commonJS({
  "node_modules/viem/_cjs/utils/filters/createFilterRequestScope.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createFilterRequestScope = createFilterRequestScope;
    function createFilterRequestScope(client, { method }) {
      const requestMap = {};
      if (client.transport.type === "fallback")
        client.transport.onResponse?.(({ method: method_, response: id, status, transport }) => {
          if (status === "success" && method === method_)
            requestMap[id] = transport.request;
        });
      return (id) => requestMap[id] || client.request;
    }
  }
});

// node_modules/viem/_cjs/actions/public/createContractEventFilter.js
var require_createContractEventFilter = __commonJS({
  "node_modules/viem/_cjs/actions/public/createContractEventFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createContractEventFilter = createContractEventFilter;
    var encodeEventTopics_js_1 = require_encodeEventTopics();
    var toHex_js_1 = require_toHex();
    var createFilterRequestScope_js_1 = require_createFilterRequestScope();
    async function createContractEventFilter(client, parameters) {
      const { address, abi, args, eventName, fromBlock, strict, toBlock } = parameters;
      const getRequest = (0, createFilterRequestScope_js_1.createFilterRequestScope)(client, {
        method: "eth_newFilter"
      });
      const topics = eventName ? (0, encodeEventTopics_js_1.encodeEventTopics)({
        abi,
        args,
        eventName
      }) : void 0;
      const id = await client.request({
        method: "eth_newFilter",
        params: [
          {
            address,
            fromBlock: typeof fromBlock === "bigint" ? (0, toHex_js_1.numberToHex)(fromBlock) : fromBlock,
            toBlock: typeof toBlock === "bigint" ? (0, toHex_js_1.numberToHex)(toBlock) : toBlock,
            topics
          }
        ]
      });
      return {
        abi,
        args,
        eventName,
        id,
        request: getRequest(id),
        strict: Boolean(strict),
        type: "event"
      };
    }
  }
});

// node_modules/viem/_cjs/utils/abi/prepareEncodeFunctionData.js
var require_prepareEncodeFunctionData = __commonJS({
  "node_modules/viem/_cjs/utils/abi/prepareEncodeFunctionData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareEncodeFunctionData = prepareEncodeFunctionData;
    var abi_js_1 = require_abi();
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    var formatAbiItem_js_1 = require_formatAbiItem();
    var getAbiItem_js_1 = require_getAbiItem();
    var docsPath = "/docs/contract/encodeFunctionData";
    function prepareEncodeFunctionData(parameters) {
      const { abi, args, functionName } = parameters;
      let abiItem = abi[0];
      if (functionName) {
        const item = (0, getAbiItem_js_1.getAbiItem)({
          abi,
          args,
          name: functionName
        });
        if (!item)
          throw new abi_js_1.AbiFunctionNotFoundError(functionName, { docsPath });
        abiItem = item;
      }
      if (abiItem.type !== "function")
        throw new abi_js_1.AbiFunctionNotFoundError(void 0, { docsPath });
      return {
        abi: [abiItem],
        functionName: (0, toFunctionSelector_js_1.toFunctionSelector)((0, formatAbiItem_js_1.formatAbiItem)(abiItem))
      };
    }
  }
});

// node_modules/viem/_cjs/utils/abi/encodeFunctionData.js
var require_encodeFunctionData = __commonJS({
  "node_modules/viem/_cjs/utils/abi/encodeFunctionData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeFunctionData = encodeFunctionData;
    var concat_js_1 = require_concat();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var prepareEncodeFunctionData_js_1 = require_prepareEncodeFunctionData();
    function encodeFunctionData(parameters) {
      const { args } = parameters;
      const { abi, functionName } = (() => {
        if (parameters.abi.length === 1 && parameters.functionName?.startsWith("0x"))
          return parameters;
        return (0, prepareEncodeFunctionData_js_1.prepareEncodeFunctionData)(parameters);
      })();
      const abiItem = abi[0];
      const signature = functionName;
      const data = "inputs" in abiItem && abiItem.inputs ? (0, encodeAbiParameters_js_1.encodeAbiParameters)(abiItem.inputs, args ?? []) : void 0;
      return (0, concat_js_1.concatHex)([signature, data ?? "0x"]);
    }
  }
});

// node_modules/viem/_cjs/utils/errors/getContractError.js
var require_getContractError = __commonJS({
  "node_modules/viem/_cjs/utils/errors/getContractError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getContractError = getContractError;
    var abi_js_1 = require_abi();
    var base_js_1 = require_base();
    var contract_js_1 = require_contract();
    var rpc_js_1 = require_rpc();
    var EXECUTION_REVERTED_ERROR_CODE = 3;
    function getContractError(err, { abi, address, args, docsPath, functionName, sender }) {
      const { code, data, message, shortMessage } = err instanceof contract_js_1.RawContractError ? err : err instanceof base_js_1.BaseError ? err.walk((err2) => "data" in err2) || err.walk() : {};
      const cause = (() => {
        if (err instanceof abi_js_1.AbiDecodingZeroDataError)
          return new contract_js_1.ContractFunctionZeroDataError({ functionName });
        if ([EXECUTION_REVERTED_ERROR_CODE, rpc_js_1.InternalRpcError.code].includes(code) && (data || message || shortMessage)) {
          return new contract_js_1.ContractFunctionRevertedError({
            abi,
            data: typeof data === "object" ? data.data : data,
            functionName,
            message: shortMessage ?? message
          });
        }
        return err;
      })();
      return new contract_js_1.ContractFunctionExecutionError(cause, {
        abi,
        args,
        contractAddress: address,
        docsPath,
        functionName,
        sender
      });
    }
  }
});

// node_modules/viem/_cjs/actions/public/estimateContractGas.js
var require_estimateContractGas = __commonJS({
  "node_modules/viem/_cjs/actions/public/estimateContractGas.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.estimateContractGas = estimateContractGas;
    var parseAccount_js_1 = require_parseAccount();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getContractError_js_1 = require_getContractError();
    var getAction_js_1 = require_getAction();
    var estimateGas_js_1 = require_estimateGas2();
    async function estimateContractGas(client, parameters) {
      const { abi, address, args, functionName, ...request } = parameters;
      const data = (0, encodeFunctionData_js_1.encodeFunctionData)({
        abi,
        args,
        functionName
      });
      try {
        const gas = await (0, getAction_js_1.getAction)(client, estimateGas_js_1.estimateGas, "estimateGas")({
          data,
          to: address,
          ...request
        });
        return gas;
      } catch (error) {
        const account = request.account ? (0, parseAccount_js_1.parseAccount)(request.account) : void 0;
        throw (0, getContractError_js_1.getContractError)(error, {
          abi,
          address,
          args,
          docsPath: "/docs/contract/estimateContractGas",
          functionName,
          sender: account?.address
        });
      }
    }
  }
});

// node_modules/viem/_cjs/utils/address/isAddressEqual.js
var require_isAddressEqual = __commonJS({
  "node_modules/viem/_cjs/utils/address/isAddressEqual.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isAddressEqual = isAddressEqual;
    var address_js_1 = require_address();
    var isAddress_js_1 = require_isAddress();
    function isAddressEqual(a, b) {
      if (!(0, isAddress_js_1.isAddress)(a, { strict: false }))
        throw new address_js_1.InvalidAddressError({ address: a });
      if (!(0, isAddress_js_1.isAddress)(b, { strict: false }))
        throw new address_js_1.InvalidAddressError({ address: b });
      return a.toLowerCase() === b.toLowerCase();
    }
  }
});

// node_modules/viem/_cjs/utils/abi/decodeEventLog.js
var require_decodeEventLog = __commonJS({
  "node_modules/viem/_cjs/utils/abi/decodeEventLog.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeEventLog = decodeEventLog;
    var abi_js_1 = require_abi();
    var size_js_1 = require_size();
    var toEventSelector_js_1 = require_toEventSelector();
    var cursor_js_1 = require_cursor();
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    var formatAbiItem_js_1 = require_formatAbiItem();
    var docsPath = "/docs/contract/decodeEventLog";
    function decodeEventLog(parameters) {
      const { abi, data, strict: strict_, topics } = parameters;
      const strict = strict_ ?? true;
      const [signature, ...argTopics] = topics;
      if (!signature)
        throw new abi_js_1.AbiEventSignatureEmptyTopicsError({ docsPath });
      const abiItem = (() => {
        if (abi.length === 1)
          return abi[0];
        return abi.find((x) => x.type === "event" && signature === (0, toEventSelector_js_1.toEventSelector)((0, formatAbiItem_js_1.formatAbiItem)(x)));
      })();
      if (!(abiItem && "name" in abiItem) || abiItem.type !== "event")
        throw new abi_js_1.AbiEventSignatureNotFoundError(signature, { docsPath });
      const { name, inputs } = abiItem;
      const isUnnamed = inputs?.some((x) => !("name" in x && x.name));
      let args = isUnnamed ? [] : {};
      const indexedInputs = inputs.filter((x) => "indexed" in x && x.indexed);
      for (let i = 0; i < indexedInputs.length; i++) {
        const param = indexedInputs[i];
        const topic = argTopics[i];
        if (!topic)
          throw new abi_js_1.DecodeLogTopicsMismatch({
            abiItem,
            param
          });
        args[isUnnamed ? i : param.name || i] = decodeTopic({ param, value: topic });
      }
      const nonIndexedInputs = inputs.filter((x) => !("indexed" in x && x.indexed));
      if (nonIndexedInputs.length > 0) {
        if (data && data !== "0x") {
          try {
            const decodedData = (0, decodeAbiParameters_js_1.decodeAbiParameters)(nonIndexedInputs, data);
            if (decodedData) {
              if (isUnnamed)
                args = [...args, ...decodedData];
              else {
                for (let i = 0; i < nonIndexedInputs.length; i++) {
                  args[nonIndexedInputs[i].name] = decodedData[i];
                }
              }
            }
          } catch (err) {
            if (strict) {
              if (err instanceof abi_js_1.AbiDecodingDataSizeTooSmallError || err instanceof cursor_js_1.PositionOutOfBoundsError)
                throw new abi_js_1.DecodeLogDataMismatch({
                  abiItem,
                  data,
                  params: nonIndexedInputs,
                  size: (0, size_js_1.size)(data)
                });
              throw err;
            }
          }
        } else if (strict) {
          throw new abi_js_1.DecodeLogDataMismatch({
            abiItem,
            data: "0x",
            params: nonIndexedInputs,
            size: 0
          });
        }
      }
      return {
        eventName: name,
        args: Object.values(args).length > 0 ? args : void 0
      };
    }
    function decodeTopic({ param, value }) {
      if (param.type === "string" || param.type === "bytes" || param.type === "tuple" || param.type.match(/^(.*)\[(\d+)?\]$/))
        return value;
      const decodedArg = (0, decodeAbiParameters_js_1.decodeAbiParameters)([param], value) || [];
      return decodedArg[0];
    }
  }
});

// node_modules/viem/_cjs/utils/abi/parseEventLogs.js
var require_parseEventLogs = __commonJS({
  "node_modules/viem/_cjs/utils/abi/parseEventLogs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseEventLogs = parseEventLogs;
    var abi_js_1 = require_abi();
    var isAddressEqual_js_1 = require_isAddressEqual();
    var toBytes_js_1 = require_toBytes();
    var keccak256_js_1 = require_keccak256();
    var toEventSelector_js_1 = require_toEventSelector();
    var decodeEventLog_js_1 = require_decodeEventLog();
    function parseEventLogs(parameters) {
      const { abi, args, logs, strict = true } = parameters;
      const eventName = (() => {
        if (!parameters.eventName)
          return void 0;
        if (Array.isArray(parameters.eventName))
          return parameters.eventName;
        return [parameters.eventName];
      })();
      return logs.map((log) => {
        try {
          const abiItem = abi.find((abiItem2) => abiItem2.type === "event" && log.topics[0] === (0, toEventSelector_js_1.toEventSelector)(abiItem2));
          if (!abiItem)
            return null;
          const event = (0, decodeEventLog_js_1.decodeEventLog)({
            ...log,
            abi: [abiItem],
            strict
          });
          if (eventName && !eventName.includes(event.eventName))
            return null;
          if (!includesArgs({
            args: event.args,
            inputs: abiItem.inputs,
            matchArgs: args
          }))
            return null;
          return { ...event, ...log };
        } catch (err) {
          let eventName2;
          let isUnnamed;
          if (err instanceof abi_js_1.AbiEventSignatureNotFoundError)
            return null;
          if (err instanceof abi_js_1.DecodeLogDataMismatch || err instanceof abi_js_1.DecodeLogTopicsMismatch) {
            if (strict)
              return null;
            eventName2 = err.abiItem.name;
            isUnnamed = err.abiItem.inputs?.some((x) => !("name" in x && x.name));
          }
          return { ...log, args: isUnnamed ? [] : {}, eventName: eventName2 };
        }
      }).filter(Boolean);
    }
    function includesArgs(parameters) {
      const { args, inputs, matchArgs } = parameters;
      if (!matchArgs)
        return true;
      if (!args)
        return false;
      function isEqual(input, value, arg) {
        try {
          if (input.type === "address")
            return (0, isAddressEqual_js_1.isAddressEqual)(value, arg);
          if (input.type === "string" || input.type === "bytes")
            return (0, keccak256_js_1.keccak256)((0, toBytes_js_1.toBytes)(value)) === arg;
          return value === arg;
        } catch {
          return false;
        }
      }
      if (Array.isArray(args) && Array.isArray(matchArgs)) {
        return matchArgs.every((value, index) => {
          if (value === null || value === void 0)
            return true;
          const input = inputs[index];
          if (!input)
            return false;
          const value_ = Array.isArray(value) ? value : [value];
          return value_.some((value2) => isEqual(input, value2, args[index]));
        });
      }
      if (typeof args === "object" && !Array.isArray(args) && typeof matchArgs === "object" && !Array.isArray(matchArgs))
        return Object.entries(matchArgs).every(([key, value]) => {
          if (value === null || value === void 0)
            return true;
          const input = inputs.find((input2) => input2.name === key);
          if (!input)
            return false;
          const value_ = Array.isArray(value) ? value : [value];
          return value_.some((value2) => isEqual(input, value2, args[key]));
        });
      return false;
    }
  }
});

// node_modules/viem/_cjs/actions/public/getLogs.js
var require_getLogs = __commonJS({
  "node_modules/viem/_cjs/actions/public/getLogs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLogs = getLogs;
    var encodeEventTopics_js_1 = require_encodeEventTopics();
    var parseEventLogs_js_1 = require_parseEventLogs();
    var toHex_js_1 = require_toHex();
    var log_js_1 = require_log();
    async function getLogs(client, { address, blockHash, fromBlock, toBlock, event, events: events_, args, strict: strict_ } = {}) {
      const strict = strict_ ?? false;
      const events = events_ ?? (event ? [event] : void 0);
      let topics = [];
      if (events) {
        const encoded = events.flatMap((event2) => (0, encodeEventTopics_js_1.encodeEventTopics)({
          abi: [event2],
          eventName: event2.name,
          args: events_ ? void 0 : args
        }));
        topics = [encoded];
        if (event)
          topics = topics[0];
      }
      let logs;
      if (blockHash) {
        logs = await client.request({
          method: "eth_getLogs",
          params: [{ address, topics, blockHash }]
        });
      } else {
        logs = await client.request({
          method: "eth_getLogs",
          params: [
            {
              address,
              topics,
              fromBlock: typeof fromBlock === "bigint" ? (0, toHex_js_1.numberToHex)(fromBlock) : fromBlock,
              toBlock: typeof toBlock === "bigint" ? (0, toHex_js_1.numberToHex)(toBlock) : toBlock
            }
          ]
        });
      }
      const formattedLogs = logs.map((log) => (0, log_js_1.formatLog)(log));
      if (!events)
        return formattedLogs;
      return (0, parseEventLogs_js_1.parseEventLogs)({
        abi: events,
        args,
        logs: formattedLogs,
        strict
      });
    }
  }
});

// node_modules/viem/_cjs/actions/public/getContractEvents.js
var require_getContractEvents = __commonJS({
  "node_modules/viem/_cjs/actions/public/getContractEvents.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getContractEvents = getContractEvents;
    var getAbiItem_js_1 = require_getAbiItem();
    var getAction_js_1 = require_getAction();
    var getLogs_js_1 = require_getLogs();
    async function getContractEvents(client, parameters) {
      const { abi, address, args, blockHash, eventName, fromBlock, toBlock, strict } = parameters;
      const event = eventName ? (0, getAbiItem_js_1.getAbiItem)({ abi, name: eventName }) : void 0;
      const events = !event ? abi.filter((x) => x.type === "event") : void 0;
      return (0, getAction_js_1.getAction)(client, getLogs_js_1.getLogs, "getLogs")({
        address,
        args,
        blockHash,
        event,
        events,
        fromBlock,
        toBlock,
        strict
      });
    }
  }
});

// node_modules/viem/_cjs/utils/abi/decodeFunctionResult.js
var require_decodeFunctionResult = __commonJS({
  "node_modules/viem/_cjs/utils/abi/decodeFunctionResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeFunctionResult = decodeFunctionResult;
    var abi_js_1 = require_abi();
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    var getAbiItem_js_1 = require_getAbiItem();
    var docsPath = "/docs/contract/decodeFunctionResult";
    function decodeFunctionResult(parameters) {
      const { abi, args, functionName, data } = parameters;
      let abiItem = abi[0];
      if (functionName) {
        const item = (0, getAbiItem_js_1.getAbiItem)({ abi, args, name: functionName });
        if (!item)
          throw new abi_js_1.AbiFunctionNotFoundError(functionName, { docsPath });
        abiItem = item;
      }
      if (abiItem.type !== "function")
        throw new abi_js_1.AbiFunctionNotFoundError(void 0, { docsPath });
      if (!abiItem.outputs)
        throw new abi_js_1.AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath });
      const values = (0, decodeAbiParameters_js_1.decodeAbiParameters)(abiItem.outputs, data);
      if (values && values.length > 1)
        return values;
      if (values && values.length === 1)
        return values[0];
      return void 0;
    }
  }
});

// node_modules/viem/_cjs/constants/abis.js
var require_abis = __commonJS({
  "node_modules/viem/_cjs/constants/abis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.erc4626Abi = exports2.erc721Abi = exports2.erc20Abi_bytes32 = exports2.erc20Abi = exports2.universalSignatureValidatorAbi = exports2.smartAccountAbi = exports2.addressResolverAbi = exports2.textResolverAbi = exports2.universalResolverReverseAbi = exports2.universalResolverResolveAbi = exports2.multicall3Abi = void 0;
    exports2.multicall3Abi = [
      {
        inputs: [
          {
            components: [
              {
                name: "target",
                type: "address"
              },
              {
                name: "allowFailure",
                type: "bool"
              },
              {
                name: "callData",
                type: "bytes"
              }
            ],
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "aggregate3",
        outputs: [
          {
            components: [
              {
                name: "success",
                type: "bool"
              },
              {
                name: "returnData",
                type: "bytes"
              }
            ],
            name: "returnData",
            type: "tuple[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
    var universalResolverErrors = [
      {
        inputs: [],
        name: "ResolverNotFound",
        type: "error"
      },
      {
        inputs: [],
        name: "ResolverWildcardNotSupported",
        type: "error"
      },
      {
        inputs: [],
        name: "ResolverNotContract",
        type: "error"
      },
      {
        inputs: [
          {
            name: "returnData",
            type: "bytes"
          }
        ],
        name: "ResolverError",
        type: "error"
      },
      {
        inputs: [
          {
            components: [
              {
                name: "status",
                type: "uint16"
              },
              {
                name: "message",
                type: "string"
              }
            ],
            name: "errors",
            type: "tuple[]"
          }
        ],
        name: "HttpError",
        type: "error"
      }
    ];
    exports2.universalResolverResolveAbi = [
      ...universalResolverErrors,
      {
        name: "resolve",
        type: "function",
        stateMutability: "view",
        inputs: [
          { name: "name", type: "bytes" },
          { name: "data", type: "bytes" }
        ],
        outputs: [
          { name: "", type: "bytes" },
          { name: "address", type: "address" }
        ]
      },
      {
        name: "resolve",
        type: "function",
        stateMutability: "view",
        inputs: [
          { name: "name", type: "bytes" },
          { name: "data", type: "bytes" },
          { name: "gateways", type: "string[]" }
        ],
        outputs: [
          { name: "", type: "bytes" },
          { name: "address", type: "address" }
        ]
      }
    ];
    exports2.universalResolverReverseAbi = [
      ...universalResolverErrors,
      {
        name: "reverse",
        type: "function",
        stateMutability: "view",
        inputs: [{ type: "bytes", name: "reverseName" }],
        outputs: [
          { type: "string", name: "resolvedName" },
          { type: "address", name: "resolvedAddress" },
          { type: "address", name: "reverseResolver" },
          { type: "address", name: "resolver" }
        ]
      },
      {
        name: "reverse",
        type: "function",
        stateMutability: "view",
        inputs: [
          { type: "bytes", name: "reverseName" },
          { type: "string[]", name: "gateways" }
        ],
        outputs: [
          { type: "string", name: "resolvedName" },
          { type: "address", name: "resolvedAddress" },
          { type: "address", name: "reverseResolver" },
          { type: "address", name: "resolver" }
        ]
      }
    ];
    exports2.textResolverAbi = [
      {
        name: "text",
        type: "function",
        stateMutability: "view",
        inputs: [
          { name: "name", type: "bytes32" },
          { name: "key", type: "string" }
        ],
        outputs: [{ name: "", type: "string" }]
      }
    ];
    exports2.addressResolverAbi = [
      {
        name: "addr",
        type: "function",
        stateMutability: "view",
        inputs: [{ name: "name", type: "bytes32" }],
        outputs: [{ name: "", type: "address" }]
      },
      {
        name: "addr",
        type: "function",
        stateMutability: "view",
        inputs: [
          { name: "name", type: "bytes32" },
          { name: "coinType", type: "uint256" }
        ],
        outputs: [{ name: "", type: "bytes" }]
      }
    ];
    exports2.smartAccountAbi = [
      {
        name: "isValidSignature",
        type: "function",
        stateMutability: "view",
        inputs: [
          { name: "hash", type: "bytes32" },
          { name: "signature", type: "bytes" }
        ],
        outputs: [{ name: "", type: "bytes4" }]
      }
    ];
    exports2.universalSignatureValidatorAbi = [
      {
        inputs: [
          {
            name: "_signer",
            type: "address"
          },
          {
            name: "_hash",
            type: "bytes32"
          },
          {
            name: "_signature",
            type: "bytes"
          }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        inputs: [
          {
            name: "_signer",
            type: "address"
          },
          {
            name: "_hash",
            type: "bytes32"
          },
          {
            name: "_signature",
            type: "bytes"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function",
        name: "isValidSig"
      }
    ];
    exports2.erc20Abi = [
      {
        type: "event",
        name: "Approval",
        inputs: [
          {
            indexed: true,
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            name: "spender",
            type: "address"
          },
          {
            indexed: false,
            name: "value",
            type: "uint256"
          }
        ]
      },
      {
        type: "event",
        name: "Transfer",
        inputs: [
          {
            indexed: true,
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            name: "value",
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "allowance",
        stateMutability: "view",
        inputs: [
          {
            name: "owner",
            type: "address"
          },
          {
            name: "spender",
            type: "address"
          }
        ],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "approve",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "spender",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      },
      {
        type: "function",
        name: "balanceOf",
        stateMutability: "view",
        inputs: [
          {
            name: "account",
            type: "address"
          }
        ],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "decimals",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "uint8"
          }
        ]
      },
      {
        type: "function",
        name: "name",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "string"
          }
        ]
      },
      {
        type: "function",
        name: "symbol",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "string"
          }
        ]
      },
      {
        type: "function",
        name: "totalSupply",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "transfer",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "recipient",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      },
      {
        type: "function",
        name: "transferFrom",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "sender",
            type: "address"
          },
          {
            name: "recipient",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      }
    ];
    exports2.erc20Abi_bytes32 = [
      {
        type: "event",
        name: "Approval",
        inputs: [
          {
            indexed: true,
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            name: "spender",
            type: "address"
          },
          {
            indexed: false,
            name: "value",
            type: "uint256"
          }
        ]
      },
      {
        type: "event",
        name: "Transfer",
        inputs: [
          {
            indexed: true,
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            name: "value",
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "allowance",
        stateMutability: "view",
        inputs: [
          {
            name: "owner",
            type: "address"
          },
          {
            name: "spender",
            type: "address"
          }
        ],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "approve",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "spender",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      },
      {
        type: "function",
        name: "balanceOf",
        stateMutability: "view",
        inputs: [
          {
            name: "account",
            type: "address"
          }
        ],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "decimals",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "uint8"
          }
        ]
      },
      {
        type: "function",
        name: "name",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "bytes32"
          }
        ]
      },
      {
        type: "function",
        name: "symbol",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "bytes32"
          }
        ]
      },
      {
        type: "function",
        name: "totalSupply",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "transfer",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "recipient",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      },
      {
        type: "function",
        name: "transferFrom",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "sender",
            type: "address"
          },
          {
            name: "recipient",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      }
    ];
    exports2.erc721Abi = [
      {
        type: "event",
        name: "Approval",
        inputs: [
          {
            indexed: true,
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            name: "spender",
            type: "address"
          },
          {
            indexed: true,
            name: "tokenId",
            type: "uint256"
          }
        ]
      },
      {
        type: "event",
        name: "ApprovalForAll",
        inputs: [
          {
            indexed: true,
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            name: "operator",
            type: "address"
          },
          {
            indexed: false,
            name: "approved",
            type: "bool"
          }
        ]
      },
      {
        type: "event",
        name: "Transfer",
        inputs: [
          {
            indexed: true,
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            name: "to",
            type: "address"
          },
          {
            indexed: true,
            name: "tokenId",
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "approve",
        stateMutability: "payable",
        inputs: [
          {
            name: "spender",
            type: "address"
          },
          {
            name: "tokenId",
            type: "uint256"
          }
        ],
        outputs: []
      },
      {
        type: "function",
        name: "balanceOf",
        stateMutability: "view",
        inputs: [
          {
            name: "account",
            type: "address"
          }
        ],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "getApproved",
        stateMutability: "view",
        inputs: [
          {
            name: "tokenId",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "address"
          }
        ]
      },
      {
        type: "function",
        name: "isApprovedForAll",
        stateMutability: "view",
        inputs: [
          {
            name: "owner",
            type: "address"
          },
          {
            name: "operator",
            type: "address"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      },
      {
        type: "function",
        name: "name",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "string"
          }
        ]
      },
      {
        type: "function",
        name: "ownerOf",
        stateMutability: "view",
        inputs: [
          {
            name: "tokenId",
            type: "uint256"
          }
        ],
        outputs: [
          {
            name: "owner",
            type: "address"
          }
        ]
      },
      {
        type: "function",
        name: "safeTransferFrom",
        stateMutability: "payable",
        inputs: [
          {
            name: "from",
            type: "address"
          },
          {
            name: "to",
            type: "address"
          },
          {
            name: "tokenId",
            type: "uint256"
          }
        ],
        outputs: []
      },
      {
        type: "function",
        name: "safeTransferFrom",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "from",
            type: "address"
          },
          {
            name: "to",
            type: "address"
          },
          {
            name: "id",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          }
        ],
        outputs: []
      },
      {
        type: "function",
        name: "setApprovalForAll",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "operator",
            type: "address"
          },
          {
            name: "approved",
            type: "bool"
          }
        ],
        outputs: []
      },
      {
        type: "function",
        name: "symbol",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "string"
          }
        ]
      },
      {
        type: "function",
        name: "tokenByIndex",
        stateMutability: "view",
        inputs: [
          {
            name: "index",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "tokenByIndex",
        stateMutability: "view",
        inputs: [
          {
            name: "owner",
            type: "address"
          },
          {
            name: "index",
            type: "uint256"
          }
        ],
        outputs: [
          {
            name: "tokenId",
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "tokenURI",
        stateMutability: "view",
        inputs: [
          {
            name: "tokenId",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "string"
          }
        ]
      },
      {
        type: "function",
        name: "totalSupply",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "transferFrom",
        stateMutability: "payable",
        inputs: [
          {
            name: "sender",
            type: "address"
          },
          {
            name: "recipient",
            type: "address"
          },
          {
            name: "tokeId",
            type: "uint256"
          }
        ],
        outputs: []
      }
    ];
    exports2.erc4626Abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            name: "spender",
            type: "address"
          },
          {
            indexed: false,
            name: "value",
            type: "uint256"
          }
        ],
        name: "Approval",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            name: "sender",
            type: "address"
          },
          {
            indexed: true,
            name: "receiver",
            type: "address"
          },
          {
            indexed: false,
            name: "assets",
            type: "uint256"
          },
          {
            indexed: false,
            name: "shares",
            type: "uint256"
          }
        ],
        name: "Deposit",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            name: "value",
            type: "uint256"
          }
        ],
        name: "Transfer",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            name: "sender",
            type: "address"
          },
          {
            indexed: true,
            name: "receiver",
            type: "address"
          },
          {
            indexed: true,
            name: "owner",
            type: "address"
          },
          {
            indexed: false,
            name: "assets",
            type: "uint256"
          },
          {
            indexed: false,
            name: "shares",
            type: "uint256"
          }
        ],
        name: "Withdraw",
        type: "event"
      },
      {
        inputs: [
          {
            name: "owner",
            type: "address"
          },
          {
            name: "spender",
            type: "address"
          }
        ],
        name: "allowance",
        outputs: [
          {
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "spender",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        name: "approve",
        outputs: [
          {
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "asset",
        outputs: [
          {
            name: "assetTokenAddress",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "account",
            type: "address"
          }
        ],
        name: "balanceOf",
        outputs: [
          {
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        name: "convertToAssets",
        outputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        name: "convertToShares",
        outputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "assets",
            type: "uint256"
          },
          {
            name: "receiver",
            type: "address"
          }
        ],
        name: "deposit",
        outputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            name: "caller",
            type: "address"
          }
        ],
        name: "maxDeposit",
        outputs: [
          {
            name: "maxAssets",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "caller",
            type: "address"
          }
        ],
        name: "maxMint",
        outputs: [
          {
            name: "maxShares",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "owner",
            type: "address"
          }
        ],
        name: "maxRedeem",
        outputs: [
          {
            name: "maxShares",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "owner",
            type: "address"
          }
        ],
        name: "maxWithdraw",
        outputs: [
          {
            name: "maxAssets",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "shares",
            type: "uint256"
          },
          {
            name: "receiver",
            type: "address"
          }
        ],
        name: "mint",
        outputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        name: "previewDeposit",
        outputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        name: "previewMint",
        outputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        name: "previewRedeem",
        outputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        name: "previewWithdraw",
        outputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "shares",
            type: "uint256"
          },
          {
            name: "receiver",
            type: "address"
          },
          {
            name: "owner",
            type: "address"
          }
        ],
        name: "redeem",
        outputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "totalAssets",
        outputs: [
          {
            name: "totalManagedAssets",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalSupply",
        outputs: [
          {
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transfer",
        outputs: [
          {
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            name: "from",
            type: "address"
          },
          {
            name: "to",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transferFrom",
        outputs: [
          {
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            name: "assets",
            type: "uint256"
          },
          {
            name: "receiver",
            type: "address"
          },
          {
            name: "owner",
            type: "address"
          }
        ],
        name: "withdraw",
        outputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  }
});

// node_modules/viem/_cjs/constants/contract.js
var require_contract2 = __commonJS({
  "node_modules/viem/_cjs/constants/contract.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.aggregate3Signature = void 0;
    exports2.aggregate3Signature = "0x82ad56cb";
  }
});

// node_modules/viem/_cjs/constants/contracts.js
var require_contracts2 = __commonJS({
  "node_modules/viem/_cjs/constants/contracts.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.universalSignatureValidatorByteCode = exports2.deploylessCallViaFactoryBytecode = exports2.deploylessCallViaBytecodeBytecode = void 0;
    exports2.deploylessCallViaBytecodeBytecode = "0x608060405234801561001057600080fd5b5060405161018e38038061018e83398101604081905261002f91610124565b6000808351602085016000f59050803b61004857600080fd5b6000808351602085016000855af16040513d6000823e81610067573d81fd5b3d81f35b634e487b7160e01b600052604160045260246000fd5b600082601f83011261009257600080fd5b81516001600160401b038111156100ab576100ab61006b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d9576100d961006b565b6040528181528382016020018510156100f157600080fd5b60005b82811015610110576020818601810151838301820152016100f4565b506000918101602001919091529392505050565b6000806040838503121561013757600080fd5b82516001600160401b0381111561014d57600080fd5b61015985828601610081565b602085015190935090506001600160401b0381111561017757600080fd5b61018385828601610081565b915050925092905056fe";
    exports2.deploylessCallViaFactoryBytecode = "0x608060405234801561001057600080fd5b506040516102c03803806102c083398101604081905261002f916101e6565b836001600160a01b03163b6000036100e457600080836001600160a01b03168360405161005c9190610270565b6000604051808303816000865af19150503d8060008114610099576040519150601f19603f3d011682016040523d82523d6000602084013e61009e565b606091505b50915091508115806100b857506001600160a01b0386163b155b156100e1578060405163101bb98d60e01b81526004016100d8919061028c565b60405180910390fd5b50505b6000808451602086016000885af16040513d6000823e81610103573d81fd5b3d81f35b80516001600160a01b038116811461011e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561015457818101518382015260200161013c565b50506000910152565b600082601f83011261016e57600080fd5b81516001600160401b0381111561018757610187610123565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101b5576101b5610123565b6040528181528382016020018510156101cd57600080fd5b6101de826020830160208701610139565b949350505050565b600080600080608085870312156101fc57600080fd5b61020585610107565b60208601519094506001600160401b0381111561022157600080fd5b61022d8782880161015d565b93505061023c60408601610107565b60608601519092506001600160401b0381111561025857600080fd5b6102648782880161015d565b91505092959194509250565b60008251610282818460208701610139565b9190910192915050565b60208152600082518060208401526102ab816040850160208701610139565b601f01601f1916919091016040019291505056fe";
    exports2.universalSignatureValidatorByteCode = "0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f9161051e565b600061003c848484610048565b9050806000526001601ff35b60007f64926492649264926492649264926492649264926492649264926492649264926100748361040c565b036101e7576000606080848060200190518101906100929190610577565b60405192955090935091506000906001600160a01b038516906100b69085906105dd565b6000604051808303816000865af19150503d80600081146100f3576040519150601f19603f3d011682016040523d82523d6000602084013e6100f8565b606091505b50509050876001600160a01b03163b60000361016057806101605760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90610190908b9087906004016105f9565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610633565b6001600160e01b03191614945050505050610405565b6001600160a01b0384163b1561027a57604051630b135d3f60e11b808252906001600160a01b03861690631626ba7e9061022790879087906004016105f9565b602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610633565b6001600160e01b031916149050610405565b81516041146102df5760405162461bcd60e51b815260206004820152603a602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610157565b6102e7610425565b5060208201516040808401518451859392600091859190811061030c5761030c61065d565b016020015160f81c9050601b811480159061032b57508060ff16601c14155b1561038c5760405162461bcd60e51b815260206004820152603b602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c756500000000006064820152608401610157565b60408051600081526020810180835289905260ff83169181019190915260608101849052608081018390526001600160a01b0389169060019060a0016020604051602081039080840390855afa1580156103ea573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149450505050505b9392505050565b600060208251101561041d57600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461045857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561048c578181015183820152602001610474565b50506000910152565b600082601f8301126104a657600080fd5b81516001600160401b038111156104bf576104bf61045b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156104ed576104ed61045b565b60405281815283820160200185101561050557600080fd5b610516826020830160208701610471565b949350505050565b60008060006060848603121561053357600080fd5b835161053e81610443565b6020850151604086015191945092506001600160401b0381111561056157600080fd5b61056d86828701610495565b9150509250925092565b60008060006060848603121561058c57600080fd5b835161059781610443565b60208501519093506001600160401b038111156105b357600080fd5b6105bf86828701610495565b604086015190935090506001600160401b0381111561056157600080fd5b600082516105ef818460208701610471565b9190910192915050565b828152604060208201526000825180604084015261061e816060850160208701610471565b601f01601f1916919091016060019392505050565b60006020828403121561064557600080fd5b81516001600160e01b03198116811461040557600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572";
  }
});

// node_modules/viem/_cjs/utils/abi/encodeDeployData.js
var require_encodeDeployData = __commonJS({
  "node_modules/viem/_cjs/utils/abi/encodeDeployData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeDeployData = encodeDeployData;
    var abi_js_1 = require_abi();
    var concat_js_1 = require_concat();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var docsPath = "/docs/contract/encodeDeployData";
    function encodeDeployData(parameters) {
      const { abi, args, bytecode } = parameters;
      if (!args || args.length === 0)
        return bytecode;
      const description = abi.find((x) => "type" in x && x.type === "constructor");
      if (!description)
        throw new abi_js_1.AbiConstructorNotFoundError({ docsPath });
      if (!("inputs" in description))
        throw new abi_js_1.AbiConstructorParamsNotFoundError({ docsPath });
      if (!description.inputs || description.inputs.length === 0)
        throw new abi_js_1.AbiConstructorParamsNotFoundError({ docsPath });
      const data = (0, encodeAbiParameters_js_1.encodeAbiParameters)(description.inputs, args);
      return (0, concat_js_1.concatHex)([bytecode, data]);
    }
  }
});

// node_modules/viem/_cjs/utils/promise/createBatchScheduler.js
var require_createBatchScheduler = __commonJS({
  "node_modules/viem/_cjs/utils/promise/createBatchScheduler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createBatchScheduler = createBatchScheduler;
    var schedulerCache = /* @__PURE__ */ new Map();
    function createBatchScheduler({ fn, id, shouldSplitBatch, wait = 0, sort }) {
      const exec = async () => {
        const scheduler = getScheduler();
        flush();
        const args = scheduler.map(({ args: args2 }) => args2);
        if (args.length === 0)
          return;
        fn(args).then((data) => {
          if (sort && Array.isArray(data))
            data.sort(sort);
          for (let i = 0; i < scheduler.length; i++) {
            const { pendingPromise } = scheduler[i];
            pendingPromise.resolve?.([data[i], data]);
          }
        }).catch((err) => {
          for (let i = 0; i < scheduler.length; i++) {
            const { pendingPromise } = scheduler[i];
            pendingPromise.reject?.(err);
          }
        });
      };
      const flush = () => schedulerCache.delete(id);
      const getBatchedArgs = () => getScheduler().map(({ args }) => args);
      const getScheduler = () => schedulerCache.get(id) || [];
      const setScheduler = (item) => schedulerCache.set(id, [...getScheduler(), item]);
      return {
        flush,
        async schedule(args) {
          const pendingPromise = {};
          const promise = new Promise((resolve, reject) => {
            pendingPromise.resolve = resolve;
            pendingPromise.reject = reject;
          });
          const split = shouldSplitBatch?.([...getBatchedArgs(), args]);
          if (split)
            exec();
          const hasActiveScheduler = getScheduler().length > 0;
          if (hasActiveScheduler) {
            setScheduler({ args, pendingPromise });
            return promise;
          }
          setScheduler({ args, pendingPromise });
          setTimeout(exec, wait);
          return promise;
        }
      };
    }
  }
});

// node_modules/viem/_cjs/errors/ccip.js
var require_ccip = __commonJS({
  "node_modules/viem/_cjs/errors/ccip.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OffchainLookupSenderMismatchError = exports2.OffchainLookupResponseMalformedError = exports2.OffchainLookupError = void 0;
    var stringify_js_1 = require_stringify();
    var base_js_1 = require_base();
    var utils_js_1 = require_utils5();
    var OffchainLookupError = class extends base_js_1.BaseError {
      constructor({ callbackSelector, cause, data, extraData, sender, urls }) {
        super(cause.shortMessage || "An error occurred while fetching for an offchain result.", {
          cause,
          metaMessages: [
            ...cause.metaMessages || [],
            cause.metaMessages?.length ? "" : [],
            "Offchain Gateway Call:",
            urls && [
              "  Gateway URL(s):",
              ...urls.map((url) => `    ${(0, utils_js_1.getUrl)(url)}`)
            ],
            `  Sender: ${sender}`,
            `  Data: ${data}`,
            `  Callback selector: ${callbackSelector}`,
            `  Extra data: ${extraData}`
          ].flat(),
          name: "OffchainLookupError"
        });
      }
    };
    exports2.OffchainLookupError = OffchainLookupError;
    var OffchainLookupResponseMalformedError = class extends base_js_1.BaseError {
      constructor({ result, url }) {
        super("Offchain gateway response is malformed. Response data must be a hex value.", {
          metaMessages: [
            `Gateway URL: ${(0, utils_js_1.getUrl)(url)}`,
            `Response: ${(0, stringify_js_1.stringify)(result)}`
          ],
          name: "OffchainLookupResponseMalformedError"
        });
      }
    };
    exports2.OffchainLookupResponseMalformedError = OffchainLookupResponseMalformedError;
    var OffchainLookupSenderMismatchError = class extends base_js_1.BaseError {
      constructor({ sender, to }) {
        super("Reverted sender address does not match target contract address (`to`).", {
          metaMessages: [
            `Contract address: ${to}`,
            `OffchainLookup sender address: ${sender}`
          ],
          name: "OffchainLookupSenderMismatchError"
        });
      }
    };
    exports2.OffchainLookupSenderMismatchError = OffchainLookupSenderMismatchError;
  }
});

// node_modules/viem/_cjs/utils/ccip.js
var require_ccip2 = __commonJS({
  "node_modules/viem/_cjs/utils/ccip.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.offchainLookupAbiItem = exports2.offchainLookupSignature = void 0;
    exports2.offchainLookup = offchainLookup;
    exports2.ccipRequest = ccipRequest;
    var call_js_1 = require_call();
    var ccip_js_1 = require_ccip();
    var request_js_1 = require_request();
    var decodeErrorResult_js_1 = require_decodeErrorResult();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var isAddressEqual_js_1 = require_isAddressEqual();
    var concat_js_1 = require_concat();
    var isHex_js_1 = require_isHex();
    var stringify_js_1 = require_stringify();
    exports2.offchainLookupSignature = "0x556f1830";
    exports2.offchainLookupAbiItem = {
      name: "OffchainLookup",
      type: "error",
      inputs: [
        {
          name: "sender",
          type: "address"
        },
        {
          name: "urls",
          type: "string[]"
        },
        {
          name: "callData",
          type: "bytes"
        },
        {
          name: "callbackFunction",
          type: "bytes4"
        },
        {
          name: "extraData",
          type: "bytes"
        }
      ]
    };
    async function offchainLookup(client, { blockNumber, blockTag, data, to }) {
      const { args } = (0, decodeErrorResult_js_1.decodeErrorResult)({
        data,
        abi: [exports2.offchainLookupAbiItem]
      });
      const [sender, urls, callData, callbackSelector, extraData] = args;
      const { ccipRead } = client;
      const ccipRequest_ = ccipRead && typeof ccipRead?.request === "function" ? ccipRead.request : ccipRequest;
      try {
        if (!(0, isAddressEqual_js_1.isAddressEqual)(to, sender))
          throw new ccip_js_1.OffchainLookupSenderMismatchError({ sender, to });
        const result = await ccipRequest_({ data: callData, sender, urls });
        const { data: data_ } = await (0, call_js_1.call)(client, {
          blockNumber,
          blockTag,
          data: (0, concat_js_1.concat)([
            callbackSelector,
            (0, encodeAbiParameters_js_1.encodeAbiParameters)([{ type: "bytes" }, { type: "bytes" }], [result, extraData])
          ]),
          to
        });
        return data_;
      } catch (err) {
        throw new ccip_js_1.OffchainLookupError({
          callbackSelector,
          cause: err,
          data,
          extraData,
          sender,
          urls
        });
      }
    }
    async function ccipRequest({ data, sender, urls }) {
      let error = new Error("An unknown error occurred.");
      for (let i = 0; i < urls.length; i++) {
        const url = urls[i];
        const method = url.includes("{data}") ? "GET" : "POST";
        const body = method === "POST" ? { data, sender } : void 0;
        try {
          const response = await fetch(url.replace("{sender}", sender).replace("{data}", data), {
            body: JSON.stringify(body),
            method
          });
          let result;
          if (response.headers.get("Content-Type")?.startsWith("application/json")) {
            result = (await response.json()).data;
          } else {
            result = await response.text();
          }
          if (!response.ok) {
            error = new request_js_1.HttpRequestError({
              body,
              details: result?.error ? (0, stringify_js_1.stringify)(result.error) : response.statusText,
              headers: response.headers,
              status: response.status,
              url
            });
            continue;
          }
          if (!(0, isHex_js_1.isHex)(result)) {
            error = new ccip_js_1.OffchainLookupResponseMalformedError({
              result,
              url
            });
            continue;
          }
          return result;
        } catch (err) {
          error = new request_js_1.HttpRequestError({
            body,
            details: err.message,
            url
          });
        }
      }
      throw error;
    }
  }
});

// node_modules/viem/_cjs/actions/public/call.js
var require_call = __commonJS({
  "node_modules/viem/_cjs/actions/public/call.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.call = call;
    exports2.getRevertErrorData = getRevertErrorData;
    var abitype_1 = require_exports();
    var parseAccount_js_1 = require_parseAccount();
    var abis_js_1 = require_abis();
    var contract_js_1 = require_contract2();
    var contracts_js_1 = require_contracts2();
    var base_js_1 = require_base();
    var chain_js_1 = require_chain();
    var contract_js_2 = require_contract();
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    var encodeDeployData_js_1 = require_encodeDeployData();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    var toHex_js_1 = require_toHex();
    var getCallError_js_1 = require_getCallError();
    var extract_js_1 = require_extract();
    var transactionRequest_js_1 = require_transactionRequest();
    var createBatchScheduler_js_1 = require_createBatchScheduler();
    var stateOverride_js_1 = require_stateOverride2();
    var assertRequest_js_1 = require_assertRequest();
    async function call(client, args) {
      const { account: account_ = client.account, batch = Boolean(client.batch?.multicall), blockNumber, blockTag = "latest", accessList, blobs, code, data: data_, factory, factoryData, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride, ...rest } = args;
      const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : void 0;
      if (code && (factory || factoryData))
        throw new base_js_1.BaseError("Cannot provide both `code` & `factory`/`factoryData` as parameters.");
      if (code && to)
        throw new base_js_1.BaseError("Cannot provide both `code` & `to` as parameters.");
      const deploylessCallViaBytecode = code && data_;
      const deploylessCallViaFactory = factory && factoryData && to && data_;
      const deploylessCall = deploylessCallViaBytecode || deploylessCallViaFactory;
      const data = (() => {
        if (deploylessCallViaBytecode)
          return toDeploylessCallViaBytecodeData({
            code,
            data: data_
          });
        if (deploylessCallViaFactory)
          return toDeploylessCallViaFactoryData({
            data: data_,
            factory,
            factoryData,
            to
          });
        return data_;
      })();
      try {
        (0, assertRequest_js_1.assertRequest)(args);
        const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
        const block = blockNumberHex || blockTag;
        const rpcStateOverride = (0, stateOverride_js_1.serializeStateOverride)(stateOverride);
        const chainFormat = client.chain?.formatters?.transactionRequest?.format;
        const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;
        const request = format({
          ...(0, extract_js_1.extract)(rest, { format: chainFormat }),
          from: account?.address,
          accessList,
          blobs,
          data,
          gas,
          gasPrice,
          maxFeePerBlobGas,
          maxFeePerGas,
          maxPriorityFeePerGas,
          nonce,
          to: deploylessCall ? void 0 : to,
          value
        });
        if (batch && shouldPerformMulticall({ request }) && !rpcStateOverride) {
          try {
            return await scheduleMulticall(client, {
              ...request,
              blockNumber,
              blockTag
            });
          } catch (err) {
            if (!(err instanceof chain_js_1.ClientChainNotConfiguredError) && !(err instanceof chain_js_1.ChainDoesNotSupportContract))
              throw err;
          }
        }
        const response = await client.request({
          method: "eth_call",
          params: rpcStateOverride ? [
            request,
            block,
            rpcStateOverride
          ] : [request, block]
        });
        if (response === "0x")
          return { data: void 0 };
        return { data: response };
      } catch (err) {
        const data2 = getRevertErrorData(err);
        const { offchainLookup, offchainLookupSignature } = await Promise.resolve().then(() => require_ccip2());
        if (client.ccipRead !== false && data2?.slice(0, 10) === offchainLookupSignature && to)
          return { data: await offchainLookup(client, { data: data2, to }) };
        if (deploylessCall && data2?.slice(0, 10) === "0x101bb98d")
          throw new contract_js_2.CounterfactualDeploymentFailedError({ factory });
        throw (0, getCallError_js_1.getCallError)(err, {
          ...args,
          account,
          chain: client.chain
        });
      }
    }
    function shouldPerformMulticall({ request }) {
      const { data, to, ...request_ } = request;
      if (!data)
        return false;
      if (data.startsWith(contract_js_1.aggregate3Signature))
        return false;
      if (!to)
        return false;
      if (Object.values(request_).filter((x) => typeof x !== "undefined").length > 0)
        return false;
      return true;
    }
    async function scheduleMulticall(client, args) {
      const { batchSize = 1024, wait = 0 } = typeof client.batch?.multicall === "object" ? client.batch.multicall : {};
      const { blockNumber, blockTag = "latest", data, multicallAddress: multicallAddress_, to } = args;
      let multicallAddress = multicallAddress_;
      if (!multicallAddress) {
        if (!client.chain)
          throw new chain_js_1.ClientChainNotConfiguredError();
        multicallAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({
          blockNumber,
          chain: client.chain,
          contract: "multicall3"
        });
      }
      const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      const block = blockNumberHex || blockTag;
      const { schedule } = (0, createBatchScheduler_js_1.createBatchScheduler)({
        id: `${client.uid}.${block}`,
        wait,
        shouldSplitBatch(args2) {
          const size = args2.reduce((size2, { data: data2 }) => size2 + (data2.length - 2), 0);
          return size > batchSize * 2;
        },
        fn: async (requests) => {
          const calls = requests.map((request) => ({
            allowFailure: true,
            callData: request.data,
            target: request.to
          }));
          const calldata = (0, encodeFunctionData_js_1.encodeFunctionData)({
            abi: abis_js_1.multicall3Abi,
            args: [calls],
            functionName: "aggregate3"
          });
          const data2 = await client.request({
            method: "eth_call",
            params: [
              {
                data: calldata,
                to: multicallAddress
              },
              block
            ]
          });
          return (0, decodeFunctionResult_js_1.decodeFunctionResult)({
            abi: abis_js_1.multicall3Abi,
            args: [calls],
            functionName: "aggregate3",
            data: data2 || "0x"
          });
        }
      });
      const [{ returnData, success }] = await schedule({ data, to });
      if (!success)
        throw new contract_js_2.RawContractError({ data: returnData });
      if (returnData === "0x")
        return { data: void 0 };
      return { data: returnData };
    }
    function toDeploylessCallViaBytecodeData(parameters) {
      const { code, data } = parameters;
      return (0, encodeDeployData_js_1.encodeDeployData)({
        abi: (0, abitype_1.parseAbi)(["constructor(bytes, bytes)"]),
        bytecode: contracts_js_1.deploylessCallViaBytecodeBytecode,
        args: [code, data]
      });
    }
    function toDeploylessCallViaFactoryData(parameters) {
      const { data, factory, factoryData, to } = parameters;
      return (0, encodeDeployData_js_1.encodeDeployData)({
        abi: (0, abitype_1.parseAbi)(["constructor(address, bytes, address, bytes)"]),
        bytecode: contracts_js_1.deploylessCallViaFactoryBytecode,
        args: [to, data, factory, factoryData]
      });
    }
    function getRevertErrorData(err) {
      if (!(err instanceof base_js_1.BaseError))
        return void 0;
      const error = err.walk();
      return typeof error?.data === "object" ? error.data?.data : error.data;
    }
  }
});

// node_modules/viem/_cjs/actions/public/readContract.js
var require_readContract = __commonJS({
  "node_modules/viem/_cjs/actions/public/readContract.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readContract = readContract;
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getContractError_js_1 = require_getContractError();
    var getAction_js_1 = require_getAction();
    var call_js_1 = require_call();
    async function readContract(client, parameters) {
      const { abi, address, args, functionName, ...rest } = parameters;
      const calldata = (0, encodeFunctionData_js_1.encodeFunctionData)({
        abi,
        args,
        functionName
      });
      try {
        const { data } = await (0, getAction_js_1.getAction)(client, call_js_1.call, "call")({
          ...rest,
          data: calldata,
          to: address
        });
        return (0, decodeFunctionResult_js_1.decodeFunctionResult)({
          abi,
          args,
          functionName,
          data: data || "0x"
        });
      } catch (error) {
        throw (0, getContractError_js_1.getContractError)(error, {
          abi,
          address,
          args,
          docsPath: "/docs/contract/readContract",
          functionName
        });
      }
    }
  }
});

// node_modules/viem/_cjs/actions/public/simulateContract.js
var require_simulateContract = __commonJS({
  "node_modules/viem/_cjs/actions/public/simulateContract.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.simulateContract = simulateContract;
    var parseAccount_js_1 = require_parseAccount();
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getContractError_js_1 = require_getContractError();
    var getAction_js_1 = require_getAction();
    var call_js_1 = require_call();
    async function simulateContract(client, parameters) {
      const { abi, address, args, dataSuffix, functionName, ...callRequest } = parameters;
      const account = callRequest.account ? (0, parseAccount_js_1.parseAccount)(callRequest.account) : client.account;
      const calldata = (0, encodeFunctionData_js_1.encodeFunctionData)({ abi, args, functionName });
      try {
        const { data } = await (0, getAction_js_1.getAction)(client, call_js_1.call, "call")({
          batch: false,
          data: `${calldata}${dataSuffix ? dataSuffix.replace("0x", "") : ""}`,
          to: address,
          ...callRequest,
          account
        });
        const result = (0, decodeFunctionResult_js_1.decodeFunctionResult)({
          abi,
          args,
          functionName,
          data: data || "0x"
        });
        const minimizedAbi = abi.filter((abiItem) => "name" in abiItem && abiItem.name === parameters.functionName);
        return {
          result,
          request: {
            abi: minimizedAbi,
            address,
            args,
            dataSuffix,
            functionName,
            ...callRequest,
            account
          }
        };
      } catch (error) {
        throw (0, getContractError_js_1.getContractError)(error, {
          abi,
          address,
          args,
          docsPath: "/docs/contract/simulateContract",
          functionName,
          sender: account?.address
        });
      }
    }
  }
});

// node_modules/viem/_cjs/utils/observe.js
var require_observe = __commonJS({
  "node_modules/viem/_cjs/utils/observe.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cleanupCache = exports2.listenersCache = void 0;
    exports2.observe = observe;
    exports2.listenersCache = /* @__PURE__ */ new Map();
    exports2.cleanupCache = /* @__PURE__ */ new Map();
    var callbackCount = 0;
    function observe(observerId, callbacks, fn) {
      const callbackId = ++callbackCount;
      const getListeners = () => exports2.listenersCache.get(observerId) || [];
      const unsubscribe = () => {
        const listeners2 = getListeners();
        exports2.listenersCache.set(observerId, listeners2.filter((cb) => cb.id !== callbackId));
      };
      const unwatch = () => {
        const cleanup2 = exports2.cleanupCache.get(observerId);
        if (getListeners().length === 1 && cleanup2)
          cleanup2();
        unsubscribe();
      };
      const listeners = getListeners();
      exports2.listenersCache.set(observerId, [
        ...listeners,
        { id: callbackId, fns: callbacks }
      ]);
      if (listeners && listeners.length > 0)
        return unwatch;
      const emit = {};
      for (const key in callbacks) {
        emit[key] = (...args) => {
          const listeners2 = getListeners();
          if (listeners2.length === 0)
            return;
          for (const listener of listeners2)
            listener.fns[key]?.(...args);
        };
      }
      const cleanup = fn(emit);
      if (typeof cleanup === "function")
        exports2.cleanupCache.set(observerId, cleanup);
      return unwatch;
    }
  }
});

// node_modules/viem/_cjs/utils/wait.js
var require_wait = __commonJS({
  "node_modules/viem/_cjs/utils/wait.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wait = wait;
    async function wait(time) {
      return new Promise((res) => setTimeout(res, time));
    }
  }
});

// node_modules/viem/_cjs/utils/poll.js
var require_poll = __commonJS({
  "node_modules/viem/_cjs/utils/poll.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.poll = poll;
    var wait_js_1 = require_wait();
    function poll(fn, { emitOnBegin, initialWaitTime, interval }) {
      let active = true;
      const unwatch = () => active = false;
      const watch = async () => {
        let data = void 0;
        if (emitOnBegin)
          data = await fn({ unpoll: unwatch });
        const initialWait = await initialWaitTime?.(data) ?? interval;
        await (0, wait_js_1.wait)(initialWait);
        const poll2 = async () => {
          if (!active)
            return;
          await fn({ unpoll: unwatch });
          await (0, wait_js_1.wait)(interval);
          poll2();
        };
        poll2();
      };
      watch();
      return unwatch;
    }
  }
});

// node_modules/viem/_cjs/utils/promise/withCache.js
var require_withCache = __commonJS({
  "node_modules/viem/_cjs/utils/promise/withCache.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.responseCache = exports2.promiseCache = void 0;
    exports2.getCache = getCache;
    exports2.withCache = withCache;
    exports2.promiseCache = /* @__PURE__ */ new Map();
    exports2.responseCache = /* @__PURE__ */ new Map();
    function getCache(cacheKey) {
      const buildCache = (cacheKey2, cache) => ({
        clear: () => cache.delete(cacheKey2),
        get: () => cache.get(cacheKey2),
        set: (data) => cache.set(cacheKey2, data)
      });
      const promise = buildCache(cacheKey, exports2.promiseCache);
      const response = buildCache(cacheKey, exports2.responseCache);
      return {
        clear: () => {
          promise.clear();
          response.clear();
        },
        promise,
        response
      };
    }
    async function withCache(fn, { cacheKey, cacheTime = Number.POSITIVE_INFINITY }) {
      const cache = getCache(cacheKey);
      const response = cache.response.get();
      if (response && cacheTime > 0) {
        const age = (/* @__PURE__ */ new Date()).getTime() - response.created.getTime();
        if (age < cacheTime)
          return response.data;
      }
      let promise = cache.promise.get();
      if (!promise) {
        promise = fn();
        cache.promise.set(promise);
      }
      try {
        const data = await promise;
        cache.response.set({ created: /* @__PURE__ */ new Date(), data });
        return data;
      } finally {
        cache.promise.clear();
      }
    }
  }
});

// node_modules/viem/_cjs/actions/public/getBlockNumber.js
var require_getBlockNumber = __commonJS({
  "node_modules/viem/_cjs/actions/public/getBlockNumber.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBlockNumberCache = getBlockNumberCache;
    exports2.getBlockNumber = getBlockNumber;
    var withCache_js_1 = require_withCache();
    var cacheKey = (id) => `blockNumber.${id}`;
    function getBlockNumberCache(id) {
      return (0, withCache_js_1.getCache)(cacheKey(id));
    }
    async function getBlockNumber(client, { cacheTime = client.cacheTime } = {}) {
      const blockNumberHex = await (0, withCache_js_1.withCache)(() => client.request({
        method: "eth_blockNumber"
      }), { cacheKey: cacheKey(client.uid), cacheTime });
      return BigInt(blockNumberHex);
    }
  }
});

// node_modules/viem/_cjs/actions/public/getFilterChanges.js
var require_getFilterChanges = __commonJS({
  "node_modules/viem/_cjs/actions/public/getFilterChanges.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFilterChanges = getFilterChanges;
    var parseEventLogs_js_1 = require_parseEventLogs();
    var log_js_1 = require_log();
    async function getFilterChanges(_client, { filter }) {
      const strict = "strict" in filter && filter.strict;
      const logs = await filter.request({
        method: "eth_getFilterChanges",
        params: [filter.id]
      });
      if (typeof logs[0] === "string")
        return logs;
      const formattedLogs = logs.map((log) => (0, log_js_1.formatLog)(log));
      if (!("abi" in filter) || !filter.abi)
        return formattedLogs;
      return (0, parseEventLogs_js_1.parseEventLogs)({
        abi: filter.abi,
        logs: formattedLogs,
        strict
      });
    }
  }
});

// node_modules/viem/_cjs/actions/public/uninstallFilter.js
var require_uninstallFilter = __commonJS({
  "node_modules/viem/_cjs/actions/public/uninstallFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uninstallFilter = uninstallFilter;
    async function uninstallFilter(_client, { filter }) {
      return filter.request({
        method: "eth_uninstallFilter",
        params: [filter.id]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/public/watchContractEvent.js
var require_watchContractEvent = __commonJS({
  "node_modules/viem/_cjs/actions/public/watchContractEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchContractEvent = watchContractEvent;
    var abi_js_1 = require_abi();
    var rpc_js_1 = require_rpc();
    var decodeEventLog_js_1 = require_decodeEventLog();
    var encodeEventTopics_js_1 = require_encodeEventTopics();
    var log_js_1 = require_log();
    var getAction_js_1 = require_getAction();
    var observe_js_1 = require_observe();
    var poll_js_1 = require_poll();
    var stringify_js_1 = require_stringify();
    var createContractEventFilter_js_1 = require_createContractEventFilter();
    var getBlockNumber_js_1 = require_getBlockNumber();
    var getContractEvents_js_1 = require_getContractEvents();
    var getFilterChanges_js_1 = require_getFilterChanges();
    var uninstallFilter_js_1 = require_uninstallFilter();
    function watchContractEvent(client, parameters) {
      const { abi, address, args, batch = true, eventName, fromBlock, onError, onLogs, poll: poll_, pollingInterval = client.pollingInterval, strict: strict_ } = parameters;
      const enablePolling = (() => {
        if (typeof poll_ !== "undefined")
          return poll_;
        if (typeof fromBlock === "bigint")
          return true;
        if (client.transport.type === "webSocket")
          return false;
        if (client.transport.type === "fallback" && client.transport.transports[0].config.type === "webSocket")
          return false;
        return true;
      })();
      const pollContractEvent = () => {
        const strict = strict_ ?? false;
        const observerId = (0, stringify_js_1.stringify)([
          "watchContractEvent",
          address,
          args,
          batch,
          client.uid,
          eventName,
          pollingInterval,
          strict,
          fromBlock
        ]);
        return (0, observe_js_1.observe)(observerId, { onLogs, onError }, (emit) => {
          let previousBlockNumber;
          if (fromBlock !== void 0)
            previousBlockNumber = fromBlock - 1n;
          let filter;
          let initialized = false;
          const unwatch = (0, poll_js_1.poll)(async () => {
            if (!initialized) {
              try {
                filter = await (0, getAction_js_1.getAction)(client, createContractEventFilter_js_1.createContractEventFilter, "createContractEventFilter")({
                  abi,
                  address,
                  args,
                  eventName,
                  strict,
                  fromBlock
                });
              } catch {
              }
              initialized = true;
              return;
            }
            try {
              let logs;
              if (filter) {
                logs = await (0, getAction_js_1.getAction)(client, getFilterChanges_js_1.getFilterChanges, "getFilterChanges")({ filter });
              } else {
                const blockNumber = await (0, getAction_js_1.getAction)(client, getBlockNumber_js_1.getBlockNumber, "getBlockNumber")({});
                if (previousBlockNumber && previousBlockNumber < blockNumber) {
                  logs = await (0, getAction_js_1.getAction)(client, getContractEvents_js_1.getContractEvents, "getContractEvents")({
                    abi,
                    address,
                    args,
                    eventName,
                    fromBlock: previousBlockNumber + 1n,
                    toBlock: blockNumber,
                    strict
                  });
                } else {
                  logs = [];
                }
                previousBlockNumber = blockNumber;
              }
              if (logs.length === 0)
                return;
              if (batch)
                emit.onLogs(logs);
              else
                for (const log of logs)
                  emit.onLogs([log]);
            } catch (err) {
              if (filter && err instanceof rpc_js_1.InvalidInputRpcError)
                initialized = false;
              emit.onError?.(err);
            }
          }, {
            emitOnBegin: true,
            interval: pollingInterval
          });
          return async () => {
            if (filter)
              await (0, getAction_js_1.getAction)(client, uninstallFilter_js_1.uninstallFilter, "uninstallFilter")({ filter });
            unwatch();
          };
        });
      };
      const subscribeContractEvent = () => {
        const strict = strict_ ?? false;
        const observerId = (0, stringify_js_1.stringify)([
          "watchContractEvent",
          address,
          args,
          batch,
          client.uid,
          eventName,
          pollingInterval,
          strict
        ]);
        let active = true;
        let unsubscribe = () => active = false;
        return (0, observe_js_1.observe)(observerId, { onLogs, onError }, (emit) => {
          ;
          (async () => {
            try {
              const transport = (() => {
                if (client.transport.type === "fallback") {
                  const transport2 = client.transport.transports.find((transport3) => transport3.config.type === "webSocket");
                  if (!transport2)
                    return client.transport;
                  return transport2.value;
                }
                return client.transport;
              })();
              const topics = eventName ? (0, encodeEventTopics_js_1.encodeEventTopics)({
                abi,
                eventName,
                args
              }) : [];
              const { unsubscribe: unsubscribe_ } = await transport.subscribe({
                params: ["logs", { address, topics }],
                onData(data) {
                  if (!active)
                    return;
                  const log = data.result;
                  try {
                    const { eventName: eventName2, args: args2 } = (0, decodeEventLog_js_1.decodeEventLog)({
                      abi,
                      data: log.data,
                      topics: log.topics,
                      strict: strict_
                    });
                    const formatted = (0, log_js_1.formatLog)(log, {
                      args: args2,
                      eventName: eventName2
                    });
                    emit.onLogs([formatted]);
                  } catch (err) {
                    let eventName2;
                    let isUnnamed;
                    if (err instanceof abi_js_1.DecodeLogDataMismatch || err instanceof abi_js_1.DecodeLogTopicsMismatch) {
                      if (strict_)
                        return;
                      eventName2 = err.abiItem.name;
                      isUnnamed = err.abiItem.inputs?.some((x) => !("name" in x && x.name));
                    }
                    const formatted = (0, log_js_1.formatLog)(log, {
                      args: isUnnamed ? [] : {},
                      eventName: eventName2
                    });
                    emit.onLogs([formatted]);
                  }
                },
                onError(error) {
                  emit.onError?.(error);
                }
              });
              unsubscribe = unsubscribe_;
              if (!active)
                unsubscribe();
            } catch (err) {
              onError?.(err);
            }
          })();
          return () => unsubscribe();
        });
      };
      return enablePolling ? pollContractEvent() : subscribeContractEvent();
    }
  }
});

// node_modules/viem/_cjs/utils/errors/getTransactionError.js
var require_getTransactionError = __commonJS({
  "node_modules/viem/_cjs/utils/errors/getTransactionError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransactionError = getTransactionError;
    var node_js_1 = require_node();
    var transaction_js_1 = require_transaction2();
    var getNodeError_js_1 = require_getNodeError();
    function getTransactionError(err, { docsPath, ...args }) {
      const cause = (() => {
        const cause2 = (0, getNodeError_js_1.getNodeError)(err, args);
        if (cause2 instanceof node_js_1.UnknownNodeError)
          return err;
        return cause2;
      })();
      return new transaction_js_1.TransactionExecutionError(cause, {
        docsPath,
        ...args
      });
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/sendRawTransaction.js
var require_sendRawTransaction = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/sendRawTransaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sendRawTransaction = sendRawTransaction;
    async function sendRawTransaction(client, { serializedTransaction }) {
      return client.request({
        method: "eth_sendRawTransaction",
        params: [serializedTransaction]
      }, { retryCount: 0 });
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/sendTransaction.js
var require_sendTransaction = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/sendTransaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sendTransaction = sendTransaction;
    var parseAccount_js_1 = require_parseAccount();
    var account_js_1 = require_account();
    var base_js_1 = require_base();
    var recoverAuthorizationAddress_js_1 = require_recoverAuthorizationAddress();
    var assertCurrentChain_js_1 = require_assertCurrentChain();
    var getTransactionError_js_1 = require_getTransactionError();
    var extract_js_1 = require_extract();
    var transactionRequest_js_1 = require_transactionRequest();
    var getAction_js_1 = require_getAction();
    var assertRequest_js_1 = require_assertRequest();
    var getChainId_js_1 = require_getChainId();
    var prepareTransactionRequest_js_1 = require_prepareTransactionRequest();
    var sendRawTransaction_js_1 = require_sendRawTransaction();
    async function sendTransaction(client, parameters) {
      const { account: account_ = client.account, chain = client.chain, accessList, authorizationList, blobs, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, value, ...rest } = parameters;
      if (!account_)
        throw new account_js_1.AccountNotFoundError({
          docsPath: "/docs/actions/wallet/sendTransaction"
        });
      const account = (0, parseAccount_js_1.parseAccount)(account_);
      try {
        (0, assertRequest_js_1.assertRequest)(parameters);
        const to = await (async () => {
          if (parameters.to)
            return parameters.to;
          if (authorizationList && authorizationList.length > 0)
            return await (0, recoverAuthorizationAddress_js_1.recoverAuthorizationAddress)({
              authorization: authorizationList[0]
            }).catch(() => {
              throw new base_js_1.BaseError("`to` is required. Could not infer from `authorizationList`.");
            });
          return void 0;
        })();
        if (account.type === "json-rpc") {
          let chainId;
          if (chain !== null) {
            chainId = await (0, getAction_js_1.getAction)(client, getChainId_js_1.getChainId, "getChainId")({});
            (0, assertCurrentChain_js_1.assertCurrentChain)({
              currentChainId: chainId,
              chain
            });
          }
          const chainFormat = client.chain?.formatters?.transactionRequest?.format;
          const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;
          const request = format({
            ...(0, extract_js_1.extract)(rest, { format: chainFormat }),
            accessList,
            authorizationList,
            blobs,
            chainId,
            data,
            from: account.address,
            gas,
            gasPrice,
            maxFeePerBlobGas,
            maxFeePerGas,
            maxPriorityFeePerGas,
            nonce,
            to,
            value
          });
          return await client.request({
            method: "eth_sendTransaction",
            params: [request]
          }, { retryCount: 0 });
        }
        if (account.type === "local") {
          const request = await (0, getAction_js_1.getAction)(client, prepareTransactionRequest_js_1.prepareTransactionRequest, "prepareTransactionRequest")({
            account,
            accessList,
            authorizationList,
            blobs,
            chain,
            data,
            gas,
            gasPrice,
            maxFeePerBlobGas,
            maxFeePerGas,
            maxPriorityFeePerGas,
            nonce,
            nonceManager: account.nonceManager,
            parameters: [...prepareTransactionRequest_js_1.defaultParameters, "sidecars"],
            value,
            ...rest,
            to
          });
          const serializer = chain?.serializers?.transaction;
          const serializedTransaction = await account.signTransaction(request, {
            serializer
          });
          return await (0, getAction_js_1.getAction)(client, sendRawTransaction_js_1.sendRawTransaction, "sendRawTransaction")({
            serializedTransaction
          });
        }
        if (account.type === "smart")
          throw new account_js_1.AccountTypeNotSupportedError({
            metaMessages: [
              "Consider using the `sendUserOperation` Action instead."
            ],
            docsPath: "/docs/actions/bundler/sendUserOperation",
            type: "smart"
          });
        throw new account_js_1.AccountTypeNotSupportedError({
          docsPath: "/docs/actions/wallet/sendTransaction",
          type: account.type
        });
      } catch (err) {
        if (err instanceof account_js_1.AccountTypeNotSupportedError)
          throw err;
        throw (0, getTransactionError_js_1.getTransactionError)(err, {
          ...parameters,
          account,
          chain: parameters.chain || void 0
        });
      }
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/writeContract.js
var require_writeContract = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/writeContract.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeContract = writeContract;
    var parseAccount_js_1 = require_parseAccount();
    var account_js_1 = require_account();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getContractError_js_1 = require_getContractError();
    var getAction_js_1 = require_getAction();
    var sendTransaction_js_1 = require_sendTransaction();
    async function writeContract(client, parameters) {
      const { abi, account: account_ = client.account, address, args, dataSuffix, functionName, ...request } = parameters;
      if (!account_)
        throw new account_js_1.AccountNotFoundError({
          docsPath: "/docs/contract/writeContract"
        });
      const account = (0, parseAccount_js_1.parseAccount)(account_);
      const data = (0, encodeFunctionData_js_1.encodeFunctionData)({
        abi,
        args,
        functionName
      });
      try {
        return await (0, getAction_js_1.getAction)(client, sendTransaction_js_1.sendTransaction, "sendTransaction")({
          data: `${data}${dataSuffix ? dataSuffix.replace("0x", "") : ""}`,
          to: address,
          account,
          ...request
        });
      } catch (error) {
        throw (0, getContractError_js_1.getContractError)(error, {
          abi,
          address,
          args,
          docsPath: "/docs/contract/writeContract",
          functionName,
          sender: account.address
        });
      }
    }
  }
});

// node_modules/viem/_cjs/actions/getContract.js
var require_getContract = __commonJS({
  "node_modules/viem/_cjs/actions/getContract.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getContract = getContract;
    exports2.getFunctionParameters = getFunctionParameters;
    exports2.getEventParameters = getEventParameters;
    var getAction_js_1 = require_getAction();
    var createContractEventFilter_js_1 = require_createContractEventFilter();
    var estimateContractGas_js_1 = require_estimateContractGas();
    var getContractEvents_js_1 = require_getContractEvents();
    var readContract_js_1 = require_readContract();
    var simulateContract_js_1 = require_simulateContract();
    var watchContractEvent_js_1 = require_watchContractEvent();
    var writeContract_js_1 = require_writeContract();
    function getContract({ abi, address, client: client_ }) {
      const client = client_;
      const [publicClient, walletClient] = (() => {
        if (!client)
          return [void 0, void 0];
        if ("public" in client && "wallet" in client)
          return [client.public, client.wallet];
        if ("public" in client)
          return [client.public, void 0];
        if ("wallet" in client)
          return [void 0, client.wallet];
        return [client, client];
      })();
      const hasPublicClient = publicClient !== void 0 && publicClient !== null;
      const hasWalletClient = walletClient !== void 0 && walletClient !== null;
      const contract = {};
      let hasReadFunction = false;
      let hasWriteFunction = false;
      let hasEvent = false;
      for (const item of abi) {
        if (item.type === "function")
          if (item.stateMutability === "view" || item.stateMutability === "pure")
            hasReadFunction = true;
          else
            hasWriteFunction = true;
        else if (item.type === "event")
          hasEvent = true;
        if (hasReadFunction && hasWriteFunction && hasEvent)
          break;
      }
      if (hasPublicClient) {
        if (hasReadFunction)
          contract.read = new Proxy({}, {
            get(_, functionName) {
              return (...parameters) => {
                const { args, options: options2 } = getFunctionParameters(parameters);
                return (0, getAction_js_1.getAction)(publicClient, readContract_js_1.readContract, "readContract")({
                  abi,
                  address,
                  functionName,
                  args,
                  ...options2
                });
              };
            }
          });
        if (hasWriteFunction)
          contract.simulate = new Proxy({}, {
            get(_, functionName) {
              return (...parameters) => {
                const { args, options: options2 } = getFunctionParameters(parameters);
                return (0, getAction_js_1.getAction)(publicClient, simulateContract_js_1.simulateContract, "simulateContract")({
                  abi,
                  address,
                  functionName,
                  args,
                  ...options2
                });
              };
            }
          });
        if (hasEvent) {
          contract.createEventFilter = new Proxy({}, {
            get(_, eventName) {
              return (...parameters) => {
                const abiEvent = abi.find((x) => x.type === "event" && x.name === eventName);
                const { args, options: options2 } = getEventParameters(parameters, abiEvent);
                return (0, getAction_js_1.getAction)(publicClient, createContractEventFilter_js_1.createContractEventFilter, "createContractEventFilter")({
                  abi,
                  address,
                  eventName,
                  args,
                  ...options2
                });
              };
            }
          });
          contract.getEvents = new Proxy({}, {
            get(_, eventName) {
              return (...parameters) => {
                const abiEvent = abi.find((x) => x.type === "event" && x.name === eventName);
                const { args, options: options2 } = getEventParameters(parameters, abiEvent);
                return (0, getAction_js_1.getAction)(publicClient, getContractEvents_js_1.getContractEvents, "getContractEvents")({
                  abi,
                  address,
                  eventName,
                  args,
                  ...options2
                });
              };
            }
          });
          contract.watchEvent = new Proxy({}, {
            get(_, eventName) {
              return (...parameters) => {
                const abiEvent = abi.find((x) => x.type === "event" && x.name === eventName);
                const { args, options: options2 } = getEventParameters(parameters, abiEvent);
                return (0, getAction_js_1.getAction)(publicClient, watchContractEvent_js_1.watchContractEvent, "watchContractEvent")({
                  abi,
                  address,
                  eventName,
                  args,
                  ...options2
                });
              };
            }
          });
        }
      }
      if (hasWalletClient) {
        if (hasWriteFunction)
          contract.write = new Proxy({}, {
            get(_, functionName) {
              return (...parameters) => {
                const { args, options: options2 } = getFunctionParameters(parameters);
                return (0, getAction_js_1.getAction)(walletClient, writeContract_js_1.writeContract, "writeContract")({
                  abi,
                  address,
                  functionName,
                  args,
                  ...options2
                });
              };
            }
          });
      }
      if (hasPublicClient || hasWalletClient) {
        if (hasWriteFunction)
          contract.estimateGas = new Proxy({}, {
            get(_, functionName) {
              return (...parameters) => {
                const { args, options: options2 } = getFunctionParameters(parameters);
                const client2 = publicClient ?? walletClient;
                return (0, getAction_js_1.getAction)(client2, estimateContractGas_js_1.estimateContractGas, "estimateContractGas")({
                  abi,
                  address,
                  functionName,
                  args,
                  ...options2,
                  account: options2.account ?? walletClient.account
                });
              };
            }
          });
      }
      contract.address = address;
      contract.abi = abi;
      return contract;
    }
    function getFunctionParameters(values) {
      const hasArgs = values.length && Array.isArray(values[0]);
      const args = hasArgs ? values[0] : [];
      const options2 = (hasArgs ? values[1] : values[0]) ?? {};
      return { args, options: options2 };
    }
    function getEventParameters(values, abiEvent) {
      let hasArgs = false;
      if (Array.isArray(values[0]))
        hasArgs = true;
      else if (values.length === 1) {
        hasArgs = abiEvent.inputs.some((x) => x.indexed);
      } else if (values.length === 2) {
        hasArgs = true;
      }
      const args = hasArgs ? values[0] : void 0;
      const options2 = (hasArgs ? values[1] : values[0]) ?? {};
      return { args, options: options2 };
    }
  }
});

// node_modules/viem/_cjs/utils/uid.js
var require_uid = __commonJS({
  "node_modules/viem/_cjs/utils/uid.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uid = uid;
    var size = 256;
    var index = size;
    var buffer;
    function uid(length = 11) {
      if (!buffer || index + length > size * 2) {
        buffer = "";
        index = 0;
        for (let i = 0; i < size; i++) {
          buffer += (256 + Math.random() * 256 | 0).toString(16).substring(1);
        }
      }
      return buffer.substring(index, index++ + length);
    }
  }
});

// node_modules/viem/_cjs/clients/createClient.js
var require_createClient = __commonJS({
  "node_modules/viem/_cjs/clients/createClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createClient = createClient;
    exports2.rpcSchema = rpcSchema;
    var parseAccount_js_1 = require_parseAccount();
    var uid_js_1 = require_uid();
    function createClient(parameters) {
      const { batch, cacheTime = parameters.pollingInterval ?? 4e3, ccipRead, key = "base", name = "Base Client", pollingInterval = 4e3, type = "base" } = parameters;
      const chain = parameters.chain;
      const account = parameters.account ? (0, parseAccount_js_1.parseAccount)(parameters.account) : void 0;
      const { config, request, value } = parameters.transport({
        chain,
        pollingInterval
      });
      const transport = { ...config, ...value };
      const client = {
        account,
        batch,
        cacheTime,
        ccipRead,
        chain,
        key,
        name,
        pollingInterval,
        request,
        transport,
        type,
        uid: (0, uid_js_1.uid)()
      };
      function extend(base) {
        return (extendFn) => {
          const extended = extendFn(base);
          for (const key2 in client)
            delete extended[key2];
          const combined = { ...base, ...extended };
          return Object.assign(combined, { extend: extend(combined) });
        };
      }
      return Object.assign(client, { extend: extend(client) });
    }
    function rpcSchema() {
      return null;
    }
  }
});

// node_modules/viem/_cjs/utils/promise/withDedupe.js
var require_withDedupe = __commonJS({
  "node_modules/viem/_cjs/utils/promise/withDedupe.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.promiseCache = void 0;
    exports2.withDedupe = withDedupe;
    var lru_js_1 = require_lru();
    exports2.promiseCache = new lru_js_1.LruMap(8192);
    function withDedupe(fn, { enabled = true, id }) {
      if (!enabled || !id)
        return fn();
      if (exports2.promiseCache.get(id))
        return exports2.promiseCache.get(id);
      const promise = fn().finally(() => exports2.promiseCache.delete(id));
      exports2.promiseCache.set(id, promise);
      return promise;
    }
  }
});

// node_modules/viem/_cjs/utils/promise/withRetry.js
var require_withRetry = __commonJS({
  "node_modules/viem/_cjs/utils/promise/withRetry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.withRetry = withRetry;
    var wait_js_1 = require_wait();
    function withRetry(fn, { delay: delay_ = 100, retryCount = 2, shouldRetry = () => true } = {}) {
      return new Promise((resolve, reject) => {
        const attemptRetry = async ({ count = 0 } = {}) => {
          const retry = async ({ error }) => {
            const delay = typeof delay_ === "function" ? delay_({ count, error }) : delay_;
            if (delay)
              await (0, wait_js_1.wait)(delay);
            attemptRetry({ count: count + 1 });
          };
          try {
            const data = await fn();
            resolve(data);
          } catch (err) {
            if (count < retryCount && await shouldRetry({ count, error: err }))
              return retry({ error: err });
            reject(err);
          }
        };
        attemptRetry();
      });
    }
  }
});

// node_modules/viem/_cjs/utils/buildRequest.js
var require_buildRequest = __commonJS({
  "node_modules/viem/_cjs/utils/buildRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.buildRequest = buildRequest;
    exports2.shouldRetry = shouldRetry;
    var base_js_1 = require_base();
    var request_js_1 = require_request();
    var rpc_js_1 = require_rpc();
    var toHex_js_1 = require_toHex();
    var keccak256_js_1 = require_keccak256();
    var withDedupe_js_1 = require_withDedupe();
    var withRetry_js_1 = require_withRetry();
    var stringify_js_1 = require_stringify();
    function buildRequest(request, options2 = {}) {
      return async (args, overrideOptions = {}) => {
        const { dedupe = false, retryDelay = 150, retryCount = 3, uid } = {
          ...options2,
          ...overrideOptions
        };
        const requestId = dedupe ? (0, keccak256_js_1.keccak256)((0, toHex_js_1.stringToHex)(`${uid}.${(0, stringify_js_1.stringify)(args)}`)) : void 0;
        return (0, withDedupe_js_1.withDedupe)(() => (0, withRetry_js_1.withRetry)(async () => {
          try {
            return await request(args);
          } catch (err_) {
            const err = err_;
            switch (err.code) {
              case rpc_js_1.ParseRpcError.code:
                throw new rpc_js_1.ParseRpcError(err);
              case rpc_js_1.InvalidRequestRpcError.code:
                throw new rpc_js_1.InvalidRequestRpcError(err);
              case rpc_js_1.MethodNotFoundRpcError.code:
                throw new rpc_js_1.MethodNotFoundRpcError(err, { method: args.method });
              case rpc_js_1.InvalidParamsRpcError.code:
                throw new rpc_js_1.InvalidParamsRpcError(err);
              case rpc_js_1.InternalRpcError.code:
                throw new rpc_js_1.InternalRpcError(err);
              case rpc_js_1.InvalidInputRpcError.code:
                throw new rpc_js_1.InvalidInputRpcError(err);
              case rpc_js_1.ResourceNotFoundRpcError.code:
                throw new rpc_js_1.ResourceNotFoundRpcError(err);
              case rpc_js_1.ResourceUnavailableRpcError.code:
                throw new rpc_js_1.ResourceUnavailableRpcError(err);
              case rpc_js_1.TransactionRejectedRpcError.code:
                throw new rpc_js_1.TransactionRejectedRpcError(err);
              case rpc_js_1.MethodNotSupportedRpcError.code:
                throw new rpc_js_1.MethodNotSupportedRpcError(err, {
                  method: args.method
                });
              case rpc_js_1.LimitExceededRpcError.code:
                throw new rpc_js_1.LimitExceededRpcError(err);
              case rpc_js_1.JsonRpcVersionUnsupportedError.code:
                throw new rpc_js_1.JsonRpcVersionUnsupportedError(err);
              case rpc_js_1.UserRejectedRequestError.code:
                throw new rpc_js_1.UserRejectedRequestError(err);
              case rpc_js_1.UnauthorizedProviderError.code:
                throw new rpc_js_1.UnauthorizedProviderError(err);
              case rpc_js_1.UnsupportedProviderMethodError.code:
                throw new rpc_js_1.UnsupportedProviderMethodError(err);
              case rpc_js_1.ProviderDisconnectedError.code:
                throw new rpc_js_1.ProviderDisconnectedError(err);
              case rpc_js_1.ChainDisconnectedError.code:
                throw new rpc_js_1.ChainDisconnectedError(err);
              case rpc_js_1.SwitchChainError.code:
                throw new rpc_js_1.SwitchChainError(err);
              case 5e3:
                throw new rpc_js_1.UserRejectedRequestError(err);
              default:
                if (err_ instanceof base_js_1.BaseError)
                  throw err_;
                throw new rpc_js_1.UnknownRpcError(err);
            }
          }
        }, {
          delay: ({ count, error }) => {
            if (error && error instanceof request_js_1.HttpRequestError) {
              const retryAfter = error?.headers?.get("Retry-After");
              if (retryAfter?.match(/\d/))
                return Number.parseInt(retryAfter) * 1e3;
            }
            return ~~(1 << count) * retryDelay;
          },
          retryCount,
          shouldRetry: ({ error }) => shouldRetry(error)
        }), { enabled: dedupe, id: requestId });
      };
    }
    function shouldRetry(error) {
      if ("code" in error && typeof error.code === "number") {
        if (error.code === -1)
          return true;
        if (error.code === rpc_js_1.LimitExceededRpcError.code)
          return true;
        if (error.code === rpc_js_1.InternalRpcError.code)
          return true;
        return false;
      }
      if (error instanceof request_js_1.HttpRequestError && error.status) {
        if (error.status === 403)
          return true;
        if (error.status === 408)
          return true;
        if (error.status === 413)
          return true;
        if (error.status === 429)
          return true;
        if (error.status === 500)
          return true;
        if (error.status === 502)
          return true;
        if (error.status === 503)
          return true;
        if (error.status === 504)
          return true;
        return false;
      }
      return true;
    }
  }
});

// node_modules/viem/_cjs/clients/transports/createTransport.js
var require_createTransport = __commonJS({
  "node_modules/viem/_cjs/clients/transports/createTransport.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createTransport = createTransport;
    var buildRequest_js_1 = require_buildRequest();
    var uid_js_1 = require_uid();
    function createTransport({ key, name, request, retryCount = 3, retryDelay = 150, timeout, type }, value) {
      const uid = (0, uid_js_1.uid)();
      return {
        config: {
          key,
          name,
          request,
          retryCount,
          retryDelay,
          timeout,
          type
        },
        request: (0, buildRequest_js_1.buildRequest)(request, { retryCount, retryDelay, uid }),
        value
      };
    }
  }
});

// node_modules/viem/_cjs/clients/transports/custom.js
var require_custom = __commonJS({
  "node_modules/viem/_cjs/clients/transports/custom.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.custom = custom;
    var createTransport_js_1 = require_createTransport();
    function custom(provider, config = {}) {
      const { key = "custom", name = "Custom Provider", retryDelay } = config;
      return ({ retryCount: defaultRetryCount }) => (0, createTransport_js_1.createTransport)({
        key,
        name,
        request: provider.request.bind(provider),
        retryCount: config.retryCount ?? defaultRetryCount,
        retryDelay,
        type: "custom"
      });
    }
  }
});

// node_modules/viem/_cjs/clients/transports/fallback.js
var require_fallback = __commonJS({
  "node_modules/viem/_cjs/clients/transports/fallback.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fallback = fallback;
    exports2.rankTransports = rankTransports;
    var rpc_js_1 = require_rpc();
    var wait_js_1 = require_wait();
    var createTransport_js_1 = require_createTransport();
    function fallback(transports_, config = {}) {
      const { key = "fallback", name = "Fallback", rank = false, retryCount, retryDelay } = config;
      return ({ chain, pollingInterval = 4e3, timeout, ...rest }) => {
        let transports = transports_;
        let onResponse = () => {
        };
        const transport = (0, createTransport_js_1.createTransport)({
          key,
          name,
          async request({ method, params }) {
            const fetch2 = async (i = 0) => {
              const transport2 = transports[i]({
                ...rest,
                chain,
                retryCount: 0,
                timeout
              });
              try {
                const response = await transport2.request({
                  method,
                  params
                });
                onResponse({
                  method,
                  params,
                  response,
                  transport: transport2,
                  status: "success"
                });
                return response;
              } catch (err) {
                onResponse({
                  error: err,
                  method,
                  params,
                  transport: transport2,
                  status: "error"
                });
                if (shouldThrow(err))
                  throw err;
                if (i === transports.length - 1)
                  throw err;
                return fetch2(i + 1);
              }
            };
            return fetch2();
          },
          retryCount,
          retryDelay,
          type: "fallback"
        }, {
          onResponse: (fn) => onResponse = fn,
          transports: transports.map((fn) => fn({ chain, retryCount: 0 }))
        });
        if (rank) {
          const rankOptions = typeof rank === "object" ? rank : {};
          rankTransports({
            chain,
            interval: rankOptions.interval ?? pollingInterval,
            onTransports: (transports_2) => transports = transports_2,
            sampleCount: rankOptions.sampleCount,
            timeout: rankOptions.timeout,
            transports,
            weights: rankOptions.weights
          });
        }
        return transport;
      };
    }
    function shouldThrow(error) {
      if ("code" in error && typeof error.code === "number") {
        if (error.code === rpc_js_1.TransactionRejectedRpcError.code || error.code === rpc_js_1.UserRejectedRequestError.code || error.code === 5e3)
          return true;
      }
      return false;
    }
    function rankTransports({ chain, interval = 4e3, onTransports, sampleCount = 10, timeout = 1e3, transports, weights = {} }) {
      const { stability: stabilityWeight = 0.7, latency: latencyWeight = 0.3 } = weights;
      const samples = [];
      const rankTransports_ = async () => {
        const sample = await Promise.all(transports.map(async (transport) => {
          const transport_ = transport({ chain, retryCount: 0, timeout });
          const start = Date.now();
          let end;
          let success;
          try {
            await transport_.request({ method: "net_listening" });
            success = 1;
          } catch {
            success = 0;
          } finally {
            end = Date.now();
          }
          const latency = end - start;
          return { latency, success };
        }));
        samples.push(sample);
        if (samples.length > sampleCount)
          samples.shift();
        const maxLatency = Math.max(...samples.map((sample2) => Math.max(...sample2.map(({ latency }) => latency))));
        const scores = transports.map((_, i) => {
          const latencies = samples.map((sample2) => sample2[i].latency);
          const meanLatency = latencies.reduce((acc, latency) => acc + latency, 0) / latencies.length;
          const latencyScore = 1 - meanLatency / maxLatency;
          const successes = samples.map((sample2) => sample2[i].success);
          const stabilityScore = successes.reduce((acc, success) => acc + success, 0) / successes.length;
          if (stabilityScore === 0)
            return [0, i];
          return [
            latencyWeight * latencyScore + stabilityWeight * stabilityScore,
            i
          ];
        }).sort((a, b) => b[0] - a[0]);
        onTransports(scores.map(([, i]) => transports[i]));
        await (0, wait_js_1.wait)(interval);
        rankTransports_();
      };
      rankTransports_();
    }
  }
});

// node_modules/viem/_cjs/errors/transport.js
var require_transport = __commonJS({
  "node_modules/viem/_cjs/errors/transport.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UrlRequiredError = void 0;
    var base_js_1 = require_base();
    var UrlRequiredError = class extends base_js_1.BaseError {
      constructor() {
        super("No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.", {
          docsPath: "/docs/clients/intro",
          name: "UrlRequiredError"
        });
      }
    };
    exports2.UrlRequiredError = UrlRequiredError;
  }
});

// node_modules/viem/_cjs/utils/promise/withTimeout.js
var require_withTimeout = __commonJS({
  "node_modules/viem/_cjs/utils/promise/withTimeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.withTimeout = withTimeout;
    function withTimeout(fn, { errorInstance = new Error("timed out"), timeout, signal }) {
      return new Promise((resolve, reject) => {
        ;
        (async () => {
          let timeoutId;
          try {
            const controller = new AbortController();
            if (timeout > 0) {
              timeoutId = setTimeout(() => {
                if (signal) {
                  controller.abort();
                } else {
                  reject(errorInstance);
                }
              }, timeout);
            }
            resolve(await fn({ signal: controller?.signal || null }));
          } catch (err) {
            if (err?.name === "AbortError")
              reject(errorInstance);
            reject(err);
          } finally {
            clearTimeout(timeoutId);
          }
        })();
      });
    }
  }
});

// node_modules/viem/_cjs/utils/rpc/id.js
var require_id = __commonJS({
  "node_modules/viem/_cjs/utils/rpc/id.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.idCache = void 0;
    function createIdStore() {
      return {
        current: 0,
        take() {
          return this.current++;
        },
        reset() {
          this.current = 0;
        }
      };
    }
    exports2.idCache = createIdStore();
  }
});

// node_modules/viem/_cjs/utils/rpc/http.js
var require_http = __commonJS({
  "node_modules/viem/_cjs/utils/rpc/http.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHttpRpcClient = getHttpRpcClient;
    var request_js_1 = require_request();
    var withTimeout_js_1 = require_withTimeout();
    var stringify_js_1 = require_stringify();
    var id_js_1 = require_id();
    function getHttpRpcClient(url, options2 = {}) {
      return {
        async request(params) {
          const { body, onRequest = options2.onRequest, onResponse = options2.onResponse, timeout = options2.timeout ?? 1e4 } = params;
          const fetchOptions = {
            ...options2.fetchOptions ?? {},
            ...params.fetchOptions ?? {}
          };
          const { headers, method, signal: signal_ } = fetchOptions;
          try {
            const response = await (0, withTimeout_js_1.withTimeout)(async ({ signal }) => {
              const init = {
                ...fetchOptions,
                body: Array.isArray(body) ? (0, stringify_js_1.stringify)(body.map((body2) => ({
                  jsonrpc: "2.0",
                  id: body2.id ?? id_js_1.idCache.take(),
                  ...body2
                }))) : (0, stringify_js_1.stringify)({
                  jsonrpc: "2.0",
                  id: body.id ?? id_js_1.idCache.take(),
                  ...body
                }),
                headers: {
                  "Content-Type": "application/json",
                  ...headers
                },
                method: method || "POST",
                signal: signal_ || (timeout > 0 ? signal : null)
              };
              const request = new Request(url, init);
              const args = await onRequest?.(request, init) ?? { ...init, url };
              const response2 = await fetch(args.url ?? url, args);
              return response2;
            }, {
              errorInstance: new request_js_1.TimeoutError({ body, url }),
              timeout,
              signal: true
            });
            if (onResponse)
              await onResponse(response);
            let data;
            if (response.headers.get("Content-Type")?.startsWith("application/json"))
              data = await response.json();
            else {
              data = await response.text();
              try {
                data = JSON.parse(data || "{}");
              } catch (err) {
                if (response.ok)
                  throw err;
                data = { error: data };
              }
            }
            if (!response.ok) {
              throw new request_js_1.HttpRequestError({
                body,
                details: (0, stringify_js_1.stringify)(data.error) || response.statusText,
                headers: response.headers,
                status: response.status,
                url
              });
            }
            return data;
          } catch (err) {
            if (err instanceof request_js_1.HttpRequestError)
              throw err;
            if (err instanceof request_js_1.TimeoutError)
              throw err;
            throw new request_js_1.HttpRequestError({
              body,
              cause: err,
              url
            });
          }
        }
      };
    }
  }
});

// node_modules/viem/_cjs/clients/transports/http.js
var require_http2 = __commonJS({
  "node_modules/viem/_cjs/clients/transports/http.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.http = http;
    var request_js_1 = require_request();
    var transport_js_1 = require_transport();
    var createBatchScheduler_js_1 = require_createBatchScheduler();
    var http_js_1 = require_http();
    var createTransport_js_1 = require_createTransport();
    function http(url, config = {}) {
      const { batch, fetchOptions, key = "http", name = "HTTP JSON-RPC", onFetchRequest, onFetchResponse, retryDelay } = config;
      return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {
        const { batchSize = 1e3, wait = 0 } = typeof batch === "object" ? batch : {};
        const retryCount = config.retryCount ?? retryCount_;
        const timeout = timeout_ ?? config.timeout ?? 1e4;
        const url_ = url || chain?.rpcUrls.default.http[0];
        if (!url_)
          throw new transport_js_1.UrlRequiredError();
        const rpcClient = (0, http_js_1.getHttpRpcClient)(url_, {
          fetchOptions,
          onRequest: onFetchRequest,
          onResponse: onFetchResponse,
          timeout
        });
        return (0, createTransport_js_1.createTransport)({
          key,
          name,
          async request({ method, params }) {
            const body = { method, params };
            const { schedule } = (0, createBatchScheduler_js_1.createBatchScheduler)({
              id: url_,
              wait,
              shouldSplitBatch(requests) {
                return requests.length > batchSize;
              },
              fn: (body2) => rpcClient.request({
                body: body2
              }),
              sort: (a, b) => a.id - b.id
            });
            const fn = async (body2) => batch ? schedule(body2) : [
              await rpcClient.request({
                body: body2
              })
            ];
            const [{ error, result }] = await fn(body);
            if (error)
              throw new request_js_1.RpcRequestError({
                body,
                error,
                url: url_
              });
            return result;
          },
          retryCount,
          retryDelay,
          timeout,
          type: "http"
        }, {
          fetchOptions,
          url: url_
        });
      };
    }
  }
});

// node_modules/viem/_cjs/utils/ens/errors.js
var require_errors2 = __commonJS({
  "node_modules/viem/_cjs/utils/ens/errors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isNullUniversalResolverError = isNullUniversalResolverError;
    var solidity_js_1 = require_solidity();
    var base_js_1 = require_base();
    var contract_js_1 = require_contract();
    function isNullUniversalResolverError(err, callType) {
      if (!(err instanceof base_js_1.BaseError))
        return false;
      const cause = err.walk((e) => e instanceof contract_js_1.ContractFunctionRevertedError);
      if (!(cause instanceof contract_js_1.ContractFunctionRevertedError))
        return false;
      if (cause.data?.errorName === "ResolverNotFound")
        return true;
      if (cause.data?.errorName === "ResolverWildcardNotSupported")
        return true;
      if (cause.data?.errorName === "ResolverNotContract")
        return true;
      if (cause.data?.errorName === "ResolverError")
        return true;
      if (cause.data?.errorName === "HttpError")
        return true;
      if (cause.reason?.includes("Wildcard on non-extended resolvers is not supported"))
        return true;
      if (callType === "reverse" && cause.reason === solidity_js_1.panicReasons[50])
        return true;
      return false;
    }
  }
});

// node_modules/viem/_cjs/utils/ens/encodedLabelToLabelhash.js
var require_encodedLabelToLabelhash = __commonJS({
  "node_modules/viem/_cjs/utils/ens/encodedLabelToLabelhash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodedLabelToLabelhash = encodedLabelToLabelhash;
    var isHex_js_1 = require_isHex();
    function encodedLabelToLabelhash(label) {
      if (label.length !== 66)
        return null;
      if (label.indexOf("[") !== 0)
        return null;
      if (label.indexOf("]") !== 65)
        return null;
      const hash = `0x${label.slice(1, 65)}`;
      if (!(0, isHex_js_1.isHex)(hash))
        return null;
      return hash;
    }
  }
});

// node_modules/viem/_cjs/utils/ens/namehash.js
var require_namehash = __commonJS({
  "node_modules/viem/_cjs/utils/ens/namehash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.namehash = namehash;
    var concat_js_1 = require_concat();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    var keccak256_js_1 = require_keccak256();
    var encodedLabelToLabelhash_js_1 = require_encodedLabelToLabelhash();
    function namehash(name) {
      let result = new Uint8Array(32).fill(0);
      if (!name)
        return (0, toHex_js_1.bytesToHex)(result);
      const labels = name.split(".");
      for (let i = labels.length - 1; i >= 0; i -= 1) {
        const hashFromEncodedLabel = (0, encodedLabelToLabelhash_js_1.encodedLabelToLabelhash)(labels[i]);
        const hashed = hashFromEncodedLabel ? (0, toBytes_js_1.toBytes)(hashFromEncodedLabel) : (0, keccak256_js_1.keccak256)((0, toBytes_js_1.stringToBytes)(labels[i]), "bytes");
        result = (0, keccak256_js_1.keccak256)((0, concat_js_1.concat)([result, hashed]), "bytes");
      }
      return (0, toHex_js_1.bytesToHex)(result);
    }
  }
});

// node_modules/viem/_cjs/utils/ens/encodeLabelhash.js
var require_encodeLabelhash = __commonJS({
  "node_modules/viem/_cjs/utils/ens/encodeLabelhash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeLabelhash = encodeLabelhash;
    function encodeLabelhash(hash) {
      return `[${hash.slice(2)}]`;
    }
  }
});

// node_modules/viem/_cjs/utils/ens/labelhash.js
var require_labelhash = __commonJS({
  "node_modules/viem/_cjs/utils/ens/labelhash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.labelhash = labelhash;
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    var keccak256_js_1 = require_keccak256();
    var encodedLabelToLabelhash_js_1 = require_encodedLabelToLabelhash();
    function labelhash(label) {
      const result = new Uint8Array(32).fill(0);
      if (!label)
        return (0, toHex_js_1.bytesToHex)(result);
      return (0, encodedLabelToLabelhash_js_1.encodedLabelToLabelhash)(label) || (0, keccak256_js_1.keccak256)((0, toBytes_js_1.stringToBytes)(label));
    }
  }
});

// node_modules/viem/_cjs/utils/ens/packetToBytes.js
var require_packetToBytes = __commonJS({
  "node_modules/viem/_cjs/utils/ens/packetToBytes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.packetToBytes = packetToBytes;
    var toBytes_js_1 = require_toBytes();
    var encodeLabelhash_js_1 = require_encodeLabelhash();
    var labelhash_js_1 = require_labelhash();
    function packetToBytes(packet) {
      const value = packet.replace(/^\.|\.$/gm, "");
      if (value.length === 0)
        return new Uint8Array(1);
      const bytes = new Uint8Array((0, toBytes_js_1.stringToBytes)(value).byteLength + 2);
      let offset = 0;
      const list = value.split(".");
      for (let i = 0; i < list.length; i++) {
        let encoded = (0, toBytes_js_1.stringToBytes)(list[i]);
        if (encoded.byteLength > 255)
          encoded = (0, toBytes_js_1.stringToBytes)((0, encodeLabelhash_js_1.encodeLabelhash)((0, labelhash_js_1.labelhash)(list[i])));
        bytes[offset] = encoded.length;
        bytes.set(encoded, offset + 1);
        offset += encoded.length + 1;
      }
      if (bytes.byteLength !== offset + 1)
        return bytes.slice(0, offset + 1);
      return bytes;
    }
  }
});

// node_modules/viem/_cjs/actions/ens/getEnsAddress.js
var require_getEnsAddress = __commonJS({
  "node_modules/viem/_cjs/actions/ens/getEnsAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEnsAddress = getEnsAddress;
    var abis_js_1 = require_abis();
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    var trim_js_1 = require_trim();
    var toHex_js_1 = require_toHex();
    var errors_js_1 = require_errors2();
    var namehash_js_1 = require_namehash();
    var packetToBytes_js_1 = require_packetToBytes();
    var getAction_js_1 = require_getAction();
    var readContract_js_1 = require_readContract();
    async function getEnsAddress(client, { blockNumber, blockTag, coinType, name, gatewayUrls, strict, universalResolverAddress: universalResolverAddress_ }) {
      let universalResolverAddress = universalResolverAddress_;
      if (!universalResolverAddress) {
        if (!client.chain)
          throw new Error("client chain not configured. universalResolverAddress is required.");
        universalResolverAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({
          blockNumber,
          chain: client.chain,
          contract: "ensUniversalResolver"
        });
      }
      try {
        const functionData = (0, encodeFunctionData_js_1.encodeFunctionData)({
          abi: abis_js_1.addressResolverAbi,
          functionName: "addr",
          ...coinType != null ? { args: [(0, namehash_js_1.namehash)(name), BigInt(coinType)] } : { args: [(0, namehash_js_1.namehash)(name)] }
        });
        const readContractParameters = {
          address: universalResolverAddress,
          abi: abis_js_1.universalResolverResolveAbi,
          functionName: "resolve",
          args: [(0, toHex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(name)), functionData],
          blockNumber,
          blockTag
        };
        const readContractAction = (0, getAction_js_1.getAction)(client, readContract_js_1.readContract, "readContract");
        const res = gatewayUrls ? await readContractAction({
          ...readContractParameters,
          args: [...readContractParameters.args, gatewayUrls]
        }) : await readContractAction(readContractParameters);
        if (res[0] === "0x")
          return null;
        const address = (0, decodeFunctionResult_js_1.decodeFunctionResult)({
          abi: abis_js_1.addressResolverAbi,
          args: coinType != null ? [(0, namehash_js_1.namehash)(name), BigInt(coinType)] : void 0,
          functionName: "addr",
          data: res[0]
        });
        if (address === "0x")
          return null;
        if ((0, trim_js_1.trim)(address) === "0x00")
          return null;
        return address;
      } catch (err) {
        if (strict)
          throw err;
        if ((0, errors_js_1.isNullUniversalResolverError)(err, "resolve"))
          return null;
        throw err;
      }
    }
  }
});

// node_modules/viem/_cjs/errors/ens.js
var require_ens = __commonJS({
  "node_modules/viem/_cjs/errors/ens.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EnsAvatarUnsupportedNamespaceError = exports2.EnsAvatarUriResolutionError = exports2.EnsAvatarInvalidNftUriError = exports2.EnsAvatarInvalidMetadataError = void 0;
    var base_js_1 = require_base();
    var EnsAvatarInvalidMetadataError = class extends base_js_1.BaseError {
      constructor({ data }) {
        super("Unable to extract image from metadata. The metadata may be malformed or invalid.", {
          metaMessages: [
            "- Metadata must be a JSON object with at least an `image`, `image_url` or `image_data` property.",
            "",
            `Provided data: ${JSON.stringify(data)}`
          ],
          name: "EnsAvatarInvalidMetadataError"
        });
      }
    };
    exports2.EnsAvatarInvalidMetadataError = EnsAvatarInvalidMetadataError;
    var EnsAvatarInvalidNftUriError = class extends base_js_1.BaseError {
      constructor({ reason }) {
        super(`ENS NFT avatar URI is invalid. ${reason}`, {
          name: "EnsAvatarInvalidNftUriError"
        });
      }
    };
    exports2.EnsAvatarInvalidNftUriError = EnsAvatarInvalidNftUriError;
    var EnsAvatarUriResolutionError = class extends base_js_1.BaseError {
      constructor({ uri }) {
        super(`Unable to resolve ENS avatar URI "${uri}". The URI may be malformed, invalid, or does not respond with a valid image.`, { name: "EnsAvatarUriResolutionError" });
      }
    };
    exports2.EnsAvatarUriResolutionError = EnsAvatarUriResolutionError;
    var EnsAvatarUnsupportedNamespaceError = class extends base_js_1.BaseError {
      constructor({ namespace }) {
        super(`ENS NFT avatar namespace "${namespace}" is not supported. Must be "erc721" or "erc1155".`, { name: "EnsAvatarUnsupportedNamespaceError" });
      }
    };
    exports2.EnsAvatarUnsupportedNamespaceError = EnsAvatarUnsupportedNamespaceError;
  }
});

// node_modules/viem/_cjs/utils/ens/avatar/utils.js
var require_utils7 = __commonJS({
  "node_modules/viem/_cjs/utils/ens/avatar/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isImageUri = isImageUri;
    exports2.getGateway = getGateway;
    exports2.resolveAvatarUri = resolveAvatarUri;
    exports2.getJsonImage = getJsonImage;
    exports2.getMetadataAvatarUri = getMetadataAvatarUri;
    exports2.parseAvatarUri = parseAvatarUri;
    exports2.parseNftUri = parseNftUri;
    exports2.getNftTokenUri = getNftTokenUri;
    var readContract_js_1 = require_readContract();
    var ens_js_1 = require_ens();
    var networkRegex = /(?<protocol>https?:\/\/[^\/]*|ipfs:\/|ipns:\/|ar:\/)?(?<root>\/)?(?<subpath>ipfs\/|ipns\/)?(?<target>[\w\-.]+)(?<subtarget>\/.*)?/;
    var ipfsHashRegex = /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\/(?<target>[\w\-.]+))?(?<subtarget>\/.*)?$/;
    var base64Regex = /^data:([a-zA-Z\-/+]*);base64,([^"].*)/;
    var dataURIRegex = /^data:([a-zA-Z\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/;
    async function isImageUri(uri) {
      try {
        const res = await fetch(uri, { method: "HEAD" });
        if (res.status === 200) {
          const contentType = res.headers.get("content-type");
          return contentType?.startsWith("image/");
        }
        return false;
      } catch (error) {
        if (typeof error === "object" && typeof error.response !== "undefined") {
          return false;
        }
        if (!globalThis.hasOwnProperty("Image"))
          return false;
        return new Promise((resolve) => {
          const img = new Image();
          img.onload = () => {
            resolve(true);
          };
          img.onerror = () => {
            resolve(false);
          };
          img.src = uri;
        });
      }
    }
    function getGateway(custom, defaultGateway) {
      if (!custom)
        return defaultGateway;
      if (custom.endsWith("/"))
        return custom.slice(0, -1);
      return custom;
    }
    function resolveAvatarUri({ uri, gatewayUrls }) {
      const isEncoded = base64Regex.test(uri);
      if (isEncoded)
        return { uri, isOnChain: true, isEncoded };
      const ipfsGateway = getGateway(gatewayUrls?.ipfs, "https://ipfs.io");
      const arweaveGateway = getGateway(gatewayUrls?.arweave, "https://arweave.net");
      const networkRegexMatch = uri.match(networkRegex);
      const { protocol, subpath, target, subtarget = "" } = networkRegexMatch?.groups || {};
      const isIPNS = protocol === "ipns:/" || subpath === "ipns/";
      const isIPFS = protocol === "ipfs:/" || subpath === "ipfs/" || ipfsHashRegex.test(uri);
      if (uri.startsWith("http") && !isIPNS && !isIPFS) {
        let replacedUri = uri;
        if (gatewayUrls?.arweave)
          replacedUri = uri.replace(/https:\/\/arweave.net/g, gatewayUrls?.arweave);
        return { uri: replacedUri, isOnChain: false, isEncoded: false };
      }
      if ((isIPNS || isIPFS) && target) {
        return {
          uri: `${ipfsGateway}/${isIPNS ? "ipns" : "ipfs"}/${target}${subtarget}`,
          isOnChain: false,
          isEncoded: false
        };
      }
      if (protocol === "ar:/" && target) {
        return {
          uri: `${arweaveGateway}/${target}${subtarget || ""}`,
          isOnChain: false,
          isEncoded: false
        };
      }
      let parsedUri = uri.replace(dataURIRegex, "");
      if (parsedUri.startsWith("<svg")) {
        parsedUri = `data:image/svg+xml;base64,${btoa(parsedUri)}`;
      }
      if (parsedUri.startsWith("data:") || parsedUri.startsWith("{")) {
        return {
          uri: parsedUri,
          isOnChain: true,
          isEncoded: false
        };
      }
      throw new ens_js_1.EnsAvatarUriResolutionError({ uri });
    }
    function getJsonImage(data) {
      if (typeof data !== "object" || !("image" in data) && !("image_url" in data) && !("image_data" in data)) {
        throw new ens_js_1.EnsAvatarInvalidMetadataError({ data });
      }
      return data.image || data.image_url || data.image_data;
    }
    async function getMetadataAvatarUri({ gatewayUrls, uri }) {
      try {
        const res = await fetch(uri).then((res2) => res2.json());
        const image = await parseAvatarUri({
          gatewayUrls,
          uri: getJsonImage(res)
        });
        return image;
      } catch {
        throw new ens_js_1.EnsAvatarUriResolutionError({ uri });
      }
    }
    async function parseAvatarUri({ gatewayUrls, uri }) {
      const { uri: resolvedURI, isOnChain } = resolveAvatarUri({ uri, gatewayUrls });
      if (isOnChain)
        return resolvedURI;
      const isImage = await isImageUri(resolvedURI);
      if (isImage)
        return resolvedURI;
      throw new ens_js_1.EnsAvatarUriResolutionError({ uri });
    }
    function parseNftUri(uri_) {
      let uri = uri_;
      if (uri.startsWith("did:nft:")) {
        uri = uri.replace("did:nft:", "").replace(/_/g, "/");
      }
      const [reference, asset_namespace, tokenID] = uri.split("/");
      const [eip_namespace, chainID] = reference.split(":");
      const [erc_namespace, contractAddress] = asset_namespace.split(":");
      if (!eip_namespace || eip_namespace.toLowerCase() !== "eip155")
        throw new ens_js_1.EnsAvatarInvalidNftUriError({ reason: "Only EIP-155 supported" });
      if (!chainID)
        throw new ens_js_1.EnsAvatarInvalidNftUriError({ reason: "Chain ID not found" });
      if (!contractAddress)
        throw new ens_js_1.EnsAvatarInvalidNftUriError({
          reason: "Contract address not found"
        });
      if (!tokenID)
        throw new ens_js_1.EnsAvatarInvalidNftUriError({ reason: "Token ID not found" });
      if (!erc_namespace)
        throw new ens_js_1.EnsAvatarInvalidNftUriError({ reason: "ERC namespace not found" });
      return {
        chainID: Number.parseInt(chainID),
        namespace: erc_namespace.toLowerCase(),
        contractAddress,
        tokenID
      };
    }
    async function getNftTokenUri(client, { nft }) {
      if (nft.namespace === "erc721") {
        return (0, readContract_js_1.readContract)(client, {
          address: nft.contractAddress,
          abi: [
            {
              name: "tokenURI",
              type: "function",
              stateMutability: "view",
              inputs: [{ name: "tokenId", type: "uint256" }],
              outputs: [{ name: "", type: "string" }]
            }
          ],
          functionName: "tokenURI",
          args: [BigInt(nft.tokenID)]
        });
      }
      if (nft.namespace === "erc1155") {
        return (0, readContract_js_1.readContract)(client, {
          address: nft.contractAddress,
          abi: [
            {
              name: "uri",
              type: "function",
              stateMutability: "view",
              inputs: [{ name: "_id", type: "uint256" }],
              outputs: [{ name: "", type: "string" }]
            }
          ],
          functionName: "uri",
          args: [BigInt(nft.tokenID)]
        });
      }
      throw new ens_js_1.EnsAvatarUnsupportedNamespaceError({ namespace: nft.namespace });
    }
  }
});

// node_modules/viem/_cjs/utils/ens/avatar/parseAvatarRecord.js
var require_parseAvatarRecord = __commonJS({
  "node_modules/viem/_cjs/utils/ens/avatar/parseAvatarRecord.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAvatarRecord = parseAvatarRecord;
    var utils_js_1 = require_utils7();
    async function parseAvatarRecord(client, { gatewayUrls, record }) {
      if (/eip155:/i.test(record))
        return parseNftAvatarUri(client, { gatewayUrls, record });
      return (0, utils_js_1.parseAvatarUri)({ uri: record, gatewayUrls });
    }
    async function parseNftAvatarUri(client, { gatewayUrls, record }) {
      const nft = (0, utils_js_1.parseNftUri)(record);
      const nftUri = await (0, utils_js_1.getNftTokenUri)(client, { nft });
      const { uri: resolvedNftUri, isOnChain, isEncoded } = (0, utils_js_1.resolveAvatarUri)({ uri: nftUri, gatewayUrls });
      if (isOnChain && (resolvedNftUri.includes("data:application/json;base64,") || resolvedNftUri.startsWith("{"))) {
        const encodedJson = isEncoded ? atob(resolvedNftUri.replace("data:application/json;base64,", "")) : resolvedNftUri;
        const decoded = JSON.parse(encodedJson);
        return (0, utils_js_1.parseAvatarUri)({ uri: (0, utils_js_1.getJsonImage)(decoded), gatewayUrls });
      }
      let uriTokenId = nft.tokenID;
      if (nft.namespace === "erc1155")
        uriTokenId = uriTokenId.replace("0x", "").padStart(64, "0");
      return (0, utils_js_1.getMetadataAvatarUri)({
        gatewayUrls,
        uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId)
      });
    }
  }
});

// node_modules/viem/_cjs/actions/ens/getEnsText.js
var require_getEnsText = __commonJS({
  "node_modules/viem/_cjs/actions/ens/getEnsText.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEnsText = getEnsText;
    var abis_js_1 = require_abis();
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    var toHex_js_1 = require_toHex();
    var errors_js_1 = require_errors2();
    var namehash_js_1 = require_namehash();
    var packetToBytes_js_1 = require_packetToBytes();
    var getAction_js_1 = require_getAction();
    var readContract_js_1 = require_readContract();
    async function getEnsText(client, { blockNumber, blockTag, name, key, gatewayUrls, strict, universalResolverAddress: universalResolverAddress_ }) {
      let universalResolverAddress = universalResolverAddress_;
      if (!universalResolverAddress) {
        if (!client.chain)
          throw new Error("client chain not configured. universalResolverAddress is required.");
        universalResolverAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({
          blockNumber,
          chain: client.chain,
          contract: "ensUniversalResolver"
        });
      }
      try {
        const readContractParameters = {
          address: universalResolverAddress,
          abi: abis_js_1.universalResolverResolveAbi,
          functionName: "resolve",
          args: [
            (0, toHex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(name)),
            (0, encodeFunctionData_js_1.encodeFunctionData)({
              abi: abis_js_1.textResolverAbi,
              functionName: "text",
              args: [(0, namehash_js_1.namehash)(name), key]
            })
          ],
          blockNumber,
          blockTag
        };
        const readContractAction = (0, getAction_js_1.getAction)(client, readContract_js_1.readContract, "readContract");
        const res = gatewayUrls ? await readContractAction({
          ...readContractParameters,
          args: [...readContractParameters.args, gatewayUrls]
        }) : await readContractAction(readContractParameters);
        if (res[0] === "0x")
          return null;
        const record = (0, decodeFunctionResult_js_1.decodeFunctionResult)({
          abi: abis_js_1.textResolverAbi,
          functionName: "text",
          data: res[0]
        });
        return record === "" ? null : record;
      } catch (err) {
        if (strict)
          throw err;
        if ((0, errors_js_1.isNullUniversalResolverError)(err, "resolve"))
          return null;
        throw err;
      }
    }
  }
});

// node_modules/viem/_cjs/actions/ens/getEnsAvatar.js
var require_getEnsAvatar = __commonJS({
  "node_modules/viem/_cjs/actions/ens/getEnsAvatar.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEnsAvatar = getEnsAvatar;
    var parseAvatarRecord_js_1 = require_parseAvatarRecord();
    var getAction_js_1 = require_getAction();
    var getEnsText_js_1 = require_getEnsText();
    async function getEnsAvatar(client, { blockNumber, blockTag, assetGatewayUrls, name, gatewayUrls, strict, universalResolverAddress }) {
      const record = await (0, getAction_js_1.getAction)(client, getEnsText_js_1.getEnsText, "getEnsText")({
        blockNumber,
        blockTag,
        key: "avatar",
        name,
        universalResolverAddress,
        gatewayUrls,
        strict
      });
      if (!record)
        return null;
      try {
        return await (0, parseAvatarRecord_js_1.parseAvatarRecord)(client, {
          record,
          gatewayUrls: assetGatewayUrls
        });
      } catch {
        return null;
      }
    }
  }
});

// node_modules/viem/_cjs/actions/ens/getEnsName.js
var require_getEnsName = __commonJS({
  "node_modules/viem/_cjs/actions/ens/getEnsName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEnsName = getEnsName;
    var abis_js_1 = require_abis();
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    var toHex_js_1 = require_toHex();
    var errors_js_1 = require_errors2();
    var packetToBytes_js_1 = require_packetToBytes();
    var getAction_js_1 = require_getAction();
    var readContract_js_1 = require_readContract();
    async function getEnsName(client, { address, blockNumber, blockTag, gatewayUrls, strict, universalResolverAddress: universalResolverAddress_ }) {
      let universalResolverAddress = universalResolverAddress_;
      if (!universalResolverAddress) {
        if (!client.chain)
          throw new Error("client chain not configured. universalResolverAddress is required.");
        universalResolverAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({
          blockNumber,
          chain: client.chain,
          contract: "ensUniversalResolver"
        });
      }
      const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`;
      try {
        const readContractParameters = {
          address: universalResolverAddress,
          abi: abis_js_1.universalResolverReverseAbi,
          functionName: "reverse",
          args: [(0, toHex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(reverseNode))],
          blockNumber,
          blockTag
        };
        const readContractAction = (0, getAction_js_1.getAction)(client, readContract_js_1.readContract, "readContract");
        const [name, resolvedAddress] = gatewayUrls ? await readContractAction({
          ...readContractParameters,
          args: [...readContractParameters.args, gatewayUrls]
        }) : await readContractAction(readContractParameters);
        if (address.toLowerCase() !== resolvedAddress.toLowerCase())
          return null;
        return name;
      } catch (err) {
        if (strict)
          throw err;
        if ((0, errors_js_1.isNullUniversalResolverError)(err, "reverse"))
          return null;
        throw err;
      }
    }
  }
});

// node_modules/viem/_cjs/actions/ens/getEnsResolver.js
var require_getEnsResolver = __commonJS({
  "node_modules/viem/_cjs/actions/ens/getEnsResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEnsResolver = getEnsResolver;
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    var toHex_js_1 = require_toHex();
    var packetToBytes_js_1 = require_packetToBytes();
    var getAction_js_1 = require_getAction();
    var readContract_js_1 = require_readContract();
    async function getEnsResolver(client, { blockNumber, blockTag, name, universalResolverAddress: universalResolverAddress_ }) {
      let universalResolverAddress = universalResolverAddress_;
      if (!universalResolverAddress) {
        if (!client.chain)
          throw new Error("client chain not configured. universalResolverAddress is required.");
        universalResolverAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({
          blockNumber,
          chain: client.chain,
          contract: "ensUniversalResolver"
        });
      }
      const [resolverAddress] = await (0, getAction_js_1.getAction)(client, readContract_js_1.readContract, "readContract")({
        address: universalResolverAddress,
        abi: [
          {
            inputs: [{ type: "bytes" }],
            name: "findResolver",
            outputs: [{ type: "address" }, { type: "bytes32" }],
            stateMutability: "view",
            type: "function"
          }
        ],
        functionName: "findResolver",
        args: [(0, toHex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(name))],
        blockNumber,
        blockTag
      });
      return resolverAddress;
    }
  }
});

// node_modules/viem/_cjs/actions/public/createBlockFilter.js
var require_createBlockFilter = __commonJS({
  "node_modules/viem/_cjs/actions/public/createBlockFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createBlockFilter = createBlockFilter;
    var createFilterRequestScope_js_1 = require_createFilterRequestScope();
    async function createBlockFilter(client) {
      const getRequest = (0, createFilterRequestScope_js_1.createFilterRequestScope)(client, {
        method: "eth_newBlockFilter"
      });
      const id = await client.request({
        method: "eth_newBlockFilter"
      });
      return { id, request: getRequest(id), type: "block" };
    }
  }
});

// node_modules/viem/_cjs/actions/public/createEventFilter.js
var require_createEventFilter = __commonJS({
  "node_modules/viem/_cjs/actions/public/createEventFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createEventFilter = createEventFilter;
    var encodeEventTopics_js_1 = require_encodeEventTopics();
    var toHex_js_1 = require_toHex();
    var createFilterRequestScope_js_1 = require_createFilterRequestScope();
    async function createEventFilter(client, { address, args, event, events: events_, fromBlock, strict, toBlock } = {}) {
      const events = events_ ?? (event ? [event] : void 0);
      const getRequest = (0, createFilterRequestScope_js_1.createFilterRequestScope)(client, {
        method: "eth_newFilter"
      });
      let topics = [];
      if (events) {
        const encoded = events.flatMap((event2) => (0, encodeEventTopics_js_1.encodeEventTopics)({
          abi: [event2],
          eventName: event2.name,
          args
        }));
        topics = [encoded];
        if (event)
          topics = topics[0];
      }
      const id = await client.request({
        method: "eth_newFilter",
        params: [
          {
            address,
            fromBlock: typeof fromBlock === "bigint" ? (0, toHex_js_1.numberToHex)(fromBlock) : fromBlock,
            toBlock: typeof toBlock === "bigint" ? (0, toHex_js_1.numberToHex)(toBlock) : toBlock,
            ...topics.length ? { topics } : {}
          }
        ]
      });
      return {
        abi: events,
        args,
        eventName: event ? event.name : void 0,
        fromBlock,
        id,
        request: getRequest(id),
        strict: Boolean(strict),
        toBlock,
        type: "event"
      };
    }
  }
});

// node_modules/viem/_cjs/actions/public/createPendingTransactionFilter.js
var require_createPendingTransactionFilter = __commonJS({
  "node_modules/viem/_cjs/actions/public/createPendingTransactionFilter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createPendingTransactionFilter = createPendingTransactionFilter;
    var createFilterRequestScope_js_1 = require_createFilterRequestScope();
    async function createPendingTransactionFilter(client) {
      const getRequest = (0, createFilterRequestScope_js_1.createFilterRequestScope)(client, {
        method: "eth_newPendingTransactionFilter"
      });
      const id = await client.request({
        method: "eth_newPendingTransactionFilter"
      });
      return { id, request: getRequest(id), type: "transaction" };
    }
  }
});

// node_modules/viem/_cjs/actions/public/getBlobBaseFee.js
var require_getBlobBaseFee = __commonJS({
  "node_modules/viem/_cjs/actions/public/getBlobBaseFee.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBlobBaseFee = getBlobBaseFee;
    async function getBlobBaseFee(client) {
      const baseFee = await client.request({
        method: "eth_blobBaseFee"
      });
      return BigInt(baseFee);
    }
  }
});

// node_modules/viem/_cjs/actions/public/getBlockTransactionCount.js
var require_getBlockTransactionCount = __commonJS({
  "node_modules/viem/_cjs/actions/public/getBlockTransactionCount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBlockTransactionCount = getBlockTransactionCount;
    var fromHex_js_1 = require_fromHex();
    var toHex_js_1 = require_toHex();
    async function getBlockTransactionCount(client, { blockHash, blockNumber, blockTag = "latest" } = {}) {
      const blockNumberHex = blockNumber !== void 0 ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      let count;
      if (blockHash) {
        count = await client.request({
          method: "eth_getBlockTransactionCountByHash",
          params: [blockHash]
        }, { dedupe: true });
      } else {
        count = await client.request({
          method: "eth_getBlockTransactionCountByNumber",
          params: [blockNumberHex || blockTag]
        }, { dedupe: Boolean(blockNumberHex) });
      }
      return (0, fromHex_js_1.hexToNumber)(count);
    }
  }
});

// node_modules/viem/_cjs/actions/public/getCode.js
var require_getCode = __commonJS({
  "node_modules/viem/_cjs/actions/public/getCode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCode = getCode;
    var toHex_js_1 = require_toHex();
    async function getCode(client, { address, blockNumber, blockTag = "latest" }) {
      const blockNumberHex = blockNumber !== void 0 ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      const hex = await client.request({
        method: "eth_getCode",
        params: [address, blockNumberHex || blockTag]
      }, { dedupe: Boolean(blockNumberHex) });
      if (hex === "0x")
        return void 0;
      return hex;
    }
  }
});

// node_modules/viem/_cjs/errors/eip712.js
var require_eip712 = __commonJS({
  "node_modules/viem/_cjs/errors/eip712.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Eip712DomainNotFoundError = void 0;
    var base_js_1 = require_base();
    var Eip712DomainNotFoundError = class extends base_js_1.BaseError {
      constructor({ address }) {
        super(`No EIP-712 domain found on contract "${address}".`, {
          metaMessages: [
            "Ensure that:",
            `- The contract is deployed at the address "${address}".`,
            "- `eip712Domain()` function exists on the contract.",
            "- `eip712Domain()` function matches signature to ERC-5267 specification."
          ],
          name: "Eip712DomainNotFoundError"
        });
      }
    };
    exports2.Eip712DomainNotFoundError = Eip712DomainNotFoundError;
  }
});

// node_modules/viem/_cjs/actions/public/getEip712Domain.js
var require_getEip712Domain2 = __commonJS({
  "node_modules/viem/_cjs/actions/public/getEip712Domain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEip712Domain = getEip712Domain;
    var eip712_js_1 = require_eip712();
    var getAction_js_1 = require_getAction();
    var readContract_js_1 = require_readContract();
    async function getEip712Domain(client, parameters) {
      const { address, factory, factoryData } = parameters;
      try {
        const [fields, name, version, chainId, verifyingContract, salt, extensions] = await (0, getAction_js_1.getAction)(client, readContract_js_1.readContract, "readContract")({
          abi,
          address,
          functionName: "eip712Domain",
          factory,
          factoryData
        });
        return {
          domain: {
            name,
            version,
            chainId: Number(chainId),
            verifyingContract,
            salt
          },
          extensions,
          fields
        };
      } catch (e) {
        const error = e;
        if (error.name === "ContractFunctionExecutionError" && error.cause.name === "ContractFunctionZeroDataError") {
          throw new eip712_js_1.Eip712DomainNotFoundError({ address });
        }
        throw error;
      }
    }
    var abi = [
      {
        inputs: [],
        name: "eip712Domain",
        outputs: [
          { name: "fields", type: "bytes1" },
          { name: "name", type: "string" },
          { name: "version", type: "string" },
          { name: "chainId", type: "uint256" },
          { name: "verifyingContract", type: "address" },
          { name: "salt", type: "bytes32" },
          { name: "extensions", type: "uint256[]" }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
  }
});

// node_modules/viem/_cjs/utils/formatters/feeHistory.js
var require_feeHistory = __commonJS({
  "node_modules/viem/_cjs/utils/formatters/feeHistory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatFeeHistory = formatFeeHistory;
    function formatFeeHistory(feeHistory) {
      return {
        baseFeePerGas: feeHistory.baseFeePerGas.map((value) => BigInt(value)),
        gasUsedRatio: feeHistory.gasUsedRatio,
        oldestBlock: BigInt(feeHistory.oldestBlock),
        reward: feeHistory.reward?.map((reward) => reward.map((value) => BigInt(value)))
      };
    }
  }
});

// node_modules/viem/_cjs/actions/public/getFeeHistory.js
var require_getFeeHistory = __commonJS({
  "node_modules/viem/_cjs/actions/public/getFeeHistory.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFeeHistory = getFeeHistory;
    var toHex_js_1 = require_toHex();
    var feeHistory_js_1 = require_feeHistory();
    async function getFeeHistory(client, { blockCount, blockNumber, blockTag = "latest", rewardPercentiles }) {
      const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      const feeHistory = await client.request({
        method: "eth_feeHistory",
        params: [
          (0, toHex_js_1.numberToHex)(blockCount),
          blockNumberHex || blockTag,
          rewardPercentiles
        ]
      }, { dedupe: Boolean(blockNumberHex) });
      return (0, feeHistory_js_1.formatFeeHistory)(feeHistory);
    }
  }
});

// node_modules/viem/_cjs/actions/public/getFilterLogs.js
var require_getFilterLogs = __commonJS({
  "node_modules/viem/_cjs/actions/public/getFilterLogs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFilterLogs = getFilterLogs;
    var parseEventLogs_js_1 = require_parseEventLogs();
    var log_js_1 = require_log();
    async function getFilterLogs(_client, { filter }) {
      const strict = filter.strict ?? false;
      const logs = await filter.request({
        method: "eth_getFilterLogs",
        params: [filter.id]
      });
      const formattedLogs = logs.map((log) => (0, log_js_1.formatLog)(log));
      if (!filter.abi)
        return formattedLogs;
      return (0, parseEventLogs_js_1.parseEventLogs)({
        abi: filter.abi,
        logs: formattedLogs,
        strict
      });
    }
  }
});

// node_modules/viem/_cjs/utils/regex.js
var require_regex2 = __commonJS({
  "node_modules/viem/_cjs/utils/regex.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.integerRegex = exports2.bytesRegex = exports2.arrayRegex = void 0;
    exports2.arrayRegex = /^(.*)\[([0-9]*)\]$/;
    exports2.bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
    exports2.integerRegex = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
  }
});

// node_modules/viem/_cjs/utils/rpc/socket.js
var require_socket = __commonJS({
  "node_modules/viem/_cjs/utils/rpc/socket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.socketClientCache = void 0;
    exports2.getSocketRpcClient = getSocketRpcClient;
    var request_js_1 = require_request();
    var createBatchScheduler_js_1 = require_createBatchScheduler();
    var withTimeout_js_1 = require_withTimeout();
    var id_js_1 = require_id();
    exports2.socketClientCache = /* @__PURE__ */ new Map();
    async function getSocketRpcClient(parameters) {
      const { getSocket, keepAlive = true, key = "socket", reconnect = true, url } = parameters;
      const { interval: keepAliveInterval = 3e4 } = typeof keepAlive === "object" ? keepAlive : {};
      const { attempts = 5, delay = 2e3 } = typeof reconnect === "object" ? reconnect : {};
      let socketClient = exports2.socketClientCache.get(`${key}:${url}`);
      if (socketClient)
        return socketClient;
      let reconnectCount = 0;
      const { schedule } = (0, createBatchScheduler_js_1.createBatchScheduler)({
        id: `${key}:${url}`,
        fn: async () => {
          const requests = /* @__PURE__ */ new Map();
          const subscriptions = /* @__PURE__ */ new Map();
          let error;
          let socket;
          let keepAliveTimer;
          async function setup() {
            const result = await getSocket({
              onClose() {
                for (const request of requests.values())
                  request.onError?.(new request_js_1.SocketClosedError({ url }));
                for (const subscription of subscriptions.values())
                  subscription.onError?.(new request_js_1.SocketClosedError({ url }));
                requests.clear();
                subscriptions.clear();
                if (reconnect && reconnectCount < attempts)
                  setTimeout(async () => {
                    reconnectCount++;
                    await setup().catch(console.error);
                  }, delay);
              },
              onError(error_) {
                error = error_;
                for (const request of requests.values())
                  request.onError?.(error);
                for (const subscription of subscriptions.values())
                  subscription.onError?.(error);
                requests.clear();
                subscriptions.clear();
                if (reconnect && reconnectCount < attempts)
                  setTimeout(async () => {
                    reconnectCount++;
                    await setup().catch(console.error);
                  }, delay);
              },
              onOpen() {
                error = void 0;
                reconnectCount = 0;
              },
              onResponse(data) {
                const isSubscription = data.method === "eth_subscription";
                const id = isSubscription ? data.params.subscription : data.id;
                const cache = isSubscription ? subscriptions : requests;
                const callback = cache.get(id);
                if (callback)
                  callback.onResponse(data);
                if (!isSubscription)
                  cache.delete(id);
              }
            });
            socket = result;
            if (keepAlive) {
              if (keepAliveTimer)
                clearInterval(keepAliveTimer);
              keepAliveTimer = setInterval(() => socket.ping?.(), keepAliveInterval);
            }
            return result;
          }
          await setup();
          error = void 0;
          socketClient = {
            close() {
              keepAliveTimer && clearInterval(keepAliveTimer);
              socket.close();
              exports2.socketClientCache.delete(`${key}:${url}`);
            },
            get socket() {
              return socket;
            },
            request({ body, onError, onResponse }) {
              if (error && onError)
                onError(error);
              const id = body.id ?? id_js_1.idCache.take();
              const callback = (response) => {
                if (typeof response.id === "number" && id !== response.id)
                  return;
                if (body.method === "eth_subscribe" && typeof response.result === "string")
                  subscriptions.set(response.result, {
                    onResponse: callback,
                    onError
                  });
                if (body.method === "eth_unsubscribe")
                  subscriptions.delete(body.params?.[0]);
                onResponse(response);
              };
              requests.set(id, { onResponse: callback, onError });
              try {
                socket.request({
                  body: {
                    jsonrpc: "2.0",
                    id,
                    ...body
                  }
                });
              } catch (error2) {
                onError?.(error2);
              }
            },
            requestAsync({ body, timeout = 1e4 }) {
              return (0, withTimeout_js_1.withTimeout)(() => new Promise((onResponse, onError) => this.request({
                body,
                onError,
                onResponse
              })), {
                errorInstance: new request_js_1.TimeoutError({ body, url }),
                timeout
              });
            },
            requests,
            subscriptions,
            url
          };
          exports2.socketClientCache.set(`${key}:${url}`, socketClient);
          return [socketClient];
        }
      });
      const [_, [socketClient_]] = await schedule();
      return socketClient_;
    }
  }
});

// node_modules/ws/lib/constants.js
var require_constants = __commonJS({
  "node_modules/ws/lib/constants.js"(exports2, module2) {
    "use strict";
    var BINARY_TYPES = ["nodebuffer", "arraybuffer", "fragments"];
    var hasBlob = typeof Blob !== "undefined";
    if (hasBlob) BINARY_TYPES.push("blob");
    module2.exports = {
      BINARY_TYPES,
      EMPTY_BUFFER: Buffer.alloc(0),
      GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
      hasBlob,
      kForOnEventAttribute: Symbol("kIsForOnEventAttribute"),
      kListener: Symbol("kListener"),
      kStatusCode: Symbol("status-code"),
      kWebSocket: Symbol("websocket"),
      NOOP: () => {
      }
    };
  }
});

// node_modules/ws/lib/buffer-util.js
var require_buffer_util = __commonJS({
  "node_modules/ws/lib/buffer-util.js"(exports2, module2) {
    "use strict";
    var { EMPTY_BUFFER } = require_constants();
    var FastBuffer = Buffer[Symbol.species];
    function concat(list, totalLength) {
      if (list.length === 0) return EMPTY_BUFFER;
      if (list.length === 1) return list[0];
      const target = Buffer.allocUnsafe(totalLength);
      let offset = 0;
      for (let i = 0; i < list.length; i++) {
        const buf = list[i];
        target.set(buf, offset);
        offset += buf.length;
      }
      if (offset < totalLength) {
        return new FastBuffer(target.buffer, target.byteOffset, offset);
      }
      return target;
    }
    function _mask(source, mask, output, offset, length) {
      for (let i = 0; i < length; i++) {
        output[offset + i] = source[i] ^ mask[i & 3];
      }
    }
    function _unmask(buffer, mask) {
      for (let i = 0; i < buffer.length; i++) {
        buffer[i] ^= mask[i & 3];
      }
    }
    function toArrayBuffer(buf) {
      if (buf.length === buf.buffer.byteLength) {
        return buf.buffer;
      }
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);
    }
    function toBuffer(data) {
      toBuffer.readOnly = true;
      if (Buffer.isBuffer(data)) return data;
      let buf;
      if (data instanceof ArrayBuffer) {
        buf = new FastBuffer(data);
      } else if (ArrayBuffer.isView(data)) {
        buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);
      } else {
        buf = Buffer.from(data);
        toBuffer.readOnly = false;
      }
      return buf;
    }
    module2.exports = {
      concat,
      mask: _mask,
      toArrayBuffer,
      toBuffer,
      unmask: _unmask
    };
    if (!process.env.WS_NO_BUFFER_UTIL) {
      try {
        const bufferUtil = __require("bufferutil");
        module2.exports.mask = function(source, mask, output, offset, length) {
          if (length < 48) _mask(source, mask, output, offset, length);
          else bufferUtil.mask(source, mask, output, offset, length);
        };
        module2.exports.unmask = function(buffer, mask) {
          if (buffer.length < 32) _unmask(buffer, mask);
          else bufferUtil.unmask(buffer, mask);
        };
      } catch (e) {
      }
    }
  }
});

// node_modules/ws/lib/limiter.js
var require_limiter = __commonJS({
  "node_modules/ws/lib/limiter.js"(exports2, module2) {
    "use strict";
    var kDone = Symbol("kDone");
    var kRun = Symbol("kRun");
    var Limiter = class {
      /**
       * Creates a new `Limiter`.
       *
       * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed
       *     to run concurrently
       */
      constructor(concurrency) {
        this[kDone] = () => {
          this.pending--;
          this[kRun]();
        };
        this.concurrency = concurrency || Infinity;
        this.jobs = [];
        this.pending = 0;
      }
      /**
       * Adds a job to the queue.
       *
       * @param {Function} job The job to run
       * @public
       */
      add(job) {
        this.jobs.push(job);
        this[kRun]();
      }
      /**
       * Removes a job from the queue and runs it if possible.
       *
       * @private
       */
      [kRun]() {
        if (this.pending === this.concurrency) return;
        if (this.jobs.length) {
          const job = this.jobs.shift();
          this.pending++;
          job(this[kDone]);
        }
      }
    };
    module2.exports = Limiter;
  }
});

// node_modules/ws/lib/permessage-deflate.js
var require_permessage_deflate = __commonJS({
  "node_modules/ws/lib/permessage-deflate.js"(exports2, module2) {
    "use strict";
    var zlib = __require("zlib");
    var bufferUtil = require_buffer_util();
    var Limiter = require_limiter();
    var { kStatusCode } = require_constants();
    var FastBuffer = Buffer[Symbol.species];
    var TRAILER = Buffer.from([0, 0, 255, 255]);
    var kPerMessageDeflate = Symbol("permessage-deflate");
    var kTotalLength = Symbol("total-length");
    var kCallback = Symbol("callback");
    var kBuffers = Symbol("buffers");
    var kError = Symbol("error");
    var zlibLimiter;
    var PerMessageDeflate = class {
      /**
       * Creates a PerMessageDeflate instance.
       *
       * @param {Object} [options] Configuration options
       * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support
       *     for, or request, a custom client window size
       * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/
       *     acknowledge disabling of client context takeover
       * @param {Number} [options.concurrencyLimit=10] The number of concurrent
       *     calls to zlib
       * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the
       *     use of a custom server window size
       * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept
       *     disabling of server context takeover
       * @param {Number} [options.threshold=1024] Size (in bytes) below which
       *     messages should not be compressed if context takeover is disabled
       * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on
       *     deflate
       * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on
       *     inflate
       * @param {Boolean} [isServer=false] Create the instance in either server or
       *     client mode
       * @param {Number} [maxPayload=0] The maximum allowed message length
       */
      constructor(options2, isServer, maxPayload) {
        this._maxPayload = maxPayload | 0;
        this._options = options2 || {};
        this._threshold = this._options.threshold !== void 0 ? this._options.threshold : 1024;
        this._isServer = !!isServer;
        this._deflate = null;
        this._inflate = null;
        this.params = null;
        if (!zlibLimiter) {
          const concurrency = this._options.concurrencyLimit !== void 0 ? this._options.concurrencyLimit : 10;
          zlibLimiter = new Limiter(concurrency);
        }
      }
      /**
       * @type {String}
       */
      static get extensionName() {
        return "permessage-deflate";
      }
      /**
       * Create an extension negotiation offer.
       *
       * @return {Object} Extension parameters
       * @public
       */
      offer() {
        const params = {};
        if (this._options.serverNoContextTakeover) {
          params.server_no_context_takeover = true;
        }
        if (this._options.clientNoContextTakeover) {
          params.client_no_context_takeover = true;
        }
        if (this._options.serverMaxWindowBits) {
          params.server_max_window_bits = this._options.serverMaxWindowBits;
        }
        if (this._options.clientMaxWindowBits) {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        } else if (this._options.clientMaxWindowBits == null) {
          params.client_max_window_bits = true;
        }
        return params;
      }
      /**
       * Accept an extension negotiation offer/response.
       *
       * @param {Array} configurations The extension negotiation offers/reponse
       * @return {Object} Accepted configuration
       * @public
       */
      accept(configurations) {
        configurations = this.normalizeParams(configurations);
        this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);
        return this.params;
      }
      /**
       * Releases all resources used by the extension.
       *
       * @public
       */
      cleanup() {
        if (this._inflate) {
          this._inflate.close();
          this._inflate = null;
        }
        if (this._deflate) {
          const callback = this._deflate[kCallback];
          this._deflate.close();
          this._deflate = null;
          if (callback) {
            callback(
              new Error(
                "The deflate stream was closed while data was being processed"
              )
            );
          }
        }
      }
      /**
       *  Accept an extension negotiation offer.
       *
       * @param {Array} offers The extension negotiation offers
       * @return {Object} Accepted configuration
       * @private
       */
      acceptAsServer(offers) {
        const opts = this._options;
        const accepted = offers.find((params) => {
          if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === "number" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === "number" && !params.client_max_window_bits) {
            return false;
          }
          return true;
        });
        if (!accepted) {
          throw new Error("None of the extension offers can be accepted");
        }
        if (opts.serverNoContextTakeover) {
          accepted.server_no_context_takeover = true;
        }
        if (opts.clientNoContextTakeover) {
          accepted.client_no_context_takeover = true;
        }
        if (typeof opts.serverMaxWindowBits === "number") {
          accepted.server_max_window_bits = opts.serverMaxWindowBits;
        }
        if (typeof opts.clientMaxWindowBits === "number") {
          accepted.client_max_window_bits = opts.clientMaxWindowBits;
        } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
          delete accepted.client_max_window_bits;
        }
        return accepted;
      }
      /**
       * Accept the extension negotiation response.
       *
       * @param {Array} response The extension negotiation response
       * @return {Object} Accepted configuration
       * @private
       */
      acceptAsClient(response) {
        const params = response[0];
        if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
          throw new Error('Unexpected parameter "client_no_context_takeover"');
        }
        if (!params.client_max_window_bits) {
          if (typeof this._options.clientMaxWindowBits === "number") {
            params.client_max_window_bits = this._options.clientMaxWindowBits;
          }
        } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === "number" && params.client_max_window_bits > this._options.clientMaxWindowBits) {
          throw new Error(
            'Unexpected or invalid parameter "client_max_window_bits"'
          );
        }
        return params;
      }
      /**
       * Normalize parameters.
       *
       * @param {Array} configurations The extension negotiation offers/reponse
       * @return {Array} The offers/response with normalized parameters
       * @private
       */
      normalizeParams(configurations) {
        configurations.forEach((params) => {
          Object.keys(params).forEach((key) => {
            let value = params[key];
            if (value.length > 1) {
              throw new Error(`Parameter "${key}" must have only a single value`);
            }
            value = value[0];
            if (key === "client_max_window_bits") {
              if (value !== true) {
                const num = +value;
                if (!Number.isInteger(num) || num < 8 || num > 15) {
                  throw new TypeError(
                    `Invalid value for parameter "${key}": ${value}`
                  );
                }
                value = num;
              } else if (!this._isServer) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value}`
                );
              }
            } else if (key === "server_max_window_bits") {
              const num = +value;
              if (!Number.isInteger(num) || num < 8 || num > 15) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value}`
                );
              }
              value = num;
            } else if (key === "client_no_context_takeover" || key === "server_no_context_takeover") {
              if (value !== true) {
                throw new TypeError(
                  `Invalid value for parameter "${key}": ${value}`
                );
              }
            } else {
              throw new Error(`Unknown parameter "${key}"`);
            }
            params[key] = value;
          });
        });
        return configurations;
      }
      /**
       * Decompress data. Concurrency limited.
       *
       * @param {Buffer} data Compressed data
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @public
       */
      decompress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._decompress(data, fin, (err, result) => {
            done();
            callback(err, result);
          });
        });
      }
      /**
       * Compress data. Concurrency limited.
       *
       * @param {(Buffer|String)} data Data to compress
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @public
       */
      compress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._compress(data, fin, (err, result) => {
            done();
            callback(err, result);
          });
        });
      }
      /**
       * Decompress data.
       *
       * @param {Buffer} data Compressed data
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @private
       */
      _decompress(data, fin, callback) {
        const endpoint = this._isServer ? "client" : "server";
        if (!this._inflate) {
          const key = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
          this._inflate = zlib.createInflateRaw({
            ...this._options.zlibInflateOptions,
            windowBits
          });
          this._inflate[kPerMessageDeflate] = this;
          this._inflate[kTotalLength] = 0;
          this._inflate[kBuffers] = [];
          this._inflate.on("error", inflateOnError);
          this._inflate.on("data", inflateOnData);
        }
        this._inflate[kCallback] = callback;
        this._inflate.write(data);
        if (fin) this._inflate.write(TRAILER);
        this._inflate.flush(() => {
          const err = this._inflate[kError];
          if (err) {
            this._inflate.close();
            this._inflate = null;
            callback(err);
            return;
          }
          const data2 = bufferUtil.concat(
            this._inflate[kBuffers],
            this._inflate[kTotalLength]
          );
          if (this._inflate._readableState.endEmitted) {
            this._inflate.close();
            this._inflate = null;
          } else {
            this._inflate[kTotalLength] = 0;
            this._inflate[kBuffers] = [];
            if (fin && this.params[`${endpoint}_no_context_takeover`]) {
              this._inflate.reset();
            }
          }
          callback(null, data2);
        });
      }
      /**
       * Compress data.
       *
       * @param {(Buffer|String)} data Data to compress
       * @param {Boolean} fin Specifies whether or not this is the last fragment
       * @param {Function} callback Callback
       * @private
       */
      _compress(data, fin, callback) {
        const endpoint = this._isServer ? "server" : "client";
        if (!this._deflate) {
          const key = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
          this._deflate = zlib.createDeflateRaw({
            ...this._options.zlibDeflateOptions,
            windowBits
          });
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          this._deflate.on("data", deflateOnData);
        }
        this._deflate[kCallback] = callback;
        this._deflate.write(data);
        this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
          if (!this._deflate) {
            return;
          }
          let data2 = bufferUtil.concat(
            this._deflate[kBuffers],
            this._deflate[kTotalLength]
          );
          if (fin) {
            data2 = new FastBuffer(data2.buffer, data2.byteOffset, data2.length - 4);
          }
          this._deflate[kCallback] = null;
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          if (fin && this.params[`${endpoint}_no_context_takeover`]) {
            this._deflate.reset();
          }
          callback(null, data2);
        });
      }
    };
    module2.exports = PerMessageDeflate;
    function deflateOnData(chunk) {
      this[kBuffers].push(chunk);
      this[kTotalLength] += chunk.length;
    }
    function inflateOnData(chunk) {
      this[kTotalLength] += chunk.length;
      if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {
        this[kBuffers].push(chunk);
        return;
      }
      this[kError] = new RangeError("Max payload size exceeded");
      this[kError].code = "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH";
      this[kError][kStatusCode] = 1009;
      this.removeListener("data", inflateOnData);
      this.reset();
    }
    function inflateOnError(err) {
      this[kPerMessageDeflate]._inflate = null;
      err[kStatusCode] = 1007;
      this[kCallback](err);
    }
  }
});

// node_modules/ws/lib/validation.js
var require_validation = __commonJS({
  "node_modules/ws/lib/validation.js"(exports2, module2) {
    "use strict";
    var { isUtf8 } = __require("buffer");
    var { hasBlob } = require_constants();
    var tokenChars = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      // 0 - 15
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      // 16 - 31
      0,
      1,
      0,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      1,
      1,
      0,
      1,
      1,
      0,
      // 32 - 47
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      // 48 - 63
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      // 64 - 79
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      1,
      1,
      // 80 - 95
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      // 96 - 111
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      1,
      0,
      1,
      0
      // 112 - 127
    ];
    function isValidStatusCode(code) {
      return code >= 1e3 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3e3 && code <= 4999;
    }
    function _isValidUTF8(buf) {
      const len = buf.length;
      let i = 0;
      while (i < len) {
        if ((buf[i] & 128) === 0) {
          i++;
        } else if ((buf[i] & 224) === 192) {
          if (i + 1 === len || (buf[i + 1] & 192) !== 128 || (buf[i] & 254) === 192) {
            return false;
          }
          i += 2;
        } else if ((buf[i] & 240) === 224) {
          if (i + 2 >= len || (buf[i + 1] & 192) !== 128 || (buf[i + 2] & 192) !== 128 || buf[i] === 224 && (buf[i + 1] & 224) === 128 || // Overlong
          buf[i] === 237 && (buf[i + 1] & 224) === 160) {
            return false;
          }
          i += 3;
        } else if ((buf[i] & 248) === 240) {
          if (i + 3 >= len || (buf[i + 1] & 192) !== 128 || (buf[i + 2] & 192) !== 128 || (buf[i + 3] & 192) !== 128 || buf[i] === 240 && (buf[i + 1] & 240) === 128 || // Overlong
          buf[i] === 244 && buf[i + 1] > 143 || buf[i] > 244) {
            return false;
          }
          i += 4;
        } else {
          return false;
        }
      }
      return true;
    }
    function isBlob(value) {
      return hasBlob && typeof value === "object" && typeof value.arrayBuffer === "function" && typeof value.type === "string" && typeof value.stream === "function" && (value[Symbol.toStringTag] === "Blob" || value[Symbol.toStringTag] === "File");
    }
    module2.exports = {
      isBlob,
      isValidStatusCode,
      isValidUTF8: _isValidUTF8,
      tokenChars
    };
    if (isUtf8) {
      module2.exports.isValidUTF8 = function(buf) {
        return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);
      };
    } else if (!process.env.WS_NO_UTF_8_VALIDATE) {
      try {
        const isValidUTF8 = __require("utf-8-validate");
        module2.exports.isValidUTF8 = function(buf) {
          return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);
        };
      } catch (e) {
      }
    }
  }
});

// node_modules/ws/lib/receiver.js
var require_receiver = __commonJS({
  "node_modules/ws/lib/receiver.js"(exports2, module2) {
    "use strict";
    var { Writable } = __require("stream");
    var PerMessageDeflate = require_permessage_deflate();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      kStatusCode,
      kWebSocket
    } = require_constants();
    var { concat, toArrayBuffer, unmask } = require_buffer_util();
    var { isValidStatusCode, isValidUTF8 } = require_validation();
    var FastBuffer = Buffer[Symbol.species];
    var GET_INFO = 0;
    var GET_PAYLOAD_LENGTH_16 = 1;
    var GET_PAYLOAD_LENGTH_64 = 2;
    var GET_MASK = 3;
    var GET_DATA = 4;
    var INFLATING = 5;
    var DEFER_EVENT = 6;
    var Receiver = class extends Writable {
      /**
       * Creates a Receiver instance.
       *
       * @param {Object} [options] Options object
       * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether
       *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
       *     multiple times in the same tick
       * @param {String} [options.binaryType=nodebuffer] The type for binary data
       * @param {Object} [options.extensions] An object containing the negotiated
       *     extensions
       * @param {Boolean} [options.isServer=false] Specifies whether to operate in
       *     client or server mode
       * @param {Number} [options.maxPayload=0] The maximum allowed message length
       * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
       *     not to skip UTF-8 validation for text and close messages
       */
      constructor(options2 = {}) {
        super();
        this._allowSynchronousEvents = options2.allowSynchronousEvents !== void 0 ? options2.allowSynchronousEvents : true;
        this._binaryType = options2.binaryType || BINARY_TYPES[0];
        this._extensions = options2.extensions || {};
        this._isServer = !!options2.isServer;
        this._maxPayload = options2.maxPayload | 0;
        this._skipUTF8Validation = !!options2.skipUTF8Validation;
        this[kWebSocket] = void 0;
        this._bufferedBytes = 0;
        this._buffers = [];
        this._compressed = false;
        this._payloadLength = 0;
        this._mask = void 0;
        this._fragmented = 0;
        this._masked = false;
        this._fin = false;
        this._opcode = 0;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragments = [];
        this._errored = false;
        this._loop = false;
        this._state = GET_INFO;
      }
      /**
       * Implements `Writable.prototype._write()`.
       *
       * @param {Buffer} chunk The chunk of data to write
       * @param {String} encoding The character encoding of `chunk`
       * @param {Function} cb Callback
       * @private
       */
      _write(chunk, encoding, cb) {
        if (this._opcode === 8 && this._state == GET_INFO) return cb();
        this._bufferedBytes += chunk.length;
        this._buffers.push(chunk);
        this.startLoop(cb);
      }
      /**
       * Consumes `n` bytes from the buffered data.
       *
       * @param {Number} n The number of bytes to consume
       * @return {Buffer} The consumed bytes
       * @private
       */
      consume(n) {
        this._bufferedBytes -= n;
        if (n === this._buffers[0].length) return this._buffers.shift();
        if (n < this._buffers[0].length) {
          const buf = this._buffers[0];
          this._buffers[0] = new FastBuffer(
            buf.buffer,
            buf.byteOffset + n,
            buf.length - n
          );
          return new FastBuffer(buf.buffer, buf.byteOffset, n);
        }
        const dst = Buffer.allocUnsafe(n);
        do {
          const buf = this._buffers[0];
          const offset = dst.length - n;
          if (n >= buf.length) {
            dst.set(this._buffers.shift(), offset);
          } else {
            dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
            this._buffers[0] = new FastBuffer(
              buf.buffer,
              buf.byteOffset + n,
              buf.length - n
            );
          }
          n -= buf.length;
        } while (n > 0);
        return dst;
      }
      /**
       * Starts the parsing loop.
       *
       * @param {Function} cb Callback
       * @private
       */
      startLoop(cb) {
        this._loop = true;
        do {
          switch (this._state) {
            case GET_INFO:
              this.getInfo(cb);
              break;
            case GET_PAYLOAD_LENGTH_16:
              this.getPayloadLength16(cb);
              break;
            case GET_PAYLOAD_LENGTH_64:
              this.getPayloadLength64(cb);
              break;
            case GET_MASK:
              this.getMask();
              break;
            case GET_DATA:
              this.getData(cb);
              break;
            case INFLATING:
            case DEFER_EVENT:
              this._loop = false;
              return;
          }
        } while (this._loop);
        if (!this._errored) cb();
      }
      /**
       * Reads the first two bytes of a frame.
       *
       * @param {Function} cb Callback
       * @private
       */
      getInfo(cb) {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        const buf = this.consume(2);
        if ((buf[0] & 48) !== 0) {
          const error = this.createError(
            RangeError,
            "RSV2 and RSV3 must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_RSV_2_3"
          );
          cb(error);
          return;
        }
        const compressed = (buf[0] & 64) === 64;
        if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
          const error = this.createError(
            RangeError,
            "RSV1 must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_RSV_1"
          );
          cb(error);
          return;
        }
        this._fin = (buf[0] & 128) === 128;
        this._opcode = buf[0] & 15;
        this._payloadLength = buf[1] & 127;
        if (this._opcode === 0) {
          if (compressed) {
            const error = this.createError(
              RangeError,
              "RSV1 must be clear",
              true,
              1002,
              "WS_ERR_UNEXPECTED_RSV_1"
            );
            cb(error);
            return;
          }
          if (!this._fragmented) {
            const error = this.createError(
              RangeError,
              "invalid opcode 0",
              true,
              1002,
              "WS_ERR_INVALID_OPCODE"
            );
            cb(error);
            return;
          }
          this._opcode = this._fragmented;
        } else if (this._opcode === 1 || this._opcode === 2) {
          if (this._fragmented) {
            const error = this.createError(
              RangeError,
              `invalid opcode ${this._opcode}`,
              true,
              1002,
              "WS_ERR_INVALID_OPCODE"
            );
            cb(error);
            return;
          }
          this._compressed = compressed;
        } else if (this._opcode > 7 && this._opcode < 11) {
          if (!this._fin) {
            const error = this.createError(
              RangeError,
              "FIN must be set",
              true,
              1002,
              "WS_ERR_EXPECTED_FIN"
            );
            cb(error);
            return;
          }
          if (compressed) {
            const error = this.createError(
              RangeError,
              "RSV1 must be clear",
              true,
              1002,
              "WS_ERR_UNEXPECTED_RSV_1"
            );
            cb(error);
            return;
          }
          if (this._payloadLength > 125 || this._opcode === 8 && this._payloadLength === 1) {
            const error = this.createError(
              RangeError,
              `invalid payload length ${this._payloadLength}`,
              true,
              1002,
              "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH"
            );
            cb(error);
            return;
          }
        } else {
          const error = this.createError(
            RangeError,
            `invalid opcode ${this._opcode}`,
            true,
            1002,
            "WS_ERR_INVALID_OPCODE"
          );
          cb(error);
          return;
        }
        if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
        this._masked = (buf[1] & 128) === 128;
        if (this._isServer) {
          if (!this._masked) {
            const error = this.createError(
              RangeError,
              "MASK must be set",
              true,
              1002,
              "WS_ERR_EXPECTED_MASK"
            );
            cb(error);
            return;
          }
        } else if (this._masked) {
          const error = this.createError(
            RangeError,
            "MASK must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_MASK"
          );
          cb(error);
          return;
        }
        if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
        else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
        else this.haveLength(cb);
      }
      /**
       * Gets extended payload length (7+16).
       *
       * @param {Function} cb Callback
       * @private
       */
      getPayloadLength16(cb) {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        this._payloadLength = this.consume(2).readUInt16BE(0);
        this.haveLength(cb);
      }
      /**
       * Gets extended payload length (7+64).
       *
       * @param {Function} cb Callback
       * @private
       */
      getPayloadLength64(cb) {
        if (this._bufferedBytes < 8) {
          this._loop = false;
          return;
        }
        const buf = this.consume(8);
        const num = buf.readUInt32BE(0);
        if (num > Math.pow(2, 53 - 32) - 1) {
          const error = this.createError(
            RangeError,
            "Unsupported WebSocket frame: payload length > 2^53 - 1",
            false,
            1009,
            "WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH"
          );
          cb(error);
          return;
        }
        this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
        this.haveLength(cb);
      }
      /**
       * Payload length has been read.
       *
       * @param {Function} cb Callback
       * @private
       */
      haveLength(cb) {
        if (this._payloadLength && this._opcode < 8) {
          this._totalPayloadLength += this._payloadLength;
          if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
            const error = this.createError(
              RangeError,
              "Max payload size exceeded",
              false,
              1009,
              "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"
            );
            cb(error);
            return;
          }
        }
        if (this._masked) this._state = GET_MASK;
        else this._state = GET_DATA;
      }
      /**
       * Reads mask bytes.
       *
       * @private
       */
      getMask() {
        if (this._bufferedBytes < 4) {
          this._loop = false;
          return;
        }
        this._mask = this.consume(4);
        this._state = GET_DATA;
      }
      /**
       * Reads data bytes.
       *
       * @param {Function} cb Callback
       * @private
       */
      getData(cb) {
        let data = EMPTY_BUFFER;
        if (this._payloadLength) {
          if (this._bufferedBytes < this._payloadLength) {
            this._loop = false;
            return;
          }
          data = this.consume(this._payloadLength);
          if (this._masked && (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0) {
            unmask(data, this._mask);
          }
        }
        if (this._opcode > 7) {
          this.controlMessage(data, cb);
          return;
        }
        if (this._compressed) {
          this._state = INFLATING;
          this.decompress(data, cb);
          return;
        }
        if (data.length) {
          this._messageLength = this._totalPayloadLength;
          this._fragments.push(data);
        }
        this.dataMessage(cb);
      }
      /**
       * Decompresses data.
       *
       * @param {Buffer} data Compressed data
       * @param {Function} cb Callback
       * @private
       */
      decompress(data, cb) {
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        perMessageDeflate.decompress(data, this._fin, (err, buf) => {
          if (err) return cb(err);
          if (buf.length) {
            this._messageLength += buf.length;
            if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
              const error = this.createError(
                RangeError,
                "Max payload size exceeded",
                false,
                1009,
                "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"
              );
              cb(error);
              return;
            }
            this._fragments.push(buf);
          }
          this.dataMessage(cb);
          if (this._state === GET_INFO) this.startLoop(cb);
        });
      }
      /**
       * Handles a data message.
       *
       * @param {Function} cb Callback
       * @private
       */
      dataMessage(cb) {
        if (!this._fin) {
          this._state = GET_INFO;
          return;
        }
        const messageLength = this._messageLength;
        const fragments = this._fragments;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragmented = 0;
        this._fragments = [];
        if (this._opcode === 2) {
          let data;
          if (this._binaryType === "nodebuffer") {
            data = concat(fragments, messageLength);
          } else if (this._binaryType === "arraybuffer") {
            data = toArrayBuffer(concat(fragments, messageLength));
          } else if (this._binaryType === "blob") {
            data = new Blob(fragments);
          } else {
            data = fragments;
          }
          if (this._allowSynchronousEvents) {
            this.emit("message", data, true);
            this._state = GET_INFO;
          } else {
            this._state = DEFER_EVENT;
            setImmediate(() => {
              this.emit("message", data, true);
              this._state = GET_INFO;
              this.startLoop(cb);
            });
          }
        } else {
          const buf = concat(fragments, messageLength);
          if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
            const error = this.createError(
              Error,
              "invalid UTF-8 sequence",
              true,
              1007,
              "WS_ERR_INVALID_UTF8"
            );
            cb(error);
            return;
          }
          if (this._state === INFLATING || this._allowSynchronousEvents) {
            this.emit("message", buf, false);
            this._state = GET_INFO;
          } else {
            this._state = DEFER_EVENT;
            setImmediate(() => {
              this.emit("message", buf, false);
              this._state = GET_INFO;
              this.startLoop(cb);
            });
          }
        }
      }
      /**
       * Handles a control message.
       *
       * @param {Buffer} data Data to handle
       * @return {(Error|RangeError|undefined)} A possible error
       * @private
       */
      controlMessage(data, cb) {
        if (this._opcode === 8) {
          if (data.length === 0) {
            this._loop = false;
            this.emit("conclude", 1005, EMPTY_BUFFER);
            this.end();
          } else {
            const code = data.readUInt16BE(0);
            if (!isValidStatusCode(code)) {
              const error = this.createError(
                RangeError,
                `invalid status code ${code}`,
                true,
                1002,
                "WS_ERR_INVALID_CLOSE_CODE"
              );
              cb(error);
              return;
            }
            const buf = new FastBuffer(
              data.buffer,
              data.byteOffset + 2,
              data.length - 2
            );
            if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
              const error = this.createError(
                Error,
                "invalid UTF-8 sequence",
                true,
                1007,
                "WS_ERR_INVALID_UTF8"
              );
              cb(error);
              return;
            }
            this._loop = false;
            this.emit("conclude", code, buf);
            this.end();
          }
          this._state = GET_INFO;
          return;
        }
        if (this._allowSynchronousEvents) {
          this.emit(this._opcode === 9 ? "ping" : "pong", data);
          this._state = GET_INFO;
        } else {
          this._state = DEFER_EVENT;
          setImmediate(() => {
            this.emit(this._opcode === 9 ? "ping" : "pong", data);
            this._state = GET_INFO;
            this.startLoop(cb);
          });
        }
      }
      /**
       * Builds an error object.
       *
       * @param {function(new:Error|RangeError)} ErrorCtor The error constructor
       * @param {String} message The error message
       * @param {Boolean} prefix Specifies whether or not to add a default prefix to
       *     `message`
       * @param {Number} statusCode The status code
       * @param {String} errorCode The exposed error code
       * @return {(Error|RangeError)} The error
       * @private
       */
      createError(ErrorCtor, message, prefix, statusCode, errorCode) {
        this._loop = false;
        this._errored = true;
        const err = new ErrorCtor(
          prefix ? `Invalid WebSocket frame: ${message}` : message
        );
        Error.captureStackTrace(err, this.createError);
        err.code = errorCode;
        err[kStatusCode] = statusCode;
        return err;
      }
    };
    module2.exports = Receiver;
  }
});

// node_modules/ws/lib/sender.js
var require_sender = __commonJS({
  "node_modules/ws/lib/sender.js"(exports2, module2) {
    "use strict";
    var { Duplex } = __require("stream");
    var { randomFillSync } = __require("crypto");
    var PerMessageDeflate = require_permessage_deflate();
    var { EMPTY_BUFFER, kWebSocket, NOOP } = require_constants();
    var { isBlob, isValidStatusCode } = require_validation();
    var { mask: applyMask, toBuffer } = require_buffer_util();
    var kByteLength = Symbol("kByteLength");
    var maskBuffer = Buffer.alloc(4);
    var RANDOM_POOL_SIZE = 8 * 1024;
    var randomPool;
    var randomPoolPointer = RANDOM_POOL_SIZE;
    var DEFAULT = 0;
    var DEFLATING = 1;
    var GET_BLOB_DATA = 2;
    var Sender = class _Sender {
      /**
       * Creates a Sender instance.
       *
       * @param {Duplex} socket The connection socket
       * @param {Object} [extensions] An object containing the negotiated extensions
       * @param {Function} [generateMask] The function used to generate the masking
       *     key
       */
      constructor(socket, extensions, generateMask) {
        this._extensions = extensions || {};
        if (generateMask) {
          this._generateMask = generateMask;
          this._maskBuffer = Buffer.alloc(4);
        }
        this._socket = socket;
        this._firstFragment = true;
        this._compress = false;
        this._bufferedBytes = 0;
        this._queue = [];
        this._state = DEFAULT;
        this.onerror = NOOP;
        this[kWebSocket] = void 0;
      }
      /**
       * Frames a piece of data according to the HyBi WebSocket protocol.
       *
       * @param {(Buffer|String)} data The data to frame
       * @param {Object} options Options object
       * @param {Boolean} [options.fin=false] Specifies whether or not to set the
       *     FIN bit
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
       *     key
       * @param {Number} options.opcode The opcode
       * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
       *     modified
       * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
       *     RSV1 bit
       * @return {(Buffer|String)[]} The framed data
       * @public
       */
      static frame(data, options2) {
        let mask;
        let merge = false;
        let offset = 2;
        let skipMasking = false;
        if (options2.mask) {
          mask = options2.maskBuffer || maskBuffer;
          if (options2.generateMask) {
            options2.generateMask(mask);
          } else {
            if (randomPoolPointer === RANDOM_POOL_SIZE) {
              if (randomPool === void 0) {
                randomPool = Buffer.alloc(RANDOM_POOL_SIZE);
              }
              randomFillSync(randomPool, 0, RANDOM_POOL_SIZE);
              randomPoolPointer = 0;
            }
            mask[0] = randomPool[randomPoolPointer++];
            mask[1] = randomPool[randomPoolPointer++];
            mask[2] = randomPool[randomPoolPointer++];
            mask[3] = randomPool[randomPoolPointer++];
          }
          skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;
          offset = 6;
        }
        let dataLength;
        if (typeof data === "string") {
          if ((!options2.mask || skipMasking) && options2[kByteLength] !== void 0) {
            dataLength = options2[kByteLength];
          } else {
            data = Buffer.from(data);
            dataLength = data.length;
          }
        } else {
          dataLength = data.length;
          merge = options2.mask && options2.readOnly && !skipMasking;
        }
        let payloadLength = dataLength;
        if (dataLength >= 65536) {
          offset += 8;
          payloadLength = 127;
        } else if (dataLength > 125) {
          offset += 2;
          payloadLength = 126;
        }
        const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);
        target[0] = options2.fin ? options2.opcode | 128 : options2.opcode;
        if (options2.rsv1) target[0] |= 64;
        target[1] = payloadLength;
        if (payloadLength === 126) {
          target.writeUInt16BE(dataLength, 2);
        } else if (payloadLength === 127) {
          target[2] = target[3] = 0;
          target.writeUIntBE(dataLength, 4, 6);
        }
        if (!options2.mask) return [target, data];
        target[1] |= 128;
        target[offset - 4] = mask[0];
        target[offset - 3] = mask[1];
        target[offset - 2] = mask[2];
        target[offset - 1] = mask[3];
        if (skipMasking) return [target, data];
        if (merge) {
          applyMask(data, mask, target, offset, dataLength);
          return [target];
        }
        applyMask(data, mask, data, 0, dataLength);
        return [target, data];
      }
      /**
       * Sends a close message to the other peer.
       *
       * @param {Number} [code] The status code component of the body
       * @param {(String|Buffer)} [data] The message component of the body
       * @param {Boolean} [mask=false] Specifies whether or not to mask the message
       * @param {Function} [cb] Callback
       * @public
       */
      close(code, data, mask, cb) {
        let buf;
        if (code === void 0) {
          buf = EMPTY_BUFFER;
        } else if (typeof code !== "number" || !isValidStatusCode(code)) {
          throw new TypeError("First argument must be a valid error code number");
        } else if (data === void 0 || !data.length) {
          buf = Buffer.allocUnsafe(2);
          buf.writeUInt16BE(code, 0);
        } else {
          const length = Buffer.byteLength(data);
          if (length > 123) {
            throw new RangeError("The message must not be greater than 123 bytes");
          }
          buf = Buffer.allocUnsafe(2 + length);
          buf.writeUInt16BE(code, 0);
          if (typeof data === "string") {
            buf.write(data, 2);
          } else {
            buf.set(data, 2);
          }
        }
        const options2 = {
          [kByteLength]: buf.length,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 8,
          readOnly: false,
          rsv1: false
        };
        if (this._state !== DEFAULT) {
          this.enqueue([this.dispatch, buf, false, options2, cb]);
        } else {
          this.sendFrame(_Sender.frame(buf, options2), cb);
        }
      }
      /**
       * Sends a ping message to the other peer.
       *
       * @param {*} data The message to send
       * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
       * @param {Function} [cb] Callback
       * @public
       */
      ping(data, mask, cb) {
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else if (isBlob(data)) {
          byteLength = data.size;
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (byteLength > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        const options2 = {
          [kByteLength]: byteLength,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 9,
          readOnly,
          rsv1: false
        };
        if (isBlob(data)) {
          if (this._state !== DEFAULT) {
            this.enqueue([this.getBlobData, data, false, options2, cb]);
          } else {
            this.getBlobData(data, false, options2, cb);
          }
        } else if (this._state !== DEFAULT) {
          this.enqueue([this.dispatch, data, false, options2, cb]);
        } else {
          this.sendFrame(_Sender.frame(data, options2), cb);
        }
      }
      /**
       * Sends a pong message to the other peer.
       *
       * @param {*} data The message to send
       * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
       * @param {Function} [cb] Callback
       * @public
       */
      pong(data, mask, cb) {
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else if (isBlob(data)) {
          byteLength = data.size;
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (byteLength > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        const options2 = {
          [kByteLength]: byteLength,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 10,
          readOnly,
          rsv1: false
        };
        if (isBlob(data)) {
          if (this._state !== DEFAULT) {
            this.enqueue([this.getBlobData, data, false, options2, cb]);
          } else {
            this.getBlobData(data, false, options2, cb);
          }
        } else if (this._state !== DEFAULT) {
          this.enqueue([this.dispatch, data, false, options2, cb]);
        } else {
          this.sendFrame(_Sender.frame(data, options2), cb);
        }
      }
      /**
       * Sends a data message to the other peer.
       *
       * @param {*} data The message to send
       * @param {Object} options Options object
       * @param {Boolean} [options.binary=false] Specifies whether `data` is binary
       *     or text
       * @param {Boolean} [options.compress=false] Specifies whether or not to
       *     compress `data`
       * @param {Boolean} [options.fin=false] Specifies whether the fragment is the
       *     last one
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Function} [cb] Callback
       * @public
       */
      send(data, options2, cb) {
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        let opcode = options2.binary ? 2 : 1;
        let rsv1 = options2.compress;
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else if (isBlob(data)) {
          byteLength = data.size;
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (this._firstFragment) {
          this._firstFragment = false;
          if (rsv1 && perMessageDeflate && perMessageDeflate.params[perMessageDeflate._isServer ? "server_no_context_takeover" : "client_no_context_takeover"]) {
            rsv1 = byteLength >= perMessageDeflate._threshold;
          }
          this._compress = rsv1;
        } else {
          rsv1 = false;
          opcode = 0;
        }
        if (options2.fin) this._firstFragment = true;
        const opts = {
          [kByteLength]: byteLength,
          fin: options2.fin,
          generateMask: this._generateMask,
          mask: options2.mask,
          maskBuffer: this._maskBuffer,
          opcode,
          readOnly,
          rsv1
        };
        if (isBlob(data)) {
          if (this._state !== DEFAULT) {
            this.enqueue([this.getBlobData, data, this._compress, opts, cb]);
          } else {
            this.getBlobData(data, this._compress, opts, cb);
          }
        } else if (this._state !== DEFAULT) {
          this.enqueue([this.dispatch, data, this._compress, opts, cb]);
        } else {
          this.dispatch(data, this._compress, opts, cb);
        }
      }
      /**
       * Gets the contents of a blob as binary data.
       *
       * @param {Blob} blob The blob
       * @param {Boolean} [compress=false] Specifies whether or not to compress
       *     the data
       * @param {Object} options Options object
       * @param {Boolean} [options.fin=false] Specifies whether or not to set the
       *     FIN bit
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
       *     key
       * @param {Number} options.opcode The opcode
       * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
       *     modified
       * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
       *     RSV1 bit
       * @param {Function} [cb] Callback
       * @private
       */
      getBlobData(blob, compress, options2, cb) {
        this._bufferedBytes += options2[kByteLength];
        this._state = GET_BLOB_DATA;
        blob.arrayBuffer().then((arrayBuffer) => {
          if (this._socket.destroyed) {
            const err = new Error(
              "The socket was closed while the blob was being read"
            );
            process.nextTick(callCallbacks, this, err, cb);
            return;
          }
          this._bufferedBytes -= options2[kByteLength];
          const data = toBuffer(arrayBuffer);
          if (!compress) {
            this._state = DEFAULT;
            this.sendFrame(_Sender.frame(data, options2), cb);
            this.dequeue();
          } else {
            this.dispatch(data, compress, options2, cb);
          }
        }).catch((err) => {
          process.nextTick(onError, this, err, cb);
        });
      }
      /**
       * Dispatches a message.
       *
       * @param {(Buffer|String)} data The message to send
       * @param {Boolean} [compress=false] Specifies whether or not to compress
       *     `data`
       * @param {Object} options Options object
       * @param {Boolean} [options.fin=false] Specifies whether or not to set the
       *     FIN bit
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Boolean} [options.mask=false] Specifies whether or not to mask
       *     `data`
       * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
       *     key
       * @param {Number} options.opcode The opcode
       * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
       *     modified
       * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
       *     RSV1 bit
       * @param {Function} [cb] Callback
       * @private
       */
      dispatch(data, compress, options2, cb) {
        if (!compress) {
          this.sendFrame(_Sender.frame(data, options2), cb);
          return;
        }
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        this._bufferedBytes += options2[kByteLength];
        this._state = DEFLATING;
        perMessageDeflate.compress(data, options2.fin, (_, buf) => {
          if (this._socket.destroyed) {
            const err = new Error(
              "The socket was closed while data was being compressed"
            );
            callCallbacks(this, err, cb);
            return;
          }
          this._bufferedBytes -= options2[kByteLength];
          this._state = DEFAULT;
          options2.readOnly = false;
          this.sendFrame(_Sender.frame(buf, options2), cb);
          this.dequeue();
        });
      }
      /**
       * Executes queued send operations.
       *
       * @private
       */
      dequeue() {
        while (this._state === DEFAULT && this._queue.length) {
          const params = this._queue.shift();
          this._bufferedBytes -= params[3][kByteLength];
          Reflect.apply(params[0], this, params.slice(1));
        }
      }
      /**
       * Enqueues a send operation.
       *
       * @param {Array} params Send operation parameters.
       * @private
       */
      enqueue(params) {
        this._bufferedBytes += params[3][kByteLength];
        this._queue.push(params);
      }
      /**
       * Sends a frame.
       *
       * @param {Buffer[]} list The frame to send
       * @param {Function} [cb] Callback
       * @private
       */
      sendFrame(list, cb) {
        if (list.length === 2) {
          this._socket.cork();
          this._socket.write(list[0]);
          this._socket.write(list[1], cb);
          this._socket.uncork();
        } else {
          this._socket.write(list[0], cb);
        }
      }
    };
    module2.exports = Sender;
    function callCallbacks(sender, err, cb) {
      if (typeof cb === "function") cb(err);
      for (let i = 0; i < sender._queue.length; i++) {
        const params = sender._queue[i];
        const callback = params[params.length - 1];
        if (typeof callback === "function") callback(err);
      }
    }
    function onError(sender, err, cb) {
      callCallbacks(sender, err, cb);
      sender.onerror(err);
    }
  }
});

// node_modules/ws/lib/event-target.js
var require_event_target = __commonJS({
  "node_modules/ws/lib/event-target.js"(exports2, module2) {
    "use strict";
    var { kForOnEventAttribute, kListener } = require_constants();
    var kCode = Symbol("kCode");
    var kData = Symbol("kData");
    var kError = Symbol("kError");
    var kMessage = Symbol("kMessage");
    var kReason = Symbol("kReason");
    var kTarget = Symbol("kTarget");
    var kType = Symbol("kType");
    var kWasClean = Symbol("kWasClean");
    var Event = class {
      /**
       * Create a new `Event`.
       *
       * @param {String} type The name of the event
       * @throws {TypeError} If the `type` argument is not specified
       */
      constructor(type) {
        this[kTarget] = null;
        this[kType] = type;
      }
      /**
       * @type {*}
       */
      get target() {
        return this[kTarget];
      }
      /**
       * @type {String}
       */
      get type() {
        return this[kType];
      }
    };
    Object.defineProperty(Event.prototype, "target", { enumerable: true });
    Object.defineProperty(Event.prototype, "type", { enumerable: true });
    var CloseEvent = class extends Event {
      /**
       * Create a new `CloseEvent`.
       *
       * @param {String} type The name of the event
       * @param {Object} [options] A dictionary object that allows for setting
       *     attributes via object members of the same name
       * @param {Number} [options.code=0] The status code explaining why the
       *     connection was closed
       * @param {String} [options.reason=''] A human-readable string explaining why
       *     the connection was closed
       * @param {Boolean} [options.wasClean=false] Indicates whether or not the
       *     connection was cleanly closed
       */
      constructor(type, options2 = {}) {
        super(type);
        this[kCode] = options2.code === void 0 ? 0 : options2.code;
        this[kReason] = options2.reason === void 0 ? "" : options2.reason;
        this[kWasClean] = options2.wasClean === void 0 ? false : options2.wasClean;
      }
      /**
       * @type {Number}
       */
      get code() {
        return this[kCode];
      }
      /**
       * @type {String}
       */
      get reason() {
        return this[kReason];
      }
      /**
       * @type {Boolean}
       */
      get wasClean() {
        return this[kWasClean];
      }
    };
    Object.defineProperty(CloseEvent.prototype, "code", { enumerable: true });
    Object.defineProperty(CloseEvent.prototype, "reason", { enumerable: true });
    Object.defineProperty(CloseEvent.prototype, "wasClean", { enumerable: true });
    var ErrorEvent = class extends Event {
      /**
       * Create a new `ErrorEvent`.
       *
       * @param {String} type The name of the event
       * @param {Object} [options] A dictionary object that allows for setting
       *     attributes via object members of the same name
       * @param {*} [options.error=null] The error that generated this event
       * @param {String} [options.message=''] The error message
       */
      constructor(type, options2 = {}) {
        super(type);
        this[kError] = options2.error === void 0 ? null : options2.error;
        this[kMessage] = options2.message === void 0 ? "" : options2.message;
      }
      /**
       * @type {*}
       */
      get error() {
        return this[kError];
      }
      /**
       * @type {String}
       */
      get message() {
        return this[kMessage];
      }
    };
    Object.defineProperty(ErrorEvent.prototype, "error", { enumerable: true });
    Object.defineProperty(ErrorEvent.prototype, "message", { enumerable: true });
    var MessageEvent = class extends Event {
      /**
       * Create a new `MessageEvent`.
       *
       * @param {String} type The name of the event
       * @param {Object} [options] A dictionary object that allows for setting
       *     attributes via object members of the same name
       * @param {*} [options.data=null] The message content
       */
      constructor(type, options2 = {}) {
        super(type);
        this[kData] = options2.data === void 0 ? null : options2.data;
      }
      /**
       * @type {*}
       */
      get data() {
        return this[kData];
      }
    };
    Object.defineProperty(MessageEvent.prototype, "data", { enumerable: true });
    var EventTarget = {
      /**
       * Register an event listener.
       *
       * @param {String} type A string representing the event type to listen for
       * @param {(Function|Object)} handler The listener to add
       * @param {Object} [options] An options object specifies characteristics about
       *     the event listener
       * @param {Boolean} [options.once=false] A `Boolean` indicating that the
       *     listener should be invoked at most once after being added. If `true`,
       *     the listener would be automatically removed when invoked.
       * @public
       */
      addEventListener(type, handler, options2 = {}) {
        for (const listener of this.listeners(type)) {
          if (!options2[kForOnEventAttribute] && listener[kListener] === handler && !listener[kForOnEventAttribute]) {
            return;
          }
        }
        let wrapper;
        if (type === "message") {
          wrapper = function onMessage(data, isBinary) {
            const event = new MessageEvent("message", {
              data: isBinary ? data : data.toString()
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === "close") {
          wrapper = function onClose(code, message) {
            const event = new CloseEvent("close", {
              code,
              reason: message.toString(),
              wasClean: this._closeFrameReceived && this._closeFrameSent
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === "error") {
          wrapper = function onError(error) {
            const event = new ErrorEvent("error", {
              error,
              message: error.message
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === "open") {
          wrapper = function onOpen() {
            const event = new Event("open");
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else {
          return;
        }
        wrapper[kForOnEventAttribute] = !!options2[kForOnEventAttribute];
        wrapper[kListener] = handler;
        if (options2.once) {
          this.once(type, wrapper);
        } else {
          this.on(type, wrapper);
        }
      },
      /**
       * Remove an event listener.
       *
       * @param {String} type A string representing the event type to remove
       * @param {(Function|Object)} handler The listener to remove
       * @public
       */
      removeEventListener(type, handler) {
        for (const listener of this.listeners(type)) {
          if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {
            this.removeListener(type, listener);
            break;
          }
        }
      }
    };
    module2.exports = {
      CloseEvent,
      ErrorEvent,
      Event,
      EventTarget,
      MessageEvent
    };
    function callListener(listener, thisArg, event) {
      if (typeof listener === "object" && listener.handleEvent) {
        listener.handleEvent.call(listener, event);
      } else {
        listener.call(thisArg, event);
      }
    }
  }
});

// node_modules/ws/lib/extension.js
var require_extension = __commonJS({
  "node_modules/ws/lib/extension.js"(exports2, module2) {
    "use strict";
    var { tokenChars } = require_validation();
    function push(dest, name, elem) {
      if (dest[name] === void 0) dest[name] = [elem];
      else dest[name].push(elem);
    }
    function parse2(header) {
      const offers = /* @__PURE__ */ Object.create(null);
      let params = /* @__PURE__ */ Object.create(null);
      let mustUnescape = false;
      let isEscaping = false;
      let inQuotes = false;
      let extensionName;
      let paramName;
      let start = -1;
      let code = -1;
      let end = -1;
      let i = 0;
      for (; i < header.length; i++) {
        code = header.charCodeAt(i);
        if (extensionName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1) start = i;
          } else if (i !== 0 && (code === 32 || code === 9)) {
            if (end === -1 && start !== -1) end = i;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
            if (end === -1) end = i;
            const name = header.slice(start, end);
            if (code === 44) {
              push(offers, name, params);
              params = /* @__PURE__ */ Object.create(null);
            } else {
              extensionName = name;
            }
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else if (paramName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1) start = i;
          } else if (code === 32 || code === 9) {
            if (end === -1 && start !== -1) end = i;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
            if (end === -1) end = i;
            push(params, header.slice(start, end), true);
            if (code === 44) {
              push(offers, extensionName, params);
              params = /* @__PURE__ */ Object.create(null);
              extensionName = void 0;
            }
            start = end = -1;
          } else if (code === 61 && start !== -1 && end === -1) {
            paramName = header.slice(start, i);
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else {
          if (isEscaping) {
            if (tokenChars[code] !== 1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
            if (start === -1) start = i;
            else if (!mustUnescape) mustUnescape = true;
            isEscaping = false;
          } else if (inQuotes) {
            if (tokenChars[code] === 1) {
              if (start === -1) start = i;
            } else if (code === 34 && start !== -1) {
              inQuotes = false;
              end = i;
            } else if (code === 92) {
              isEscaping = true;
            } else {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
          } else if (code === 34 && header.charCodeAt(i - 1) === 61) {
            inQuotes = true;
          } else if (end === -1 && tokenChars[code] === 1) {
            if (start === -1) start = i;
          } else if (start !== -1 && (code === 32 || code === 9)) {
            if (end === -1) end = i;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
            if (end === -1) end = i;
            let value = header.slice(start, end);
            if (mustUnescape) {
              value = value.replace(/\\/g, "");
              mustUnescape = false;
            }
            push(params, paramName, value);
            if (code === 44) {
              push(offers, extensionName, params);
              params = /* @__PURE__ */ Object.create(null);
              extensionName = void 0;
            }
            paramName = void 0;
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        }
      }
      if (start === -1 || inQuotes || code === 32 || code === 9) {
        throw new SyntaxError("Unexpected end of input");
      }
      if (end === -1) end = i;
      const token = header.slice(start, end);
      if (extensionName === void 0) {
        push(offers, token, params);
      } else {
        if (paramName === void 0) {
          push(params, token, true);
        } else if (mustUnescape) {
          push(params, paramName, token.replace(/\\/g, ""));
        } else {
          push(params, paramName, token);
        }
        push(offers, extensionName, params);
      }
      return offers;
    }
    function format(extensions) {
      return Object.keys(extensions).map((extension) => {
        let configurations = extensions[extension];
        if (!Array.isArray(configurations)) configurations = [configurations];
        return configurations.map((params) => {
          return [extension].concat(
            Object.keys(params).map((k) => {
              let values = params[k];
              if (!Array.isArray(values)) values = [values];
              return values.map((v) => v === true ? k : `${k}=${v}`).join("; ");
            })
          ).join("; ");
        }).join(", ");
      }).join(", ");
    }
    module2.exports = { format, parse: parse2 };
  }
});

// node_modules/ws/lib/websocket.js
var require_websocket = __commonJS({
  "node_modules/ws/lib/websocket.js"(exports2, module2) {
    "use strict";
    var EventEmitter = __require("events");
    var https = __require("https");
    var http = __require("http");
    var net = __require("net");
    var tls = __require("tls");
    var { randomBytes, createHash } = __require("crypto");
    var { Duplex, Readable } = __require("stream");
    var { URL } = __require("url");
    var PerMessageDeflate = require_permessage_deflate();
    var Receiver = require_receiver();
    var Sender = require_sender();
    var { isBlob } = require_validation();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      GUID,
      kForOnEventAttribute,
      kListener,
      kStatusCode,
      kWebSocket,
      NOOP
    } = require_constants();
    var {
      EventTarget: { addEventListener, removeEventListener }
    } = require_event_target();
    var { format, parse: parse2 } = require_extension();
    var { toBuffer } = require_buffer_util();
    var closeTimeout = 30 * 1e3;
    var kAborted = Symbol("kAborted");
    var protocolVersions = [8, 13];
    var readyStates = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"];
    var subprotocolRegex = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/;
    var WebSocket2 = class _WebSocket extends EventEmitter {
      /**
       * Create a new `WebSocket`.
       *
       * @param {(String|URL)} address The URL to which to connect
       * @param {(String|String[])} [protocols] The subprotocols
       * @param {Object} [options] Connection options
       */
      constructor(address, protocols, options2) {
        super();
        this._binaryType = BINARY_TYPES[0];
        this._closeCode = 1006;
        this._closeFrameReceived = false;
        this._closeFrameSent = false;
        this._closeMessage = EMPTY_BUFFER;
        this._closeTimer = null;
        this._errorEmitted = false;
        this._extensions = {};
        this._paused = false;
        this._protocol = "";
        this._readyState = _WebSocket.CONNECTING;
        this._receiver = null;
        this._sender = null;
        this._socket = null;
        if (address !== null) {
          this._bufferedAmount = 0;
          this._isServer = false;
          this._redirects = 0;
          if (protocols === void 0) {
            protocols = [];
          } else if (!Array.isArray(protocols)) {
            if (typeof protocols === "object" && protocols !== null) {
              options2 = protocols;
              protocols = [];
            } else {
              protocols = [protocols];
            }
          }
          initAsClient(this, address, protocols, options2);
        } else {
          this._autoPong = options2.autoPong;
          this._isServer = true;
        }
      }
      /**
       * For historical reasons, the custom "nodebuffer" type is used by the default
       * instead of "blob".
       *
       * @type {String}
       */
      get binaryType() {
        return this._binaryType;
      }
      set binaryType(type) {
        if (!BINARY_TYPES.includes(type)) return;
        this._binaryType = type;
        if (this._receiver) this._receiver._binaryType = type;
      }
      /**
       * @type {Number}
       */
      get bufferedAmount() {
        if (!this._socket) return this._bufferedAmount;
        return this._socket._writableState.length + this._sender._bufferedBytes;
      }
      /**
       * @type {String}
       */
      get extensions() {
        return Object.keys(this._extensions).join();
      }
      /**
       * @type {Boolean}
       */
      get isPaused() {
        return this._paused;
      }
      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onclose() {
        return null;
      }
      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onerror() {
        return null;
      }
      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onopen() {
        return null;
      }
      /**
       * @type {Function}
       */
      /* istanbul ignore next */
      get onmessage() {
        return null;
      }
      /**
       * @type {String}
       */
      get protocol() {
        return this._protocol;
      }
      /**
       * @type {Number}
       */
      get readyState() {
        return this._readyState;
      }
      /**
       * @type {String}
       */
      get url() {
        return this._url;
      }
      /**
       * Set up the socket and the internal resources.
       *
       * @param {Duplex} socket The network socket between the server and client
       * @param {Buffer} head The first packet of the upgraded stream
       * @param {Object} options Options object
       * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether
       *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
       *     multiple times in the same tick
       * @param {Function} [options.generateMask] The function used to generate the
       *     masking key
       * @param {Number} [options.maxPayload=0] The maximum allowed message size
       * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
       *     not to skip UTF-8 validation for text and close messages
       * @private
       */
      setSocket(socket, head, options2) {
        const receiver = new Receiver({
          allowSynchronousEvents: options2.allowSynchronousEvents,
          binaryType: this.binaryType,
          extensions: this._extensions,
          isServer: this._isServer,
          maxPayload: options2.maxPayload,
          skipUTF8Validation: options2.skipUTF8Validation
        });
        const sender = new Sender(socket, this._extensions, options2.generateMask);
        this._receiver = receiver;
        this._sender = sender;
        this._socket = socket;
        receiver[kWebSocket] = this;
        sender[kWebSocket] = this;
        socket[kWebSocket] = this;
        receiver.on("conclude", receiverOnConclude);
        receiver.on("drain", receiverOnDrain);
        receiver.on("error", receiverOnError);
        receiver.on("message", receiverOnMessage);
        receiver.on("ping", receiverOnPing);
        receiver.on("pong", receiverOnPong);
        sender.onerror = senderOnError;
        if (socket.setTimeout) socket.setTimeout(0);
        if (socket.setNoDelay) socket.setNoDelay();
        if (head.length > 0) socket.unshift(head);
        socket.on("close", socketOnClose);
        socket.on("data", socketOnData);
        socket.on("end", socketOnEnd);
        socket.on("error", socketOnError);
        this._readyState = _WebSocket.OPEN;
        this.emit("open");
      }
      /**
       * Emit the `'close'` event.
       *
       * @private
       */
      emitClose() {
        if (!this._socket) {
          this._readyState = _WebSocket.CLOSED;
          this.emit("close", this._closeCode, this._closeMessage);
          return;
        }
        if (this._extensions[PerMessageDeflate.extensionName]) {
          this._extensions[PerMessageDeflate.extensionName].cleanup();
        }
        this._receiver.removeAllListeners();
        this._readyState = _WebSocket.CLOSED;
        this.emit("close", this._closeCode, this._closeMessage);
      }
      /**
       * Start a closing handshake.
       *
       *          +----------+   +-----------+   +----------+
       *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
       *    |     +----------+   +-----------+   +----------+     |
       *          +----------+   +-----------+         |
       * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
       *          +----------+   +-----------+   |
       *    |           |                        |   +---+        |
       *                +------------------------+-->|fin| - - - -
       *    |         +---+                      |   +---+
       *     - - - - -|fin|<---------------------+
       *              +---+
       *
       * @param {Number} [code] Status code explaining why the connection is closing
       * @param {(String|Buffer)} [data] The reason why the connection is
       *     closing
       * @public
       */
      close(code, data) {
        if (this.readyState === _WebSocket.CLOSED) return;
        if (this.readyState === _WebSocket.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          abortHandshake(this, this._req, msg);
          return;
        }
        if (this.readyState === _WebSocket.CLOSING) {
          if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {
            this._socket.end();
          }
          return;
        }
        this._readyState = _WebSocket.CLOSING;
        this._sender.close(code, data, !this._isServer, (err) => {
          if (err) return;
          this._closeFrameSent = true;
          if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {
            this._socket.end();
          }
        });
        setCloseTimer(this);
      }
      /**
       * Pause the socket.
       *
       * @public
       */
      pause() {
        if (this.readyState === _WebSocket.CONNECTING || this.readyState === _WebSocket.CLOSED) {
          return;
        }
        this._paused = true;
        this._socket.pause();
      }
      /**
       * Send a ping.
       *
       * @param {*} [data] The data to send
       * @param {Boolean} [mask] Indicates whether or not to mask `data`
       * @param {Function} [cb] Callback which is executed when the ping is sent
       * @public
       */
      ping(data, mask, cb) {
        if (this.readyState === _WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb = data;
          data = mask = void 0;
        } else if (typeof mask === "function") {
          cb = mask;
          mask = void 0;
        }
        if (typeof data === "number") data = data.toString();
        if (this.readyState !== _WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        if (mask === void 0) mask = !this._isServer;
        this._sender.ping(data || EMPTY_BUFFER, mask, cb);
      }
      /**
       * Send a pong.
       *
       * @param {*} [data] The data to send
       * @param {Boolean} [mask] Indicates whether or not to mask `data`
       * @param {Function} [cb] Callback which is executed when the pong is sent
       * @public
       */
      pong(data, mask, cb) {
        if (this.readyState === _WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb = data;
          data = mask = void 0;
        } else if (typeof mask === "function") {
          cb = mask;
          mask = void 0;
        }
        if (typeof data === "number") data = data.toString();
        if (this.readyState !== _WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        if (mask === void 0) mask = !this._isServer;
        this._sender.pong(data || EMPTY_BUFFER, mask, cb);
      }
      /**
       * Resume the socket.
       *
       * @public
       */
      resume() {
        if (this.readyState === _WebSocket.CONNECTING || this.readyState === _WebSocket.CLOSED) {
          return;
        }
        this._paused = false;
        if (!this._receiver._writableState.needDrain) this._socket.resume();
      }
      /**
       * Send a data message.
       *
       * @param {*} data The message to send
       * @param {Object} [options] Options object
       * @param {Boolean} [options.binary] Specifies whether `data` is binary or
       *     text
       * @param {Boolean} [options.compress] Specifies whether or not to compress
       *     `data`
       * @param {Boolean} [options.fin=true] Specifies whether the fragment is the
       *     last one
       * @param {Boolean} [options.mask] Specifies whether or not to mask `data`
       * @param {Function} [cb] Callback which is executed when data is written out
       * @public
       */
      send(data, options2, cb) {
        if (this.readyState === _WebSocket.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof options2 === "function") {
          cb = options2;
          options2 = {};
        }
        if (typeof data === "number") data = data.toString();
        if (this.readyState !== _WebSocket.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        const opts = {
          binary: typeof data !== "string",
          mask: !this._isServer,
          compress: true,
          fin: true,
          ...options2
        };
        if (!this._extensions[PerMessageDeflate.extensionName]) {
          opts.compress = false;
        }
        this._sender.send(data || EMPTY_BUFFER, opts, cb);
      }
      /**
       * Forcibly close the connection.
       *
       * @public
       */
      terminate() {
        if (this.readyState === _WebSocket.CLOSED) return;
        if (this.readyState === _WebSocket.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          abortHandshake(this, this._req, msg);
          return;
        }
        if (this._socket) {
          this._readyState = _WebSocket.CLOSING;
          this._socket.destroy();
        }
      }
    };
    Object.defineProperty(WebSocket2, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket2.prototype, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket2, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket2.prototype, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket2, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket2.prototype, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket2, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    Object.defineProperty(WebSocket2.prototype, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    [
      "binaryType",
      "bufferedAmount",
      "extensions",
      "isPaused",
      "protocol",
      "readyState",
      "url"
    ].forEach((property) => {
      Object.defineProperty(WebSocket2.prototype, property, { enumerable: true });
    });
    ["open", "error", "close", "message"].forEach((method) => {
      Object.defineProperty(WebSocket2.prototype, `on${method}`, {
        enumerable: true,
        get() {
          for (const listener of this.listeners(method)) {
            if (listener[kForOnEventAttribute]) return listener[kListener];
          }
          return null;
        },
        set(handler) {
          for (const listener of this.listeners(method)) {
            if (listener[kForOnEventAttribute]) {
              this.removeListener(method, listener);
              break;
            }
          }
          if (typeof handler !== "function") return;
          this.addEventListener(method, handler, {
            [kForOnEventAttribute]: true
          });
        }
      });
    });
    WebSocket2.prototype.addEventListener = addEventListener;
    WebSocket2.prototype.removeEventListener = removeEventListener;
    module2.exports = WebSocket2;
    function initAsClient(websocket, address, protocols, options2) {
      const opts = {
        allowSynchronousEvents: true,
        autoPong: true,
        protocolVersion: protocolVersions[1],
        maxPayload: 100 * 1024 * 1024,
        skipUTF8Validation: false,
        perMessageDeflate: true,
        followRedirects: false,
        maxRedirects: 10,
        ...options2,
        socketPath: void 0,
        hostname: void 0,
        protocol: void 0,
        timeout: void 0,
        method: "GET",
        host: void 0,
        path: void 0,
        port: void 0
      };
      websocket._autoPong = opts.autoPong;
      if (!protocolVersions.includes(opts.protocolVersion)) {
        throw new RangeError(
          `Unsupported protocol version: ${opts.protocolVersion} (supported versions: ${protocolVersions.join(", ")})`
        );
      }
      let parsedUrl;
      if (address instanceof URL) {
        parsedUrl = address;
      } else {
        try {
          parsedUrl = new URL(address);
        } catch (e) {
          throw new SyntaxError(`Invalid URL: ${address}`);
        }
      }
      if (parsedUrl.protocol === "http:") {
        parsedUrl.protocol = "ws:";
      } else if (parsedUrl.protocol === "https:") {
        parsedUrl.protocol = "wss:";
      }
      websocket._url = parsedUrl.href;
      const isSecure = parsedUrl.protocol === "wss:";
      const isIpcUrl = parsedUrl.protocol === "ws+unix:";
      let invalidUrlMessage;
      if (parsedUrl.protocol !== "ws:" && !isSecure && !isIpcUrl) {
        invalidUrlMessage = `The URL's protocol must be one of "ws:", "wss:", "http:", "https", or "ws+unix:"`;
      } else if (isIpcUrl && !parsedUrl.pathname) {
        invalidUrlMessage = "The URL's pathname is empty";
      } else if (parsedUrl.hash) {
        invalidUrlMessage = "The URL contains a fragment identifier";
      }
      if (invalidUrlMessage) {
        const err = new SyntaxError(invalidUrlMessage);
        if (websocket._redirects === 0) {
          throw err;
        } else {
          emitErrorAndClose(websocket, err);
          return;
        }
      }
      const defaultPort = isSecure ? 443 : 80;
      const key = randomBytes(16).toString("base64");
      const request = isSecure ? https.request : http.request;
      const protocolSet = /* @__PURE__ */ new Set();
      let perMessageDeflate;
      opts.createConnection = opts.createConnection || (isSecure ? tlsConnect : netConnect);
      opts.defaultPort = opts.defaultPort || defaultPort;
      opts.port = parsedUrl.port || defaultPort;
      opts.host = parsedUrl.hostname.startsWith("[") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
      opts.headers = {
        ...opts.headers,
        "Sec-WebSocket-Version": opts.protocolVersion,
        "Sec-WebSocket-Key": key,
        Connection: "Upgrade",
        Upgrade: "websocket"
      };
      opts.path = parsedUrl.pathname + parsedUrl.search;
      opts.timeout = opts.handshakeTimeout;
      if (opts.perMessageDeflate) {
        perMessageDeflate = new PerMessageDeflate(
          opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
          false,
          opts.maxPayload
        );
        opts.headers["Sec-WebSocket-Extensions"] = format({
          [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
        });
      }
      if (protocols.length) {
        for (const protocol of protocols) {
          if (typeof protocol !== "string" || !subprotocolRegex.test(protocol) || protocolSet.has(protocol)) {
            throw new SyntaxError(
              "An invalid or duplicated subprotocol was specified"
            );
          }
          protocolSet.add(protocol);
        }
        opts.headers["Sec-WebSocket-Protocol"] = protocols.join(",");
      }
      if (opts.origin) {
        if (opts.protocolVersion < 13) {
          opts.headers["Sec-WebSocket-Origin"] = opts.origin;
        } else {
          opts.headers.Origin = opts.origin;
        }
      }
      if (parsedUrl.username || parsedUrl.password) {
        opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
      }
      if (isIpcUrl) {
        const parts = opts.path.split(":");
        opts.socketPath = parts[0];
        opts.path = parts[1];
      }
      let req;
      if (opts.followRedirects) {
        if (websocket._redirects === 0) {
          websocket._originalIpc = isIpcUrl;
          websocket._originalSecure = isSecure;
          websocket._originalHostOrSocketPath = isIpcUrl ? opts.socketPath : parsedUrl.host;
          const headers = options2 && options2.headers;
          options2 = { ...options2, headers: {} };
          if (headers) {
            for (const [key2, value] of Object.entries(headers)) {
              options2.headers[key2.toLowerCase()] = value;
            }
          }
        } else if (websocket.listenerCount("redirect") === 0) {
          const isSameHost = isIpcUrl ? websocket._originalIpc ? opts.socketPath === websocket._originalHostOrSocketPath : false : websocket._originalIpc ? false : parsedUrl.host === websocket._originalHostOrSocketPath;
          if (!isSameHost || websocket._originalSecure && !isSecure) {
            delete opts.headers.authorization;
            delete opts.headers.cookie;
            if (!isSameHost) delete opts.headers.host;
            opts.auth = void 0;
          }
        }
        if (opts.auth && !options2.headers.authorization) {
          options2.headers.authorization = "Basic " + Buffer.from(opts.auth).toString("base64");
        }
        req = websocket._req = request(opts);
        if (websocket._redirects) {
          websocket.emit("redirect", websocket.url, req);
        }
      } else {
        req = websocket._req = request(opts);
      }
      if (opts.timeout) {
        req.on("timeout", () => {
          abortHandshake(websocket, req, "Opening handshake has timed out");
        });
      }
      req.on("error", (err) => {
        if (req === null || req[kAborted]) return;
        req = websocket._req = null;
        emitErrorAndClose(websocket, err);
      });
      req.on("response", (res) => {
        const location = res.headers.location;
        const statusCode = res.statusCode;
        if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {
          if (++websocket._redirects > opts.maxRedirects) {
            abortHandshake(websocket, req, "Maximum redirects exceeded");
            return;
          }
          req.abort();
          let addr;
          try {
            addr = new URL(location, address);
          } catch (e) {
            const err = new SyntaxError(`Invalid URL: ${location}`);
            emitErrorAndClose(websocket, err);
            return;
          }
          initAsClient(websocket, addr, protocols, options2);
        } else if (!websocket.emit("unexpected-response", req, res)) {
          abortHandshake(
            websocket,
            req,
            `Unexpected server response: ${res.statusCode}`
          );
        }
      });
      req.on("upgrade", (res, socket, head) => {
        websocket.emit("upgrade", res);
        if (websocket.readyState !== WebSocket2.CONNECTING) return;
        req = websocket._req = null;
        const upgrade = res.headers.upgrade;
        if (upgrade === void 0 || upgrade.toLowerCase() !== "websocket") {
          abortHandshake(websocket, socket, "Invalid Upgrade header");
          return;
        }
        const digest = createHash("sha1").update(key + GUID).digest("base64");
        if (res.headers["sec-websocket-accept"] !== digest) {
          abortHandshake(websocket, socket, "Invalid Sec-WebSocket-Accept header");
          return;
        }
        const serverProt = res.headers["sec-websocket-protocol"];
        let protError;
        if (serverProt !== void 0) {
          if (!protocolSet.size) {
            protError = "Server sent a subprotocol but none was requested";
          } else if (!protocolSet.has(serverProt)) {
            protError = "Server sent an invalid subprotocol";
          }
        } else if (protocolSet.size) {
          protError = "Server sent no subprotocol";
        }
        if (protError) {
          abortHandshake(websocket, socket, protError);
          return;
        }
        if (serverProt) websocket._protocol = serverProt;
        const secWebSocketExtensions = res.headers["sec-websocket-extensions"];
        if (secWebSocketExtensions !== void 0) {
          if (!perMessageDeflate) {
            const message = "Server sent a Sec-WebSocket-Extensions header but no extension was requested";
            abortHandshake(websocket, socket, message);
            return;
          }
          let extensions;
          try {
            extensions = parse2(secWebSocketExtensions);
          } catch (err) {
            const message = "Invalid Sec-WebSocket-Extensions header";
            abortHandshake(websocket, socket, message);
            return;
          }
          const extensionNames = Object.keys(extensions);
          if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {
            const message = "Server indicated an extension that was not requested";
            abortHandshake(websocket, socket, message);
            return;
          }
          try {
            perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
          } catch (err) {
            const message = "Invalid Sec-WebSocket-Extensions header";
            abortHandshake(websocket, socket, message);
            return;
          }
          websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
        }
        websocket.setSocket(socket, head, {
          allowSynchronousEvents: opts.allowSynchronousEvents,
          generateMask: opts.generateMask,
          maxPayload: opts.maxPayload,
          skipUTF8Validation: opts.skipUTF8Validation
        });
      });
      if (opts.finishRequest) {
        opts.finishRequest(req, websocket);
      } else {
        req.end();
      }
    }
    function emitErrorAndClose(websocket, err) {
      websocket._readyState = WebSocket2.CLOSING;
      websocket._errorEmitted = true;
      websocket.emit("error", err);
      websocket.emitClose();
    }
    function netConnect(options2) {
      options2.path = options2.socketPath;
      return net.connect(options2);
    }
    function tlsConnect(options2) {
      options2.path = void 0;
      if (!options2.servername && options2.servername !== "") {
        options2.servername = net.isIP(options2.host) ? "" : options2.host;
      }
      return tls.connect(options2);
    }
    function abortHandshake(websocket, stream, message) {
      websocket._readyState = WebSocket2.CLOSING;
      const err = new Error(message);
      Error.captureStackTrace(err, abortHandshake);
      if (stream.setHeader) {
        stream[kAborted] = true;
        stream.abort();
        if (stream.socket && !stream.socket.destroyed) {
          stream.socket.destroy();
        }
        process.nextTick(emitErrorAndClose, websocket, err);
      } else {
        stream.destroy(err);
        stream.once("error", websocket.emit.bind(websocket, "error"));
        stream.once("close", websocket.emitClose.bind(websocket));
      }
    }
    function sendAfterClose(websocket, data, cb) {
      if (data) {
        const length = isBlob(data) ? data.size : toBuffer(data).length;
        if (websocket._socket) websocket._sender._bufferedBytes += length;
        else websocket._bufferedAmount += length;
      }
      if (cb) {
        const err = new Error(
          `WebSocket is not open: readyState ${websocket.readyState} (${readyStates[websocket.readyState]})`
        );
        process.nextTick(cb, err);
      }
    }
    function receiverOnConclude(code, reason) {
      const websocket = this[kWebSocket];
      websocket._closeFrameReceived = true;
      websocket._closeMessage = reason;
      websocket._closeCode = code;
      if (websocket._socket[kWebSocket] === void 0) return;
      websocket._socket.removeListener("data", socketOnData);
      process.nextTick(resume, websocket._socket);
      if (code === 1005) websocket.close();
      else websocket.close(code, reason);
    }
    function receiverOnDrain() {
      const websocket = this[kWebSocket];
      if (!websocket.isPaused) websocket._socket.resume();
    }
    function receiverOnError(err) {
      const websocket = this[kWebSocket];
      if (websocket._socket[kWebSocket] !== void 0) {
        websocket._socket.removeListener("data", socketOnData);
        process.nextTick(resume, websocket._socket);
        websocket.close(err[kStatusCode]);
      }
      if (!websocket._errorEmitted) {
        websocket._errorEmitted = true;
        websocket.emit("error", err);
      }
    }
    function receiverOnFinish() {
      this[kWebSocket].emitClose();
    }
    function receiverOnMessage(data, isBinary) {
      this[kWebSocket].emit("message", data, isBinary);
    }
    function receiverOnPing(data) {
      const websocket = this[kWebSocket];
      if (websocket._autoPong) websocket.pong(data, !this._isServer, NOOP);
      websocket.emit("ping", data);
    }
    function receiverOnPong(data) {
      this[kWebSocket].emit("pong", data);
    }
    function resume(stream) {
      stream.resume();
    }
    function senderOnError(err) {
      const websocket = this[kWebSocket];
      if (websocket.readyState === WebSocket2.CLOSED) return;
      if (websocket.readyState === WebSocket2.OPEN) {
        websocket._readyState = WebSocket2.CLOSING;
        setCloseTimer(websocket);
      }
      this._socket.end();
      if (!websocket._errorEmitted) {
        websocket._errorEmitted = true;
        websocket.emit("error", err);
      }
    }
    function setCloseTimer(websocket) {
      websocket._closeTimer = setTimeout(
        websocket._socket.destroy.bind(websocket._socket),
        closeTimeout
      );
    }
    function socketOnClose() {
      const websocket = this[kWebSocket];
      this.removeListener("close", socketOnClose);
      this.removeListener("data", socketOnData);
      this.removeListener("end", socketOnEnd);
      websocket._readyState = WebSocket2.CLOSING;
      let chunk;
      if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {
        websocket._receiver.write(chunk);
      }
      websocket._receiver.end();
      this[kWebSocket] = void 0;
      clearTimeout(websocket._closeTimer);
      if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {
        websocket.emitClose();
      } else {
        websocket._receiver.on("error", receiverOnFinish);
        websocket._receiver.on("finish", receiverOnFinish);
      }
    }
    function socketOnData(chunk) {
      if (!this[kWebSocket]._receiver.write(chunk)) {
        this.pause();
      }
    }
    function socketOnEnd() {
      const websocket = this[kWebSocket];
      websocket._readyState = WebSocket2.CLOSING;
      websocket._receiver.end();
      this.end();
    }
    function socketOnError() {
      const websocket = this[kWebSocket];
      this.removeListener("error", socketOnError);
      this.on("error", NOOP);
      if (websocket) {
        websocket._readyState = WebSocket2.CLOSING;
        this.destroy();
      }
    }
  }
});

// node_modules/ws/lib/stream.js
var require_stream = __commonJS({
  "node_modules/ws/lib/stream.js"(exports2, module2) {
    "use strict";
    var { Duplex } = __require("stream");
    function emitClose(stream) {
      stream.emit("close");
    }
    function duplexOnEnd() {
      if (!this.destroyed && this._writableState.finished) {
        this.destroy();
      }
    }
    function duplexOnError(err) {
      this.removeListener("error", duplexOnError);
      this.destroy();
      if (this.listenerCount("error") === 0) {
        this.emit("error", err);
      }
    }
    function createWebSocketStream(ws, options2) {
      let terminateOnDestroy = true;
      const duplex = new Duplex({
        ...options2,
        autoDestroy: false,
        emitClose: false,
        objectMode: false,
        writableObjectMode: false
      });
      ws.on("message", function message(msg, isBinary) {
        const data = !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;
        if (!duplex.push(data)) ws.pause();
      });
      ws.once("error", function error(err) {
        if (duplex.destroyed) return;
        terminateOnDestroy = false;
        duplex.destroy(err);
      });
      ws.once("close", function close() {
        if (duplex.destroyed) return;
        duplex.push(null);
      });
      duplex._destroy = function(err, callback) {
        if (ws.readyState === ws.CLOSED) {
          callback(err);
          process.nextTick(emitClose, duplex);
          return;
        }
        let called = false;
        ws.once("error", function error(err2) {
          called = true;
          callback(err2);
        });
        ws.once("close", function close() {
          if (!called) callback(err);
          process.nextTick(emitClose, duplex);
        });
        if (terminateOnDestroy) ws.terminate();
      };
      duplex._final = function(callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex._final(callback);
          });
          return;
        }
        if (ws._socket === null) return;
        if (ws._socket._writableState.finished) {
          callback();
          if (duplex._readableState.endEmitted) duplex.destroy();
        } else {
          ws._socket.once("finish", function finish() {
            callback();
          });
          ws.close();
        }
      };
      duplex._read = function() {
        if (ws.isPaused) ws.resume();
      };
      duplex._write = function(chunk, encoding, callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex._write(chunk, encoding, callback);
          });
          return;
        }
        ws.send(chunk, callback);
      };
      duplex.on("end", duplexOnEnd);
      duplex.on("error", duplexOnError);
      return duplex;
    }
    module2.exports = createWebSocketStream;
  }
});

// node_modules/ws/lib/subprotocol.js
var require_subprotocol = __commonJS({
  "node_modules/ws/lib/subprotocol.js"(exports2, module2) {
    "use strict";
    var { tokenChars } = require_validation();
    function parse2(header) {
      const protocols = /* @__PURE__ */ new Set();
      let start = -1;
      let end = -1;
      let i = 0;
      for (i; i < header.length; i++) {
        const code = header.charCodeAt(i);
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (i !== 0 && (code === 32 || code === 9)) {
          if (end === -1 && start !== -1) end = i;
        } else if (code === 44) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (end === -1) end = i;
          const protocol2 = header.slice(start, end);
          if (protocols.has(protocol2)) {
            throw new SyntaxError(`The "${protocol2}" subprotocol is duplicated`);
          }
          protocols.add(protocol2);
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      }
      if (start === -1 || end !== -1) {
        throw new SyntaxError("Unexpected end of input");
      }
      const protocol = header.slice(start, i);
      if (protocols.has(protocol)) {
        throw new SyntaxError(`The "${protocol}" subprotocol is duplicated`);
      }
      protocols.add(protocol);
      return protocols;
    }
    module2.exports = { parse: parse2 };
  }
});

// node_modules/ws/lib/websocket-server.js
var require_websocket_server = __commonJS({
  "node_modules/ws/lib/websocket-server.js"(exports2, module2) {
    "use strict";
    var EventEmitter = __require("events");
    var http = __require("http");
    var { Duplex } = __require("stream");
    var { createHash } = __require("crypto");
    var extension = require_extension();
    var PerMessageDeflate = require_permessage_deflate();
    var subprotocol = require_subprotocol();
    var WebSocket2 = require_websocket();
    var { GUID, kWebSocket } = require_constants();
    var keyRegex = /^[+/0-9A-Za-z]{22}==$/;
    var RUNNING = 0;
    var CLOSING = 1;
    var CLOSED = 2;
    var WebSocketServer = class extends EventEmitter {
      /**
       * Create a `WebSocketServer` instance.
       *
       * @param {Object} options Configuration options
       * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether
       *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted
       *     multiple times in the same tick
       * @param {Boolean} [options.autoPong=true] Specifies whether or not to
       *     automatically send a pong in response to a ping
       * @param {Number} [options.backlog=511] The maximum length of the queue of
       *     pending connections
       * @param {Boolean} [options.clientTracking=true] Specifies whether or not to
       *     track clients
       * @param {Function} [options.handleProtocols] A hook to handle protocols
       * @param {String} [options.host] The hostname where to bind the server
       * @param {Number} [options.maxPayload=104857600] The maximum allowed message
       *     size
       * @param {Boolean} [options.noServer=false] Enable no server mode
       * @param {String} [options.path] Accept only connections matching this path
       * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable
       *     permessage-deflate
       * @param {Number} [options.port] The port where to bind the server
       * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S
       *     server to use
       * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
       *     not to skip UTF-8 validation for text and close messages
       * @param {Function} [options.verifyClient] A hook to reject connections
       * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`
       *     class to use. It must be the `WebSocket` class or class that extends it
       * @param {Function} [callback] A listener for the `listening` event
       */
      constructor(options2, callback) {
        super();
        options2 = {
          allowSynchronousEvents: true,
          autoPong: true,
          maxPayload: 100 * 1024 * 1024,
          skipUTF8Validation: false,
          perMessageDeflate: false,
          handleProtocols: null,
          clientTracking: true,
          verifyClient: null,
          noServer: false,
          backlog: null,
          // use default (511 as implemented in net.js)
          server: null,
          host: null,
          path: null,
          port: null,
          WebSocket: WebSocket2,
          ...options2
        };
        if (options2.port == null && !options2.server && !options2.noServer || options2.port != null && (options2.server || options2.noServer) || options2.server && options2.noServer) {
          throw new TypeError(
            'One and only one of the "port", "server", or "noServer" options must be specified'
          );
        }
        if (options2.port != null) {
          this._server = http.createServer((req, res) => {
            const body = http.STATUS_CODES[426];
            res.writeHead(426, {
              "Content-Length": body.length,
              "Content-Type": "text/plain"
            });
            res.end(body);
          });
          this._server.listen(
            options2.port,
            options2.host,
            options2.backlog,
            callback
          );
        } else if (options2.server) {
          this._server = options2.server;
        }
        if (this._server) {
          const emitConnection = this.emit.bind(this, "connection");
          this._removeListeners = addListeners(this._server, {
            listening: this.emit.bind(this, "listening"),
            error: this.emit.bind(this, "error"),
            upgrade: (req, socket, head) => {
              this.handleUpgrade(req, socket, head, emitConnection);
            }
          });
        }
        if (options2.perMessageDeflate === true) options2.perMessageDeflate = {};
        if (options2.clientTracking) {
          this.clients = /* @__PURE__ */ new Set();
          this._shouldEmitClose = false;
        }
        this.options = options2;
        this._state = RUNNING;
      }
      /**
       * Returns the bound address, the address family name, and port of the server
       * as reported by the operating system if listening on an IP socket.
       * If the server is listening on a pipe or UNIX domain socket, the name is
       * returned as a string.
       *
       * @return {(Object|String|null)} The address of the server
       * @public
       */
      address() {
        if (this.options.noServer) {
          throw new Error('The server is operating in "noServer" mode');
        }
        if (!this._server) return null;
        return this._server.address();
      }
      /**
       * Stop the server from accepting new connections and emit the `'close'` event
       * when all existing connections are closed.
       *
       * @param {Function} [cb] A one-time listener for the `'close'` event
       * @public
       */
      close(cb) {
        if (this._state === CLOSED) {
          if (cb) {
            this.once("close", () => {
              cb(new Error("The server is not running"));
            });
          }
          process.nextTick(emitClose, this);
          return;
        }
        if (cb) this.once("close", cb);
        if (this._state === CLOSING) return;
        this._state = CLOSING;
        if (this.options.noServer || this.options.server) {
          if (this._server) {
            this._removeListeners();
            this._removeListeners = this._server = null;
          }
          if (this.clients) {
            if (!this.clients.size) {
              process.nextTick(emitClose, this);
            } else {
              this._shouldEmitClose = true;
            }
          } else {
            process.nextTick(emitClose, this);
          }
        } else {
          const server = this._server;
          this._removeListeners();
          this._removeListeners = this._server = null;
          server.close(() => {
            emitClose(this);
          });
        }
      }
      /**
       * See if a given request should be handled by this server instance.
       *
       * @param {http.IncomingMessage} req Request object to inspect
       * @return {Boolean} `true` if the request is valid, else `false`
       * @public
       */
      shouldHandle(req) {
        if (this.options.path) {
          const index = req.url.indexOf("?");
          const pathname = index !== -1 ? req.url.slice(0, index) : req.url;
          if (pathname !== this.options.path) return false;
        }
        return true;
      }
      /**
       * Handle a HTTP Upgrade request.
       *
       * @param {http.IncomingMessage} req The request object
       * @param {Duplex} socket The network socket between the server and client
       * @param {Buffer} head The first packet of the upgraded stream
       * @param {Function} cb Callback
       * @public
       */
      handleUpgrade(req, socket, head, cb) {
        socket.on("error", socketOnError);
        const key = req.headers["sec-websocket-key"];
        const upgrade = req.headers.upgrade;
        const version = +req.headers["sec-websocket-version"];
        if (req.method !== "GET") {
          const message = "Invalid HTTP method";
          abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);
          return;
        }
        if (upgrade === void 0 || upgrade.toLowerCase() !== "websocket") {
          const message = "Invalid Upgrade header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (key === void 0 || !keyRegex.test(key)) {
          const message = "Missing or invalid Sec-WebSocket-Key header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (version !== 8 && version !== 13) {
          const message = "Missing or invalid Sec-WebSocket-Version header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (!this.shouldHandle(req)) {
          abortHandshake(socket, 400);
          return;
        }
        const secWebSocketProtocol = req.headers["sec-websocket-protocol"];
        let protocols = /* @__PURE__ */ new Set();
        if (secWebSocketProtocol !== void 0) {
          try {
            protocols = subprotocol.parse(secWebSocketProtocol);
          } catch (err) {
            const message = "Invalid Sec-WebSocket-Protocol header";
            abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
            return;
          }
        }
        const secWebSocketExtensions = req.headers["sec-websocket-extensions"];
        const extensions = {};
        if (this.options.perMessageDeflate && secWebSocketExtensions !== void 0) {
          const perMessageDeflate = new PerMessageDeflate(
            this.options.perMessageDeflate,
            true,
            this.options.maxPayload
          );
          try {
            const offers = extension.parse(secWebSocketExtensions);
            if (offers[PerMessageDeflate.extensionName]) {
              perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
              extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
            }
          } catch (err) {
            const message = "Invalid or unacceptable Sec-WebSocket-Extensions header";
            abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
            return;
          }
        }
        if (this.options.verifyClient) {
          const info = {
            origin: req.headers[`${version === 8 ? "sec-websocket-origin" : "origin"}`],
            secure: !!(req.socket.authorized || req.socket.encrypted),
            req
          };
          if (this.options.verifyClient.length === 2) {
            this.options.verifyClient(info, (verified, code, message, headers) => {
              if (!verified) {
                return abortHandshake(socket, code || 401, message, headers);
              }
              this.completeUpgrade(
                extensions,
                key,
                protocols,
                req,
                socket,
                head,
                cb
              );
            });
            return;
          }
          if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
        }
        this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);
      }
      /**
       * Upgrade the connection to WebSocket.
       *
       * @param {Object} extensions The accepted extensions
       * @param {String} key The value of the `Sec-WebSocket-Key` header
       * @param {Set} protocols The subprotocols
       * @param {http.IncomingMessage} req The request object
       * @param {Duplex} socket The network socket between the server and client
       * @param {Buffer} head The first packet of the upgraded stream
       * @param {Function} cb Callback
       * @throws {Error} If called more than once with the same socket
       * @private
       */
      completeUpgrade(extensions, key, protocols, req, socket, head, cb) {
        if (!socket.readable || !socket.writable) return socket.destroy();
        if (socket[kWebSocket]) {
          throw new Error(
            "server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration"
          );
        }
        if (this._state > RUNNING) return abortHandshake(socket, 503);
        const digest = createHash("sha1").update(key + GUID).digest("base64");
        const headers = [
          "HTTP/1.1 101 Switching Protocols",
          "Upgrade: websocket",
          "Connection: Upgrade",
          `Sec-WebSocket-Accept: ${digest}`
        ];
        const ws = new this.options.WebSocket(null, void 0, this.options);
        if (protocols.size) {
          const protocol = this.options.handleProtocols ? this.options.handleProtocols(protocols, req) : protocols.values().next().value;
          if (protocol) {
            headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
            ws._protocol = protocol;
          }
        }
        if (extensions[PerMessageDeflate.extensionName]) {
          const params = extensions[PerMessageDeflate.extensionName].params;
          const value = extension.format({
            [PerMessageDeflate.extensionName]: [params]
          });
          headers.push(`Sec-WebSocket-Extensions: ${value}`);
          ws._extensions = extensions;
        }
        this.emit("headers", headers, req);
        socket.write(headers.concat("\r\n").join("\r\n"));
        socket.removeListener("error", socketOnError);
        ws.setSocket(socket, head, {
          allowSynchronousEvents: this.options.allowSynchronousEvents,
          maxPayload: this.options.maxPayload,
          skipUTF8Validation: this.options.skipUTF8Validation
        });
        if (this.clients) {
          this.clients.add(ws);
          ws.on("close", () => {
            this.clients.delete(ws);
            if (this._shouldEmitClose && !this.clients.size) {
              process.nextTick(emitClose, this);
            }
          });
        }
        cb(ws, req);
      }
    };
    module2.exports = WebSocketServer;
    function addListeners(server, map) {
      for (const event of Object.keys(map)) server.on(event, map[event]);
      return function removeListeners() {
        for (const event of Object.keys(map)) {
          server.removeListener(event, map[event]);
        }
      };
    }
    function emitClose(server) {
      server._state = CLOSED;
      server.emit("close");
    }
    function socketOnError() {
      this.destroy();
    }
    function abortHandshake(socket, code, message, headers) {
      message = message || http.STATUS_CODES[code];
      headers = {
        Connection: "close",
        "Content-Type": "text/html",
        "Content-Length": Buffer.byteLength(message),
        ...headers
      };
      socket.once("finish", socket.destroy);
      socket.end(
        `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r
` + Object.keys(headers).map((h) => `${h}: ${headers[h]}`).join("\r\n") + "\r\n\r\n" + message
      );
    }
    function abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {
      if (server.listenerCount("wsClientError")) {
        const err = new Error(message);
        Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);
        server.emit("wsClientError", err, socket, req);
      } else {
        abortHandshake(socket, code, message);
      }
    }
  }
});

// node_modules/ws/index.js
var require_ws = __commonJS({
  "node_modules/ws/index.js"(exports2, module2) {
    "use strict";
    var WebSocket2 = require_websocket();
    WebSocket2.createWebSocketStream = require_stream();
    WebSocket2.Server = require_websocket_server();
    WebSocket2.Receiver = require_receiver();
    WebSocket2.Sender = require_sender();
    WebSocket2.WebSocket = WebSocket2;
    WebSocket2.WebSocketServer = WebSocket2.Server;
    module2.exports = WebSocket2;
  }
});

// node_modules/isows/_cjs/utils.js
var require_utils8 = __commonJS({
  "node_modules/isows/_cjs/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getNativeWebSocket = void 0;
    function getNativeWebSocket() {
      if (typeof WebSocket !== "undefined")
        return WebSocket;
      if (typeof global.WebSocket !== "undefined")
        return global.WebSocket;
      if (typeof window.WebSocket !== "undefined")
        return window.WebSocket;
      if (typeof self.WebSocket !== "undefined")
        return self.WebSocket;
      throw new Error("`WebSocket` is not supported in this environment");
    }
    exports2.getNativeWebSocket = getNativeWebSocket;
  }
});

// node_modules/isows/_cjs/index.js
var require_cjs = __commonJS({
  "node_modules/isows/_cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WebSocket = void 0;
    var WebSocket_ = require_ws();
    var utils_js_1 = require_utils8();
    exports2.WebSocket = (() => {
      try {
        return (0, utils_js_1.getNativeWebSocket)();
      } catch {
        if (WebSocket_.WebSocket)
          return WebSocket_.WebSocket;
        return WebSocket_;
      }
    })();
  }
});

// node_modules/viem/_cjs/utils/rpc/webSocket.js
var require_webSocket = __commonJS({
  "node_modules/viem/_cjs/utils/rpc/webSocket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getWebSocketRpcClient = getWebSocketRpcClient;
    var request_js_1 = require_request();
    var socket_js_1 = require_socket();
    async function getWebSocketRpcClient(url, options2 = {}) {
      const { keepAlive, reconnect } = options2;
      return (0, socket_js_1.getSocketRpcClient)({
        async getSocket({ onClose, onError, onOpen, onResponse }) {
          const WebSocket2 = await Promise.resolve().then(() => require_cjs()).then((module3) => module3.WebSocket);
          const socket = new WebSocket2(url);
          function onClose_() {
            onClose();
            socket.removeEventListener("close", onClose_);
            socket.removeEventListener("message", onMessage);
            socket.removeEventListener("error", onError);
            socket.removeEventListener("open", onOpen);
          }
          function onMessage({ data }) {
            onResponse(JSON.parse(data));
          }
          socket.addEventListener("close", onClose_);
          socket.addEventListener("message", onMessage);
          socket.addEventListener("error", onError);
          socket.addEventListener("open", onOpen);
          if (socket.readyState === WebSocket2.CONNECTING) {
            await new Promise((resolve, reject) => {
              if (!socket)
                return;
              socket.onopen = resolve;
              socket.onerror = reject;
            });
          }
          const { close: close_ } = socket;
          return Object.assign(socket, {
            close() {
              close_.bind(socket)();
              onClose();
            },
            ping() {
              try {
                if (socket.readyState === socket.CLOSED || socket.readyState === socket.CLOSING)
                  throw new request_js_1.WebSocketRequestError({
                    url: socket.url,
                    cause: new request_js_1.SocketClosedError({ url: socket.url })
                  });
                const body = {
                  jsonrpc: "2.0",
                  method: "net_version",
                  params: []
                };
                socket.send(JSON.stringify(body));
              } catch (error) {
                onError(error);
              }
            },
            request({ body }) {
              if (socket.readyState === socket.CLOSED || socket.readyState === socket.CLOSING)
                throw new request_js_1.WebSocketRequestError({
                  body,
                  url: socket.url,
                  cause: new request_js_1.SocketClosedError({ url: socket.url })
                });
              return socket.send(JSON.stringify(body));
            }
          });
        },
        keepAlive,
        reconnect,
        url
      });
    }
  }
});

// node_modules/viem/_cjs/utils/rpc/compat.js
var require_compat = __commonJS({
  "node_modules/viem/_cjs/utils/rpc/compat.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rpc = void 0;
    exports2.getSocket = getSocket;
    var http_js_1 = require_http();
    var webSocket_js_1 = require_webSocket();
    function webSocket(socketClient, { body, onError, onResponse }) {
      socketClient.request({
        body,
        onError,
        onResponse
      });
      return socketClient;
    }
    async function webSocketAsync(socketClient, { body, timeout = 1e4 }) {
      return socketClient.requestAsync({
        body,
        timeout
      });
    }
    async function getSocket(url) {
      const client = await (0, webSocket_js_1.getWebSocketRpcClient)(url);
      return Object.assign(client.socket, {
        requests: client.requests,
        subscriptions: client.subscriptions
      });
    }
    exports2.rpc = {
      http(url, params) {
        return (0, http_js_1.getHttpRpcClient)(url).request(params);
      },
      webSocket,
      webSocketAsync
    };
  }
});

// node_modules/viem/_cjs/utils/signature/hashTypedData.js
var require_hashTypedData = __commonJS({
  "node_modules/viem/_cjs/utils/signature/hashTypedData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashTypedData = hashTypedData;
    exports2.hashDomain = hashDomain;
    exports2.hashStruct = hashStruct;
    exports2.encodeType = encodeType;
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var concat_js_1 = require_concat();
    var toHex_js_1 = require_toHex();
    var keccak256_js_1 = require_keccak256();
    var typedData_js_1 = require_typedData();
    function hashTypedData(parameters) {
      const { domain = {}, message, primaryType } = parameters;
      const types = {
        EIP712Domain: (0, typedData_js_1.getTypesForEIP712Domain)({ domain }),
        ...parameters.types
      };
      (0, typedData_js_1.validateTypedData)({
        domain,
        message,
        primaryType,
        types
      });
      const parts = ["0x1901"];
      if (domain)
        parts.push(hashDomain({
          domain,
          types
        }));
      if (primaryType !== "EIP712Domain")
        parts.push(hashStruct({
          data: message,
          primaryType,
          types
        }));
      return (0, keccak256_js_1.keccak256)((0, concat_js_1.concat)(parts));
    }
    function hashDomain({ domain, types }) {
      return hashStruct({
        data: domain,
        primaryType: "EIP712Domain",
        types
      });
    }
    function hashStruct({ data, primaryType, types }) {
      const encoded = encodeData({
        data,
        primaryType,
        types
      });
      return (0, keccak256_js_1.keccak256)(encoded);
    }
    function encodeData({ data, primaryType, types }) {
      const encodedTypes = [{ type: "bytes32" }];
      const encodedValues = [hashType({ primaryType, types })];
      for (const field of types[primaryType]) {
        const [type, value] = encodeField({
          types,
          name: field.name,
          type: field.type,
          value: data[field.name]
        });
        encodedTypes.push(type);
        encodedValues.push(value);
      }
      return (0, encodeAbiParameters_js_1.encodeAbiParameters)(encodedTypes, encodedValues);
    }
    function hashType({ primaryType, types }) {
      const encodedHashType = (0, toHex_js_1.toHex)(encodeType({ primaryType, types }));
      return (0, keccak256_js_1.keccak256)(encodedHashType);
    }
    function encodeType({ primaryType, types }) {
      let result = "";
      const unsortedDeps = findTypeDependencies({ primaryType, types });
      unsortedDeps.delete(primaryType);
      const deps = [primaryType, ...Array.from(unsortedDeps).sort()];
      for (const type of deps) {
        result += `${type}(${types[type].map(({ name, type: t }) => `${t} ${name}`).join(",")})`;
      }
      return result;
    }
    function findTypeDependencies({ primaryType: primaryType_, types }, results = /* @__PURE__ */ new Set()) {
      const match = primaryType_.match(/^\w*/u);
      const primaryType = match?.[0];
      if (results.has(primaryType) || types[primaryType] === void 0) {
        return results;
      }
      results.add(primaryType);
      for (const field of types[primaryType]) {
        findTypeDependencies({ primaryType: field.type, types }, results);
      }
      return results;
    }
    function encodeField({ types, name, type, value }) {
      if (types[type] !== void 0) {
        return [
          { type: "bytes32" },
          (0, keccak256_js_1.keccak256)(encodeData({ data: value, primaryType: type, types }))
        ];
      }
      if (type === "bytes") {
        const prepend = value.length % 2 ? "0" : "";
        value = `0x${prepend + value.slice(2)}`;
        return [{ type: "bytes32" }, (0, keccak256_js_1.keccak256)(value)];
      }
      if (type === "string")
        return [{ type: "bytes32" }, (0, keccak256_js_1.keccak256)((0, toHex_js_1.toHex)(value))];
      if (type.lastIndexOf("]") === type.length - 1) {
        const parsedType = type.slice(0, type.lastIndexOf("["));
        const typeValuePairs = value.map((item) => encodeField({
          name,
          type: parsedType,
          types,
          value: item
        }));
        return [
          { type: "bytes32" },
          (0, keccak256_js_1.keccak256)((0, encodeAbiParameters_js_1.encodeAbiParameters)(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v)))
        ];
      }
      return [{ type }, value];
    }
  }
});

// node_modules/viem/_cjs/utils/typedData.js
var require_typedData = __commonJS({
  "node_modules/viem/_cjs/utils/typedData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeTypedData = serializeTypedData;
    exports2.validateTypedData = validateTypedData;
    exports2.getTypesForEIP712Domain = getTypesForEIP712Domain;
    exports2.domainSeparator = domainSeparator;
    var abi_js_1 = require_abi();
    var address_js_1 = require_address();
    var isAddress_js_1 = require_isAddress();
    var size_js_1 = require_size();
    var toHex_js_1 = require_toHex();
    var regex_js_1 = require_regex2();
    var hashTypedData_js_1 = require_hashTypedData();
    var stringify_js_1 = require_stringify();
    function serializeTypedData(parameters) {
      const { domain: domain_, message: message_, primaryType, types } = parameters;
      const normalizeData = (struct, data_) => {
        const data = { ...data_ };
        for (const param of struct) {
          const { name, type } = param;
          if (type === "address")
            data[name] = data[name].toLowerCase();
        }
        return data;
      };
      const domain = (() => {
        if (!types.EIP712Domain)
          return {};
        if (!domain_)
          return {};
        return normalizeData(types.EIP712Domain, domain_);
      })();
      const message = (() => {
        if (primaryType === "EIP712Domain")
          return void 0;
        return normalizeData(types[primaryType], message_);
      })();
      return (0, stringify_js_1.stringify)({ domain, message, primaryType, types });
    }
    function validateTypedData(parameters) {
      const { domain, message, primaryType, types } = parameters;
      const validateData = (struct, data) => {
        for (const param of struct) {
          const { name, type } = param;
          const value = data[name];
          const integerMatch = type.match(regex_js_1.integerRegex);
          if (integerMatch && (typeof value === "number" || typeof value === "bigint")) {
            const [_type, base, size_] = integerMatch;
            (0, toHex_js_1.numberToHex)(value, {
              signed: base === "int",
              size: Number.parseInt(size_) / 8
            });
          }
          if (type === "address" && typeof value === "string" && !(0, isAddress_js_1.isAddress)(value))
            throw new address_js_1.InvalidAddressError({ address: value });
          const bytesMatch = type.match(regex_js_1.bytesRegex);
          if (bytesMatch) {
            const [_type, size_] = bytesMatch;
            if (size_ && (0, size_js_1.size)(value) !== Number.parseInt(size_))
              throw new abi_js_1.BytesSizeMismatchError({
                expectedSize: Number.parseInt(size_),
                givenSize: (0, size_js_1.size)(value)
              });
          }
          const struct2 = types[type];
          if (struct2)
            validateData(struct2, value);
        }
      };
      if (types.EIP712Domain && domain)
        validateData(types.EIP712Domain, domain);
      if (primaryType !== "EIP712Domain")
        validateData(types[primaryType], message);
    }
    function getTypesForEIP712Domain({ domain }) {
      return [
        typeof domain?.name === "string" && { name: "name", type: "string" },
        domain?.version && { name: "version", type: "string" },
        typeof domain?.chainId === "number" && {
          name: "chainId",
          type: "uint256"
        },
        domain?.verifyingContract && {
          name: "verifyingContract",
          type: "address"
        },
        domain?.salt && { name: "salt", type: "bytes32" }
      ].filter(Boolean);
    }
    function domainSeparator({ domain }) {
      return (0, hashTypedData_js_1.hashDomain)({
        domain,
        types: {
          EIP712Domain: getTypesForEIP712Domain({ domain })
        }
      });
    }
  }
});

// node_modules/viem/_cjs/utils/abi/decodeFunctionData.js
var require_decodeFunctionData = __commonJS({
  "node_modules/viem/_cjs/utils/abi/decodeFunctionData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeFunctionData = decodeFunctionData;
    var abi_js_1 = require_abi();
    var slice_js_1 = require_slice();
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    var formatAbiItem_js_1 = require_formatAbiItem();
    function decodeFunctionData(parameters) {
      const { abi, data } = parameters;
      const signature = (0, slice_js_1.slice)(data, 0, 4);
      const description = abi.find((x) => x.type === "function" && signature === (0, toFunctionSelector_js_1.toFunctionSelector)((0, formatAbiItem_js_1.formatAbiItem)(x)));
      if (!description)
        throw new abi_js_1.AbiFunctionSignatureNotFoundError(signature, {
          docsPath: "/docs/contract/decodeFunctionData"
        });
      return {
        functionName: description.name,
        args: "inputs" in description && description.inputs && description.inputs.length > 0 ? (0, decodeAbiParameters_js_1.decodeAbiParameters)(description.inputs, (0, slice_js_1.slice)(data, 4)) : void 0
      };
    }
  }
});

// node_modules/viem/_cjs/utils/abi/encodeErrorResult.js
var require_encodeErrorResult = __commonJS({
  "node_modules/viem/_cjs/utils/abi/encodeErrorResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeErrorResult = encodeErrorResult;
    var abi_js_1 = require_abi();
    var concat_js_1 = require_concat();
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var formatAbiItem_js_1 = require_formatAbiItem();
    var getAbiItem_js_1 = require_getAbiItem();
    var docsPath = "/docs/contract/encodeErrorResult";
    function encodeErrorResult(parameters) {
      const { abi, errorName, args } = parameters;
      let abiItem = abi[0];
      if (errorName) {
        const item = (0, getAbiItem_js_1.getAbiItem)({ abi, args, name: errorName });
        if (!item)
          throw new abi_js_1.AbiErrorNotFoundError(errorName, { docsPath });
        abiItem = item;
      }
      if (abiItem.type !== "error")
        throw new abi_js_1.AbiErrorNotFoundError(void 0, { docsPath });
      const definition = (0, formatAbiItem_js_1.formatAbiItem)(abiItem);
      const signature = (0, toFunctionSelector_js_1.toFunctionSelector)(definition);
      let data = "0x";
      if (args && args.length > 0) {
        if (!abiItem.inputs)
          throw new abi_js_1.AbiErrorInputsNotFoundError(abiItem.name, { docsPath });
        data = (0, encodeAbiParameters_js_1.encodeAbiParameters)(abiItem.inputs, args);
      }
      return (0, concat_js_1.concatHex)([signature, data]);
    }
  }
});

// node_modules/viem/_cjs/utils/abi/encodeFunctionResult.js
var require_encodeFunctionResult = __commonJS({
  "node_modules/viem/_cjs/utils/abi/encodeFunctionResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeFunctionResult = encodeFunctionResult;
    var abi_js_1 = require_abi();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var getAbiItem_js_1 = require_getAbiItem();
    var docsPath = "/docs/contract/encodeFunctionResult";
    function encodeFunctionResult(parameters) {
      const { abi, functionName, result } = parameters;
      let abiItem = abi[0];
      if (functionName) {
        const item = (0, getAbiItem_js_1.getAbiItem)({ abi, name: functionName });
        if (!item)
          throw new abi_js_1.AbiFunctionNotFoundError(functionName, { docsPath });
        abiItem = item;
      }
      if (abiItem.type !== "function")
        throw new abi_js_1.AbiFunctionNotFoundError(void 0, { docsPath });
      if (!abiItem.outputs)
        throw new abi_js_1.AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath });
      let values = Array.isArray(result) ? result : [result];
      if (abiItem.outputs.length === 0 && !values[0])
        values = [];
      return (0, encodeAbiParameters_js_1.encodeAbiParameters)(abiItem.outputs, values);
    }
  }
});

// node_modules/viem/_cjs/utils/abi/encodePacked.js
var require_encodePacked = __commonJS({
  "node_modules/viem/_cjs/utils/abi/encodePacked.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodePacked = encodePacked;
    var abi_js_1 = require_abi();
    var address_js_1 = require_address();
    var isAddress_js_1 = require_isAddress();
    var concat_js_1 = require_concat();
    var pad_js_1 = require_pad();
    var toHex_js_1 = require_toHex();
    var regex_js_1 = require_regex2();
    function encodePacked(types, values) {
      if (types.length !== values.length)
        throw new abi_js_1.AbiEncodingLengthMismatchError({
          expectedLength: types.length,
          givenLength: values.length
        });
      const data = [];
      for (let i = 0; i < types.length; i++) {
        const type = types[i];
        const value = values[i];
        data.push(encode(type, value));
      }
      return (0, concat_js_1.concatHex)(data);
    }
    function encode(type, value, isArray = false) {
      if (type === "address") {
        const address = value;
        if (!(0, isAddress_js_1.isAddress)(address))
          throw new address_js_1.InvalidAddressError({ address });
        return (0, pad_js_1.pad)(address.toLowerCase(), {
          size: isArray ? 32 : null
        });
      }
      if (type === "string")
        return (0, toHex_js_1.stringToHex)(value);
      if (type === "bytes")
        return value;
      if (type === "bool")
        return (0, pad_js_1.pad)((0, toHex_js_1.boolToHex)(value), { size: isArray ? 32 : 1 });
      const intMatch = type.match(regex_js_1.integerRegex);
      if (intMatch) {
        const [_type, baseType, bits = "256"] = intMatch;
        const size = Number.parseInt(bits) / 8;
        return (0, toHex_js_1.numberToHex)(value, {
          size: isArray ? 32 : size,
          signed: baseType === "int"
        });
      }
      const bytesMatch = type.match(regex_js_1.bytesRegex);
      if (bytesMatch) {
        const [_type, size] = bytesMatch;
        if (Number.parseInt(size) !== (value.length - 2) / 2)
          throw new abi_js_1.BytesSizeMismatchError({
            expectedSize: Number.parseInt(size),
            givenSize: (value.length - 2) / 2
          });
        return (0, pad_js_1.pad)(value, { dir: "right", size: isArray ? 32 : null });
      }
      const arrayMatch = type.match(regex_js_1.arrayRegex);
      if (arrayMatch && Array.isArray(value)) {
        const [_type, childType] = arrayMatch;
        const data = [];
        for (let i = 0; i < value.length; i++) {
          data.push(encode(childType, value[i], true));
        }
        if (data.length === 0)
          return "0x";
        return (0, concat_js_1.concatHex)(data);
      }
      throw new abi_js_1.UnsupportedPackedAbiType(type);
    }
  }
});

// node_modules/viem/_cjs/utils/data/isBytes.js
var require_isBytes = __commonJS({
  "node_modules/viem/_cjs/utils/data/isBytes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isBytes = isBytes;
    function isBytes(value) {
      if (!value)
        return false;
      if (typeof value !== "object")
        return false;
      if (!("BYTES_PER_ELEMENT" in value))
        return false;
      return value.BYTES_PER_ELEMENT === 1 && value.constructor.name === "Uint8Array";
    }
  }
});

// node_modules/viem/_cjs/utils/address/getContractAddress.js
var require_getContractAddress = __commonJS({
  "node_modules/viem/_cjs/utils/address/getContractAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getContractAddress = getContractAddress;
    exports2.getCreateAddress = getCreateAddress;
    exports2.getCreate2Address = getCreate2Address;
    var concat_js_1 = require_concat();
    var isBytes_js_1 = require_isBytes();
    var pad_js_1 = require_pad();
    var slice_js_1 = require_slice();
    var toBytes_js_1 = require_toBytes();
    var toRlp_js_1 = require_toRlp();
    var keccak256_js_1 = require_keccak256();
    var getAddress_js_1 = require_getAddress();
    function getContractAddress(opts) {
      if (opts.opcode === "CREATE2")
        return getCreate2Address(opts);
      return getCreateAddress(opts);
    }
    function getCreateAddress(opts) {
      const from = (0, toBytes_js_1.toBytes)((0, getAddress_js_1.getAddress)(opts.from));
      let nonce = (0, toBytes_js_1.toBytes)(opts.nonce);
      if (nonce[0] === 0)
        nonce = new Uint8Array([]);
      return (0, getAddress_js_1.getAddress)(`0x${(0, keccak256_js_1.keccak256)((0, toRlp_js_1.toRlp)([from, nonce], "bytes")).slice(26)}`);
    }
    function getCreate2Address(opts) {
      const from = (0, toBytes_js_1.toBytes)((0, getAddress_js_1.getAddress)(opts.from));
      const salt = (0, pad_js_1.pad)((0, isBytes_js_1.isBytes)(opts.salt) ? opts.salt : (0, toBytes_js_1.toBytes)(opts.salt), {
        size: 32
      });
      const bytecodeHash = (() => {
        if ("bytecodeHash" in opts) {
          if ((0, isBytes_js_1.isBytes)(opts.bytecodeHash))
            return opts.bytecodeHash;
          return (0, toBytes_js_1.toBytes)(opts.bytecodeHash);
        }
        return (0, keccak256_js_1.keccak256)(opts.bytecode, "bytes");
      })();
      return (0, getAddress_js_1.getAddress)((0, slice_js_1.slice)((0, keccak256_js_1.keccak256)((0, concat_js_1.concat)([(0, toBytes_js_1.toBytes)("0xff"), from, salt, bytecodeHash])), 12));
    }
  }
});

// node_modules/viem/_cjs/utils/encoding/fromRlp.js
var require_fromRlp = __commonJS({
  "node_modules/viem/_cjs/utils/encoding/fromRlp.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromRlp = fromRlp;
    var base_js_1 = require_base();
    var encoding_js_1 = require_encoding();
    var cursor_js_1 = require_cursor2();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    function fromRlp(value, to = "hex") {
      const bytes = (() => {
        if (typeof value === "string") {
          if (value.length > 3 && value.length % 2 !== 0)
            throw new encoding_js_1.InvalidHexValueError(value);
          return (0, toBytes_js_1.hexToBytes)(value);
        }
        return value;
      })();
      const cursor = (0, cursor_js_1.createCursor)(bytes, {
        recursiveReadLimit: Number.POSITIVE_INFINITY
      });
      const result = fromRlpCursor(cursor, to);
      return result;
    }
    function fromRlpCursor(cursor, to = "hex") {
      if (cursor.bytes.length === 0)
        return to === "hex" ? (0, toHex_js_1.bytesToHex)(cursor.bytes) : cursor.bytes;
      const prefix = cursor.readByte();
      if (prefix < 128)
        cursor.decrementPosition(1);
      if (prefix < 192) {
        const length2 = readLength(cursor, prefix, 128);
        const bytes = cursor.readBytes(length2);
        return to === "hex" ? (0, toHex_js_1.bytesToHex)(bytes) : bytes;
      }
      const length = readLength(cursor, prefix, 192);
      return readList(cursor, length, to);
    }
    function readLength(cursor, prefix, offset) {
      if (offset === 128 && prefix < 128)
        return 1;
      if (prefix <= offset + 55)
        return prefix - offset;
      if (prefix === offset + 55 + 1)
        return cursor.readUint8();
      if (prefix === offset + 55 + 2)
        return cursor.readUint16();
      if (prefix === offset + 55 + 3)
        return cursor.readUint24();
      if (prefix === offset + 55 + 4)
        return cursor.readUint32();
      throw new base_js_1.BaseError("Invalid RLP prefix");
    }
    function readList(cursor, length, to) {
      const position = cursor.position;
      const value = [];
      while (cursor.position - position < length)
        value.push(fromRlpCursor(cursor, to));
      return value;
    }
  }
});

// node_modules/viem/_cjs/utils/hash/toEventSignature.js
var require_toEventSignature = __commonJS({
  "node_modules/viem/_cjs/utils/hash/toEventSignature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toEventSignature = void 0;
    var toSignature_js_1 = require_toSignature();
    Object.defineProperty(exports2, "toEventSignature", { enumerable: true, get: function() {
      return toSignature_js_1.toSignature;
    } });
  }
});

// node_modules/viem/_cjs/utils/hash/toFunctionSignature.js
var require_toFunctionSignature = __commonJS({
  "node_modules/viem/_cjs/utils/hash/toFunctionSignature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toFunctionSignature = void 0;
    var toSignature_js_1 = require_toSignature();
    Object.defineProperty(exports2, "toFunctionSignature", { enumerable: true, get: function() {
      return toSignature_js_1.toSignature;
    } });
  }
});

// node_modules/viem/_cjs/utils/hash/toEventHash.js
var require_toEventHash = __commonJS({
  "node_modules/viem/_cjs/utils/hash/toEventHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toEventHash = void 0;
    var toSignatureHash_js_1 = require_toSignatureHash();
    Object.defineProperty(exports2, "toEventHash", { enumerable: true, get: function() {
      return toSignatureHash_js_1.toSignatureHash;
    } });
  }
});

// node_modules/viem/_cjs/utils/hash/toFunctionHash.js
var require_toFunctionHash = __commonJS({
  "node_modules/viem/_cjs/utils/hash/toFunctionHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toFunctionHash = void 0;
    var toSignatureHash_js_1 = require_toSignatureHash();
    Object.defineProperty(exports2, "toFunctionHash", { enumerable: true, get: function() {
      return toSignatureHash_js_1.toSignatureHash;
    } });
  }
});

// node_modules/viem/_cjs/utils/hash/isHash.js
var require_isHash = __commonJS({
  "node_modules/viem/_cjs/utils/hash/isHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isHash = isHash;
    var isHex_js_1 = require_isHex();
    var size_js_1 = require_size();
    function isHash(hash) {
      return (0, isHex_js_1.isHex)(hash) && (0, size_js_1.size)(hash) === 32;
    }
  }
});

// node_modules/@noble/hashes/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/@noble/hashes/ripemd160.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ripemd160 = exports2.RIPEMD160 = void 0;
    var _md_js_1 = require_md();
    var utils_js_1 = require_utils();
    var Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
    var Id = /* @__PURE__ */ new Uint8Array(new Array(16).fill(0).map((_, i) => i));
    var Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);
    var idxL = [Id];
    var idxR = [Pi];
    for (let i = 0; i < 4; i++)
      for (let j of [idxL, idxR])
        j.push(j[i].map((k) => Rho[k]));
    var shifts = /* @__PURE__ */ [
      [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
      [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
      [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
      [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
      [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
    ].map((i) => new Uint8Array(i));
    var shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
    var shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
    var Kl = /* @__PURE__ */ new Uint32Array([
      0,
      1518500249,
      1859775393,
      2400959708,
      2840853838
    ]);
    var Kr = /* @__PURE__ */ new Uint32Array([
      1352829926,
      1548603684,
      1836072691,
      2053994217,
      0
    ]);
    function f(group, x, y, z) {
      if (group === 0)
        return x ^ y ^ z;
      else if (group === 1)
        return x & y | ~x & z;
      else if (group === 2)
        return (x | ~y) ^ z;
      else if (group === 3)
        return x & z | y & ~z;
      else
        return x ^ (y | ~z);
    }
    var R_BUF = /* @__PURE__ */ new Uint32Array(16);
    var RIPEMD160 = class extends _md_js_1.HashMD {
      constructor() {
        super(64, 20, 8, true);
        this.h0 = 1732584193 | 0;
        this.h1 = 4023233417 | 0;
        this.h2 = 2562383102 | 0;
        this.h3 = 271733878 | 0;
        this.h4 = 3285377520 | 0;
      }
      get() {
        const { h0, h1, h2, h3, h4 } = this;
        return [h0, h1, h2, h3, h4];
      }
      set(h0, h1, h2, h3, h4) {
        this.h0 = h0 | 0;
        this.h1 = h1 | 0;
        this.h2 = h2 | 0;
        this.h3 = h3 | 0;
        this.h4 = h4 | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          R_BUF[i] = view.getUint32(offset, true);
        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
        for (let group = 0; group < 5; group++) {
          const rGroup = 4 - group;
          const hbl = Kl[group], hbr = Kr[group];
          const rl = idxL[group], rr = idxR[group];
          const sl = shiftsL[group], sr = shiftsR[group];
          for (let i = 0; i < 16; i++) {
            const tl = (0, utils_js_1.rotl)(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el | 0;
            al = el, el = dl, dl = (0, utils_js_1.rotl)(cl, 10) | 0, cl = bl, bl = tl;
          }
          for (let i = 0; i < 16; i++) {
            const tr = (0, utils_js_1.rotl)(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er | 0;
            ar = er, er = dr, dr = (0, utils_js_1.rotl)(cr, 10) | 0, cr = br, br = tr;
          }
        }
        this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
      }
      roundClean() {
        R_BUF.fill(0);
      }
      destroy() {
        this.destroyed = true;
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0);
      }
    };
    exports2.RIPEMD160 = RIPEMD160;
    exports2.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());
  }
});

// node_modules/viem/_cjs/utils/hash/ripemd160.js
var require_ripemd1602 = __commonJS({
  "node_modules/viem/_cjs/utils/hash/ripemd160.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ripemd160 = ripemd160;
    var ripemd160_1 = require_ripemd160();
    var isHex_js_1 = require_isHex();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    function ripemd160(value, to_) {
      const to = to_ || "hex";
      const bytes = (0, ripemd160_1.ripemd160)((0, isHex_js_1.isHex)(value, { strict: false }) ? (0, toBytes_js_1.toBytes)(value) : value);
      if (to === "bytes")
        return bytes;
      return (0, toHex_js_1.toHex)(bytes);
    }
  }
});

// node_modules/viem/_cjs/constants/strings.js
var require_strings = __commonJS({
  "node_modules/viem/_cjs/constants/strings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.presignMessagePrefix = void 0;
    exports2.presignMessagePrefix = "Ethereum Signed Message:\n";
  }
});

// node_modules/viem/_cjs/utils/signature/toPrefixedMessage.js
var require_toPrefixedMessage = __commonJS({
  "node_modules/viem/_cjs/utils/signature/toPrefixedMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toPrefixedMessage = toPrefixedMessage;
    var strings_js_1 = require_strings();
    var concat_js_1 = require_concat();
    var size_js_1 = require_size();
    var toHex_js_1 = require_toHex();
    function toPrefixedMessage(message_) {
      const message = (() => {
        if (typeof message_ === "string")
          return (0, toHex_js_1.stringToHex)(message_);
        if (typeof message_.raw === "string")
          return message_.raw;
        return (0, toHex_js_1.bytesToHex)(message_.raw);
      })();
      const prefix = (0, toHex_js_1.stringToHex)(`${strings_js_1.presignMessagePrefix}${(0, size_js_1.size)(message)}`);
      return (0, concat_js_1.concat)([prefix, message]);
    }
  }
});

// node_modules/viem/_cjs/utils/signature/hashMessage.js
var require_hashMessage = __commonJS({
  "node_modules/viem/_cjs/utils/signature/hashMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashMessage = hashMessage;
    var keccak256_js_1 = require_keccak256();
    var toPrefixedMessage_js_1 = require_toPrefixedMessage();
    function hashMessage(message, to_) {
      return (0, keccak256_js_1.keccak256)((0, toPrefixedMessage_js_1.toPrefixedMessage)(message), to_);
    }
  }
});

// node_modules/viem/_cjs/utils/signature/recoverMessageAddress.js
var require_recoverMessageAddress = __commonJS({
  "node_modules/viem/_cjs/utils/signature/recoverMessageAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverMessageAddress = recoverMessageAddress;
    var hashMessage_js_1 = require_hashMessage();
    var recoverAddress_js_1 = require_recoverAddress();
    async function recoverMessageAddress({ message, signature }) {
      return (0, recoverAddress_js_1.recoverAddress)({ hash: (0, hashMessage_js_1.hashMessage)(message), signature });
    }
  }
});

// node_modules/viem/_cjs/utils/signature/recoverTypedDataAddress.js
var require_recoverTypedDataAddress = __commonJS({
  "node_modules/viem/_cjs/utils/signature/recoverTypedDataAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverTypedDataAddress = recoverTypedDataAddress;
    var hashTypedData_js_1 = require_hashTypedData();
    var recoverAddress_js_1 = require_recoverAddress();
    async function recoverTypedDataAddress(parameters) {
      const { domain, message, primaryType, signature, types } = parameters;
      return (0, recoverAddress_js_1.recoverAddress)({
        hash: (0, hashTypedData_js_1.hashTypedData)({
          domain,
          message,
          primaryType,
          types
        }),
        signature
      });
    }
  }
});

// node_modules/viem/_cjs/utils/signature/verifyHash.js
var require_verifyHash = __commonJS({
  "node_modules/viem/_cjs/utils/signature/verifyHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyHash = verifyHash;
    var getAddress_js_1 = require_getAddress();
    var isAddressEqual_js_1 = require_isAddressEqual();
    var recoverAddress_js_1 = require_recoverAddress();
    async function verifyHash({ address, hash, signature }) {
      return (0, isAddressEqual_js_1.isAddressEqual)((0, getAddress_js_1.getAddress)(address), await (0, recoverAddress_js_1.recoverAddress)({ hash, signature }));
    }
  }
});

// node_modules/viem/_cjs/utils/signature/verifyMessage.js
var require_verifyMessage = __commonJS({
  "node_modules/viem/_cjs/utils/signature/verifyMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyMessage = verifyMessage;
    var getAddress_js_1 = require_getAddress();
    var isAddressEqual_js_1 = require_isAddressEqual();
    var recoverMessageAddress_js_1 = require_recoverMessageAddress();
    async function verifyMessage({ address, message, signature }) {
      return (0, isAddressEqual_js_1.isAddressEqual)((0, getAddress_js_1.getAddress)(address), await (0, recoverMessageAddress_js_1.recoverMessageAddress)({ message, signature }));
    }
  }
});

// node_modules/viem/_cjs/utils/signature/verifyTypedData.js
var require_verifyTypedData = __commonJS({
  "node_modules/viem/_cjs/utils/signature/verifyTypedData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyTypedData = verifyTypedData;
    var getAddress_js_1 = require_getAddress();
    var isAddressEqual_js_1 = require_isAddressEqual();
    var recoverTypedDataAddress_js_1 = require_recoverTypedDataAddress();
    async function verifyTypedData(parameters) {
      const { address, domain, message, primaryType, signature, types } = parameters;
      return (0, isAddressEqual_js_1.isAddressEqual)((0, getAddress_js_1.getAddress)(address), await (0, recoverTypedDataAddress_js_1.recoverTypedDataAddress)({
        domain,
        message,
        primaryType,
        signature,
        types
      }));
    }
  }
});

// node_modules/viem/_cjs/constants/bytes.js
var require_bytes = __commonJS({
  "node_modules/viem/_cjs/constants/bytes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zeroHash = exports2.erc6492MagicBytes = void 0;
    exports2.erc6492MagicBytes = "0x6492649264926492649264926492649264926492649264926492649264926492";
    exports2.zeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";
  }
});

// node_modules/viem/_cjs/utils/signature/isErc6492Signature.js
var require_isErc6492Signature = __commonJS({
  "node_modules/viem/_cjs/utils/signature/isErc6492Signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isErc6492Signature = isErc6492Signature;
    var bytes_js_1 = require_bytes();
    var slice_js_1 = require_slice();
    function isErc6492Signature(signature) {
      return (0, slice_js_1.sliceHex)(signature, -32) === bytes_js_1.erc6492MagicBytes;
    }
  }
});

// node_modules/viem/_cjs/utils/signature/parseErc6492Signature.js
var require_parseErc6492Signature = __commonJS({
  "node_modules/viem/_cjs/utils/signature/parseErc6492Signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseErc6492Signature = parseErc6492Signature;
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    var isErc6492Signature_js_1 = require_isErc6492Signature();
    function parseErc6492Signature(signature) {
      if (!(0, isErc6492Signature_js_1.isErc6492Signature)(signature))
        return { signature };
      const [address, data, signature_] = (0, decodeAbiParameters_js_1.decodeAbiParameters)([{ type: "address" }, { type: "bytes" }, { type: "bytes" }], signature);
      return { address, data, signature: signature_ };
    }
  }
});

// node_modules/viem/_cjs/utils/signature/serializeErc6492Signature.js
var require_serializeErc6492Signature = __commonJS({
  "node_modules/viem/_cjs/utils/signature/serializeErc6492Signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeErc6492Signature = serializeErc6492Signature;
    var bytes_js_1 = require_bytes();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var concat_js_1 = require_concat();
    var toBytes_js_1 = require_toBytes();
    function serializeErc6492Signature(parameters) {
      const { address, data, signature, to = "hex" } = parameters;
      const signature_ = (0, concat_js_1.concatHex)([
        (0, encodeAbiParameters_js_1.encodeAbiParameters)([{ type: "address" }, { type: "bytes" }, { type: "bytes" }], [address, data, signature]),
        bytes_js_1.erc6492MagicBytes
      ]);
      if (to === "hex")
        return signature_;
      return (0, toBytes_js_1.hexToBytes)(signature_);
    }
  }
});

// node_modules/viem/_cjs/utils/transaction/getSerializedTransactionType.js
var require_getSerializedTransactionType = __commonJS({
  "node_modules/viem/_cjs/utils/transaction/getSerializedTransactionType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSerializedTransactionType = getSerializedTransactionType;
    var transaction_js_1 = require_transaction2();
    var slice_js_1 = require_slice();
    var fromHex_js_1 = require_fromHex();
    function getSerializedTransactionType(serializedTransaction) {
      const serializedType = (0, slice_js_1.sliceHex)(serializedTransaction, 0, 1);
      if (serializedType === "0x04")
        return "eip7702";
      if (serializedType === "0x03")
        return "eip4844";
      if (serializedType === "0x02")
        return "eip1559";
      if (serializedType === "0x01")
        return "eip2930";
      if (serializedType !== "0x" && (0, fromHex_js_1.hexToNumber)(serializedType) >= 192)
        return "legacy";
      throw new transaction_js_1.InvalidSerializedTransactionTypeError({ serializedType });
    }
  }
});

// node_modules/viem/_cjs/utils/transaction/parseTransaction.js
var require_parseTransaction = __commonJS({
  "node_modules/viem/_cjs/utils/transaction/parseTransaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseTransaction = parseTransaction;
    exports2.toTransactionArray = toTransactionArray;
    exports2.parseAccessList = parseAccessList;
    var address_js_1 = require_address();
    var transaction_js_1 = require_transaction2();
    var isAddress_js_1 = require_isAddress();
    var toBlobSidecars_js_1 = require_toBlobSidecars();
    var isHex_js_1 = require_isHex();
    var pad_js_1 = require_pad();
    var trim_js_1 = require_trim();
    var fromHex_js_1 = require_fromHex();
    var fromRlp_js_1 = require_fromRlp();
    var isHash_js_1 = require_isHash();
    var assertTransaction_js_1 = require_assertTransaction();
    var getSerializedTransactionType_js_1 = require_getSerializedTransactionType();
    function parseTransaction(serializedTransaction) {
      const type = (0, getSerializedTransactionType_js_1.getSerializedTransactionType)(serializedTransaction);
      if (type === "eip1559")
        return parseTransactionEIP1559(serializedTransaction);
      if (type === "eip2930")
        return parseTransactionEIP2930(serializedTransaction);
      if (type === "eip4844")
        return parseTransactionEIP4844(serializedTransaction);
      if (type === "eip7702")
        return parseTransactionEIP7702(serializedTransaction);
      return parseTransactionLegacy(serializedTransaction);
    }
    function parseTransactionEIP7702(serializedTransaction) {
      const transactionArray = toTransactionArray(serializedTransaction);
      const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, authorizationList, v, r, s] = transactionArray;
      if (transactionArray.length !== 10 && transactionArray.length !== 13)
        throw new transaction_js_1.InvalidSerializedTransactionError({
          attributes: {
            chainId,
            nonce,
            maxPriorityFeePerGas,
            maxFeePerGas,
            gas,
            to,
            value,
            data,
            accessList,
            authorizationList,
            ...transactionArray.length > 9 ? {
              v,
              r,
              s
            } : {}
          },
          serializedTransaction,
          type: "eip7702"
        });
      const transaction = {
        chainId: (0, fromHex_js_1.hexToNumber)(chainId),
        type: "eip7702"
      };
      if ((0, isHex_js_1.isHex)(to) && to !== "0x")
        transaction.to = to;
      if ((0, isHex_js_1.isHex)(gas) && gas !== "0x")
        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);
      if ((0, isHex_js_1.isHex)(data) && data !== "0x")
        transaction.data = data;
      if ((0, isHex_js_1.isHex)(nonce) && nonce !== "0x")
        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);
      if ((0, isHex_js_1.isHex)(value) && value !== "0x")
        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);
      if ((0, isHex_js_1.isHex)(maxFeePerGas) && maxFeePerGas !== "0x")
        transaction.maxFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxFeePerGas);
      if ((0, isHex_js_1.isHex)(maxPriorityFeePerGas) && maxPriorityFeePerGas !== "0x")
        transaction.maxPriorityFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxPriorityFeePerGas);
      if (accessList.length !== 0 && accessList !== "0x")
        transaction.accessList = parseAccessList(accessList);
      if (authorizationList.length !== 0 && authorizationList !== "0x")
        transaction.authorizationList = parseAuthorizationList(authorizationList);
      (0, assertTransaction_js_1.assertTransactionEIP7702)(transaction);
      const signature = transactionArray.length === 13 ? parseEIP155Signature(transactionArray) : void 0;
      return { ...signature, ...transaction };
    }
    function parseTransactionEIP4844(serializedTransaction) {
      const transactionOrWrapperArray = toTransactionArray(serializedTransaction);
      const hasNetworkWrapper = transactionOrWrapperArray.length === 4;
      const transactionArray = hasNetworkWrapper ? transactionOrWrapperArray[0] : transactionOrWrapperArray;
      const wrapperArray = hasNetworkWrapper ? transactionOrWrapperArray.slice(1) : [];
      const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, maxFeePerBlobGas, blobVersionedHashes, v, r, s] = transactionArray;
      const [blobs, commitments, proofs] = wrapperArray;
      if (!(transactionArray.length === 11 || transactionArray.length === 14))
        throw new transaction_js_1.InvalidSerializedTransactionError({
          attributes: {
            chainId,
            nonce,
            maxPriorityFeePerGas,
            maxFeePerGas,
            gas,
            to,
            value,
            data,
            accessList,
            ...transactionArray.length > 9 ? {
              v,
              r,
              s
            } : {}
          },
          serializedTransaction,
          type: "eip4844"
        });
      const transaction = {
        blobVersionedHashes,
        chainId: (0, fromHex_js_1.hexToNumber)(chainId),
        type: "eip4844"
      };
      if ((0, isHex_js_1.isHex)(to) && to !== "0x")
        transaction.to = to;
      if ((0, isHex_js_1.isHex)(gas) && gas !== "0x")
        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);
      if ((0, isHex_js_1.isHex)(data) && data !== "0x")
        transaction.data = data;
      if ((0, isHex_js_1.isHex)(nonce) && nonce !== "0x")
        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);
      if ((0, isHex_js_1.isHex)(value) && value !== "0x")
        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);
      if ((0, isHex_js_1.isHex)(maxFeePerBlobGas) && maxFeePerBlobGas !== "0x")
        transaction.maxFeePerBlobGas = (0, fromHex_js_1.hexToBigInt)(maxFeePerBlobGas);
      if ((0, isHex_js_1.isHex)(maxFeePerGas) && maxFeePerGas !== "0x")
        transaction.maxFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxFeePerGas);
      if ((0, isHex_js_1.isHex)(maxPriorityFeePerGas) && maxPriorityFeePerGas !== "0x")
        transaction.maxPriorityFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxPriorityFeePerGas);
      if (accessList.length !== 0 && accessList !== "0x")
        transaction.accessList = parseAccessList(accessList);
      if (blobs && commitments && proofs)
        transaction.sidecars = (0, toBlobSidecars_js_1.toBlobSidecars)({
          blobs,
          commitments,
          proofs
        });
      (0, assertTransaction_js_1.assertTransactionEIP4844)(transaction);
      const signature = transactionArray.length === 14 ? parseEIP155Signature(transactionArray) : void 0;
      return { ...signature, ...transaction };
    }
    function parseTransactionEIP1559(serializedTransaction) {
      const transactionArray = toTransactionArray(serializedTransaction);
      const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, v, r, s] = transactionArray;
      if (!(transactionArray.length === 9 || transactionArray.length === 12))
        throw new transaction_js_1.InvalidSerializedTransactionError({
          attributes: {
            chainId,
            nonce,
            maxPriorityFeePerGas,
            maxFeePerGas,
            gas,
            to,
            value,
            data,
            accessList,
            ...transactionArray.length > 9 ? {
              v,
              r,
              s
            } : {}
          },
          serializedTransaction,
          type: "eip1559"
        });
      const transaction = {
        chainId: (0, fromHex_js_1.hexToNumber)(chainId),
        type: "eip1559"
      };
      if ((0, isHex_js_1.isHex)(to) && to !== "0x")
        transaction.to = to;
      if ((0, isHex_js_1.isHex)(gas) && gas !== "0x")
        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);
      if ((0, isHex_js_1.isHex)(data) && data !== "0x")
        transaction.data = data;
      if ((0, isHex_js_1.isHex)(nonce) && nonce !== "0x")
        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);
      if ((0, isHex_js_1.isHex)(value) && value !== "0x")
        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);
      if ((0, isHex_js_1.isHex)(maxFeePerGas) && maxFeePerGas !== "0x")
        transaction.maxFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxFeePerGas);
      if ((0, isHex_js_1.isHex)(maxPriorityFeePerGas) && maxPriorityFeePerGas !== "0x")
        transaction.maxPriorityFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxPriorityFeePerGas);
      if (accessList.length !== 0 && accessList !== "0x")
        transaction.accessList = parseAccessList(accessList);
      (0, assertTransaction_js_1.assertTransactionEIP1559)(transaction);
      const signature = transactionArray.length === 12 ? parseEIP155Signature(transactionArray) : void 0;
      return { ...signature, ...transaction };
    }
    function parseTransactionEIP2930(serializedTransaction) {
      const transactionArray = toTransactionArray(serializedTransaction);
      const [chainId, nonce, gasPrice, gas, to, value, data, accessList, v, r, s] = transactionArray;
      if (!(transactionArray.length === 8 || transactionArray.length === 11))
        throw new transaction_js_1.InvalidSerializedTransactionError({
          attributes: {
            chainId,
            nonce,
            gasPrice,
            gas,
            to,
            value,
            data,
            accessList,
            ...transactionArray.length > 8 ? {
              v,
              r,
              s
            } : {}
          },
          serializedTransaction,
          type: "eip2930"
        });
      const transaction = {
        chainId: (0, fromHex_js_1.hexToNumber)(chainId),
        type: "eip2930"
      };
      if ((0, isHex_js_1.isHex)(to) && to !== "0x")
        transaction.to = to;
      if ((0, isHex_js_1.isHex)(gas) && gas !== "0x")
        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);
      if ((0, isHex_js_1.isHex)(data) && data !== "0x")
        transaction.data = data;
      if ((0, isHex_js_1.isHex)(nonce) && nonce !== "0x")
        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);
      if ((0, isHex_js_1.isHex)(value) && value !== "0x")
        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);
      if ((0, isHex_js_1.isHex)(gasPrice) && gasPrice !== "0x")
        transaction.gasPrice = (0, fromHex_js_1.hexToBigInt)(gasPrice);
      if (accessList.length !== 0 && accessList !== "0x")
        transaction.accessList = parseAccessList(accessList);
      (0, assertTransaction_js_1.assertTransactionEIP2930)(transaction);
      const signature = transactionArray.length === 11 ? parseEIP155Signature(transactionArray) : void 0;
      return { ...signature, ...transaction };
    }
    function parseTransactionLegacy(serializedTransaction) {
      const transactionArray = (0, fromRlp_js_1.fromRlp)(serializedTransaction, "hex");
      const [nonce, gasPrice, gas, to, value, data, chainIdOrV_, r, s] = transactionArray;
      if (!(transactionArray.length === 6 || transactionArray.length === 9))
        throw new transaction_js_1.InvalidSerializedTransactionError({
          attributes: {
            nonce,
            gasPrice,
            gas,
            to,
            value,
            data,
            ...transactionArray.length > 6 ? {
              v: chainIdOrV_,
              r,
              s
            } : {}
          },
          serializedTransaction,
          type: "legacy"
        });
      const transaction = {
        type: "legacy"
      };
      if ((0, isHex_js_1.isHex)(to) && to !== "0x")
        transaction.to = to;
      if ((0, isHex_js_1.isHex)(gas) && gas !== "0x")
        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);
      if ((0, isHex_js_1.isHex)(data) && data !== "0x")
        transaction.data = data;
      if ((0, isHex_js_1.isHex)(nonce) && nonce !== "0x")
        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);
      if ((0, isHex_js_1.isHex)(value) && value !== "0x")
        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);
      if ((0, isHex_js_1.isHex)(gasPrice) && gasPrice !== "0x")
        transaction.gasPrice = (0, fromHex_js_1.hexToBigInt)(gasPrice);
      (0, assertTransaction_js_1.assertTransactionLegacy)(transaction);
      if (transactionArray.length === 6)
        return transaction;
      const chainIdOrV = (0, isHex_js_1.isHex)(chainIdOrV_) && chainIdOrV_ !== "0x" ? (0, fromHex_js_1.hexToBigInt)(chainIdOrV_) : 0n;
      if (s === "0x" && r === "0x") {
        if (chainIdOrV > 0)
          transaction.chainId = Number(chainIdOrV);
        return transaction;
      }
      const v = chainIdOrV;
      const chainId = Number((v - 35n) / 2n);
      if (chainId > 0)
        transaction.chainId = chainId;
      else if (v !== 27n && v !== 28n)
        throw new transaction_js_1.InvalidLegacyVError({ v });
      transaction.v = v;
      transaction.s = s;
      transaction.r = r;
      transaction.yParity = v % 2n === 0n ? 1 : 0;
      return transaction;
    }
    function toTransactionArray(serializedTransaction) {
      return (0, fromRlp_js_1.fromRlp)(`0x${serializedTransaction.slice(4)}`, "hex");
    }
    function parseAccessList(accessList_) {
      const accessList = [];
      for (let i = 0; i < accessList_.length; i++) {
        const [address, storageKeys] = accessList_[i];
        if (!(0, isAddress_js_1.isAddress)(address, { strict: false }))
          throw new address_js_1.InvalidAddressError({ address });
        accessList.push({
          address,
          storageKeys: storageKeys.map((key) => (0, isHash_js_1.isHash)(key) ? key : (0, trim_js_1.trim)(key))
        });
      }
      return accessList;
    }
    function parseAuthorizationList(serializedAuthorizationList) {
      const authorizationList = [];
      for (let i = 0; i < serializedAuthorizationList.length; i++) {
        const [chainId, contractAddress, nonce, yParity, r, s] = serializedAuthorizationList[i];
        authorizationList.push({
          chainId: (0, fromHex_js_1.hexToNumber)(chainId),
          contractAddress,
          nonce: (0, fromHex_js_1.hexToNumber)(nonce),
          ...parseEIP155Signature([yParity, r, s])
        });
      }
      return authorizationList;
    }
    function parseEIP155Signature(transactionArray) {
      const signature = transactionArray.slice(-3);
      const v = signature[0] === "0x" || (0, fromHex_js_1.hexToBigInt)(signature[0]) === 0n ? 27n : 28n;
      return {
        r: (0, pad_js_1.padHex)(signature[1], { size: 32 }),
        s: (0, pad_js_1.padHex)(signature[2], { size: 32 }),
        v,
        yParity: v === 27n ? 0 : 1
      };
    }
  }
});

// node_modules/viem/_cjs/errors/unit.js
var require_unit2 = __commonJS({
  "node_modules/viem/_cjs/errors/unit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidDecimalNumberError = void 0;
    var base_js_1 = require_base();
    var InvalidDecimalNumberError = class extends base_js_1.BaseError {
      constructor({ value }) {
        super(`Number \`${value}\` is not a valid decimal number.`, {
          name: "InvalidDecimalNumberError"
        });
      }
    };
    exports2.InvalidDecimalNumberError = InvalidDecimalNumberError;
  }
});

// node_modules/viem/_cjs/utils/unit/parseUnits.js
var require_parseUnits = __commonJS({
  "node_modules/viem/_cjs/utils/unit/parseUnits.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseUnits = parseUnits;
    var unit_js_1 = require_unit2();
    function parseUnits(value, decimals) {
      if (!/^(-?)([0-9]*)\.?([0-9]*)$/.test(value))
        throw new unit_js_1.InvalidDecimalNumberError({ value });
      let [integer, fraction = "0"] = value.split(".");
      const negative = integer.startsWith("-");
      if (negative)
        integer = integer.slice(1);
      fraction = fraction.replace(/(0+)$/, "");
      if (decimals === 0) {
        if (Math.round(Number(`.${fraction}`)) === 1)
          integer = `${BigInt(integer) + 1n}`;
        fraction = "";
      } else if (fraction.length > decimals) {
        const [left, unit, right] = [
          fraction.slice(0, decimals - 1),
          fraction.slice(decimals - 1, decimals),
          fraction.slice(decimals)
        ];
        const rounded = Math.round(Number(`${unit}.${right}`));
        if (rounded > 9)
          fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, "0");
        else
          fraction = `${left}${rounded}`;
        if (fraction.length > decimals) {
          fraction = fraction.slice(1);
          integer = `${BigInt(integer) + 1n}`;
        }
        fraction = fraction.slice(0, decimals);
      } else {
        fraction = fraction.padEnd(decimals, "0");
      }
      return BigInt(`${negative ? "-" : ""}${integer}${fraction}`);
    }
  }
});

// node_modules/viem/_cjs/utils/unit/parseEther.js
var require_parseEther = __commonJS({
  "node_modules/viem/_cjs/utils/unit/parseEther.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseEther = parseEther;
    var unit_js_1 = require_unit();
    var parseUnits_js_1 = require_parseUnits();
    function parseEther(ether, unit = "wei") {
      return (0, parseUnits_js_1.parseUnits)(ether, unit_js_1.etherUnits[unit]);
    }
  }
});

// node_modules/viem/_cjs/utils/unit/parseGwei.js
var require_parseGwei = __commonJS({
  "node_modules/viem/_cjs/utils/unit/parseGwei.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseGwei = parseGwei;
    var unit_js_1 = require_unit();
    var parseUnits_js_1 = require_parseUnits();
    function parseGwei(ether, unit = "wei") {
      return (0, parseUnits_js_1.parseUnits)(ether, unit_js_1.gweiUnits[unit]);
    }
  }
});

// node_modules/viem/_cjs/utils/nonceManager.js
var require_nonceManager = __commonJS({
  "node_modules/viem/_cjs/utils/nonceManager.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nonceManager = void 0;
    exports2.createNonceManager = createNonceManager;
    exports2.jsonRpc = jsonRpc;
    var getTransactionCount_js_1 = require_getTransactionCount();
    var lru_js_1 = require_lru();
    function createNonceManager(parameters) {
      const { source } = parameters;
      const deltaMap = /* @__PURE__ */ new Map();
      const nonceMap = new lru_js_1.LruMap(8192);
      const promiseMap = /* @__PURE__ */ new Map();
      const getKey = ({ address, chainId }) => `${address}.${chainId}`;
      return {
        async consume({ address, chainId, client }) {
          const key = getKey({ address, chainId });
          const promise = this.get({ address, chainId, client });
          this.increment({ address, chainId });
          const nonce = await promise;
          await source.set({ address, chainId }, nonce);
          nonceMap.set(key, nonce);
          return nonce;
        },
        async increment({ address, chainId }) {
          const key = getKey({ address, chainId });
          const delta = deltaMap.get(key) ?? 0;
          deltaMap.set(key, delta + 1);
        },
        async get({ address, chainId, client }) {
          const key = getKey({ address, chainId });
          let promise = promiseMap.get(key);
          if (!promise) {
            promise = (async () => {
              try {
                const nonce = await source.get({ address, chainId, client });
                const previousNonce = nonceMap.get(key) ?? 0;
                if (previousNonce > 0 && nonce <= previousNonce)
                  return previousNonce + 1;
                nonceMap.delete(key);
                return nonce;
              } finally {
                this.reset({ address, chainId });
              }
            })();
            promiseMap.set(key, promise);
          }
          const delta = deltaMap.get(key) ?? 0;
          return delta + await promise;
        },
        reset({ address, chainId }) {
          const key = getKey({ address, chainId });
          deltaMap.delete(key);
          promiseMap.delete(key);
        }
      };
    }
    function jsonRpc() {
      return {
        async get(parameters) {
          const { address, client } = parameters;
          return (0, getTransactionCount_js_1.getTransactionCount)(client, {
            address,
            blockTag: "pending"
          });
        },
        set() {
        }
      };
    }
    exports2.nonceManager = createNonceManager({
      source: jsonRpc()
    });
  }
});

// node_modules/viem/_cjs/utils/index.js
var require_utils9 = __commonJS({
  "node_modules/viem/_cjs/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isAddress = exports2.getAddress = exports2.getCreate2Address = exports2.getCreateAddress = exports2.getContractAddress = exports2.publicKeyToAddress = exports2.parseAccount = exports2.formatAbiParams = exports2.formatAbiItem = exports2.formatAbiItemWithArgs = exports2.encodePacked = exports2.parseAbiParameters = exports2.parseAbiParameter = exports2.parseAbiItem = exports2.parseAbi = exports2.getAbiItem = exports2.parseEventLogs = exports2.encodeFunctionResult = exports2.encodeFunctionData = exports2.encodeEventTopics = exports2.encodeErrorResult = exports2.encodeDeployData = exports2.encodeAbiParameters = exports2.decodeFunctionResult = exports2.decodeFunctionData = exports2.decodeEventLog = exports2.decodeErrorResult = exports2.decodeAbiParameters = exports2.validateTypedData = exports2.serializeTypedData = exports2.stringify = exports2.getWebSocketRpcClient = exports2.socketClientCache = exports2.getSocketRpcClient = exports2.getHttpRpcClient = exports2.rpc = exports2.getSocket = exports2.integerRegex = exports2.bytesRegex = exports2.arrayRegex = exports2.getChainContractAddress = exports2.extractChain = exports2.defineChain = exports2.assertCurrentChain = exports2.offchainLookupSignature = exports2.offchainLookupAbiItem = exports2.offchainLookup = exports2.ccipFetch = exports2.ccipRequest = exports2.buildRequest = void 0;
    exports2.getCallError = exports2.getNodeError = exports2.containsNodeError = exports2.fromRlp = exports2.hexToString = exports2.hexToNumber = exports2.hexToBigInt = exports2.hexToBool = exports2.fromHex = exports2.fromBytes = exports2.bytesToString = exports2.bytesToNumber = exports2.bytesToBool = exports2.bytesToBigint = exports2.bytesToBigInt = exports2.stringToHex = exports2.numberToHex = exports2.toHex = exports2.bytesToHex = exports2.boolToHex = exports2.stringToBytes = exports2.numberToBytes = exports2.hexToBytes = exports2.toBytes = exports2.boolToBytes = exports2.toRlp = exports2.extract = exports2.formatTransactionRequest = exports2.defineTransactionRequest = exports2.defineTransactionReceipt = exports2.formatLog = exports2.transactionType = exports2.formatTransaction = exports2.defineTransaction = exports2.formatBlock = exports2.defineBlock = exports2.trim = exports2.sliceHex = exports2.sliceBytes = exports2.slice = exports2.size = exports2.padHex = exports2.padBytes = exports2.pad = exports2.isHex = exports2.isBytes = exports2.concatHex = exports2.concatBytes = exports2.concat = exports2.isAddressEqual = void 0;
    exports2.nonceManager = exports2.createNonceManager = exports2.parseGwei = exports2.parseEther = exports2.parseUnits = exports2.formatUnits = exports2.formatGwei = exports2.formatEther = exports2.serializeAccessList = exports2.serializeTransaction = exports2.parseTransaction = exports2.assertTransactionLegacy = exports2.assertTransactionEIP2930 = exports2.assertTransactionEIP1559 = exports2.assertRequest = exports2.getTransactionType = exports2.getSerializedTransactionType = exports2.serializeErc6492Signature = exports2.isErc6492Signature = exports2.parseErc6492Signature = exports2.hashMessage = exports2.verifyTypedData = exports2.verifyMessage = exports2.verifyHash = exports2.recoverTypedDataAddress = exports2.recoverPublicKey = exports2.recoverMessageAddress = exports2.recoverAddress = exports2.hashTypedData = exports2.ripemd160 = exports2.sha256 = exports2.keccak256 = exports2.isHash = exports2.toFunctionHash = exports2.toEventHash = exports2.getFunctionSignature = exports2.toFunctionSignature = exports2.getEventSignature = exports2.toEventSignature = exports2.getFunctionSelector = exports2.toFunctionSelector = exports2.getEventSelector = exports2.toEventSelector = exports2.defineFormatter = exports2.getAction = exports2.getTransactionError = exports2.getEstimateGasError = exports2.getContractError = void 0;
    var buildRequest_js_1 = require_buildRequest();
    Object.defineProperty(exports2, "buildRequest", { enumerable: true, get: function() {
      return buildRequest_js_1.buildRequest;
    } });
    var ccip_js_1 = require_ccip2();
    Object.defineProperty(exports2, "ccipRequest", { enumerable: true, get: function() {
      return ccip_js_1.ccipRequest;
    } });
    Object.defineProperty(exports2, "ccipFetch", { enumerable: true, get: function() {
      return ccip_js_1.ccipRequest;
    } });
    Object.defineProperty(exports2, "offchainLookup", { enumerable: true, get: function() {
      return ccip_js_1.offchainLookup;
    } });
    Object.defineProperty(exports2, "offchainLookupAbiItem", { enumerable: true, get: function() {
      return ccip_js_1.offchainLookupAbiItem;
    } });
    Object.defineProperty(exports2, "offchainLookupSignature", { enumerable: true, get: function() {
      return ccip_js_1.offchainLookupSignature;
    } });
    var assertCurrentChain_js_1 = require_assertCurrentChain();
    Object.defineProperty(exports2, "assertCurrentChain", { enumerable: true, get: function() {
      return assertCurrentChain_js_1.assertCurrentChain;
    } });
    var defineChain_js_1 = require_defineChain();
    Object.defineProperty(exports2, "defineChain", { enumerable: true, get: function() {
      return defineChain_js_1.defineChain;
    } });
    var extractChain_js_1 = require_extractChain();
    Object.defineProperty(exports2, "extractChain", { enumerable: true, get: function() {
      return extractChain_js_1.extractChain;
    } });
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    Object.defineProperty(exports2, "getChainContractAddress", { enumerable: true, get: function() {
      return getChainContractAddress_js_1.getChainContractAddress;
    } });
    var regex_js_1 = require_regex2();
    Object.defineProperty(exports2, "arrayRegex", { enumerable: true, get: function() {
      return regex_js_1.arrayRegex;
    } });
    Object.defineProperty(exports2, "bytesRegex", { enumerable: true, get: function() {
      return regex_js_1.bytesRegex;
    } });
    Object.defineProperty(exports2, "integerRegex", { enumerable: true, get: function() {
      return regex_js_1.integerRegex;
    } });
    var compat_js_1 = require_compat();
    Object.defineProperty(exports2, "getSocket", { enumerable: true, get: function() {
      return compat_js_1.getSocket;
    } });
    Object.defineProperty(exports2, "rpc", { enumerable: true, get: function() {
      return compat_js_1.rpc;
    } });
    var http_js_1 = require_http();
    Object.defineProperty(exports2, "getHttpRpcClient", { enumerable: true, get: function() {
      return http_js_1.getHttpRpcClient;
    } });
    var socket_js_1 = require_socket();
    Object.defineProperty(exports2, "getSocketRpcClient", { enumerable: true, get: function() {
      return socket_js_1.getSocketRpcClient;
    } });
    Object.defineProperty(exports2, "socketClientCache", { enumerable: true, get: function() {
      return socket_js_1.socketClientCache;
    } });
    var webSocket_js_1 = require_webSocket();
    Object.defineProperty(exports2, "getWebSocketRpcClient", { enumerable: true, get: function() {
      return webSocket_js_1.getWebSocketRpcClient;
    } });
    var stringify_js_1 = require_stringify();
    Object.defineProperty(exports2, "stringify", { enumerable: true, get: function() {
      return stringify_js_1.stringify;
    } });
    var typedData_js_1 = require_typedData();
    Object.defineProperty(exports2, "serializeTypedData", { enumerable: true, get: function() {
      return typedData_js_1.serializeTypedData;
    } });
    Object.defineProperty(exports2, "validateTypedData", { enumerable: true, get: function() {
      return typedData_js_1.validateTypedData;
    } });
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    Object.defineProperty(exports2, "decodeAbiParameters", { enumerable: true, get: function() {
      return decodeAbiParameters_js_1.decodeAbiParameters;
    } });
    var decodeErrorResult_js_1 = require_decodeErrorResult();
    Object.defineProperty(exports2, "decodeErrorResult", { enumerable: true, get: function() {
      return decodeErrorResult_js_1.decodeErrorResult;
    } });
    var decodeEventLog_js_1 = require_decodeEventLog();
    Object.defineProperty(exports2, "decodeEventLog", { enumerable: true, get: function() {
      return decodeEventLog_js_1.decodeEventLog;
    } });
    var decodeFunctionData_js_1 = require_decodeFunctionData();
    Object.defineProperty(exports2, "decodeFunctionData", { enumerable: true, get: function() {
      return decodeFunctionData_js_1.decodeFunctionData;
    } });
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    Object.defineProperty(exports2, "decodeFunctionResult", { enumerable: true, get: function() {
      return decodeFunctionResult_js_1.decodeFunctionResult;
    } });
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    Object.defineProperty(exports2, "encodeAbiParameters", { enumerable: true, get: function() {
      return encodeAbiParameters_js_1.encodeAbiParameters;
    } });
    var encodeDeployData_js_1 = require_encodeDeployData();
    Object.defineProperty(exports2, "encodeDeployData", { enumerable: true, get: function() {
      return encodeDeployData_js_1.encodeDeployData;
    } });
    var encodeErrorResult_js_1 = require_encodeErrorResult();
    Object.defineProperty(exports2, "encodeErrorResult", { enumerable: true, get: function() {
      return encodeErrorResult_js_1.encodeErrorResult;
    } });
    var encodeEventTopics_js_1 = require_encodeEventTopics();
    Object.defineProperty(exports2, "encodeEventTopics", { enumerable: true, get: function() {
      return encodeEventTopics_js_1.encodeEventTopics;
    } });
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    Object.defineProperty(exports2, "encodeFunctionData", { enumerable: true, get: function() {
      return encodeFunctionData_js_1.encodeFunctionData;
    } });
    var encodeFunctionResult_js_1 = require_encodeFunctionResult();
    Object.defineProperty(exports2, "encodeFunctionResult", { enumerable: true, get: function() {
      return encodeFunctionResult_js_1.encodeFunctionResult;
    } });
    var parseEventLogs_js_1 = require_parseEventLogs();
    Object.defineProperty(exports2, "parseEventLogs", { enumerable: true, get: function() {
      return parseEventLogs_js_1.parseEventLogs;
    } });
    var getAbiItem_js_1 = require_getAbiItem();
    Object.defineProperty(exports2, "getAbiItem", { enumerable: true, get: function() {
      return getAbiItem_js_1.getAbiItem;
    } });
    var abitype_1 = require_exports();
    Object.defineProperty(exports2, "parseAbi", { enumerable: true, get: function() {
      return abitype_1.parseAbi;
    } });
    Object.defineProperty(exports2, "parseAbiItem", { enumerable: true, get: function() {
      return abitype_1.parseAbiItem;
    } });
    Object.defineProperty(exports2, "parseAbiParameter", { enumerable: true, get: function() {
      return abitype_1.parseAbiParameter;
    } });
    Object.defineProperty(exports2, "parseAbiParameters", { enumerable: true, get: function() {
      return abitype_1.parseAbiParameters;
    } });
    var encodePacked_js_1 = require_encodePacked();
    Object.defineProperty(exports2, "encodePacked", { enumerable: true, get: function() {
      return encodePacked_js_1.encodePacked;
    } });
    var formatAbiItemWithArgs_js_1 = require_formatAbiItemWithArgs();
    Object.defineProperty(exports2, "formatAbiItemWithArgs", { enumerable: true, get: function() {
      return formatAbiItemWithArgs_js_1.formatAbiItemWithArgs;
    } });
    var formatAbiItem_js_1 = require_formatAbiItem();
    Object.defineProperty(exports2, "formatAbiItem", { enumerable: true, get: function() {
      return formatAbiItem_js_1.formatAbiItem;
    } });
    Object.defineProperty(exports2, "formatAbiParams", { enumerable: true, get: function() {
      return formatAbiItem_js_1.formatAbiParams;
    } });
    var parseAccount_js_1 = require_parseAccount();
    Object.defineProperty(exports2, "parseAccount", { enumerable: true, get: function() {
      return parseAccount_js_1.parseAccount;
    } });
    var publicKeyToAddress_js_1 = require_publicKeyToAddress();
    Object.defineProperty(exports2, "publicKeyToAddress", { enumerable: true, get: function() {
      return publicKeyToAddress_js_1.publicKeyToAddress;
    } });
    var getContractAddress_js_1 = require_getContractAddress();
    Object.defineProperty(exports2, "getContractAddress", { enumerable: true, get: function() {
      return getContractAddress_js_1.getContractAddress;
    } });
    Object.defineProperty(exports2, "getCreateAddress", { enumerable: true, get: function() {
      return getContractAddress_js_1.getCreateAddress;
    } });
    Object.defineProperty(exports2, "getCreate2Address", { enumerable: true, get: function() {
      return getContractAddress_js_1.getCreate2Address;
    } });
    var getAddress_js_1 = require_getAddress();
    Object.defineProperty(exports2, "getAddress", { enumerable: true, get: function() {
      return getAddress_js_1.getAddress;
    } });
    var isAddress_js_1 = require_isAddress();
    Object.defineProperty(exports2, "isAddress", { enumerable: true, get: function() {
      return isAddress_js_1.isAddress;
    } });
    var isAddressEqual_js_1 = require_isAddressEqual();
    Object.defineProperty(exports2, "isAddressEqual", { enumerable: true, get: function() {
      return isAddressEqual_js_1.isAddressEqual;
    } });
    var concat_js_1 = require_concat();
    Object.defineProperty(exports2, "concat", { enumerable: true, get: function() {
      return concat_js_1.concat;
    } });
    Object.defineProperty(exports2, "concatBytes", { enumerable: true, get: function() {
      return concat_js_1.concatBytes;
    } });
    Object.defineProperty(exports2, "concatHex", { enumerable: true, get: function() {
      return concat_js_1.concatHex;
    } });
    var isBytes_js_1 = require_isBytes();
    Object.defineProperty(exports2, "isBytes", { enumerable: true, get: function() {
      return isBytes_js_1.isBytes;
    } });
    var isHex_js_1 = require_isHex();
    Object.defineProperty(exports2, "isHex", { enumerable: true, get: function() {
      return isHex_js_1.isHex;
    } });
    var pad_js_1 = require_pad();
    Object.defineProperty(exports2, "pad", { enumerable: true, get: function() {
      return pad_js_1.pad;
    } });
    Object.defineProperty(exports2, "padBytes", { enumerable: true, get: function() {
      return pad_js_1.padBytes;
    } });
    Object.defineProperty(exports2, "padHex", { enumerable: true, get: function() {
      return pad_js_1.padHex;
    } });
    var size_js_1 = require_size();
    Object.defineProperty(exports2, "size", { enumerable: true, get: function() {
      return size_js_1.size;
    } });
    var slice_js_1 = require_slice();
    Object.defineProperty(exports2, "slice", { enumerable: true, get: function() {
      return slice_js_1.slice;
    } });
    Object.defineProperty(exports2, "sliceBytes", { enumerable: true, get: function() {
      return slice_js_1.sliceBytes;
    } });
    Object.defineProperty(exports2, "sliceHex", { enumerable: true, get: function() {
      return slice_js_1.sliceHex;
    } });
    var trim_js_1 = require_trim();
    Object.defineProperty(exports2, "trim", { enumerable: true, get: function() {
      return trim_js_1.trim;
    } });
    var block_js_1 = require_block();
    Object.defineProperty(exports2, "defineBlock", { enumerable: true, get: function() {
      return block_js_1.defineBlock;
    } });
    Object.defineProperty(exports2, "formatBlock", { enumerable: true, get: function() {
      return block_js_1.formatBlock;
    } });
    var transaction_js_1 = require_transaction();
    Object.defineProperty(exports2, "defineTransaction", { enumerable: true, get: function() {
      return transaction_js_1.defineTransaction;
    } });
    Object.defineProperty(exports2, "formatTransaction", { enumerable: true, get: function() {
      return transaction_js_1.formatTransaction;
    } });
    Object.defineProperty(exports2, "transactionType", { enumerable: true, get: function() {
      return transaction_js_1.transactionType;
    } });
    var log_js_1 = require_log();
    Object.defineProperty(exports2, "formatLog", { enumerable: true, get: function() {
      return log_js_1.formatLog;
    } });
    var transactionReceipt_js_1 = require_transactionReceipt();
    Object.defineProperty(exports2, "defineTransactionReceipt", { enumerable: true, get: function() {
      return transactionReceipt_js_1.defineTransactionReceipt;
    } });
    var transactionRequest_js_1 = require_transactionRequest();
    Object.defineProperty(exports2, "defineTransactionRequest", { enumerable: true, get: function() {
      return transactionRequest_js_1.defineTransactionRequest;
    } });
    Object.defineProperty(exports2, "formatTransactionRequest", { enumerable: true, get: function() {
      return transactionRequest_js_1.formatTransactionRequest;
    } });
    var extract_js_1 = require_extract();
    Object.defineProperty(exports2, "extract", { enumerable: true, get: function() {
      return extract_js_1.extract;
    } });
    var toRlp_js_1 = require_toRlp();
    Object.defineProperty(exports2, "toRlp", { enumerable: true, get: function() {
      return toRlp_js_1.toRlp;
    } });
    var toBytes_js_1 = require_toBytes();
    Object.defineProperty(exports2, "boolToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.boolToBytes;
    } });
    Object.defineProperty(exports2, "toBytes", { enumerable: true, get: function() {
      return toBytes_js_1.toBytes;
    } });
    Object.defineProperty(exports2, "hexToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.hexToBytes;
    } });
    Object.defineProperty(exports2, "numberToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.numberToBytes;
    } });
    Object.defineProperty(exports2, "stringToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.stringToBytes;
    } });
    var toHex_js_1 = require_toHex();
    Object.defineProperty(exports2, "boolToHex", { enumerable: true, get: function() {
      return toHex_js_1.boolToHex;
    } });
    Object.defineProperty(exports2, "bytesToHex", { enumerable: true, get: function() {
      return toHex_js_1.bytesToHex;
    } });
    Object.defineProperty(exports2, "toHex", { enumerable: true, get: function() {
      return toHex_js_1.toHex;
    } });
    Object.defineProperty(exports2, "numberToHex", { enumerable: true, get: function() {
      return toHex_js_1.numberToHex;
    } });
    Object.defineProperty(exports2, "stringToHex", { enumerable: true, get: function() {
      return toHex_js_1.stringToHex;
    } });
    var fromBytes_js_1 = require_fromBytes();
    Object.defineProperty(exports2, "bytesToBigInt", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToBigInt;
    } });
    Object.defineProperty(exports2, "bytesToBigint", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToBigInt;
    } });
    Object.defineProperty(exports2, "bytesToBool", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToBool;
    } });
    Object.defineProperty(exports2, "bytesToNumber", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToNumber;
    } });
    Object.defineProperty(exports2, "bytesToString", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToString;
    } });
    Object.defineProperty(exports2, "fromBytes", { enumerable: true, get: function() {
      return fromBytes_js_1.fromBytes;
    } });
    var fromHex_js_1 = require_fromHex();
    Object.defineProperty(exports2, "fromHex", { enumerable: true, get: function() {
      return fromHex_js_1.fromHex;
    } });
    Object.defineProperty(exports2, "hexToBool", { enumerable: true, get: function() {
      return fromHex_js_1.hexToBool;
    } });
    Object.defineProperty(exports2, "hexToBigInt", { enumerable: true, get: function() {
      return fromHex_js_1.hexToBigInt;
    } });
    Object.defineProperty(exports2, "hexToNumber", { enumerable: true, get: function() {
      return fromHex_js_1.hexToNumber;
    } });
    Object.defineProperty(exports2, "hexToString", { enumerable: true, get: function() {
      return fromHex_js_1.hexToString;
    } });
    var fromRlp_js_1 = require_fromRlp();
    Object.defineProperty(exports2, "fromRlp", { enumerable: true, get: function() {
      return fromRlp_js_1.fromRlp;
    } });
    var getNodeError_js_1 = require_getNodeError();
    Object.defineProperty(exports2, "containsNodeError", { enumerable: true, get: function() {
      return getNodeError_js_1.containsNodeError;
    } });
    Object.defineProperty(exports2, "getNodeError", { enumerable: true, get: function() {
      return getNodeError_js_1.getNodeError;
    } });
    var getCallError_js_1 = require_getCallError();
    Object.defineProperty(exports2, "getCallError", { enumerable: true, get: function() {
      return getCallError_js_1.getCallError;
    } });
    var getContractError_js_1 = require_getContractError();
    Object.defineProperty(exports2, "getContractError", { enumerable: true, get: function() {
      return getContractError_js_1.getContractError;
    } });
    var getEstimateGasError_js_1 = require_getEstimateGasError();
    Object.defineProperty(exports2, "getEstimateGasError", { enumerable: true, get: function() {
      return getEstimateGasError_js_1.getEstimateGasError;
    } });
    var getTransactionError_js_1 = require_getTransactionError();
    Object.defineProperty(exports2, "getTransactionError", { enumerable: true, get: function() {
      return getTransactionError_js_1.getTransactionError;
    } });
    var getAction_js_1 = require_getAction();
    Object.defineProperty(exports2, "getAction", { enumerable: true, get: function() {
      return getAction_js_1.getAction;
    } });
    var formatter_js_1 = require_formatter();
    Object.defineProperty(exports2, "defineFormatter", { enumerable: true, get: function() {
      return formatter_js_1.defineFormatter;
    } });
    var toEventSelector_js_1 = require_toEventSelector();
    Object.defineProperty(exports2, "toEventSelector", { enumerable: true, get: function() {
      return toEventSelector_js_1.toEventSelector;
    } });
    Object.defineProperty(exports2, "getEventSelector", { enumerable: true, get: function() {
      return toEventSelector_js_1.toEventSelector;
    } });
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    Object.defineProperty(exports2, "toFunctionSelector", { enumerable: true, get: function() {
      return toFunctionSelector_js_1.toFunctionSelector;
    } });
    Object.defineProperty(exports2, "getFunctionSelector", { enumerable: true, get: function() {
      return toFunctionSelector_js_1.toFunctionSelector;
    } });
    var toEventSignature_js_1 = require_toEventSignature();
    Object.defineProperty(exports2, "toEventSignature", { enumerable: true, get: function() {
      return toEventSignature_js_1.toEventSignature;
    } });
    Object.defineProperty(exports2, "getEventSignature", { enumerable: true, get: function() {
      return toEventSignature_js_1.toEventSignature;
    } });
    var toFunctionSignature_js_1 = require_toFunctionSignature();
    Object.defineProperty(exports2, "toFunctionSignature", { enumerable: true, get: function() {
      return toFunctionSignature_js_1.toFunctionSignature;
    } });
    Object.defineProperty(exports2, "getFunctionSignature", { enumerable: true, get: function() {
      return toFunctionSignature_js_1.toFunctionSignature;
    } });
    var toEventHash_js_1 = require_toEventHash();
    Object.defineProperty(exports2, "toEventHash", { enumerable: true, get: function() {
      return toEventHash_js_1.toEventHash;
    } });
    var toFunctionHash_js_1 = require_toFunctionHash();
    Object.defineProperty(exports2, "toFunctionHash", { enumerable: true, get: function() {
      return toFunctionHash_js_1.toFunctionHash;
    } });
    var isHash_js_1 = require_isHash();
    Object.defineProperty(exports2, "isHash", { enumerable: true, get: function() {
      return isHash_js_1.isHash;
    } });
    var keccak256_js_1 = require_keccak256();
    Object.defineProperty(exports2, "keccak256", { enumerable: true, get: function() {
      return keccak256_js_1.keccak256;
    } });
    var sha256_js_1 = require_sha2562();
    Object.defineProperty(exports2, "sha256", { enumerable: true, get: function() {
      return sha256_js_1.sha256;
    } });
    var ripemd160_js_1 = require_ripemd1602();
    Object.defineProperty(exports2, "ripemd160", { enumerable: true, get: function() {
      return ripemd160_js_1.ripemd160;
    } });
    var hashTypedData_js_1 = require_hashTypedData();
    Object.defineProperty(exports2, "hashTypedData", { enumerable: true, get: function() {
      return hashTypedData_js_1.hashTypedData;
    } });
    var recoverAddress_js_1 = require_recoverAddress();
    Object.defineProperty(exports2, "recoverAddress", { enumerable: true, get: function() {
      return recoverAddress_js_1.recoverAddress;
    } });
    var recoverMessageAddress_js_1 = require_recoverMessageAddress();
    Object.defineProperty(exports2, "recoverMessageAddress", { enumerable: true, get: function() {
      return recoverMessageAddress_js_1.recoverMessageAddress;
    } });
    var recoverPublicKey_js_1 = require_recoverPublicKey();
    Object.defineProperty(exports2, "recoverPublicKey", { enumerable: true, get: function() {
      return recoverPublicKey_js_1.recoverPublicKey;
    } });
    var recoverTypedDataAddress_js_1 = require_recoverTypedDataAddress();
    Object.defineProperty(exports2, "recoverTypedDataAddress", { enumerable: true, get: function() {
      return recoverTypedDataAddress_js_1.recoverTypedDataAddress;
    } });
    var verifyHash_js_1 = require_verifyHash();
    Object.defineProperty(exports2, "verifyHash", { enumerable: true, get: function() {
      return verifyHash_js_1.verifyHash;
    } });
    var verifyMessage_js_1 = require_verifyMessage();
    Object.defineProperty(exports2, "verifyMessage", { enumerable: true, get: function() {
      return verifyMessage_js_1.verifyMessage;
    } });
    var verifyTypedData_js_1 = require_verifyTypedData();
    Object.defineProperty(exports2, "verifyTypedData", { enumerable: true, get: function() {
      return verifyTypedData_js_1.verifyTypedData;
    } });
    var hashMessage_js_1 = require_hashMessage();
    Object.defineProperty(exports2, "hashMessage", { enumerable: true, get: function() {
      return hashMessage_js_1.hashMessage;
    } });
    var parseErc6492Signature_js_1 = require_parseErc6492Signature();
    Object.defineProperty(exports2, "parseErc6492Signature", { enumerable: true, get: function() {
      return parseErc6492Signature_js_1.parseErc6492Signature;
    } });
    var isErc6492Signature_js_1 = require_isErc6492Signature();
    Object.defineProperty(exports2, "isErc6492Signature", { enumerable: true, get: function() {
      return isErc6492Signature_js_1.isErc6492Signature;
    } });
    var serializeErc6492Signature_js_1 = require_serializeErc6492Signature();
    Object.defineProperty(exports2, "serializeErc6492Signature", { enumerable: true, get: function() {
      return serializeErc6492Signature_js_1.serializeErc6492Signature;
    } });
    var getSerializedTransactionType_js_1 = require_getSerializedTransactionType();
    Object.defineProperty(exports2, "getSerializedTransactionType", { enumerable: true, get: function() {
      return getSerializedTransactionType_js_1.getSerializedTransactionType;
    } });
    var getTransactionType_js_1 = require_getTransactionType();
    Object.defineProperty(exports2, "getTransactionType", { enumerable: true, get: function() {
      return getTransactionType_js_1.getTransactionType;
    } });
    var assertRequest_js_1 = require_assertRequest();
    Object.defineProperty(exports2, "assertRequest", { enumerable: true, get: function() {
      return assertRequest_js_1.assertRequest;
    } });
    var assertTransaction_js_1 = require_assertTransaction();
    Object.defineProperty(exports2, "assertTransactionEIP1559", { enumerable: true, get: function() {
      return assertTransaction_js_1.assertTransactionEIP1559;
    } });
    Object.defineProperty(exports2, "assertTransactionEIP2930", { enumerable: true, get: function() {
      return assertTransaction_js_1.assertTransactionEIP2930;
    } });
    Object.defineProperty(exports2, "assertTransactionLegacy", { enumerable: true, get: function() {
      return assertTransaction_js_1.assertTransactionLegacy;
    } });
    var parseTransaction_js_1 = require_parseTransaction();
    Object.defineProperty(exports2, "parseTransaction", { enumerable: true, get: function() {
      return parseTransaction_js_1.parseTransaction;
    } });
    var serializeTransaction_js_1 = require_serializeTransaction();
    Object.defineProperty(exports2, "serializeTransaction", { enumerable: true, get: function() {
      return serializeTransaction_js_1.serializeTransaction;
    } });
    var serializeAccessList_js_1 = require_serializeAccessList();
    Object.defineProperty(exports2, "serializeAccessList", { enumerable: true, get: function() {
      return serializeAccessList_js_1.serializeAccessList;
    } });
    var formatEther_js_1 = require_formatEther();
    Object.defineProperty(exports2, "formatEther", { enumerable: true, get: function() {
      return formatEther_js_1.formatEther;
    } });
    var formatGwei_js_1 = require_formatGwei();
    Object.defineProperty(exports2, "formatGwei", { enumerable: true, get: function() {
      return formatGwei_js_1.formatGwei;
    } });
    var formatUnits_js_1 = require_formatUnits();
    Object.defineProperty(exports2, "formatUnits", { enumerable: true, get: function() {
      return formatUnits_js_1.formatUnits;
    } });
    var parseUnits_js_1 = require_parseUnits();
    Object.defineProperty(exports2, "parseUnits", { enumerable: true, get: function() {
      return parseUnits_js_1.parseUnits;
    } });
    var parseEther_js_1 = require_parseEther();
    Object.defineProperty(exports2, "parseEther", { enumerable: true, get: function() {
      return parseEther_js_1.parseEther;
    } });
    var parseGwei_js_1 = require_parseGwei();
    Object.defineProperty(exports2, "parseGwei", { enumerable: true, get: function() {
      return parseGwei_js_1.parseGwei;
    } });
    var nonceManager_js_1 = require_nonceManager();
    Object.defineProperty(exports2, "createNonceManager", { enumerable: true, get: function() {
      return nonceManager_js_1.createNonceManager;
    } });
    Object.defineProperty(exports2, "nonceManager", { enumerable: true, get: function() {
      return nonceManager_js_1.nonceManager;
    } });
  }
});

// node_modules/viem/_cjs/utils/formatters/proof.js
var require_proof = __commonJS({
  "node_modules/viem/_cjs/utils/formatters/proof.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatProof = formatProof;
    var index_js_1 = require_utils9();
    function formatStorageProof(storageProof) {
      return storageProof.map((proof) => ({
        ...proof,
        value: BigInt(proof.value)
      }));
    }
    function formatProof(proof) {
      return {
        ...proof,
        balance: proof.balance ? BigInt(proof.balance) : void 0,
        nonce: proof.nonce ? (0, index_js_1.hexToNumber)(proof.nonce) : void 0,
        storageProof: proof.storageProof ? formatStorageProof(proof.storageProof) : void 0
      };
    }
  }
});

// node_modules/viem/_cjs/actions/public/getProof.js
var require_getProof = __commonJS({
  "node_modules/viem/_cjs/actions/public/getProof.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getProof = getProof;
    var toHex_js_1 = require_toHex();
    var proof_js_1 = require_proof();
    async function getProof(client, { address, blockNumber, blockTag: blockTag_, storageKeys }) {
      const blockTag = blockTag_ ?? "latest";
      const blockNumberHex = blockNumber !== void 0 ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      const proof = await client.request({
        method: "eth_getProof",
        params: [address, storageKeys, blockNumberHex || blockTag]
      });
      return (0, proof_js_1.formatProof)(proof);
    }
  }
});

// node_modules/viem/_cjs/actions/public/getStorageAt.js
var require_getStorageAt = __commonJS({
  "node_modules/viem/_cjs/actions/public/getStorageAt.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getStorageAt = getStorageAt;
    var toHex_js_1 = require_toHex();
    async function getStorageAt(client, { address, blockNumber, blockTag = "latest", slot }) {
      const blockNumberHex = blockNumber !== void 0 ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      const data = await client.request({
        method: "eth_getStorageAt",
        params: [address, slot, blockNumberHex || blockTag]
      });
      return data;
    }
  }
});

// node_modules/viem/_cjs/actions/public/getTransaction.js
var require_getTransaction = __commonJS({
  "node_modules/viem/_cjs/actions/public/getTransaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransaction = getTransaction;
    var transaction_js_1 = require_transaction2();
    var toHex_js_1 = require_toHex();
    var transaction_js_2 = require_transaction();
    async function getTransaction(client, { blockHash, blockNumber, blockTag: blockTag_, hash, index }) {
      const blockTag = blockTag_ || "latest";
      const blockNumberHex = blockNumber !== void 0 ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      let transaction = null;
      if (hash) {
        transaction = await client.request({
          method: "eth_getTransactionByHash",
          params: [hash]
        }, { dedupe: true });
      } else if (blockHash) {
        transaction = await client.request({
          method: "eth_getTransactionByBlockHashAndIndex",
          params: [blockHash, (0, toHex_js_1.numberToHex)(index)]
        }, { dedupe: true });
      } else if (blockNumberHex || blockTag) {
        transaction = await client.request({
          method: "eth_getTransactionByBlockNumberAndIndex",
          params: [blockNumberHex || blockTag, (0, toHex_js_1.numberToHex)(index)]
        }, { dedupe: Boolean(blockNumberHex) });
      }
      if (!transaction)
        throw new transaction_js_1.TransactionNotFoundError({
          blockHash,
          blockNumber,
          blockTag,
          hash,
          index
        });
      const format = client.chain?.formatters?.transaction?.format || transaction_js_2.formatTransaction;
      return format(transaction);
    }
  }
});

// node_modules/viem/_cjs/actions/public/getTransactionConfirmations.js
var require_getTransactionConfirmations = __commonJS({
  "node_modules/viem/_cjs/actions/public/getTransactionConfirmations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransactionConfirmations = getTransactionConfirmations;
    var getAction_js_1 = require_getAction();
    var getBlockNumber_js_1 = require_getBlockNumber();
    var getTransaction_js_1 = require_getTransaction();
    async function getTransactionConfirmations(client, { hash, transactionReceipt }) {
      const [blockNumber, transaction] = await Promise.all([
        (0, getAction_js_1.getAction)(client, getBlockNumber_js_1.getBlockNumber, "getBlockNumber")({}),
        hash ? (0, getAction_js_1.getAction)(client, getTransaction_js_1.getTransaction, "getTransaction")({ hash }) : void 0
      ]);
      const transactionBlockNumber = transactionReceipt?.blockNumber || transaction?.blockNumber;
      if (!transactionBlockNumber)
        return 0n;
      return blockNumber - transactionBlockNumber + 1n;
    }
  }
});

// node_modules/viem/_cjs/actions/public/getTransactionReceipt.js
var require_getTransactionReceipt = __commonJS({
  "node_modules/viem/_cjs/actions/public/getTransactionReceipt.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransactionReceipt = getTransactionReceipt;
    var transaction_js_1 = require_transaction2();
    var transactionReceipt_js_1 = require_transactionReceipt();
    async function getTransactionReceipt(client, { hash }) {
      const receipt = await client.request({
        method: "eth_getTransactionReceipt",
        params: [hash]
      }, { dedupe: true });
      if (!receipt)
        throw new transaction_js_1.TransactionReceiptNotFoundError({ hash });
      const format = client.chain?.formatters?.transactionReceipt?.format || transactionReceipt_js_1.formatTransactionReceipt;
      return format(receipt);
    }
  }
});

// node_modules/viem/_cjs/actions/public/multicall.js
var require_multicall = __commonJS({
  "node_modules/viem/_cjs/actions/public/multicall.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.multicall = multicall;
    var abis_js_1 = require_abis();
    var abi_js_1 = require_abi();
    var base_js_1 = require_base();
    var contract_js_1 = require_contract();
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    var getContractError_js_1 = require_getContractError();
    var getAction_js_1 = require_getAction();
    var readContract_js_1 = require_readContract();
    async function multicall(client, parameters) {
      const { allowFailure = true, batchSize: batchSize_, blockNumber, blockTag, multicallAddress: multicallAddress_, stateOverride } = parameters;
      const contracts = parameters.contracts;
      const batchSize = batchSize_ ?? (typeof client.batch?.multicall === "object" && client.batch.multicall.batchSize || 1024);
      let multicallAddress = multicallAddress_;
      if (!multicallAddress) {
        if (!client.chain)
          throw new Error("client chain not configured. multicallAddress is required.");
        multicallAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({
          blockNumber,
          chain: client.chain,
          contract: "multicall3"
        });
      }
      const chunkedCalls = [[]];
      let currentChunk = 0;
      let currentChunkSize = 0;
      for (let i = 0; i < contracts.length; i++) {
        const { abi, address, args, functionName } = contracts[i];
        try {
          const callData = (0, encodeFunctionData_js_1.encodeFunctionData)({ abi, args, functionName });
          currentChunkSize += (callData.length - 2) / 2;
          if (batchSize > 0 && currentChunkSize > batchSize && chunkedCalls[currentChunk].length > 0) {
            currentChunk++;
            currentChunkSize = (callData.length - 2) / 2;
            chunkedCalls[currentChunk] = [];
          }
          chunkedCalls[currentChunk] = [
            ...chunkedCalls[currentChunk],
            {
              allowFailure: true,
              callData,
              target: address
            }
          ];
        } catch (err) {
          const error = (0, getContractError_js_1.getContractError)(err, {
            abi,
            address,
            args,
            docsPath: "/docs/contract/multicall",
            functionName
          });
          if (!allowFailure)
            throw error;
          chunkedCalls[currentChunk] = [
            ...chunkedCalls[currentChunk],
            {
              allowFailure: true,
              callData: "0x",
              target: address
            }
          ];
        }
      }
      const aggregate3Results = await Promise.allSettled(chunkedCalls.map((calls) => (0, getAction_js_1.getAction)(client, readContract_js_1.readContract, "readContract")({
        abi: abis_js_1.multicall3Abi,
        address: multicallAddress,
        args: [calls],
        blockNumber,
        blockTag,
        functionName: "aggregate3",
        stateOverride
      })));
      const results = [];
      for (let i = 0; i < aggregate3Results.length; i++) {
        const result = aggregate3Results[i];
        if (result.status === "rejected") {
          if (!allowFailure)
            throw result.reason;
          for (let j = 0; j < chunkedCalls[i].length; j++) {
            results.push({
              status: "failure",
              error: result.reason,
              result: void 0
            });
          }
          continue;
        }
        const aggregate3Result = result.value;
        for (let j = 0; j < aggregate3Result.length; j++) {
          const { returnData, success } = aggregate3Result[j];
          const { callData } = chunkedCalls[i][j];
          const { abi, address, functionName, args } = contracts[results.length];
          try {
            if (callData === "0x")
              throw new abi_js_1.AbiDecodingZeroDataError();
            if (!success)
              throw new contract_js_1.RawContractError({ data: returnData });
            const result2 = (0, decodeFunctionResult_js_1.decodeFunctionResult)({
              abi,
              args,
              data: returnData,
              functionName
            });
            results.push(allowFailure ? { result: result2, status: "success" } : result2);
          } catch (err) {
            const error = (0, getContractError_js_1.getContractError)(err, {
              abi,
              address,
              args,
              docsPath: "/docs/contract/multicall",
              functionName
            });
            if (!allowFailure)
              throw error;
            results.push({ error, result: void 0, status: "failure" });
          }
        }
      }
      if (results.length !== contracts.length)
        throw new base_js_1.BaseError("multicall results mismatch");
      return results;
    }
  }
});

// node_modules/viem/_cjs/utils/signature/serializeSignature.js
var require_serializeSignature = __commonJS({
  "node_modules/viem/_cjs/utils/signature/serializeSignature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeSignature = serializeSignature;
    var secp256k1_1 = require_secp256k1();
    var fromHex_js_1 = require_fromHex();
    var toBytes_js_1 = require_toBytes();
    function serializeSignature({ r, s, to = "hex", v, yParity }) {
      const yParity_ = (() => {
        if (yParity === 0 || yParity === 1)
          return yParity;
        if (v && (v === 27n || v === 28n || v >= 35n))
          return v % 2n === 0n ? 1 : 0;
        throw new Error("Invalid `v` or `yParity` value");
      })();
      const signature = `0x${new secp256k1_1.secp256k1.Signature((0, fromHex_js_1.hexToBigInt)(r), (0, fromHex_js_1.hexToBigInt)(s)).toCompactHex()}${yParity_ === 0 ? "1b" : "1c"}`;
      if (to === "hex")
        return signature;
      return (0, toBytes_js_1.hexToBytes)(signature);
    }
  }
});

// node_modules/viem/_cjs/actions/public/verifyHash.js
var require_verifyHash2 = __commonJS({
  "node_modules/viem/_cjs/actions/public/verifyHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyHash = verifyHash;
    var abis_js_1 = require_abis();
    var contracts_js_1 = require_contracts2();
    var contract_js_1 = require_contract();
    var encodeDeployData_js_1 = require_encodeDeployData();
    var getAddress_js_1 = require_getAddress();
    var isAddressEqual_js_1 = require_isAddressEqual();
    var isHex_js_1 = require_isHex();
    var toHex_js_1 = require_toHex();
    var getAction_js_1 = require_getAction();
    var index_js_1 = require_utils9();
    var isErc6492Signature_js_1 = require_isErc6492Signature();
    var recoverAddress_js_1 = require_recoverAddress();
    var serializeErc6492Signature_js_1 = require_serializeErc6492Signature();
    var serializeSignature_js_1 = require_serializeSignature();
    var call_js_1 = require_call();
    async function verifyHash(client, parameters) {
      const { address, factory, factoryData, hash, signature, universalSignatureVerifierAddress = client.chain?.contracts?.universalSignatureVerifier?.address, ...rest } = parameters;
      const signatureHex = (() => {
        if ((0, isHex_js_1.isHex)(signature))
          return signature;
        if (typeof signature === "object" && "r" in signature && "s" in signature)
          return (0, serializeSignature_js_1.serializeSignature)(signature);
        return (0, toHex_js_1.bytesToHex)(signature);
      })();
      const wrappedSignature = await (async () => {
        if (!factory && !factoryData)
          return signatureHex;
        if ((0, isErc6492Signature_js_1.isErc6492Signature)(signatureHex))
          return signatureHex;
        return (0, serializeErc6492Signature_js_1.serializeErc6492Signature)({
          address: factory,
          data: factoryData,
          signature: signatureHex
        });
      })();
      try {
        const args = universalSignatureVerifierAddress ? {
          to: universalSignatureVerifierAddress,
          data: (0, index_js_1.encodeFunctionData)({
            abi: abis_js_1.universalSignatureValidatorAbi,
            functionName: "isValidSig",
            args: [address, hash, wrappedSignature]
          }),
          ...rest
        } : {
          data: (0, encodeDeployData_js_1.encodeDeployData)({
            abi: abis_js_1.universalSignatureValidatorAbi,
            args: [address, hash, wrappedSignature],
            bytecode: contracts_js_1.universalSignatureValidatorByteCode
          }),
          ...rest
        };
        const { data } = await (0, getAction_js_1.getAction)(client, call_js_1.call, "call")(args);
        return (0, index_js_1.hexToBool)(data ?? "0x0");
      } catch (error) {
        try {
          const verified = (0, isAddressEqual_js_1.isAddressEqual)((0, getAddress_js_1.getAddress)(address), await (0, recoverAddress_js_1.recoverAddress)({ hash, signature }));
          if (verified)
            return true;
        } catch {
        }
        if (error instanceof contract_js_1.CallExecutionError) {
          return false;
        }
        throw error;
      }
    }
  }
});

// node_modules/viem/_cjs/actions/public/verifyMessage.js
var require_verifyMessage2 = __commonJS({
  "node_modules/viem/_cjs/actions/public/verifyMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyMessage = verifyMessage;
    var hashMessage_js_1 = require_hashMessage();
    var verifyHash_js_1 = require_verifyHash2();
    async function verifyMessage(client, { address, message, factory, factoryData, signature, ...callRequest }) {
      const hash = (0, hashMessage_js_1.hashMessage)(message);
      return (0, verifyHash_js_1.verifyHash)(client, {
        address,
        factory,
        factoryData,
        hash,
        signature,
        ...callRequest
      });
    }
  }
});

// node_modules/viem/_cjs/actions/public/verifyTypedData.js
var require_verifyTypedData2 = __commonJS({
  "node_modules/viem/_cjs/actions/public/verifyTypedData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyTypedData = verifyTypedData;
    var hashTypedData_js_1 = require_hashTypedData();
    var verifyHash_js_1 = require_verifyHash2();
    async function verifyTypedData(client, parameters) {
      const { address, factory, factoryData, signature, message, primaryType, types, domain, ...callRequest } = parameters;
      const hash = (0, hashTypedData_js_1.hashTypedData)({ message, primaryType, types, domain });
      return (0, verifyHash_js_1.verifyHash)(client, {
        address,
        factory,
        factoryData,
        hash,
        signature,
        ...callRequest
      });
    }
  }
});

// node_modules/viem/_cjs/actions/public/watchBlockNumber.js
var require_watchBlockNumber = __commonJS({
  "node_modules/viem/_cjs/actions/public/watchBlockNumber.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchBlockNumber = watchBlockNumber;
    var fromHex_js_1 = require_fromHex();
    var getAction_js_1 = require_getAction();
    var observe_js_1 = require_observe();
    var poll_js_1 = require_poll();
    var stringify_js_1 = require_stringify();
    var getBlockNumber_js_1 = require_getBlockNumber();
    function watchBlockNumber(client, { emitOnBegin = false, emitMissed = false, onBlockNumber, onError, poll: poll_, pollingInterval = client.pollingInterval }) {
      const enablePolling = (() => {
        if (typeof poll_ !== "undefined")
          return poll_;
        if (client.transport.type === "webSocket")
          return false;
        if (client.transport.type === "fallback" && client.transport.transports[0].config.type === "webSocket")
          return false;
        return true;
      })();
      let prevBlockNumber;
      const pollBlockNumber = () => {
        const observerId = (0, stringify_js_1.stringify)([
          "watchBlockNumber",
          client.uid,
          emitOnBegin,
          emitMissed,
          pollingInterval
        ]);
        return (0, observe_js_1.observe)(observerId, { onBlockNumber, onError }, (emit) => (0, poll_js_1.poll)(async () => {
          try {
            const blockNumber = await (0, getAction_js_1.getAction)(client, getBlockNumber_js_1.getBlockNumber, "getBlockNumber")({ cacheTime: 0 });
            if (prevBlockNumber) {
              if (blockNumber === prevBlockNumber)
                return;
              if (blockNumber - prevBlockNumber > 1 && emitMissed) {
                for (let i = prevBlockNumber + 1n; i < blockNumber; i++) {
                  emit.onBlockNumber(i, prevBlockNumber);
                  prevBlockNumber = i;
                }
              }
            }
            if (!prevBlockNumber || blockNumber > prevBlockNumber) {
              emit.onBlockNumber(blockNumber, prevBlockNumber);
              prevBlockNumber = blockNumber;
            }
          } catch (err) {
            emit.onError?.(err);
          }
        }, {
          emitOnBegin,
          interval: pollingInterval
        }));
      };
      const subscribeBlockNumber = () => {
        const observerId = (0, stringify_js_1.stringify)([
          "watchBlockNumber",
          client.uid,
          emitOnBegin,
          emitMissed
        ]);
        return (0, observe_js_1.observe)(observerId, { onBlockNumber, onError }, (emit) => {
          let active = true;
          let unsubscribe = () => active = false;
          (async () => {
            try {
              const transport = (() => {
                if (client.transport.type === "fallback") {
                  const transport2 = client.transport.transports.find((transport3) => transport3.config.type === "webSocket");
                  if (!transport2)
                    return client.transport;
                  return transport2.value;
                }
                return client.transport;
              })();
              const { unsubscribe: unsubscribe_ } = await transport.subscribe({
                params: ["newHeads"],
                onData(data) {
                  if (!active)
                    return;
                  const blockNumber = (0, fromHex_js_1.hexToBigInt)(data.result?.number);
                  emit.onBlockNumber(blockNumber, prevBlockNumber);
                  prevBlockNumber = blockNumber;
                },
                onError(error) {
                  emit.onError?.(error);
                }
              });
              unsubscribe = unsubscribe_;
              if (!active)
                unsubscribe();
            } catch (err) {
              onError?.(err);
            }
          })();
          return () => unsubscribe();
        });
      };
      return enablePolling ? pollBlockNumber() : subscribeBlockNumber();
    }
  }
});

// node_modules/viem/_cjs/actions/public/waitForTransactionReceipt.js
var require_waitForTransactionReceipt = __commonJS({
  "node_modules/viem/_cjs/actions/public/waitForTransactionReceipt.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitForTransactionReceipt = waitForTransactionReceipt;
    var block_js_1 = require_block2();
    var transaction_js_1 = require_transaction2();
    var getAction_js_1 = require_getAction();
    var observe_js_1 = require_observe();
    var withRetry_js_1 = require_withRetry();
    var stringify_js_1 = require_stringify();
    var getBlock_js_1 = require_getBlock();
    var getTransaction_js_1 = require_getTransaction();
    var getTransactionReceipt_js_1 = require_getTransactionReceipt();
    var watchBlockNumber_js_1 = require_watchBlockNumber();
    async function waitForTransactionReceipt(client, { confirmations = 1, hash, onReplaced, pollingInterval = client.pollingInterval, retryCount = 6, retryDelay = ({ count }) => ~~(1 << count) * 200, timeout = 18e4 }) {
      const observerId = (0, stringify_js_1.stringify)(["waitForTransactionReceipt", client.uid, hash]);
      let transaction;
      let replacedTransaction;
      let receipt;
      let retrying = false;
      return new Promise((resolve, reject) => {
        if (timeout)
          setTimeout(() => reject(new transaction_js_1.WaitForTransactionReceiptTimeoutError({ hash })), timeout);
        const _unobserve = (0, observe_js_1.observe)(observerId, { onReplaced, resolve, reject }, (emit) => {
          const _unwatch = (0, getAction_js_1.getAction)(client, watchBlockNumber_js_1.watchBlockNumber, "watchBlockNumber")({
            emitMissed: true,
            emitOnBegin: true,
            poll: true,
            pollingInterval,
            async onBlockNumber(blockNumber_) {
              const done = (fn) => {
                _unwatch();
                fn();
                _unobserve();
              };
              let blockNumber = blockNumber_;
              if (retrying)
                return;
              try {
                if (receipt) {
                  if (confirmations > 1 && (!receipt.blockNumber || blockNumber - receipt.blockNumber + 1n < confirmations))
                    return;
                  done(() => emit.resolve(receipt));
                  return;
                }
                if (!transaction) {
                  retrying = true;
                  await (0, withRetry_js_1.withRetry)(async () => {
                    transaction = await (0, getAction_js_1.getAction)(client, getTransaction_js_1.getTransaction, "getTransaction")({ hash });
                    if (transaction.blockNumber)
                      blockNumber = transaction.blockNumber;
                  }, {
                    delay: retryDelay,
                    retryCount
                  });
                  retrying = false;
                }
                receipt = await (0, getAction_js_1.getAction)(client, getTransactionReceipt_js_1.getTransactionReceipt, "getTransactionReceipt")({ hash });
                if (confirmations > 1 && (!receipt.blockNumber || blockNumber - receipt.blockNumber + 1n < confirmations))
                  return;
                done(() => emit.resolve(receipt));
              } catch (err) {
                if (err instanceof transaction_js_1.TransactionNotFoundError || err instanceof transaction_js_1.TransactionReceiptNotFoundError) {
                  if (!transaction) {
                    retrying = false;
                    return;
                  }
                  try {
                    replacedTransaction = transaction;
                    retrying = true;
                    const block = await (0, withRetry_js_1.withRetry)(() => (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({
                      blockNumber,
                      includeTransactions: true
                    }), {
                      delay: retryDelay,
                      retryCount,
                      shouldRetry: ({ error }) => error instanceof block_js_1.BlockNotFoundError
                    });
                    retrying = false;
                    const replacementTransaction = block.transactions.find(({ from, nonce }) => from === replacedTransaction.from && nonce === replacedTransaction.nonce);
                    if (!replacementTransaction)
                      return;
                    receipt = await (0, getAction_js_1.getAction)(client, getTransactionReceipt_js_1.getTransactionReceipt, "getTransactionReceipt")({
                      hash: replacementTransaction.hash
                    });
                    if (confirmations > 1 && (!receipt.blockNumber || blockNumber - receipt.blockNumber + 1n < confirmations))
                      return;
                    let reason = "replaced";
                    if (replacementTransaction.to === replacedTransaction.to && replacementTransaction.value === replacedTransaction.value) {
                      reason = "repriced";
                    } else if (replacementTransaction.from === replacementTransaction.to && replacementTransaction.value === 0n) {
                      reason = "cancelled";
                    }
                    done(() => {
                      emit.onReplaced?.({
                        reason,
                        replacedTransaction,
                        transaction: replacementTransaction,
                        transactionReceipt: receipt
                      });
                      emit.resolve(receipt);
                    });
                  } catch (err_) {
                    done(() => emit.reject(err_));
                  }
                } else {
                  done(() => emit.reject(err));
                }
              }
            }
          });
        });
      });
    }
  }
});

// node_modules/viem/_cjs/actions/public/watchBlocks.js
var require_watchBlocks = __commonJS({
  "node_modules/viem/_cjs/actions/public/watchBlocks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchBlocks = watchBlocks;
    var block_js_1 = require_block();
    var getAction_js_1 = require_getAction();
    var observe_js_1 = require_observe();
    var poll_js_1 = require_poll();
    var stringify_js_1 = require_stringify();
    var getBlock_js_1 = require_getBlock();
    function watchBlocks(client, { blockTag = "latest", emitMissed = false, emitOnBegin = false, onBlock, onError, includeTransactions: includeTransactions_, poll: poll_, pollingInterval = client.pollingInterval }) {
      const enablePolling = (() => {
        if (typeof poll_ !== "undefined")
          return poll_;
        if (client.transport.type === "webSocket")
          return false;
        if (client.transport.type === "fallback" && client.transport.transports[0].config.type === "webSocket")
          return false;
        return true;
      })();
      const includeTransactions = includeTransactions_ ?? false;
      let prevBlock;
      const pollBlocks = () => {
        const observerId = (0, stringify_js_1.stringify)([
          "watchBlocks",
          client.uid,
          blockTag,
          emitMissed,
          emitOnBegin,
          includeTransactions,
          pollingInterval
        ]);
        return (0, observe_js_1.observe)(observerId, { onBlock, onError }, (emit) => (0, poll_js_1.poll)(async () => {
          try {
            const block = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({
              blockTag,
              includeTransactions
            });
            if (block.number && prevBlock?.number) {
              if (block.number === prevBlock.number)
                return;
              if (block.number - prevBlock.number > 1 && emitMissed) {
                for (let i = prevBlock?.number + 1n; i < block.number; i++) {
                  const block2 = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({
                    blockNumber: i,
                    includeTransactions
                  });
                  emit.onBlock(block2, prevBlock);
                  prevBlock = block2;
                }
              }
            }
            if (!prevBlock?.number || blockTag === "pending" && !block?.number || block.number && block.number > prevBlock.number) {
              emit.onBlock(block, prevBlock);
              prevBlock = block;
            }
          } catch (err) {
            emit.onError?.(err);
          }
        }, {
          emitOnBegin,
          interval: pollingInterval
        }));
      };
      const subscribeBlocks = () => {
        let active = true;
        let emitFetched = true;
        let unsubscribe = () => active = false;
        (async () => {
          try {
            if (emitOnBegin) {
              (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({
                blockTag,
                includeTransactions
              }).then((block) => {
                if (!active)
                  return;
                if (!emitFetched)
                  return;
                onBlock(block, void 0);
                emitFetched = false;
              });
            }
            const transport = (() => {
              if (client.transport.type === "fallback") {
                const transport2 = client.transport.transports.find((transport3) => transport3.config.type === "webSocket");
                if (!transport2)
                  return client.transport;
                return transport2.value;
              }
              return client.transport;
            })();
            const { unsubscribe: unsubscribe_ } = await transport.subscribe({
              params: ["newHeads"],
              onData(data) {
                if (!active)
                  return;
                const format = client.chain?.formatters?.block?.format || block_js_1.formatBlock;
                const block = format(data.result);
                onBlock(block, prevBlock);
                emitFetched = false;
                prevBlock = block;
              },
              onError(error) {
                onError?.(error);
              }
            });
            unsubscribe = unsubscribe_;
            if (!active)
              unsubscribe();
          } catch (err) {
            onError?.(err);
          }
        })();
        return () => unsubscribe();
      };
      return enablePolling ? pollBlocks() : subscribeBlocks();
    }
  }
});

// node_modules/viem/_cjs/actions/public/watchEvent.js
var require_watchEvent = __commonJS({
  "node_modules/viem/_cjs/actions/public/watchEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchEvent = watchEvent;
    var encodeEventTopics_js_1 = require_encodeEventTopics();
    var observe_js_1 = require_observe();
    var poll_js_1 = require_poll();
    var stringify_js_1 = require_stringify();
    var abi_js_1 = require_abi();
    var rpc_js_1 = require_rpc();
    var decodeEventLog_js_1 = require_decodeEventLog();
    var log_js_1 = require_log();
    var getAction_js_1 = require_getAction();
    var createEventFilter_js_1 = require_createEventFilter();
    var getBlockNumber_js_1 = require_getBlockNumber();
    var getFilterChanges_js_1 = require_getFilterChanges();
    var getLogs_js_1 = require_getLogs();
    var uninstallFilter_js_1 = require_uninstallFilter();
    function watchEvent(client, { address, args, batch = true, event, events, fromBlock, onError, onLogs, poll: poll_, pollingInterval = client.pollingInterval, strict: strict_ }) {
      const enablePolling = (() => {
        if (typeof poll_ !== "undefined")
          return poll_;
        if (typeof fromBlock === "bigint")
          return true;
        if (client.transport.type === "webSocket")
          return false;
        if (client.transport.type === "fallback" && client.transport.transports[0].config.type === "webSocket")
          return false;
        return true;
      })();
      const strict = strict_ ?? false;
      const pollEvent = () => {
        const observerId = (0, stringify_js_1.stringify)([
          "watchEvent",
          address,
          args,
          batch,
          client.uid,
          event,
          pollingInterval,
          fromBlock
        ]);
        return (0, observe_js_1.observe)(observerId, { onLogs, onError }, (emit) => {
          let previousBlockNumber;
          if (fromBlock !== void 0)
            previousBlockNumber = fromBlock - 1n;
          let filter;
          let initialized = false;
          const unwatch = (0, poll_js_1.poll)(async () => {
            if (!initialized) {
              try {
                filter = await (0, getAction_js_1.getAction)(client, createEventFilter_js_1.createEventFilter, "createEventFilter")({
                  address,
                  args,
                  event,
                  events,
                  strict,
                  fromBlock
                });
              } catch {
              }
              initialized = true;
              return;
            }
            try {
              let logs;
              if (filter) {
                logs = await (0, getAction_js_1.getAction)(client, getFilterChanges_js_1.getFilterChanges, "getFilterChanges")({ filter });
              } else {
                const blockNumber = await (0, getAction_js_1.getAction)(client, getBlockNumber_js_1.getBlockNumber, "getBlockNumber")({});
                if (previousBlockNumber && previousBlockNumber !== blockNumber) {
                  logs = await (0, getAction_js_1.getAction)(client, getLogs_js_1.getLogs, "getLogs")({
                    address,
                    args,
                    event,
                    events,
                    fromBlock: previousBlockNumber + 1n,
                    toBlock: blockNumber
                  });
                } else {
                  logs = [];
                }
                previousBlockNumber = blockNumber;
              }
              if (logs.length === 0)
                return;
              if (batch)
                emit.onLogs(logs);
              else
                for (const log of logs)
                  emit.onLogs([log]);
            } catch (err) {
              if (filter && err instanceof rpc_js_1.InvalidInputRpcError)
                initialized = false;
              emit.onError?.(err);
            }
          }, {
            emitOnBegin: true,
            interval: pollingInterval
          });
          return async () => {
            if (filter)
              await (0, getAction_js_1.getAction)(client, uninstallFilter_js_1.uninstallFilter, "uninstallFilter")({ filter });
            unwatch();
          };
        });
      };
      const subscribeEvent = () => {
        let active = true;
        let unsubscribe = () => active = false;
        (async () => {
          try {
            const transport = (() => {
              if (client.transport.type === "fallback") {
                const transport2 = client.transport.transports.find((transport3) => transport3.config.type === "webSocket");
                if (!transport2)
                  return client.transport;
                return transport2.value;
              }
              return client.transport;
            })();
            const events_ = events ?? (event ? [event] : void 0);
            let topics = [];
            if (events_) {
              const encoded = events_.flatMap((event2) => (0, encodeEventTopics_js_1.encodeEventTopics)({
                abi: [event2],
                eventName: event2.name,
                args
              }));
              topics = [encoded];
              if (event)
                topics = topics[0];
            }
            const { unsubscribe: unsubscribe_ } = await transport.subscribe({
              params: ["logs", { address, topics }],
              onData(data) {
                if (!active)
                  return;
                const log = data.result;
                try {
                  const { eventName, args: args2 } = (0, decodeEventLog_js_1.decodeEventLog)({
                    abi: events_ ?? [],
                    data: log.data,
                    topics: log.topics,
                    strict
                  });
                  const formatted = (0, log_js_1.formatLog)(log, { args: args2, eventName });
                  onLogs([formatted]);
                } catch (err) {
                  let eventName;
                  let isUnnamed;
                  if (err instanceof abi_js_1.DecodeLogDataMismatch || err instanceof abi_js_1.DecodeLogTopicsMismatch) {
                    if (strict_)
                      return;
                    eventName = err.abiItem.name;
                    isUnnamed = err.abiItem.inputs?.some((x) => !("name" in x && x.name));
                  }
                  const formatted = (0, log_js_1.formatLog)(log, {
                    args: isUnnamed ? [] : {},
                    eventName
                  });
                  onLogs([formatted]);
                }
              },
              onError(error) {
                onError?.(error);
              }
            });
            unsubscribe = unsubscribe_;
            if (!active)
              unsubscribe();
          } catch (err) {
            onError?.(err);
          }
        })();
        return () => unsubscribe();
      };
      return enablePolling ? pollEvent() : subscribeEvent();
    }
  }
});

// node_modules/viem/_cjs/actions/public/watchPendingTransactions.js
var require_watchPendingTransactions = __commonJS({
  "node_modules/viem/_cjs/actions/public/watchPendingTransactions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchPendingTransactions = watchPendingTransactions;
    var getAction_js_1 = require_getAction();
    var observe_js_1 = require_observe();
    var poll_js_1 = require_poll();
    var stringify_js_1 = require_stringify();
    var createPendingTransactionFilter_js_1 = require_createPendingTransactionFilter();
    var getFilterChanges_js_1 = require_getFilterChanges();
    var uninstallFilter_js_1 = require_uninstallFilter();
    function watchPendingTransactions(client, { batch = true, onError, onTransactions, poll: poll_, pollingInterval = client.pollingInterval }) {
      const enablePolling = typeof poll_ !== "undefined" ? poll_ : client.transport.type !== "webSocket";
      const pollPendingTransactions = () => {
        const observerId = (0, stringify_js_1.stringify)([
          "watchPendingTransactions",
          client.uid,
          batch,
          pollingInterval
        ]);
        return (0, observe_js_1.observe)(observerId, { onTransactions, onError }, (emit) => {
          let filter;
          const unwatch = (0, poll_js_1.poll)(async () => {
            try {
              if (!filter) {
                try {
                  filter = await (0, getAction_js_1.getAction)(client, createPendingTransactionFilter_js_1.createPendingTransactionFilter, "createPendingTransactionFilter")({});
                  return;
                } catch (err) {
                  unwatch();
                  throw err;
                }
              }
              const hashes = await (0, getAction_js_1.getAction)(client, getFilterChanges_js_1.getFilterChanges, "getFilterChanges")({ filter });
              if (hashes.length === 0)
                return;
              if (batch)
                emit.onTransactions(hashes);
              else
                for (const hash of hashes)
                  emit.onTransactions([hash]);
            } catch (err) {
              emit.onError?.(err);
            }
          }, {
            emitOnBegin: true,
            interval: pollingInterval
          });
          return async () => {
            if (filter)
              await (0, getAction_js_1.getAction)(client, uninstallFilter_js_1.uninstallFilter, "uninstallFilter")({ filter });
            unwatch();
          };
        });
      };
      const subscribePendingTransactions = () => {
        let active = true;
        let unsubscribe = () => active = false;
        (async () => {
          try {
            const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({
              params: ["newPendingTransactions"],
              onData(data) {
                if (!active)
                  return;
                const transaction = data.result;
                onTransactions([transaction]);
              },
              onError(error) {
                onError?.(error);
              }
            });
            unsubscribe = unsubscribe_;
            if (!active)
              unsubscribe();
          } catch (err) {
            onError?.(err);
          }
        })();
        return () => unsubscribe();
      };
      return enablePolling ? pollPendingTransactions() : subscribePendingTransactions();
    }
  }
});

// node_modules/viem/_cjs/utils/siwe/parseSiweMessage.js
var require_parseSiweMessage = __commonJS({
  "node_modules/viem/_cjs/utils/siwe/parseSiweMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseSiweMessage = parseSiweMessage;
    function parseSiweMessage(message) {
      const { scheme, statement, ...prefix } = message.match(prefixRegex)?.groups ?? {};
      const { chainId, expirationTime, issuedAt, notBefore, requestId, ...suffix } = message.match(suffixRegex)?.groups ?? {};
      const resources = message.split("Resources:")[1]?.split("\n- ").slice(1);
      return {
        ...prefix,
        ...suffix,
        ...chainId ? { chainId: Number(chainId) } : {},
        ...expirationTime ? { expirationTime: new Date(expirationTime) } : {},
        ...issuedAt ? { issuedAt: new Date(issuedAt) } : {},
        ...notBefore ? { notBefore: new Date(notBefore) } : {},
        ...requestId ? { requestId } : {},
        ...resources ? { resources } : {},
        ...scheme ? { scheme } : {},
        ...statement ? { statement } : {}
      };
    }
    var prefixRegex = /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\/\/)?(?<domain>[a-zA-Z0-9+-.]*(?::[0-9]{1,5})?) (?:wants you to sign in with your Ethereum account:\n)(?<address>0x[a-fA-F0-9]{40})\n\n(?:(?<statement>.*)\n\n)?/;
    var suffixRegex = /(?:URI: (?<uri>.+))\n(?:Version: (?<version>.+))\n(?:Chain ID: (?<chainId>\d+))\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\n(?:Issued At: (?<issuedAt>.+))(?:\nExpiration Time: (?<expirationTime>.+))?(?:\nNot Before: (?<notBefore>.+))?(?:\nRequest ID: (?<requestId>.+))?/;
  }
});

// node_modules/viem/_cjs/utils/siwe/validateSiweMessage.js
var require_validateSiweMessage = __commonJS({
  "node_modules/viem/_cjs/utils/siwe/validateSiweMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateSiweMessage = validateSiweMessage;
    var isAddressEqual_js_1 = require_isAddressEqual();
    function validateSiweMessage(parameters) {
      const { address, domain, message, nonce, scheme, time = /* @__PURE__ */ new Date() } = parameters;
      if (domain && message.domain !== domain)
        return false;
      if (nonce && message.nonce !== nonce)
        return false;
      if (scheme && message.scheme !== scheme)
        return false;
      if (message.expirationTime && time >= message.expirationTime)
        return false;
      if (message.notBefore && time < message.notBefore)
        return false;
      try {
        if (!message.address)
          return false;
        if (address && !(0, isAddressEqual_js_1.isAddressEqual)(message.address, address))
          return false;
      } catch {
        return false;
      }
      return true;
    }
  }
});

// node_modules/viem/_cjs/actions/siwe/verifySiweMessage.js
var require_verifySiweMessage = __commonJS({
  "node_modules/viem/_cjs/actions/siwe/verifySiweMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifySiweMessage = verifySiweMessage;
    var hashMessage_js_1 = require_hashMessage();
    var parseSiweMessage_js_1 = require_parseSiweMessage();
    var validateSiweMessage_js_1 = require_validateSiweMessage();
    var verifyHash_js_1 = require_verifyHash2();
    async function verifySiweMessage(client, parameters) {
      const { address, domain, message, nonce, scheme, signature, time = /* @__PURE__ */ new Date(), ...callRequest } = parameters;
      const parsed = (0, parseSiweMessage_js_1.parseSiweMessage)(message);
      if (!parsed.address)
        return false;
      const isValid = (0, validateSiweMessage_js_1.validateSiweMessage)({
        address,
        domain,
        message: parsed,
        nonce,
        scheme,
        time
      });
      if (!isValid)
        return false;
      const hash = (0, hashMessage_js_1.hashMessage)(message);
      return (0, verifyHash_js_1.verifyHash)(client, {
        address: parsed.address,
        hash,
        signature,
        ...callRequest
      });
    }
  }
});

// node_modules/viem/_cjs/clients/decorators/public.js
var require_public = __commonJS({
  "node_modules/viem/_cjs/clients/decorators/public.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.publicActions = publicActions;
    var getEnsAddress_js_1 = require_getEnsAddress();
    var getEnsAvatar_js_1 = require_getEnsAvatar();
    var getEnsName_js_1 = require_getEnsName();
    var getEnsResolver_js_1 = require_getEnsResolver();
    var getEnsText_js_1 = require_getEnsText();
    var call_js_1 = require_call();
    var createBlockFilter_js_1 = require_createBlockFilter();
    var createContractEventFilter_js_1 = require_createContractEventFilter();
    var createEventFilter_js_1 = require_createEventFilter();
    var createPendingTransactionFilter_js_1 = require_createPendingTransactionFilter();
    var estimateContractGas_js_1 = require_estimateContractGas();
    var estimateFeesPerGas_js_1 = require_estimateFeesPerGas();
    var estimateGas_js_1 = require_estimateGas2();
    var estimateMaxPriorityFeePerGas_js_1 = require_estimateMaxPriorityFeePerGas();
    var getBalance_js_1 = require_getBalance();
    var getBlobBaseFee_js_1 = require_getBlobBaseFee();
    var getBlock_js_1 = require_getBlock();
    var getBlockNumber_js_1 = require_getBlockNumber();
    var getBlockTransactionCount_js_1 = require_getBlockTransactionCount();
    var getChainId_js_1 = require_getChainId();
    var getCode_js_1 = require_getCode();
    var getContractEvents_js_1 = require_getContractEvents();
    var getEip712Domain_js_1 = require_getEip712Domain2();
    var getFeeHistory_js_1 = require_getFeeHistory();
    var getFilterChanges_js_1 = require_getFilterChanges();
    var getFilterLogs_js_1 = require_getFilterLogs();
    var getGasPrice_js_1 = require_getGasPrice();
    var getLogs_js_1 = require_getLogs();
    var getProof_js_1 = require_getProof();
    var getStorageAt_js_1 = require_getStorageAt();
    var getTransaction_js_1 = require_getTransaction();
    var getTransactionConfirmations_js_1 = require_getTransactionConfirmations();
    var getTransactionCount_js_1 = require_getTransactionCount();
    var getTransactionReceipt_js_1 = require_getTransactionReceipt();
    var multicall_js_1 = require_multicall();
    var readContract_js_1 = require_readContract();
    var simulateContract_js_1 = require_simulateContract();
    var uninstallFilter_js_1 = require_uninstallFilter();
    var verifyMessage_js_1 = require_verifyMessage2();
    var verifyTypedData_js_1 = require_verifyTypedData2();
    var waitForTransactionReceipt_js_1 = require_waitForTransactionReceipt();
    var watchBlockNumber_js_1 = require_watchBlockNumber();
    var watchBlocks_js_1 = require_watchBlocks();
    var watchContractEvent_js_1 = require_watchContractEvent();
    var watchEvent_js_1 = require_watchEvent();
    var watchPendingTransactions_js_1 = require_watchPendingTransactions();
    var verifySiweMessage_js_1 = require_verifySiweMessage();
    var prepareTransactionRequest_js_1 = require_prepareTransactionRequest();
    var sendRawTransaction_js_1 = require_sendRawTransaction();
    function publicActions(client) {
      return {
        call: (args) => (0, call_js_1.call)(client, args),
        createBlockFilter: () => (0, createBlockFilter_js_1.createBlockFilter)(client),
        createContractEventFilter: (args) => (0, createContractEventFilter_js_1.createContractEventFilter)(client, args),
        createEventFilter: (args) => (0, createEventFilter_js_1.createEventFilter)(client, args),
        createPendingTransactionFilter: () => (0, createPendingTransactionFilter_js_1.createPendingTransactionFilter)(client),
        estimateContractGas: (args) => (0, estimateContractGas_js_1.estimateContractGas)(client, args),
        estimateGas: (args) => (0, estimateGas_js_1.estimateGas)(client, args),
        getBalance: (args) => (0, getBalance_js_1.getBalance)(client, args),
        getBlobBaseFee: () => (0, getBlobBaseFee_js_1.getBlobBaseFee)(client),
        getBlock: (args) => (0, getBlock_js_1.getBlock)(client, args),
        getBlockNumber: (args) => (0, getBlockNumber_js_1.getBlockNumber)(client, args),
        getBlockTransactionCount: (args) => (0, getBlockTransactionCount_js_1.getBlockTransactionCount)(client, args),
        getBytecode: (args) => (0, getCode_js_1.getCode)(client, args),
        getChainId: () => (0, getChainId_js_1.getChainId)(client),
        getCode: (args) => (0, getCode_js_1.getCode)(client, args),
        getContractEvents: (args) => (0, getContractEvents_js_1.getContractEvents)(client, args),
        getEip712Domain: (args) => (0, getEip712Domain_js_1.getEip712Domain)(client, args),
        getEnsAddress: (args) => (0, getEnsAddress_js_1.getEnsAddress)(client, args),
        getEnsAvatar: (args) => (0, getEnsAvatar_js_1.getEnsAvatar)(client, args),
        getEnsName: (args) => (0, getEnsName_js_1.getEnsName)(client, args),
        getEnsResolver: (args) => (0, getEnsResolver_js_1.getEnsResolver)(client, args),
        getEnsText: (args) => (0, getEnsText_js_1.getEnsText)(client, args),
        getFeeHistory: (args) => (0, getFeeHistory_js_1.getFeeHistory)(client, args),
        estimateFeesPerGas: (args) => (0, estimateFeesPerGas_js_1.estimateFeesPerGas)(client, args),
        getFilterChanges: (args) => (0, getFilterChanges_js_1.getFilterChanges)(client, args),
        getFilterLogs: (args) => (0, getFilterLogs_js_1.getFilterLogs)(client, args),
        getGasPrice: () => (0, getGasPrice_js_1.getGasPrice)(client),
        getLogs: (args) => (0, getLogs_js_1.getLogs)(client, args),
        getProof: (args) => (0, getProof_js_1.getProof)(client, args),
        estimateMaxPriorityFeePerGas: (args) => (0, estimateMaxPriorityFeePerGas_js_1.estimateMaxPriorityFeePerGas)(client, args),
        getStorageAt: (args) => (0, getStorageAt_js_1.getStorageAt)(client, args),
        getTransaction: (args) => (0, getTransaction_js_1.getTransaction)(client, args),
        getTransactionConfirmations: (args) => (0, getTransactionConfirmations_js_1.getTransactionConfirmations)(client, args),
        getTransactionCount: (args) => (0, getTransactionCount_js_1.getTransactionCount)(client, args),
        getTransactionReceipt: (args) => (0, getTransactionReceipt_js_1.getTransactionReceipt)(client, args),
        multicall: (args) => (0, multicall_js_1.multicall)(client, args),
        prepareTransactionRequest: (args) => (0, prepareTransactionRequest_js_1.prepareTransactionRequest)(client, args),
        readContract: (args) => (0, readContract_js_1.readContract)(client, args),
        sendRawTransaction: (args) => (0, sendRawTransaction_js_1.sendRawTransaction)(client, args),
        simulateContract: (args) => (0, simulateContract_js_1.simulateContract)(client, args),
        verifyMessage: (args) => (0, verifyMessage_js_1.verifyMessage)(client, args),
        verifySiweMessage: (args) => (0, verifySiweMessage_js_1.verifySiweMessage)(client, args),
        verifyTypedData: (args) => (0, verifyTypedData_js_1.verifyTypedData)(client, args),
        uninstallFilter: (args) => (0, uninstallFilter_js_1.uninstallFilter)(client, args),
        waitForTransactionReceipt: (args) => (0, waitForTransactionReceipt_js_1.waitForTransactionReceipt)(client, args),
        watchBlocks: (args) => (0, watchBlocks_js_1.watchBlocks)(client, args),
        watchBlockNumber: (args) => (0, watchBlockNumber_js_1.watchBlockNumber)(client, args),
        watchContractEvent: (args) => (0, watchContractEvent_js_1.watchContractEvent)(client, args),
        watchEvent: (args) => (0, watchEvent_js_1.watchEvent)(client, args),
        watchPendingTransactions: (args) => (0, watchPendingTransactions_js_1.watchPendingTransactions)(client, args)
      };
    }
  }
});

// node_modules/viem/_cjs/clients/createPublicClient.js
var require_createPublicClient = __commonJS({
  "node_modules/viem/_cjs/clients/createPublicClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createPublicClient = createPublicClient;
    var createClient_js_1 = require_createClient();
    var public_js_1 = require_public();
    function createPublicClient(parameters) {
      const { key = "public", name = "Public Client" } = parameters;
      const client = (0, createClient_js_1.createClient)({
        ...parameters,
        key,
        name,
        type: "publicClient"
      });
      return client.extend(public_js_1.publicActions);
    }
  }
});

// node_modules/viem/_cjs/actions/test/dropTransaction.js
var require_dropTransaction = __commonJS({
  "node_modules/viem/_cjs/actions/test/dropTransaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dropTransaction = dropTransaction;
    async function dropTransaction(client, { hash }) {
      await client.request({
        method: `${client.mode}_dropTransaction`,
        params: [hash]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/dumpState.js
var require_dumpState = __commonJS({
  "node_modules/viem/_cjs/actions/test/dumpState.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dumpState = dumpState;
    async function dumpState(client) {
      return client.request({
        method: `${client.mode}_dumpState`
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/getAutomine.js
var require_getAutomine = __commonJS({
  "node_modules/viem/_cjs/actions/test/getAutomine.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAutomine = getAutomine;
    async function getAutomine(client) {
      if (client.mode === "ganache")
        return await client.request({
          method: "eth_mining"
        });
      return await client.request({
        method: `${client.mode}_getAutomine`
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/getTxpoolContent.js
var require_getTxpoolContent = __commonJS({
  "node_modules/viem/_cjs/actions/test/getTxpoolContent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTxpoolContent = getTxpoolContent;
    async function getTxpoolContent(client) {
      return await client.request({
        method: "txpool_content"
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/getTxpoolStatus.js
var require_getTxpoolStatus = __commonJS({
  "node_modules/viem/_cjs/actions/test/getTxpoolStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTxpoolStatus = getTxpoolStatus;
    var fromHex_js_1 = require_fromHex();
    async function getTxpoolStatus(client) {
      const { pending, queued } = await client.request({
        method: "txpool_status"
      });
      return {
        pending: (0, fromHex_js_1.hexToNumber)(pending),
        queued: (0, fromHex_js_1.hexToNumber)(queued)
      };
    }
  }
});

// node_modules/viem/_cjs/actions/test/impersonateAccount.js
var require_impersonateAccount = __commonJS({
  "node_modules/viem/_cjs/actions/test/impersonateAccount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.impersonateAccount = impersonateAccount;
    async function impersonateAccount(client, { address }) {
      await client.request({
        method: `${client.mode}_impersonateAccount`,
        params: [address]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/increaseTime.js
var require_increaseTime = __commonJS({
  "node_modules/viem/_cjs/actions/test/increaseTime.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.increaseTime = increaseTime;
    var toHex_js_1 = require_toHex();
    async function increaseTime(client, { seconds }) {
      return await client.request({
        method: "evm_increaseTime",
        params: [(0, toHex_js_1.numberToHex)(seconds)]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/inspectTxpool.js
var require_inspectTxpool = __commonJS({
  "node_modules/viem/_cjs/actions/test/inspectTxpool.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.inspectTxpool = inspectTxpool;
    async function inspectTxpool(client) {
      return await client.request({
        method: "txpool_inspect"
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/loadState.js
var require_loadState = __commonJS({
  "node_modules/viem/_cjs/actions/test/loadState.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadState = loadState;
    async function loadState(client, { state }) {
      await client.request({
        method: `${client.mode}_loadState`,
        params: [state]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/mine.js
var require_mine = __commonJS({
  "node_modules/viem/_cjs/actions/test/mine.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mine = mine;
    var toHex_js_1 = require_toHex();
    async function mine(client, { blocks, interval }) {
      if (client.mode === "ganache")
        await client.request({
          method: "evm_mine",
          params: [{ blocks: (0, toHex_js_1.numberToHex)(blocks) }]
        });
      else
        await client.request({
          method: `${client.mode}_mine`,
          params: [(0, toHex_js_1.numberToHex)(blocks), (0, toHex_js_1.numberToHex)(interval || 0)]
        });
    }
  }
});

// node_modules/viem/_cjs/actions/test/removeBlockTimestampInterval.js
var require_removeBlockTimestampInterval = __commonJS({
  "node_modules/viem/_cjs/actions/test/removeBlockTimestampInterval.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.removeBlockTimestampInterval = removeBlockTimestampInterval;
    async function removeBlockTimestampInterval(client) {
      await client.request({
        method: `${client.mode}_removeBlockTimestampInterval`
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/reset.js
var require_reset = __commonJS({
  "node_modules/viem/_cjs/actions/test/reset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.reset = reset;
    async function reset(client, { blockNumber, jsonRpcUrl } = {}) {
      await client.request({
        method: `${client.mode}_reset`,
        params: [{ forking: { blockNumber: Number(blockNumber), jsonRpcUrl } }]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/revert.js
var require_revert = __commonJS({
  "node_modules/viem/_cjs/actions/test/revert.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.revert = revert;
    async function revert(client, { id }) {
      await client.request({
        method: "evm_revert",
        params: [id]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/sendUnsignedTransaction.js
var require_sendUnsignedTransaction = __commonJS({
  "node_modules/viem/_cjs/actions/test/sendUnsignedTransaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sendUnsignedTransaction = sendUnsignedTransaction;
    var extract_js_1 = require_extract();
    var transactionRequest_js_1 = require_transactionRequest();
    async function sendUnsignedTransaction(client, args) {
      const { accessList, data, from, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = args;
      const chainFormat = client.chain?.formatters?.transactionRequest?.format;
      const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;
      const request = format({
        ...(0, extract_js_1.extract)(rest, { format: chainFormat }),
        accessList,
        data,
        from,
        gas,
        gasPrice,
        maxFeePerGas,
        maxPriorityFeePerGas,
        nonce,
        to,
        value
      });
      const hash = await client.request({
        method: "eth_sendUnsignedTransaction",
        params: [request]
      });
      return hash;
    }
  }
});

// node_modules/viem/_cjs/actions/test/setAutomine.js
var require_setAutomine = __commonJS({
  "node_modules/viem/_cjs/actions/test/setAutomine.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setAutomine = setAutomine;
    async function setAutomine(client, enabled) {
      if (client.mode === "ganache") {
        if (enabled)
          await client.request({ method: "miner_start" });
        else
          await client.request({ method: "miner_stop" });
      } else
        await client.request({
          method: "evm_setAutomine",
          params: [enabled]
        });
    }
  }
});

// node_modules/viem/_cjs/actions/test/setBalance.js
var require_setBalance = __commonJS({
  "node_modules/viem/_cjs/actions/test/setBalance.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setBalance = setBalance;
    var toHex_js_1 = require_toHex();
    async function setBalance(client, { address, value }) {
      if (client.mode === "ganache")
        await client.request({
          method: "evm_setAccountBalance",
          params: [address, (0, toHex_js_1.numberToHex)(value)]
        });
      else
        await client.request({
          method: `${client.mode}_setBalance`,
          params: [address, (0, toHex_js_1.numberToHex)(value)]
        });
    }
  }
});

// node_modules/viem/_cjs/actions/test/setBlockGasLimit.js
var require_setBlockGasLimit = __commonJS({
  "node_modules/viem/_cjs/actions/test/setBlockGasLimit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setBlockGasLimit = setBlockGasLimit;
    var toHex_js_1 = require_toHex();
    async function setBlockGasLimit(client, { gasLimit }) {
      await client.request({
        method: "evm_setBlockGasLimit",
        params: [(0, toHex_js_1.numberToHex)(gasLimit)]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/setBlockTimestampInterval.js
var require_setBlockTimestampInterval = __commonJS({
  "node_modules/viem/_cjs/actions/test/setBlockTimestampInterval.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setBlockTimestampInterval = setBlockTimestampInterval;
    async function setBlockTimestampInterval(client, { interval }) {
      const interval_ = (() => {
        if (client.mode === "hardhat")
          return interval * 1e3;
        return interval;
      })();
      await client.request({
        method: `${client.mode}_setBlockTimestampInterval`,
        params: [interval_]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/setCode.js
var require_setCode = __commonJS({
  "node_modules/viem/_cjs/actions/test/setCode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setCode = setCode;
    async function setCode(client, { address, bytecode }) {
      if (client.mode === "ganache")
        await client.request({
          method: "evm_setAccountCode",
          params: [address, bytecode]
        });
      else
        await client.request({
          method: `${client.mode}_setCode`,
          params: [address, bytecode]
        });
    }
  }
});

// node_modules/viem/_cjs/actions/test/setCoinbase.js
var require_setCoinbase = __commonJS({
  "node_modules/viem/_cjs/actions/test/setCoinbase.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setCoinbase = setCoinbase;
    async function setCoinbase(client, { address }) {
      await client.request({
        method: `${client.mode}_setCoinbase`,
        params: [address]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/setIntervalMining.js
var require_setIntervalMining = __commonJS({
  "node_modules/viem/_cjs/actions/test/setIntervalMining.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setIntervalMining = setIntervalMining;
    async function setIntervalMining(client, { interval }) {
      const interval_ = (() => {
        if (client.mode === "hardhat")
          return interval * 1e3;
        return interval;
      })();
      await client.request({
        method: "evm_setIntervalMining",
        params: [interval_]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/setLoggingEnabled.js
var require_setLoggingEnabled = __commonJS({
  "node_modules/viem/_cjs/actions/test/setLoggingEnabled.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setLoggingEnabled = setLoggingEnabled;
    async function setLoggingEnabled(client, enabled) {
      await client.request({
        method: `${client.mode}_setLoggingEnabled`,
        params: [enabled]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/setMinGasPrice.js
var require_setMinGasPrice = __commonJS({
  "node_modules/viem/_cjs/actions/test/setMinGasPrice.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setMinGasPrice = setMinGasPrice;
    var toHex_js_1 = require_toHex();
    async function setMinGasPrice(client, { gasPrice }) {
      await client.request({
        method: `${client.mode}_setMinGasPrice`,
        params: [(0, toHex_js_1.numberToHex)(gasPrice)]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/setNextBlockBaseFeePerGas.js
var require_setNextBlockBaseFeePerGas = __commonJS({
  "node_modules/viem/_cjs/actions/test/setNextBlockBaseFeePerGas.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setNextBlockBaseFeePerGas = setNextBlockBaseFeePerGas;
    var toHex_js_1 = require_toHex();
    async function setNextBlockBaseFeePerGas(client, { baseFeePerGas }) {
      await client.request({
        method: `${client.mode}_setNextBlockBaseFeePerGas`,
        params: [(0, toHex_js_1.numberToHex)(baseFeePerGas)]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/setNextBlockTimestamp.js
var require_setNextBlockTimestamp = __commonJS({
  "node_modules/viem/_cjs/actions/test/setNextBlockTimestamp.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setNextBlockTimestamp = setNextBlockTimestamp;
    var toHex_js_1 = require_toHex();
    async function setNextBlockTimestamp(client, { timestamp }) {
      await client.request({
        method: "evm_setNextBlockTimestamp",
        params: [(0, toHex_js_1.numberToHex)(timestamp)]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/setNonce.js
var require_setNonce = __commonJS({
  "node_modules/viem/_cjs/actions/test/setNonce.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setNonce = setNonce;
    var toHex_js_1 = require_toHex();
    async function setNonce(client, { address, nonce }) {
      await client.request({
        method: `${client.mode}_setNonce`,
        params: [address, (0, toHex_js_1.numberToHex)(nonce)]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/setRpcUrl.js
var require_setRpcUrl = __commonJS({
  "node_modules/viem/_cjs/actions/test/setRpcUrl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setRpcUrl = setRpcUrl;
    async function setRpcUrl(client, jsonRpcUrl) {
      await client.request({
        method: `${client.mode}_setRpcUrl`,
        params: [jsonRpcUrl]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/setStorageAt.js
var require_setStorageAt = __commonJS({
  "node_modules/viem/_cjs/actions/test/setStorageAt.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setStorageAt = setStorageAt;
    var toHex_js_1 = require_toHex();
    async function setStorageAt(client, { address, index, value }) {
      await client.request({
        method: `${client.mode}_setStorageAt`,
        params: [
          address,
          typeof index === "number" ? (0, toHex_js_1.numberToHex)(index) : index,
          value
        ]
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/snapshot.js
var require_snapshot = __commonJS({
  "node_modules/viem/_cjs/actions/test/snapshot.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.snapshot = snapshot;
    async function snapshot(client) {
      return await client.request({
        method: "evm_snapshot"
      });
    }
  }
});

// node_modules/viem/_cjs/actions/test/stopImpersonatingAccount.js
var require_stopImpersonatingAccount = __commonJS({
  "node_modules/viem/_cjs/actions/test/stopImpersonatingAccount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stopImpersonatingAccount = stopImpersonatingAccount;
    async function stopImpersonatingAccount(client, { address }) {
      await client.request({
        method: `${client.mode}_stopImpersonatingAccount`,
        params: [address]
      });
    }
  }
});

// node_modules/viem/_cjs/clients/decorators/test.js
var require_test = __commonJS({
  "node_modules/viem/_cjs/clients/decorators/test.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.testActions = testActions;
    var dropTransaction_js_1 = require_dropTransaction();
    var dumpState_js_1 = require_dumpState();
    var getAutomine_js_1 = require_getAutomine();
    var getTxpoolContent_js_1 = require_getTxpoolContent();
    var getTxpoolStatus_js_1 = require_getTxpoolStatus();
    var impersonateAccount_js_1 = require_impersonateAccount();
    var increaseTime_js_1 = require_increaseTime();
    var inspectTxpool_js_1 = require_inspectTxpool();
    var loadState_js_1 = require_loadState();
    var mine_js_1 = require_mine();
    var removeBlockTimestampInterval_js_1 = require_removeBlockTimestampInterval();
    var reset_js_1 = require_reset();
    var revert_js_1 = require_revert();
    var sendUnsignedTransaction_js_1 = require_sendUnsignedTransaction();
    var setAutomine_js_1 = require_setAutomine();
    var setBalance_js_1 = require_setBalance();
    var setBlockGasLimit_js_1 = require_setBlockGasLimit();
    var setBlockTimestampInterval_js_1 = require_setBlockTimestampInterval();
    var setCode_js_1 = require_setCode();
    var setCoinbase_js_1 = require_setCoinbase();
    var setIntervalMining_js_1 = require_setIntervalMining();
    var setLoggingEnabled_js_1 = require_setLoggingEnabled();
    var setMinGasPrice_js_1 = require_setMinGasPrice();
    var setNextBlockBaseFeePerGas_js_1 = require_setNextBlockBaseFeePerGas();
    var setNextBlockTimestamp_js_1 = require_setNextBlockTimestamp();
    var setNonce_js_1 = require_setNonce();
    var setRpcUrl_js_1 = require_setRpcUrl();
    var setStorageAt_js_1 = require_setStorageAt();
    var snapshot_js_1 = require_snapshot();
    var stopImpersonatingAccount_js_1 = require_stopImpersonatingAccount();
    function testActions({ mode }) {
      return (client_) => {
        const client = client_.extend(() => ({
          mode
        }));
        return {
          dropTransaction: (args) => (0, dropTransaction_js_1.dropTransaction)(client, args),
          dumpState: () => (0, dumpState_js_1.dumpState)(client),
          getAutomine: () => (0, getAutomine_js_1.getAutomine)(client),
          getTxpoolContent: () => (0, getTxpoolContent_js_1.getTxpoolContent)(client),
          getTxpoolStatus: () => (0, getTxpoolStatus_js_1.getTxpoolStatus)(client),
          impersonateAccount: (args) => (0, impersonateAccount_js_1.impersonateAccount)(client, args),
          increaseTime: (args) => (0, increaseTime_js_1.increaseTime)(client, args),
          inspectTxpool: () => (0, inspectTxpool_js_1.inspectTxpool)(client),
          loadState: (args) => (0, loadState_js_1.loadState)(client, args),
          mine: (args) => (0, mine_js_1.mine)(client, args),
          removeBlockTimestampInterval: () => (0, removeBlockTimestampInterval_js_1.removeBlockTimestampInterval)(client),
          reset: (args) => (0, reset_js_1.reset)(client, args),
          revert: (args) => (0, revert_js_1.revert)(client, args),
          sendUnsignedTransaction: (args) => (0, sendUnsignedTransaction_js_1.sendUnsignedTransaction)(client, args),
          setAutomine: (args) => (0, setAutomine_js_1.setAutomine)(client, args),
          setBalance: (args) => (0, setBalance_js_1.setBalance)(client, args),
          setBlockGasLimit: (args) => (0, setBlockGasLimit_js_1.setBlockGasLimit)(client, args),
          setBlockTimestampInterval: (args) => (0, setBlockTimestampInterval_js_1.setBlockTimestampInterval)(client, args),
          setCode: (args) => (0, setCode_js_1.setCode)(client, args),
          setCoinbase: (args) => (0, setCoinbase_js_1.setCoinbase)(client, args),
          setIntervalMining: (args) => (0, setIntervalMining_js_1.setIntervalMining)(client, args),
          setLoggingEnabled: (args) => (0, setLoggingEnabled_js_1.setLoggingEnabled)(client, args),
          setMinGasPrice: (args) => (0, setMinGasPrice_js_1.setMinGasPrice)(client, args),
          setNextBlockBaseFeePerGas: (args) => (0, setNextBlockBaseFeePerGas_js_1.setNextBlockBaseFeePerGas)(client, args),
          setNextBlockTimestamp: (args) => (0, setNextBlockTimestamp_js_1.setNextBlockTimestamp)(client, args),
          setNonce: (args) => (0, setNonce_js_1.setNonce)(client, args),
          setRpcUrl: (args) => (0, setRpcUrl_js_1.setRpcUrl)(client, args),
          setStorageAt: (args) => (0, setStorageAt_js_1.setStorageAt)(client, args),
          snapshot: () => (0, snapshot_js_1.snapshot)(client),
          stopImpersonatingAccount: (args) => (0, stopImpersonatingAccount_js_1.stopImpersonatingAccount)(client, args)
        };
      };
    }
  }
});

// node_modules/viem/_cjs/clients/createTestClient.js
var require_createTestClient = __commonJS({
  "node_modules/viem/_cjs/clients/createTestClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createTestClient = createTestClient;
    var createClient_js_1 = require_createClient();
    var test_js_1 = require_test();
    function createTestClient(parameters) {
      const { key = "test", name = "Test Client", mode } = parameters;
      const client = (0, createClient_js_1.createClient)({
        ...parameters,
        key,
        name,
        type: "testClient"
      });
      return client.extend((config) => ({
        mode,
        ...(0, test_js_1.testActions)({ mode })(config)
      }));
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/addChain.js
var require_addChain = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/addChain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addChain = addChain;
    var toHex_js_1 = require_toHex();
    async function addChain(client, { chain }) {
      const { id, name, nativeCurrency, rpcUrls, blockExplorers } = chain;
      await client.request({
        method: "wallet_addEthereumChain",
        params: [
          {
            chainId: (0, toHex_js_1.numberToHex)(id),
            chainName: name,
            nativeCurrency,
            rpcUrls: rpcUrls.default.http,
            blockExplorerUrls: blockExplorers ? Object.values(blockExplorers).map(({ url }) => url) : void 0
          }
        ]
      }, { dedupe: true, retryCount: 0 });
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/deployContract.js
var require_deployContract = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/deployContract.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deployContract = deployContract;
    var encodeDeployData_js_1 = require_encodeDeployData();
    var sendTransaction_js_1 = require_sendTransaction();
    function deployContract(walletClient, parameters) {
      const { abi, args, bytecode, ...request } = parameters;
      const calldata = (0, encodeDeployData_js_1.encodeDeployData)({ abi, args, bytecode });
      return (0, sendTransaction_js_1.sendTransaction)(walletClient, {
        ...request,
        data: calldata
      });
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/getAddresses.js
var require_getAddresses = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/getAddresses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAddresses = getAddresses;
    var getAddress_js_1 = require_getAddress();
    async function getAddresses(client) {
      if (client.account?.type === "local")
        return [client.account.address];
      const addresses = await client.request({ method: "eth_accounts" }, { dedupe: true });
      return addresses.map((address) => (0, getAddress_js_1.checksumAddress)(address));
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/getPermissions.js
var require_getPermissions = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/getPermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getPermissions = getPermissions;
    async function getPermissions(client) {
      const permissions = await client.request({ method: "wallet_getPermissions" }, { dedupe: true });
      return permissions;
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/requestAddresses.js
var require_requestAddresses = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/requestAddresses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.requestAddresses = requestAddresses;
    var getAddress_js_1 = require_getAddress();
    async function requestAddresses(client) {
      const addresses = await client.request({ method: "eth_requestAccounts" }, { dedupe: true, retryCount: 0 });
      return addresses.map((address) => (0, getAddress_js_1.getAddress)(address));
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/requestPermissions.js
var require_requestPermissions = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/requestPermissions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.requestPermissions = requestPermissions;
    async function requestPermissions(client, permissions) {
      return client.request({
        method: "wallet_requestPermissions",
        params: [permissions]
      }, { retryCount: 0 });
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/signMessage.js
var require_signMessage = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/signMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.signMessage = signMessage;
    var parseAccount_js_1 = require_parseAccount();
    var account_js_1 = require_account();
    var toHex_js_1 = require_toHex();
    async function signMessage(client, { account: account_ = client.account, message }) {
      if (!account_)
        throw new account_js_1.AccountNotFoundError({
          docsPath: "/docs/actions/wallet/signMessage"
        });
      const account = (0, parseAccount_js_1.parseAccount)(account_);
      if (account.signMessage)
        return account.signMessage({ message });
      const message_ = (() => {
        if (typeof message === "string")
          return (0, toHex_js_1.stringToHex)(message);
        if (message.raw instanceof Uint8Array)
          return (0, toHex_js_1.toHex)(message.raw);
        return message.raw;
      })();
      return client.request({
        method: "personal_sign",
        params: [message_, account.address]
      }, { retryCount: 0 });
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/signTransaction.js
var require_signTransaction = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/signTransaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.signTransaction = signTransaction;
    var parseAccount_js_1 = require_parseAccount();
    var account_js_1 = require_account();
    var assertCurrentChain_js_1 = require_assertCurrentChain();
    var toHex_js_1 = require_toHex();
    var transactionRequest_js_1 = require_transactionRequest();
    var getAction_js_1 = require_getAction();
    var assertRequest_js_1 = require_assertRequest();
    var getChainId_js_1 = require_getChainId();
    async function signTransaction(client, parameters) {
      const { account: account_ = client.account, chain = client.chain, ...transaction } = parameters;
      if (!account_)
        throw new account_js_1.AccountNotFoundError({
          docsPath: "/docs/actions/wallet/signTransaction"
        });
      const account = (0, parseAccount_js_1.parseAccount)(account_);
      (0, assertRequest_js_1.assertRequest)({
        account,
        ...parameters
      });
      const chainId = await (0, getAction_js_1.getAction)(client, getChainId_js_1.getChainId, "getChainId")({});
      if (chain !== null)
        (0, assertCurrentChain_js_1.assertCurrentChain)({
          currentChainId: chainId,
          chain
        });
      const formatters = chain?.formatters || client.chain?.formatters;
      const format = formatters?.transactionRequest?.format || transactionRequest_js_1.formatTransactionRequest;
      if (account.signTransaction)
        return account.signTransaction({
          ...transaction,
          chainId
        }, { serializer: client.chain?.serializers?.transaction });
      return await client.request({
        method: "eth_signTransaction",
        params: [
          {
            ...format(transaction),
            chainId: (0, toHex_js_1.numberToHex)(chainId),
            from: account.address
          }
        ]
      }, { retryCount: 0 });
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/signTypedData.js
var require_signTypedData = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/signTypedData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.signTypedData = signTypedData;
    var parseAccount_js_1 = require_parseAccount();
    var account_js_1 = require_account();
    var typedData_js_1 = require_typedData();
    async function signTypedData(client, parameters) {
      const { account: account_ = client.account, domain, message, primaryType } = parameters;
      if (!account_)
        throw new account_js_1.AccountNotFoundError({
          docsPath: "/docs/actions/wallet/signTypedData"
        });
      const account = (0, parseAccount_js_1.parseAccount)(account_);
      const types = {
        EIP712Domain: (0, typedData_js_1.getTypesForEIP712Domain)({ domain }),
        ...parameters.types
      };
      (0, typedData_js_1.validateTypedData)({ domain, message, primaryType, types });
      if (account.signTypedData)
        return account.signTypedData({ domain, message, primaryType, types });
      const typedData = (0, typedData_js_1.serializeTypedData)({ domain, message, primaryType, types });
      return client.request({
        method: "eth_signTypedData_v4",
        params: [account.address, typedData]
      }, { retryCount: 0 });
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/switchChain.js
var require_switchChain = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/switchChain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.switchChain = switchChain;
    var toHex_js_1 = require_toHex();
    async function switchChain(client, { id }) {
      await client.request({
        method: "wallet_switchEthereumChain",
        params: [
          {
            chainId: (0, toHex_js_1.numberToHex)(id)
          }
        ]
      }, { retryCount: 0 });
    }
  }
});

// node_modules/viem/_cjs/actions/wallet/watchAsset.js
var require_watchAsset = __commonJS({
  "node_modules/viem/_cjs/actions/wallet/watchAsset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchAsset = watchAsset;
    async function watchAsset(client, params) {
      const added = await client.request({
        method: "wallet_watchAsset",
        params
      }, { retryCount: 0 });
      return added;
    }
  }
});

// node_modules/viem/_cjs/clients/decorators/wallet.js
var require_wallet = __commonJS({
  "node_modules/viem/_cjs/clients/decorators/wallet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.walletActions = walletActions;
    var getChainId_js_1 = require_getChainId();
    var addChain_js_1 = require_addChain();
    var deployContract_js_1 = require_deployContract();
    var getAddresses_js_1 = require_getAddresses();
    var getPermissions_js_1 = require_getPermissions();
    var prepareTransactionRequest_js_1 = require_prepareTransactionRequest();
    var requestAddresses_js_1 = require_requestAddresses();
    var requestPermissions_js_1 = require_requestPermissions();
    var sendRawTransaction_js_1 = require_sendRawTransaction();
    var sendTransaction_js_1 = require_sendTransaction();
    var signMessage_js_1 = require_signMessage();
    var signTransaction_js_1 = require_signTransaction();
    var signTypedData_js_1 = require_signTypedData();
    var switchChain_js_1 = require_switchChain();
    var watchAsset_js_1 = require_watchAsset();
    var writeContract_js_1 = require_writeContract();
    function walletActions(client) {
      return {
        addChain: (args) => (0, addChain_js_1.addChain)(client, args),
        deployContract: (args) => (0, deployContract_js_1.deployContract)(client, args),
        getAddresses: () => (0, getAddresses_js_1.getAddresses)(client),
        getChainId: () => (0, getChainId_js_1.getChainId)(client),
        getPermissions: () => (0, getPermissions_js_1.getPermissions)(client),
        prepareTransactionRequest: (args) => (0, prepareTransactionRequest_js_1.prepareTransactionRequest)(client, args),
        requestAddresses: () => (0, requestAddresses_js_1.requestAddresses)(client),
        requestPermissions: (args) => (0, requestPermissions_js_1.requestPermissions)(client, args),
        sendRawTransaction: (args) => (0, sendRawTransaction_js_1.sendRawTransaction)(client, args),
        sendTransaction: (args) => (0, sendTransaction_js_1.sendTransaction)(client, args),
        signMessage: (args) => (0, signMessage_js_1.signMessage)(client, args),
        signTransaction: (args) => (0, signTransaction_js_1.signTransaction)(client, args),
        signTypedData: (args) => (0, signTypedData_js_1.signTypedData)(client, args),
        switchChain: (args) => (0, switchChain_js_1.switchChain)(client, args),
        watchAsset: (args) => (0, watchAsset_js_1.watchAsset)(client, args),
        writeContract: (args) => (0, writeContract_js_1.writeContract)(client, args)
      };
    }
  }
});

// node_modules/viem/_cjs/clients/createWalletClient.js
var require_createWalletClient = __commonJS({
  "node_modules/viem/_cjs/clients/createWalletClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createWalletClient = createWalletClient;
    var createClient_js_1 = require_createClient();
    var wallet_js_1 = require_wallet();
    function createWalletClient(parameters) {
      const { key = "wallet", name = "Wallet Client", transport } = parameters;
      const client = (0, createClient_js_1.createClient)({
        ...parameters,
        key,
        name,
        transport,
        type: "walletClient"
      });
      return client.extend(wallet_js_1.walletActions);
    }
  }
});

// node_modules/viem/_cjs/clients/transports/webSocket.js
var require_webSocket2 = __commonJS({
  "node_modules/viem/_cjs/clients/transports/webSocket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.webSocket = webSocket;
    var request_js_1 = require_request();
    var transport_js_1 = require_transport();
    var compat_js_1 = require_compat();
    var webSocket_js_1 = require_webSocket();
    var createTransport_js_1 = require_createTransport();
    function webSocket(url, config = {}) {
      const { keepAlive, key = "webSocket", name = "WebSocket JSON-RPC", reconnect, retryDelay } = config;
      return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {
        const retryCount = config.retryCount ?? retryCount_;
        const timeout = timeout_ ?? config.timeout ?? 1e4;
        const url_ = url || chain?.rpcUrls.default.webSocket?.[0];
        if (!url_)
          throw new transport_js_1.UrlRequiredError();
        return (0, createTransport_js_1.createTransport)({
          key,
          name,
          async request({ method, params }) {
            const body = { method, params };
            const rpcClient = await (0, webSocket_js_1.getWebSocketRpcClient)(url_, {
              keepAlive,
              reconnect
            });
            const { error, result } = await rpcClient.requestAsync({
              body,
              timeout
            });
            if (error)
              throw new request_js_1.RpcRequestError({
                body,
                error,
                url: url_
              });
            return result;
          },
          retryCount,
          retryDelay,
          timeout,
          type: "webSocket"
        }, {
          getSocket() {
            return (0, compat_js_1.getSocket)(url_);
          },
          getRpcClient() {
            return (0, webSocket_js_1.getWebSocketRpcClient)(url_);
          },
          async subscribe({ params, onData, onError }) {
            const rpcClient = await (0, webSocket_js_1.getWebSocketRpcClient)(url_);
            const { result: subscriptionId } = await new Promise((resolve, reject) => rpcClient.request({
              body: {
                method: "eth_subscribe",
                params
              },
              onError(error) {
                reject(error);
                onError?.(error);
                return;
              },
              onResponse(response) {
                if (response.error) {
                  reject(response.error);
                  onError?.(response.error);
                  return;
                }
                if (typeof response.id === "number") {
                  resolve(response);
                  return;
                }
                if (response.method !== "eth_subscription")
                  return;
                onData(response.params);
              }
            }));
            return {
              subscriptionId,
              async unsubscribe() {
                return new Promise((resolve) => rpcClient.request({
                  body: {
                    method: "eth_unsubscribe",
                    params: [subscriptionId]
                  },
                  onResponse: resolve
                }));
              }
            };
          }
        });
      };
    }
  }
});

// node_modules/viem/_cjs/constants/address.js
var require_address2 = __commonJS({
  "node_modules/viem/_cjs/constants/address.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zeroAddress = exports2.entryPoint07Address = exports2.entryPoint06Address = void 0;
    exports2.entryPoint06Address = "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789";
    exports2.entryPoint07Address = "0x0000000071727De22E5E9d8BAf0edAc6f37da032";
    exports2.zeroAddress = "0x0000000000000000000000000000000000000000";
  }
});

// node_modules/viem/_cjs/types/eip1193.js
var require_eip1193 = __commonJS({
  "node_modules/viem/_cjs/types/eip1193.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProviderRpcError = void 0;
    var ProviderRpcError = class extends Error {
      constructor(code, message) {
        super(message);
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "details", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.code = code;
        this.details = message;
      }
    };
    exports2.ProviderRpcError = ProviderRpcError;
  }
});

// node_modules/viem/_cjs/utils/abi/decodeDeployData.js
var require_decodeDeployData = __commonJS({
  "node_modules/viem/_cjs/utils/abi/decodeDeployData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeDeployData = decodeDeployData;
    var abi_js_1 = require_abi();
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    var docsPath = "/docs/contract/decodeDeployData";
    function decodeDeployData(parameters) {
      const { abi, bytecode, data } = parameters;
      if (data === bytecode)
        return { bytecode };
      const description = abi.find((x) => "type" in x && x.type === "constructor");
      if (!description)
        throw new abi_js_1.AbiConstructorNotFoundError({ docsPath });
      if (!("inputs" in description))
        throw new abi_js_1.AbiConstructorParamsNotFoundError({ docsPath });
      if (!description.inputs || description.inputs.length === 0)
        throw new abi_js_1.AbiConstructorParamsNotFoundError({ docsPath });
      const args = (0, decodeAbiParameters_js_1.decodeAbiParameters)(description.inputs, `0x${data.replace(bytecode, "")}`);
      return { args, bytecode };
    }
  }
});

// node_modules/viem/_cjs/utils/signature/compactSignatureToSignature.js
var require_compactSignatureToSignature = __commonJS({
  "node_modules/viem/_cjs/utils/signature/compactSignatureToSignature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.compactSignatureToSignature = compactSignatureToSignature;
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    function compactSignatureToSignature({ r, yParityAndS }) {
      const yParityAndS_bytes = (0, toBytes_js_1.hexToBytes)(yParityAndS);
      const yParity = yParityAndS_bytes[0] & 128 ? 1 : 0;
      const s = yParityAndS_bytes;
      if (yParity === 1)
        s[0] &= 127;
      return { r, s: (0, toHex_js_1.bytesToHex)(s), yParity };
    }
  }
});

// node_modules/viem/_cjs/utils/signature/parseCompactSignature.js
var require_parseCompactSignature = __commonJS({
  "node_modules/viem/_cjs/utils/signature/parseCompactSignature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseCompactSignature = parseCompactSignature;
    var secp256k1_1 = require_secp256k1();
    var toHex_js_1 = require_toHex();
    function parseCompactSignature(signatureHex) {
      const { r, s } = secp256k1_1.secp256k1.Signature.fromCompact(signatureHex.slice(2, 130));
      return {
        r: (0, toHex_js_1.numberToHex)(r, { size: 32 }),
        yParityAndS: (0, toHex_js_1.numberToHex)(s, { size: 32 })
      };
    }
  }
});

// node_modules/viem/_cjs/utils/signature/parseSignature.js
var require_parseSignature = __commonJS({
  "node_modules/viem/_cjs/utils/signature/parseSignature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseSignature = parseSignature;
    var secp256k1_1 = require_secp256k1();
    var toHex_js_1 = require_toHex();
    function parseSignature(signatureHex) {
      const { r, s } = secp256k1_1.secp256k1.Signature.fromCompact(signatureHex.slice(2, 130));
      const yParityOrV = Number(`0x${signatureHex.slice(130)}`);
      const [v, yParity] = (() => {
        if (yParityOrV === 0 || yParityOrV === 1)
          return [void 0, yParityOrV];
        if (yParityOrV === 27)
          return [BigInt(yParityOrV), 0];
        if (yParityOrV === 28)
          return [BigInt(yParityOrV), 1];
        throw new Error("Invalid yParityOrV value");
      })();
      if (typeof v !== "undefined")
        return {
          r: (0, toHex_js_1.numberToHex)(r, { size: 32 }),
          s: (0, toHex_js_1.numberToHex)(s, { size: 32 }),
          v,
          yParity
        };
      return {
        r: (0, toHex_js_1.numberToHex)(r, { size: 32 }),
        s: (0, toHex_js_1.numberToHex)(s, { size: 32 }),
        yParity
      };
    }
  }
});

// node_modules/viem/_cjs/utils/signature/recoverTransactionAddress.js
var require_recoverTransactionAddress = __commonJS({
  "node_modules/viem/_cjs/utils/signature/recoverTransactionAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverTransactionAddress = recoverTransactionAddress;
    var keccak256_js_1 = require_keccak256();
    var parseTransaction_js_1 = require_parseTransaction();
    var serializeTransaction_js_1 = require_serializeTransaction();
    var recoverAddress_js_1 = require_recoverAddress();
    async function recoverTransactionAddress(parameters) {
      const { serializedTransaction, signature: signature_ } = parameters;
      const transaction = (0, parseTransaction_js_1.parseTransaction)(serializedTransaction);
      const signature = signature_ ?? {
        r: transaction.r,
        s: transaction.s,
        v: transaction.v,
        yParity: transaction.yParity
      };
      const serialized = (0, serializeTransaction_js_1.serializeTransaction)({
        ...transaction,
        r: void 0,
        s: void 0,
        v: void 0,
        yParity: void 0,
        sidecars: void 0
      });
      return await (0, recoverAddress_js_1.recoverAddress)({
        hash: (0, keccak256_js_1.keccak256)(serialized),
        signature
      });
    }
  }
});

// node_modules/viem/_cjs/utils/signature/signatureToCompactSignature.js
var require_signatureToCompactSignature = __commonJS({
  "node_modules/viem/_cjs/utils/signature/signatureToCompactSignature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.signatureToCompactSignature = signatureToCompactSignature;
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    function signatureToCompactSignature(signature) {
      const { r, s, v, yParity } = signature;
      const yParity_ = Number(yParity ?? v - 27n);
      let yParityAndS = s;
      if (yParity_ === 1) {
        const bytes = (0, toBytes_js_1.hexToBytes)(s);
        bytes[0] |= 128;
        yParityAndS = (0, toHex_js_1.bytesToHex)(bytes);
      }
      return { r, yParityAndS };
    }
  }
});

// node_modules/viem/_cjs/utils/signature/serializeCompactSignature.js
var require_serializeCompactSignature = __commonJS({
  "node_modules/viem/_cjs/utils/signature/serializeCompactSignature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeCompactSignature = serializeCompactSignature;
    var secp256k1_1 = require_secp256k1();
    var fromHex_js_1 = require_fromHex();
    function serializeCompactSignature({ r, yParityAndS }) {
      return `0x${new secp256k1_1.secp256k1.Signature((0, fromHex_js_1.hexToBigInt)(r), (0, fromHex_js_1.hexToBigInt)(yParityAndS)).toCompactHex()}`;
    }
  }
});

// node_modules/viem/_cjs/utils/blob/sidecarsToVersionedHashes.js
var require_sidecarsToVersionedHashes = __commonJS({
  "node_modules/viem/_cjs/utils/blob/sidecarsToVersionedHashes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sidecarsToVersionedHashes = sidecarsToVersionedHashes;
    var commitmentToVersionedHash_js_1 = require_commitmentToVersionedHash();
    function sidecarsToVersionedHashes(parameters) {
      const { sidecars, version } = parameters;
      const to = parameters.to ?? (typeof sidecars[0].blob === "string" ? "hex" : "bytes");
      const hashes = [];
      for (const { commitment } of sidecars) {
        hashes.push((0, commitmentToVersionedHash_js_1.commitmentToVersionedHash)({
          commitment,
          to,
          version
        }));
      }
      return hashes;
    }
  }
});

// node_modules/viem/_cjs/utils/blob/fromBlobs.js
var require_fromBlobs = __commonJS({
  "node_modules/viem/_cjs/utils/blob/fromBlobs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromBlobs = fromBlobs;
    var cursor_js_1 = require_cursor2();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    function fromBlobs(parameters) {
      const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
      const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => (0, toBytes_js_1.hexToBytes)(x)) : parameters.blobs;
      const length = blobs.reduce((length2, blob) => length2 + blob.length, 0);
      const data = (0, cursor_js_1.createCursor)(new Uint8Array(length));
      let active = true;
      for (const blob of blobs) {
        const cursor = (0, cursor_js_1.createCursor)(blob);
        while (active && cursor.position < blob.length) {
          cursor.incrementPosition(1);
          let consume = 31;
          if (blob.length - cursor.position < 31)
            consume = blob.length - cursor.position;
          for (const _ in Array.from({ length: consume })) {
            const byte = cursor.readByte();
            const isTerminator = byte === 128 && !cursor.inspectBytes(cursor.remaining).includes(128);
            if (isTerminator) {
              active = false;
              break;
            }
            data.pushByte(byte);
          }
        }
      }
      const trimmedData = data.bytes.slice(0, data.position);
      return to === "hex" ? (0, toHex_js_1.bytesToHex)(trimmedData) : trimmedData;
    }
  }
});

// node_modules/viem/_cjs/utils/kzg/defineKzg.js
var require_defineKzg = __commonJS({
  "node_modules/viem/_cjs/utils/kzg/defineKzg.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineKzg = defineKzg;
    function defineKzg({ blobToKzgCommitment, computeBlobKzgProof }) {
      return {
        blobToKzgCommitment,
        computeBlobKzgProof
      };
    }
  }
});

// node_modules/viem/_cjs/utils/kzg/setupKzg.js
var require_setupKzg = __commonJS({
  "node_modules/viem/_cjs/utils/kzg/setupKzg.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setupKzg = setupKzg;
    var defineKzg_js_1 = require_defineKzg();
    function setupKzg(parameters, path) {
      try {
        parameters.loadTrustedSetup(path);
      } catch (e) {
        const error = e;
        if (!error.message.includes("trusted setup is already loaded"))
          throw error;
      }
      return (0, defineKzg_js_1.defineKzg)(parameters);
    }
  }
});

// node_modules/viem/_cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/viem/_cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.maxInt40 = exports2.maxInt32 = exports2.maxInt24 = exports2.maxInt16 = exports2.maxInt8 = exports2.weiUnits = exports2.gweiUnits = exports2.etherUnits = exports2.universalSignatureValidatorByteCode = exports2.deploylessCallViaFactoryBytecode = exports2.deploylessCallViaBytecodeBytecode = exports2.zeroAddress = exports2.universalSignatureValidatorAbi = exports2.erc4626Abi = exports2.erc721Abi = exports2.erc20Abi_bytes32 = exports2.erc20Abi = exports2.multicall3Abi = exports2.webSocket = exports2.createWalletClient = exports2.createTransport = exports2.walletActions = exports2.testActions = exports2.publicActions = exports2.createTestClient = exports2.createPublicClient = exports2.http = exports2.fallback = exports2.custom = exports2.rpcSchema = exports2.createClient = exports2.getContract = exports2.parseAbiParameters = exports2.parseAbiParameter = exports2.parseAbiItem = exports2.parseAbi = exports2.UnknownSignatureError = exports2.UnknownTypeError = exports2.SolidityProtectedKeywordError = exports2.InvalidStructSignatureError = exports2.InvalidSignatureError = exports2.InvalidParenthesisError = exports2.InvalidParameterError = exports2.InvalidModifierError = exports2.InvalidFunctionModifierError = exports2.InvalidAbiTypeParameterError = exports2.InvalidAbiItemError = exports2.InvalidAbiParametersError = exports2.InvalidAbiParameterError = exports2.CircularReferenceError = void 0;
    exports2.maxUint184 = exports2.maxUint176 = exports2.maxUint168 = exports2.maxUint160 = exports2.maxUint152 = exports2.maxUint144 = exports2.maxUint136 = exports2.maxUint128 = exports2.maxUint120 = exports2.maxUint112 = exports2.maxUint104 = exports2.maxUint96 = exports2.maxUint88 = exports2.maxUint80 = exports2.maxUint72 = exports2.maxUint64 = exports2.maxUint56 = exports2.maxUint48 = exports2.maxUint40 = exports2.maxUint32 = exports2.maxUint24 = exports2.maxUint16 = exports2.maxUint8 = exports2.maxInt256 = exports2.maxInt248 = exports2.maxInt240 = exports2.maxInt232 = exports2.maxInt224 = exports2.maxInt216 = exports2.maxInt208 = exports2.maxInt200 = exports2.maxInt192 = exports2.maxInt184 = exports2.maxInt176 = exports2.maxInt168 = exports2.maxInt160 = exports2.maxInt152 = exports2.maxInt144 = exports2.maxInt136 = exports2.maxInt128 = exports2.maxInt120 = exports2.maxInt112 = exports2.maxInt104 = exports2.maxInt96 = exports2.maxInt88 = exports2.maxInt80 = exports2.maxInt72 = exports2.maxInt64 = exports2.maxInt56 = exports2.maxInt48 = void 0;
    exports2.AbiEncodingLengthMismatchError = exports2.AbiEncodingArrayLengthMismatchError = exports2.AbiDecodingZeroDataError = exports2.AbiDecodingDataSizeTooSmallError = exports2.AbiDecodingDataSizeInvalidError = exports2.AbiConstructorParamsNotFoundError = exports2.AbiConstructorNotFoundError = exports2.presignMessagePrefix = exports2.zeroHash = exports2.minInt256 = exports2.minInt248 = exports2.minInt240 = exports2.minInt232 = exports2.minInt224 = exports2.minInt216 = exports2.minInt208 = exports2.minInt200 = exports2.minInt192 = exports2.minInt184 = exports2.minInt176 = exports2.minInt168 = exports2.minInt160 = exports2.minInt152 = exports2.minInt144 = exports2.minInt136 = exports2.minInt128 = exports2.minInt120 = exports2.minInt112 = exports2.minInt104 = exports2.minInt96 = exports2.minInt88 = exports2.minInt80 = exports2.minInt72 = exports2.minInt64 = exports2.minInt56 = exports2.minInt48 = exports2.minInt40 = exports2.minInt32 = exports2.minInt24 = exports2.minInt16 = exports2.minInt8 = exports2.maxUint256 = exports2.maxUint248 = exports2.maxUint240 = exports2.maxUint232 = exports2.maxUint224 = exports2.maxUint216 = exports2.maxUint208 = exports2.maxUint200 = exports2.maxUint192 = void 0;
    exports2.UnsupportedProviderMethodError = exports2.UnknownRpcError = exports2.UnauthorizedProviderError = exports2.TransactionRejectedRpcError = exports2.SwitchChainError = exports2.RpcError = exports2.ResourceUnavailableRpcError = exports2.ResourceNotFoundRpcError = exports2.ProviderRpcError = exports2.ProviderDisconnectedError = exports2.ParseRpcError = exports2.MethodNotSupportedRpcError = exports2.MethodNotFoundRpcError = exports2.LimitExceededRpcError = exports2.JsonRpcVersionUnsupportedError = exports2.InvalidRequestRpcError = exports2.InvalidParamsRpcError = exports2.InvalidInputRpcError = exports2.InternalRpcError = exports2.ChainDisconnectedError = exports2.MaxFeePerGasTooLowError = exports2.Eip1559FeesNotSupportedError = exports2.BaseFeeScalarError = exports2.CounterfactualDeploymentFailedError = exports2.RawContractError = exports2.ContractFunctionZeroDataError = exports2.ContractFunctionRevertedError = exports2.ContractFunctionExecutionError = exports2.CallExecutionError = exports2.BlockNotFoundError = exports2.setErrorConfig = exports2.BaseError = exports2.UnsupportedPackedAbiType = exports2.InvalidDefinitionTypeError = exports2.InvalidArrayError = exports2.InvalidAbiEncodingTypeError = exports2.InvalidAbiDecodingTypeError = exports2.DecodeLogTopicsMismatch = exports2.DecodeLogDataMismatch = exports2.BytesSizeMismatchError = exports2.AbiFunctionSignatureNotFoundError = exports2.AbiFunctionOutputsNotFoundError = exports2.AbiFunctionNotFoundError = exports2.AbiEventSignatureNotFoundError = exports2.AbiEventSignatureEmptyTopicsError = exports2.AbiEventNotFoundError = exports2.AbiErrorSignatureNotFoundError = exports2.AbiErrorNotFoundError = exports2.AbiErrorInputsNotFoundError = exports2.AbiEncodingBytesSizeMismatchError = void 0;
    exports2.StateAssignmentConflictError = exports2.AccountStateConflictError = exports2.UrlRequiredError = exports2.SliceOffsetOutOfBoundsError = exports2.SizeExceedsPaddingSizeError = exports2.WaitForTransactionReceiptTimeoutError = exports2.TransactionReceiptNotFoundError = exports2.TransactionNotFoundError = exports2.TransactionExecutionError = exports2.InvalidStorageKeySizeError = exports2.InvalidSerializedTransactionTypeError = exports2.InvalidSerializedTransactionError = exports2.InvalidSerializableTransactionError = exports2.InvalidLegacyVError = exports2.FeeConflictError = exports2.InvalidAddressError = exports2.WebSocketRequestError = exports2.SocketClosedError = exports2.TimeoutError = exports2.RpcRequestError = exports2.HttpRequestError = exports2.FilterTypeNotSupportedError = exports2.UnknownNodeError = exports2.TransactionTypeNotSupportedError = exports2.TipAboveFeeCapError = exports2.NonceTooLowError = exports2.NonceTooHighError = exports2.NonceMaxValueError = exports2.IntrinsicGasTooLowError = exports2.IntrinsicGasTooHighError = exports2.InsufficientFundsError = exports2.FeeCapTooLowError = exports2.FeeCapTooHighError = exports2.ExecutionRevertedError = exports2.EstimateGasExecutionError = exports2.InvalidDecimalNumberError = exports2.EnsAvatarUnsupportedNamespaceError = exports2.EnsAvatarInvalidNftUriError = exports2.EnsAvatarUriResolutionError = exports2.SizeOverflowError = exports2.InvalidHexValueError = exports2.InvalidHexBooleanError = exports2.IntegerOutOfRangeError = exports2.InvalidBytesBooleanError = exports2.InvalidChainIdError = exports2.ClientChainNotConfiguredError = exports2.ChainNotFoundError = exports2.ChainMismatchError = exports2.ChainDoesNotSupportContract = exports2.UserRejectedRequestError = void 0;
    exports2.signatureToHex = exports2.serializeCompactSignature = exports2.compactSignatureToHex = exports2.signatureToCompactSignature = exports2.recoverTypedDataAddress = exports2.recoverTransactionAddress = exports2.recoverPublicKey = exports2.recoverMessageAddress = exports2.recoverAddress = exports2.parseSignature = exports2.hexToSignature = exports2.parseCompactSignature = exports2.hexToCompactSignature = exports2.compactSignatureToSignature = exports2.hashTypedData = exports2.hashDomain = exports2.getTransactionType = exports2.getSerializedTransactionType = exports2.getCreateAddress = exports2.getCreate2Address = exports2.getContractAddress = exports2.getAbiItem = exports2.rpcTransactionType = exports2.formatTransactionRequest = exports2.defineTransactionRequest = exports2.formatTransactionReceipt = exports2.defineTransactionReceipt = exports2.transactionType = exports2.formatTransaction = exports2.defineTransaction = exports2.parseEventLogs = exports2.encodeFunctionResult = exports2.prepareEncodeFunctionData = exports2.encodeFunctionData = exports2.encodeEventTopics = exports2.encodeErrorResult = exports2.encodeDeployData = exports2.encodeAbiParameters = exports2.decodeFunctionResult = exports2.decodeFunctionData = exports2.decodeEventLog = exports2.decodeErrorResult = exports2.decodeDeployData = exports2.decodeAbiParameters = exports2.formatLog = exports2.formatBlock = exports2.defineBlock = exports2.namehash = exports2.labelhash = exports2.EIP1193ProviderRpcError = void 0;
    exports2.extractChain = exports2.defineChain = exports2.assertCurrentChain = exports2.concatHex = exports2.concatBytes = exports2.concat = exports2.setupKzg = exports2.defineKzg = exports2.toBlobs = exports2.toBlobSidecars = exports2.fromBlobs = exports2.blobsToProofs = exports2.sidecarsToVersionedHashes = exports2.commitmentsToVersionedHashes = exports2.commitmentToVersionedHash = exports2.blobsToCommitments = exports2.offchainLookupSignature = exports2.offchainLookupAbiItem = exports2.offchainLookup = exports2.ccipFetch = exports2.ccipRequest = exports2.fromBytes = exports2.bytesToString = exports2.bytesToNumber = exports2.bytesToBool = exports2.bytesToBigInt = exports2.toHex = exports2.stringToHex = exports2.numberToHex = exports2.bytesToHex = exports2.boolToHex = exports2.toBytes = exports2.stringToBytes = exports2.numberToBytes = exports2.hexToBytes = exports2.boolToBytes = exports2.assertTransactionLegacy = exports2.assertTransactionEIP2930 = exports2.assertTransactionEIP1559 = exports2.assertRequest = exports2.serializeErc6492Signature = exports2.isErc6492Signature = exports2.parseErc6492Signature = exports2.verifyTypedData = exports2.verifyMessage = exports2.verifyHash = exports2.toRlp = exports2.hexToRlp = exports2.bytesToRlp = exports2.serializeSignature = void 0;
    exports2.stringify = exports2.sliceHex = exports2.sliceBytes = exports2.slice = exports2.size = exports2.serializeTransaction = exports2.serializeAccessList = exports2.parseUnits = exports2.parseTransaction = exports2.parseGwei = exports2.parseEther = exports2.padHex = exports2.padBytes = exports2.pad = exports2.ripemd160 = exports2.sha256 = exports2.keccak256 = exports2.isHex = exports2.isHash = exports2.isBytes = exports2.isAddressEqual = exports2.isAddress = exports2.toPrefixedMessage = exports2.hashMessage = exports2.toFunctionHash = exports2.toEventHash = exports2.getFunctionSignature = exports2.toFunctionSignature = exports2.getEventSignature = exports2.toEventSignature = exports2.getFunctionSelector = exports2.toFunctionSelector = exports2.getEventSelector = exports2.toEventSelector = exports2.getContractError = exports2.getAddress = exports2.checksumAddress = exports2.fromRlp = exports2.hexToString = exports2.hexToNumber = exports2.hexToBool = exports2.hexToBigInt = exports2.fromHex = exports2.formatUnits = exports2.formatGwei = exports2.formatEther = exports2.withTimeout = exports2.withRetry = exports2.encodePacked = exports2.getChainContractAddress = void 0;
    exports2.nonceManager = exports2.createNonceManager = exports2.getTypesForEIP712Domain = exports2.domainSeparator = exports2.validateTypedData = exports2.serializeTypedData = exports2.trim = void 0;
    var abitype_1 = require_exports();
    Object.defineProperty(exports2, "CircularReferenceError", { enumerable: true, get: function() {
      return abitype_1.CircularReferenceError;
    } });
    Object.defineProperty(exports2, "InvalidAbiParameterError", { enumerable: true, get: function() {
      return abitype_1.InvalidAbiParameterError;
    } });
    Object.defineProperty(exports2, "InvalidAbiParametersError", { enumerable: true, get: function() {
      return abitype_1.InvalidAbiParametersError;
    } });
    Object.defineProperty(exports2, "InvalidAbiItemError", { enumerable: true, get: function() {
      return abitype_1.InvalidAbiItemError;
    } });
    Object.defineProperty(exports2, "InvalidAbiTypeParameterError", { enumerable: true, get: function() {
      return abitype_1.InvalidAbiTypeParameterError;
    } });
    Object.defineProperty(exports2, "InvalidFunctionModifierError", { enumerable: true, get: function() {
      return abitype_1.InvalidFunctionModifierError;
    } });
    Object.defineProperty(exports2, "InvalidModifierError", { enumerable: true, get: function() {
      return abitype_1.InvalidModifierError;
    } });
    Object.defineProperty(exports2, "InvalidParameterError", { enumerable: true, get: function() {
      return abitype_1.InvalidParameterError;
    } });
    Object.defineProperty(exports2, "InvalidParenthesisError", { enumerable: true, get: function() {
      return abitype_1.InvalidParenthesisError;
    } });
    Object.defineProperty(exports2, "InvalidSignatureError", { enumerable: true, get: function() {
      return abitype_1.InvalidSignatureError;
    } });
    Object.defineProperty(exports2, "InvalidStructSignatureError", { enumerable: true, get: function() {
      return abitype_1.InvalidStructSignatureError;
    } });
    Object.defineProperty(exports2, "SolidityProtectedKeywordError", { enumerable: true, get: function() {
      return abitype_1.SolidityProtectedKeywordError;
    } });
    Object.defineProperty(exports2, "UnknownTypeError", { enumerable: true, get: function() {
      return abitype_1.UnknownTypeError;
    } });
    Object.defineProperty(exports2, "UnknownSignatureError", { enumerable: true, get: function() {
      return abitype_1.UnknownSignatureError;
    } });
    Object.defineProperty(exports2, "parseAbi", { enumerable: true, get: function() {
      return abitype_1.parseAbi;
    } });
    Object.defineProperty(exports2, "parseAbiItem", { enumerable: true, get: function() {
      return abitype_1.parseAbiItem;
    } });
    Object.defineProperty(exports2, "parseAbiParameter", { enumerable: true, get: function() {
      return abitype_1.parseAbiParameter;
    } });
    Object.defineProperty(exports2, "parseAbiParameters", { enumerable: true, get: function() {
      return abitype_1.parseAbiParameters;
    } });
    var getContract_js_1 = require_getContract();
    Object.defineProperty(exports2, "getContract", { enumerable: true, get: function() {
      return getContract_js_1.getContract;
    } });
    var createClient_js_1 = require_createClient();
    Object.defineProperty(exports2, "createClient", { enumerable: true, get: function() {
      return createClient_js_1.createClient;
    } });
    Object.defineProperty(exports2, "rpcSchema", { enumerable: true, get: function() {
      return createClient_js_1.rpcSchema;
    } });
    var custom_js_1 = require_custom();
    Object.defineProperty(exports2, "custom", { enumerable: true, get: function() {
      return custom_js_1.custom;
    } });
    var fallback_js_1 = require_fallback();
    Object.defineProperty(exports2, "fallback", { enumerable: true, get: function() {
      return fallback_js_1.fallback;
    } });
    var http_js_1 = require_http2();
    Object.defineProperty(exports2, "http", { enumerable: true, get: function() {
      return http_js_1.http;
    } });
    var createPublicClient_js_1 = require_createPublicClient();
    Object.defineProperty(exports2, "createPublicClient", { enumerable: true, get: function() {
      return createPublicClient_js_1.createPublicClient;
    } });
    var createTestClient_js_1 = require_createTestClient();
    Object.defineProperty(exports2, "createTestClient", { enumerable: true, get: function() {
      return createTestClient_js_1.createTestClient;
    } });
    var public_js_1 = require_public();
    Object.defineProperty(exports2, "publicActions", { enumerable: true, get: function() {
      return public_js_1.publicActions;
    } });
    var test_js_1 = require_test();
    Object.defineProperty(exports2, "testActions", { enumerable: true, get: function() {
      return test_js_1.testActions;
    } });
    var wallet_js_1 = require_wallet();
    Object.defineProperty(exports2, "walletActions", { enumerable: true, get: function() {
      return wallet_js_1.walletActions;
    } });
    var createTransport_js_1 = require_createTransport();
    Object.defineProperty(exports2, "createTransport", { enumerable: true, get: function() {
      return createTransport_js_1.createTransport;
    } });
    var createWalletClient_js_1 = require_createWalletClient();
    Object.defineProperty(exports2, "createWalletClient", { enumerable: true, get: function() {
      return createWalletClient_js_1.createWalletClient;
    } });
    var webSocket_js_1 = require_webSocket2();
    Object.defineProperty(exports2, "webSocket", { enumerable: true, get: function() {
      return webSocket_js_1.webSocket;
    } });
    var abis_js_1 = require_abis();
    Object.defineProperty(exports2, "multicall3Abi", { enumerable: true, get: function() {
      return abis_js_1.multicall3Abi;
    } });
    Object.defineProperty(exports2, "erc20Abi", { enumerable: true, get: function() {
      return abis_js_1.erc20Abi;
    } });
    Object.defineProperty(exports2, "erc20Abi_bytes32", { enumerable: true, get: function() {
      return abis_js_1.erc20Abi_bytes32;
    } });
    Object.defineProperty(exports2, "erc721Abi", { enumerable: true, get: function() {
      return abis_js_1.erc721Abi;
    } });
    Object.defineProperty(exports2, "erc4626Abi", { enumerable: true, get: function() {
      return abis_js_1.erc4626Abi;
    } });
    Object.defineProperty(exports2, "universalSignatureValidatorAbi", { enumerable: true, get: function() {
      return abis_js_1.universalSignatureValidatorAbi;
    } });
    var address_js_1 = require_address2();
    Object.defineProperty(exports2, "zeroAddress", { enumerable: true, get: function() {
      return address_js_1.zeroAddress;
    } });
    var contracts_js_1 = require_contracts2();
    Object.defineProperty(exports2, "deploylessCallViaBytecodeBytecode", { enumerable: true, get: function() {
      return contracts_js_1.deploylessCallViaBytecodeBytecode;
    } });
    Object.defineProperty(exports2, "deploylessCallViaFactoryBytecode", { enumerable: true, get: function() {
      return contracts_js_1.deploylessCallViaFactoryBytecode;
    } });
    Object.defineProperty(exports2, "universalSignatureValidatorByteCode", { enumerable: true, get: function() {
      return contracts_js_1.universalSignatureValidatorByteCode;
    } });
    var unit_js_1 = require_unit();
    Object.defineProperty(exports2, "etherUnits", { enumerable: true, get: function() {
      return unit_js_1.etherUnits;
    } });
    Object.defineProperty(exports2, "gweiUnits", { enumerable: true, get: function() {
      return unit_js_1.gweiUnits;
    } });
    Object.defineProperty(exports2, "weiUnits", { enumerable: true, get: function() {
      return unit_js_1.weiUnits;
    } });
    var number_js_1 = require_number();
    Object.defineProperty(exports2, "maxInt8", { enumerable: true, get: function() {
      return number_js_1.maxInt8;
    } });
    Object.defineProperty(exports2, "maxInt16", { enumerable: true, get: function() {
      return number_js_1.maxInt16;
    } });
    Object.defineProperty(exports2, "maxInt24", { enumerable: true, get: function() {
      return number_js_1.maxInt24;
    } });
    Object.defineProperty(exports2, "maxInt32", { enumerable: true, get: function() {
      return number_js_1.maxInt32;
    } });
    Object.defineProperty(exports2, "maxInt40", { enumerable: true, get: function() {
      return number_js_1.maxInt40;
    } });
    Object.defineProperty(exports2, "maxInt48", { enumerable: true, get: function() {
      return number_js_1.maxInt48;
    } });
    Object.defineProperty(exports2, "maxInt56", { enumerable: true, get: function() {
      return number_js_1.maxInt56;
    } });
    Object.defineProperty(exports2, "maxInt64", { enumerable: true, get: function() {
      return number_js_1.maxInt64;
    } });
    Object.defineProperty(exports2, "maxInt72", { enumerable: true, get: function() {
      return number_js_1.maxInt72;
    } });
    Object.defineProperty(exports2, "maxInt80", { enumerable: true, get: function() {
      return number_js_1.maxInt80;
    } });
    Object.defineProperty(exports2, "maxInt88", { enumerable: true, get: function() {
      return number_js_1.maxInt88;
    } });
    Object.defineProperty(exports2, "maxInt96", { enumerable: true, get: function() {
      return number_js_1.maxInt96;
    } });
    Object.defineProperty(exports2, "maxInt104", { enumerable: true, get: function() {
      return number_js_1.maxInt104;
    } });
    Object.defineProperty(exports2, "maxInt112", { enumerable: true, get: function() {
      return number_js_1.maxInt112;
    } });
    Object.defineProperty(exports2, "maxInt120", { enumerable: true, get: function() {
      return number_js_1.maxInt120;
    } });
    Object.defineProperty(exports2, "maxInt128", { enumerable: true, get: function() {
      return number_js_1.maxInt128;
    } });
    Object.defineProperty(exports2, "maxInt136", { enumerable: true, get: function() {
      return number_js_1.maxInt136;
    } });
    Object.defineProperty(exports2, "maxInt144", { enumerable: true, get: function() {
      return number_js_1.maxInt144;
    } });
    Object.defineProperty(exports2, "maxInt152", { enumerable: true, get: function() {
      return number_js_1.maxInt152;
    } });
    Object.defineProperty(exports2, "maxInt160", { enumerable: true, get: function() {
      return number_js_1.maxInt160;
    } });
    Object.defineProperty(exports2, "maxInt168", { enumerable: true, get: function() {
      return number_js_1.maxInt168;
    } });
    Object.defineProperty(exports2, "maxInt176", { enumerable: true, get: function() {
      return number_js_1.maxInt176;
    } });
    Object.defineProperty(exports2, "maxInt184", { enumerable: true, get: function() {
      return number_js_1.maxInt184;
    } });
    Object.defineProperty(exports2, "maxInt192", { enumerable: true, get: function() {
      return number_js_1.maxInt192;
    } });
    Object.defineProperty(exports2, "maxInt200", { enumerable: true, get: function() {
      return number_js_1.maxInt200;
    } });
    Object.defineProperty(exports2, "maxInt208", { enumerable: true, get: function() {
      return number_js_1.maxInt208;
    } });
    Object.defineProperty(exports2, "maxInt216", { enumerable: true, get: function() {
      return number_js_1.maxInt216;
    } });
    Object.defineProperty(exports2, "maxInt224", { enumerable: true, get: function() {
      return number_js_1.maxInt224;
    } });
    Object.defineProperty(exports2, "maxInt232", { enumerable: true, get: function() {
      return number_js_1.maxInt232;
    } });
    Object.defineProperty(exports2, "maxInt240", { enumerable: true, get: function() {
      return number_js_1.maxInt240;
    } });
    Object.defineProperty(exports2, "maxInt248", { enumerable: true, get: function() {
      return number_js_1.maxInt248;
    } });
    Object.defineProperty(exports2, "maxInt256", { enumerable: true, get: function() {
      return number_js_1.maxInt256;
    } });
    Object.defineProperty(exports2, "maxUint8", { enumerable: true, get: function() {
      return number_js_1.maxUint8;
    } });
    Object.defineProperty(exports2, "maxUint16", { enumerable: true, get: function() {
      return number_js_1.maxUint16;
    } });
    Object.defineProperty(exports2, "maxUint24", { enumerable: true, get: function() {
      return number_js_1.maxUint24;
    } });
    Object.defineProperty(exports2, "maxUint32", { enumerable: true, get: function() {
      return number_js_1.maxUint32;
    } });
    Object.defineProperty(exports2, "maxUint40", { enumerable: true, get: function() {
      return number_js_1.maxUint40;
    } });
    Object.defineProperty(exports2, "maxUint48", { enumerable: true, get: function() {
      return number_js_1.maxUint48;
    } });
    Object.defineProperty(exports2, "maxUint56", { enumerable: true, get: function() {
      return number_js_1.maxUint56;
    } });
    Object.defineProperty(exports2, "maxUint64", { enumerable: true, get: function() {
      return number_js_1.maxUint64;
    } });
    Object.defineProperty(exports2, "maxUint72", { enumerable: true, get: function() {
      return number_js_1.maxUint72;
    } });
    Object.defineProperty(exports2, "maxUint80", { enumerable: true, get: function() {
      return number_js_1.maxUint80;
    } });
    Object.defineProperty(exports2, "maxUint88", { enumerable: true, get: function() {
      return number_js_1.maxUint88;
    } });
    Object.defineProperty(exports2, "maxUint96", { enumerable: true, get: function() {
      return number_js_1.maxUint96;
    } });
    Object.defineProperty(exports2, "maxUint104", { enumerable: true, get: function() {
      return number_js_1.maxUint104;
    } });
    Object.defineProperty(exports2, "maxUint112", { enumerable: true, get: function() {
      return number_js_1.maxUint112;
    } });
    Object.defineProperty(exports2, "maxUint120", { enumerable: true, get: function() {
      return number_js_1.maxUint120;
    } });
    Object.defineProperty(exports2, "maxUint128", { enumerable: true, get: function() {
      return number_js_1.maxUint128;
    } });
    Object.defineProperty(exports2, "maxUint136", { enumerable: true, get: function() {
      return number_js_1.maxUint136;
    } });
    Object.defineProperty(exports2, "maxUint144", { enumerable: true, get: function() {
      return number_js_1.maxUint144;
    } });
    Object.defineProperty(exports2, "maxUint152", { enumerable: true, get: function() {
      return number_js_1.maxUint152;
    } });
    Object.defineProperty(exports2, "maxUint160", { enumerable: true, get: function() {
      return number_js_1.maxUint160;
    } });
    Object.defineProperty(exports2, "maxUint168", { enumerable: true, get: function() {
      return number_js_1.maxUint168;
    } });
    Object.defineProperty(exports2, "maxUint176", { enumerable: true, get: function() {
      return number_js_1.maxUint176;
    } });
    Object.defineProperty(exports2, "maxUint184", { enumerable: true, get: function() {
      return number_js_1.maxUint184;
    } });
    Object.defineProperty(exports2, "maxUint192", { enumerable: true, get: function() {
      return number_js_1.maxUint192;
    } });
    Object.defineProperty(exports2, "maxUint200", { enumerable: true, get: function() {
      return number_js_1.maxUint200;
    } });
    Object.defineProperty(exports2, "maxUint208", { enumerable: true, get: function() {
      return number_js_1.maxUint208;
    } });
    Object.defineProperty(exports2, "maxUint216", { enumerable: true, get: function() {
      return number_js_1.maxUint216;
    } });
    Object.defineProperty(exports2, "maxUint224", { enumerable: true, get: function() {
      return number_js_1.maxUint224;
    } });
    Object.defineProperty(exports2, "maxUint232", { enumerable: true, get: function() {
      return number_js_1.maxUint232;
    } });
    Object.defineProperty(exports2, "maxUint240", { enumerable: true, get: function() {
      return number_js_1.maxUint240;
    } });
    Object.defineProperty(exports2, "maxUint248", { enumerable: true, get: function() {
      return number_js_1.maxUint248;
    } });
    Object.defineProperty(exports2, "maxUint256", { enumerable: true, get: function() {
      return number_js_1.maxUint256;
    } });
    Object.defineProperty(exports2, "minInt8", { enumerable: true, get: function() {
      return number_js_1.minInt8;
    } });
    Object.defineProperty(exports2, "minInt16", { enumerable: true, get: function() {
      return number_js_1.minInt16;
    } });
    Object.defineProperty(exports2, "minInt24", { enumerable: true, get: function() {
      return number_js_1.minInt24;
    } });
    Object.defineProperty(exports2, "minInt32", { enumerable: true, get: function() {
      return number_js_1.minInt32;
    } });
    Object.defineProperty(exports2, "minInt40", { enumerable: true, get: function() {
      return number_js_1.minInt40;
    } });
    Object.defineProperty(exports2, "minInt48", { enumerable: true, get: function() {
      return number_js_1.minInt48;
    } });
    Object.defineProperty(exports2, "minInt56", { enumerable: true, get: function() {
      return number_js_1.minInt56;
    } });
    Object.defineProperty(exports2, "minInt64", { enumerable: true, get: function() {
      return number_js_1.minInt64;
    } });
    Object.defineProperty(exports2, "minInt72", { enumerable: true, get: function() {
      return number_js_1.minInt72;
    } });
    Object.defineProperty(exports2, "minInt80", { enumerable: true, get: function() {
      return number_js_1.minInt80;
    } });
    Object.defineProperty(exports2, "minInt88", { enumerable: true, get: function() {
      return number_js_1.minInt88;
    } });
    Object.defineProperty(exports2, "minInt96", { enumerable: true, get: function() {
      return number_js_1.minInt96;
    } });
    Object.defineProperty(exports2, "minInt104", { enumerable: true, get: function() {
      return number_js_1.minInt104;
    } });
    Object.defineProperty(exports2, "minInt112", { enumerable: true, get: function() {
      return number_js_1.minInt112;
    } });
    Object.defineProperty(exports2, "minInt120", { enumerable: true, get: function() {
      return number_js_1.minInt120;
    } });
    Object.defineProperty(exports2, "minInt128", { enumerable: true, get: function() {
      return number_js_1.minInt128;
    } });
    Object.defineProperty(exports2, "minInt136", { enumerable: true, get: function() {
      return number_js_1.minInt136;
    } });
    Object.defineProperty(exports2, "minInt144", { enumerable: true, get: function() {
      return number_js_1.minInt144;
    } });
    Object.defineProperty(exports2, "minInt152", { enumerable: true, get: function() {
      return number_js_1.minInt152;
    } });
    Object.defineProperty(exports2, "minInt160", { enumerable: true, get: function() {
      return number_js_1.minInt160;
    } });
    Object.defineProperty(exports2, "minInt168", { enumerable: true, get: function() {
      return number_js_1.minInt168;
    } });
    Object.defineProperty(exports2, "minInt176", { enumerable: true, get: function() {
      return number_js_1.minInt176;
    } });
    Object.defineProperty(exports2, "minInt184", { enumerable: true, get: function() {
      return number_js_1.minInt184;
    } });
    Object.defineProperty(exports2, "minInt192", { enumerable: true, get: function() {
      return number_js_1.minInt192;
    } });
    Object.defineProperty(exports2, "minInt200", { enumerable: true, get: function() {
      return number_js_1.minInt200;
    } });
    Object.defineProperty(exports2, "minInt208", { enumerable: true, get: function() {
      return number_js_1.minInt208;
    } });
    Object.defineProperty(exports2, "minInt216", { enumerable: true, get: function() {
      return number_js_1.minInt216;
    } });
    Object.defineProperty(exports2, "minInt224", { enumerable: true, get: function() {
      return number_js_1.minInt224;
    } });
    Object.defineProperty(exports2, "minInt232", { enumerable: true, get: function() {
      return number_js_1.minInt232;
    } });
    Object.defineProperty(exports2, "minInt240", { enumerable: true, get: function() {
      return number_js_1.minInt240;
    } });
    Object.defineProperty(exports2, "minInt248", { enumerable: true, get: function() {
      return number_js_1.minInt248;
    } });
    Object.defineProperty(exports2, "minInt256", { enumerable: true, get: function() {
      return number_js_1.minInt256;
    } });
    var bytes_js_1 = require_bytes();
    Object.defineProperty(exports2, "zeroHash", { enumerable: true, get: function() {
      return bytes_js_1.zeroHash;
    } });
    var strings_js_1 = require_strings();
    Object.defineProperty(exports2, "presignMessagePrefix", { enumerable: true, get: function() {
      return strings_js_1.presignMessagePrefix;
    } });
    var abi_js_1 = require_abi();
    Object.defineProperty(exports2, "AbiConstructorNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiConstructorNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiConstructorParamsNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiConstructorParamsNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiDecodingDataSizeInvalidError", { enumerable: true, get: function() {
      return abi_js_1.AbiDecodingDataSizeInvalidError;
    } });
    Object.defineProperty(exports2, "AbiDecodingDataSizeTooSmallError", { enumerable: true, get: function() {
      return abi_js_1.AbiDecodingDataSizeTooSmallError;
    } });
    Object.defineProperty(exports2, "AbiDecodingZeroDataError", { enumerable: true, get: function() {
      return abi_js_1.AbiDecodingZeroDataError;
    } });
    Object.defineProperty(exports2, "AbiEncodingArrayLengthMismatchError", { enumerable: true, get: function() {
      return abi_js_1.AbiEncodingArrayLengthMismatchError;
    } });
    Object.defineProperty(exports2, "AbiEncodingLengthMismatchError", { enumerable: true, get: function() {
      return abi_js_1.AbiEncodingLengthMismatchError;
    } });
    Object.defineProperty(exports2, "AbiEncodingBytesSizeMismatchError", { enumerable: true, get: function() {
      return abi_js_1.AbiEncodingBytesSizeMismatchError;
    } });
    Object.defineProperty(exports2, "AbiErrorInputsNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiErrorInputsNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiErrorNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiErrorNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiErrorSignatureNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiErrorSignatureNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiEventNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiEventNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiEventSignatureEmptyTopicsError", { enumerable: true, get: function() {
      return abi_js_1.AbiEventSignatureEmptyTopicsError;
    } });
    Object.defineProperty(exports2, "AbiEventSignatureNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiEventSignatureNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiFunctionNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiFunctionNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiFunctionOutputsNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiFunctionOutputsNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiFunctionSignatureNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiFunctionSignatureNotFoundError;
    } });
    Object.defineProperty(exports2, "BytesSizeMismatchError", { enumerable: true, get: function() {
      return abi_js_1.BytesSizeMismatchError;
    } });
    Object.defineProperty(exports2, "DecodeLogDataMismatch", { enumerable: true, get: function() {
      return abi_js_1.DecodeLogDataMismatch;
    } });
    Object.defineProperty(exports2, "DecodeLogTopicsMismatch", { enumerable: true, get: function() {
      return abi_js_1.DecodeLogTopicsMismatch;
    } });
    Object.defineProperty(exports2, "InvalidAbiDecodingTypeError", { enumerable: true, get: function() {
      return abi_js_1.InvalidAbiDecodingTypeError;
    } });
    Object.defineProperty(exports2, "InvalidAbiEncodingTypeError", { enumerable: true, get: function() {
      return abi_js_1.InvalidAbiEncodingTypeError;
    } });
    Object.defineProperty(exports2, "InvalidArrayError", { enumerable: true, get: function() {
      return abi_js_1.InvalidArrayError;
    } });
    Object.defineProperty(exports2, "InvalidDefinitionTypeError", { enumerable: true, get: function() {
      return abi_js_1.InvalidDefinitionTypeError;
    } });
    Object.defineProperty(exports2, "UnsupportedPackedAbiType", { enumerable: true, get: function() {
      return abi_js_1.UnsupportedPackedAbiType;
    } });
    var base_js_1 = require_base();
    Object.defineProperty(exports2, "BaseError", { enumerable: true, get: function() {
      return base_js_1.BaseError;
    } });
    Object.defineProperty(exports2, "setErrorConfig", { enumerable: true, get: function() {
      return base_js_1.setErrorConfig;
    } });
    var block_js_1 = require_block2();
    Object.defineProperty(exports2, "BlockNotFoundError", { enumerable: true, get: function() {
      return block_js_1.BlockNotFoundError;
    } });
    var contract_js_1 = require_contract();
    Object.defineProperty(exports2, "CallExecutionError", { enumerable: true, get: function() {
      return contract_js_1.CallExecutionError;
    } });
    Object.defineProperty(exports2, "ContractFunctionExecutionError", { enumerable: true, get: function() {
      return contract_js_1.ContractFunctionExecutionError;
    } });
    Object.defineProperty(exports2, "ContractFunctionRevertedError", { enumerable: true, get: function() {
      return contract_js_1.ContractFunctionRevertedError;
    } });
    Object.defineProperty(exports2, "ContractFunctionZeroDataError", { enumerable: true, get: function() {
      return contract_js_1.ContractFunctionZeroDataError;
    } });
    Object.defineProperty(exports2, "RawContractError", { enumerable: true, get: function() {
      return contract_js_1.RawContractError;
    } });
    Object.defineProperty(exports2, "CounterfactualDeploymentFailedError", { enumerable: true, get: function() {
      return contract_js_1.CounterfactualDeploymentFailedError;
    } });
    var fee_js_1 = require_fee();
    Object.defineProperty(exports2, "BaseFeeScalarError", { enumerable: true, get: function() {
      return fee_js_1.BaseFeeScalarError;
    } });
    Object.defineProperty(exports2, "Eip1559FeesNotSupportedError", { enumerable: true, get: function() {
      return fee_js_1.Eip1559FeesNotSupportedError;
    } });
    Object.defineProperty(exports2, "MaxFeePerGasTooLowError", { enumerable: true, get: function() {
      return fee_js_1.MaxFeePerGasTooLowError;
    } });
    var rpc_js_1 = require_rpc();
    Object.defineProperty(exports2, "ChainDisconnectedError", { enumerable: true, get: function() {
      return rpc_js_1.ChainDisconnectedError;
    } });
    Object.defineProperty(exports2, "InternalRpcError", { enumerable: true, get: function() {
      return rpc_js_1.InternalRpcError;
    } });
    Object.defineProperty(exports2, "InvalidInputRpcError", { enumerable: true, get: function() {
      return rpc_js_1.InvalidInputRpcError;
    } });
    Object.defineProperty(exports2, "InvalidParamsRpcError", { enumerable: true, get: function() {
      return rpc_js_1.InvalidParamsRpcError;
    } });
    Object.defineProperty(exports2, "InvalidRequestRpcError", { enumerable: true, get: function() {
      return rpc_js_1.InvalidRequestRpcError;
    } });
    Object.defineProperty(exports2, "JsonRpcVersionUnsupportedError", { enumerable: true, get: function() {
      return rpc_js_1.JsonRpcVersionUnsupportedError;
    } });
    Object.defineProperty(exports2, "LimitExceededRpcError", { enumerable: true, get: function() {
      return rpc_js_1.LimitExceededRpcError;
    } });
    Object.defineProperty(exports2, "MethodNotFoundRpcError", { enumerable: true, get: function() {
      return rpc_js_1.MethodNotFoundRpcError;
    } });
    Object.defineProperty(exports2, "MethodNotSupportedRpcError", { enumerable: true, get: function() {
      return rpc_js_1.MethodNotSupportedRpcError;
    } });
    Object.defineProperty(exports2, "ParseRpcError", { enumerable: true, get: function() {
      return rpc_js_1.ParseRpcError;
    } });
    Object.defineProperty(exports2, "ProviderDisconnectedError", { enumerable: true, get: function() {
      return rpc_js_1.ProviderDisconnectedError;
    } });
    Object.defineProperty(exports2, "ProviderRpcError", { enumerable: true, get: function() {
      return rpc_js_1.ProviderRpcError;
    } });
    Object.defineProperty(exports2, "ResourceNotFoundRpcError", { enumerable: true, get: function() {
      return rpc_js_1.ResourceNotFoundRpcError;
    } });
    Object.defineProperty(exports2, "ResourceUnavailableRpcError", { enumerable: true, get: function() {
      return rpc_js_1.ResourceUnavailableRpcError;
    } });
    Object.defineProperty(exports2, "RpcError", { enumerable: true, get: function() {
      return rpc_js_1.RpcError;
    } });
    Object.defineProperty(exports2, "SwitchChainError", { enumerable: true, get: function() {
      return rpc_js_1.SwitchChainError;
    } });
    Object.defineProperty(exports2, "TransactionRejectedRpcError", { enumerable: true, get: function() {
      return rpc_js_1.TransactionRejectedRpcError;
    } });
    Object.defineProperty(exports2, "UnauthorizedProviderError", { enumerable: true, get: function() {
      return rpc_js_1.UnauthorizedProviderError;
    } });
    Object.defineProperty(exports2, "UnknownRpcError", { enumerable: true, get: function() {
      return rpc_js_1.UnknownRpcError;
    } });
    Object.defineProperty(exports2, "UnsupportedProviderMethodError", { enumerable: true, get: function() {
      return rpc_js_1.UnsupportedProviderMethodError;
    } });
    Object.defineProperty(exports2, "UserRejectedRequestError", { enumerable: true, get: function() {
      return rpc_js_1.UserRejectedRequestError;
    } });
    var chain_js_1 = require_chain();
    Object.defineProperty(exports2, "ChainDoesNotSupportContract", { enumerable: true, get: function() {
      return chain_js_1.ChainDoesNotSupportContract;
    } });
    Object.defineProperty(exports2, "ChainMismatchError", { enumerable: true, get: function() {
      return chain_js_1.ChainMismatchError;
    } });
    Object.defineProperty(exports2, "ChainNotFoundError", { enumerable: true, get: function() {
      return chain_js_1.ChainNotFoundError;
    } });
    Object.defineProperty(exports2, "ClientChainNotConfiguredError", { enumerable: true, get: function() {
      return chain_js_1.ClientChainNotConfiguredError;
    } });
    Object.defineProperty(exports2, "InvalidChainIdError", { enumerable: true, get: function() {
      return chain_js_1.InvalidChainIdError;
    } });
    var encoding_js_1 = require_encoding();
    Object.defineProperty(exports2, "InvalidBytesBooleanError", { enumerable: true, get: function() {
      return encoding_js_1.InvalidBytesBooleanError;
    } });
    Object.defineProperty(exports2, "IntegerOutOfRangeError", { enumerable: true, get: function() {
      return encoding_js_1.IntegerOutOfRangeError;
    } });
    Object.defineProperty(exports2, "InvalidHexBooleanError", { enumerable: true, get: function() {
      return encoding_js_1.InvalidHexBooleanError;
    } });
    Object.defineProperty(exports2, "InvalidHexValueError", { enumerable: true, get: function() {
      return encoding_js_1.InvalidHexValueError;
    } });
    Object.defineProperty(exports2, "SizeOverflowError", { enumerable: true, get: function() {
      return encoding_js_1.SizeOverflowError;
    } });
    var ens_js_1 = require_ens();
    Object.defineProperty(exports2, "EnsAvatarUriResolutionError", { enumerable: true, get: function() {
      return ens_js_1.EnsAvatarUriResolutionError;
    } });
    Object.defineProperty(exports2, "EnsAvatarInvalidNftUriError", { enumerable: true, get: function() {
      return ens_js_1.EnsAvatarInvalidNftUriError;
    } });
    Object.defineProperty(exports2, "EnsAvatarUnsupportedNamespaceError", { enumerable: true, get: function() {
      return ens_js_1.EnsAvatarUnsupportedNamespaceError;
    } });
    var unit_js_2 = require_unit2();
    Object.defineProperty(exports2, "InvalidDecimalNumberError", { enumerable: true, get: function() {
      return unit_js_2.InvalidDecimalNumberError;
    } });
    var estimateGas_js_1 = require_estimateGas();
    Object.defineProperty(exports2, "EstimateGasExecutionError", { enumerable: true, get: function() {
      return estimateGas_js_1.EstimateGasExecutionError;
    } });
    var node_js_1 = require_node();
    Object.defineProperty(exports2, "ExecutionRevertedError", { enumerable: true, get: function() {
      return node_js_1.ExecutionRevertedError;
    } });
    Object.defineProperty(exports2, "FeeCapTooHighError", { enumerable: true, get: function() {
      return node_js_1.FeeCapTooHighError;
    } });
    Object.defineProperty(exports2, "FeeCapTooLowError", { enumerable: true, get: function() {
      return node_js_1.FeeCapTooLowError;
    } });
    Object.defineProperty(exports2, "InsufficientFundsError", { enumerable: true, get: function() {
      return node_js_1.InsufficientFundsError;
    } });
    Object.defineProperty(exports2, "IntrinsicGasTooHighError", { enumerable: true, get: function() {
      return node_js_1.IntrinsicGasTooHighError;
    } });
    Object.defineProperty(exports2, "IntrinsicGasTooLowError", { enumerable: true, get: function() {
      return node_js_1.IntrinsicGasTooLowError;
    } });
    Object.defineProperty(exports2, "NonceMaxValueError", { enumerable: true, get: function() {
      return node_js_1.NonceMaxValueError;
    } });
    Object.defineProperty(exports2, "NonceTooHighError", { enumerable: true, get: function() {
      return node_js_1.NonceTooHighError;
    } });
    Object.defineProperty(exports2, "NonceTooLowError", { enumerable: true, get: function() {
      return node_js_1.NonceTooLowError;
    } });
    Object.defineProperty(exports2, "TipAboveFeeCapError", { enumerable: true, get: function() {
      return node_js_1.TipAboveFeeCapError;
    } });
    Object.defineProperty(exports2, "TransactionTypeNotSupportedError", { enumerable: true, get: function() {
      return node_js_1.TransactionTypeNotSupportedError;
    } });
    Object.defineProperty(exports2, "UnknownNodeError", { enumerable: true, get: function() {
      return node_js_1.UnknownNodeError;
    } });
    var log_js_1 = require_log2();
    Object.defineProperty(exports2, "FilterTypeNotSupportedError", { enumerable: true, get: function() {
      return log_js_1.FilterTypeNotSupportedError;
    } });
    var request_js_1 = require_request();
    Object.defineProperty(exports2, "HttpRequestError", { enumerable: true, get: function() {
      return request_js_1.HttpRequestError;
    } });
    Object.defineProperty(exports2, "RpcRequestError", { enumerable: true, get: function() {
      return request_js_1.RpcRequestError;
    } });
    Object.defineProperty(exports2, "TimeoutError", { enumerable: true, get: function() {
      return request_js_1.TimeoutError;
    } });
    Object.defineProperty(exports2, "SocketClosedError", { enumerable: true, get: function() {
      return request_js_1.SocketClosedError;
    } });
    Object.defineProperty(exports2, "WebSocketRequestError", { enumerable: true, get: function() {
      return request_js_1.WebSocketRequestError;
    } });
    var address_js_2 = require_address();
    Object.defineProperty(exports2, "InvalidAddressError", { enumerable: true, get: function() {
      return address_js_2.InvalidAddressError;
    } });
    var transaction_js_1 = require_transaction2();
    Object.defineProperty(exports2, "FeeConflictError", { enumerable: true, get: function() {
      return transaction_js_1.FeeConflictError;
    } });
    Object.defineProperty(exports2, "InvalidLegacyVError", { enumerable: true, get: function() {
      return transaction_js_1.InvalidLegacyVError;
    } });
    Object.defineProperty(exports2, "InvalidSerializableTransactionError", { enumerable: true, get: function() {
      return transaction_js_1.InvalidSerializableTransactionError;
    } });
    Object.defineProperty(exports2, "InvalidSerializedTransactionError", { enumerable: true, get: function() {
      return transaction_js_1.InvalidSerializedTransactionError;
    } });
    Object.defineProperty(exports2, "InvalidSerializedTransactionTypeError", { enumerable: true, get: function() {
      return transaction_js_1.InvalidSerializedTransactionTypeError;
    } });
    Object.defineProperty(exports2, "InvalidStorageKeySizeError", { enumerable: true, get: function() {
      return transaction_js_1.InvalidStorageKeySizeError;
    } });
    Object.defineProperty(exports2, "TransactionExecutionError", { enumerable: true, get: function() {
      return transaction_js_1.TransactionExecutionError;
    } });
    Object.defineProperty(exports2, "TransactionNotFoundError", { enumerable: true, get: function() {
      return transaction_js_1.TransactionNotFoundError;
    } });
    Object.defineProperty(exports2, "TransactionReceiptNotFoundError", { enumerable: true, get: function() {
      return transaction_js_1.TransactionReceiptNotFoundError;
    } });
    Object.defineProperty(exports2, "WaitForTransactionReceiptTimeoutError", { enumerable: true, get: function() {
      return transaction_js_1.WaitForTransactionReceiptTimeoutError;
    } });
    var data_js_1 = require_data();
    Object.defineProperty(exports2, "SizeExceedsPaddingSizeError", { enumerable: true, get: function() {
      return data_js_1.SizeExceedsPaddingSizeError;
    } });
    Object.defineProperty(exports2, "SliceOffsetOutOfBoundsError", { enumerable: true, get: function() {
      return data_js_1.SliceOffsetOutOfBoundsError;
    } });
    var transport_js_1 = require_transport();
    Object.defineProperty(exports2, "UrlRequiredError", { enumerable: true, get: function() {
      return transport_js_1.UrlRequiredError;
    } });
    var stateOverride_js_1 = require_stateOverride();
    Object.defineProperty(exports2, "AccountStateConflictError", { enumerable: true, get: function() {
      return stateOverride_js_1.AccountStateConflictError;
    } });
    Object.defineProperty(exports2, "StateAssignmentConflictError", { enumerable: true, get: function() {
      return stateOverride_js_1.StateAssignmentConflictError;
    } });
    var eip1193_js_1 = require_eip1193();
    Object.defineProperty(exports2, "EIP1193ProviderRpcError", { enumerable: true, get: function() {
      return eip1193_js_1.ProviderRpcError;
    } });
    var labelhash_js_1 = require_labelhash();
    Object.defineProperty(exports2, "labelhash", { enumerable: true, get: function() {
      return labelhash_js_1.labelhash;
    } });
    var namehash_js_1 = require_namehash();
    Object.defineProperty(exports2, "namehash", { enumerable: true, get: function() {
      return namehash_js_1.namehash;
    } });
    var block_js_2 = require_block();
    Object.defineProperty(exports2, "defineBlock", { enumerable: true, get: function() {
      return block_js_2.defineBlock;
    } });
    Object.defineProperty(exports2, "formatBlock", { enumerable: true, get: function() {
      return block_js_2.formatBlock;
    } });
    var log_js_2 = require_log();
    Object.defineProperty(exports2, "formatLog", { enumerable: true, get: function() {
      return log_js_2.formatLog;
    } });
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    Object.defineProperty(exports2, "decodeAbiParameters", { enumerable: true, get: function() {
      return decodeAbiParameters_js_1.decodeAbiParameters;
    } });
    var decodeDeployData_js_1 = require_decodeDeployData();
    Object.defineProperty(exports2, "decodeDeployData", { enumerable: true, get: function() {
      return decodeDeployData_js_1.decodeDeployData;
    } });
    var decodeErrorResult_js_1 = require_decodeErrorResult();
    Object.defineProperty(exports2, "decodeErrorResult", { enumerable: true, get: function() {
      return decodeErrorResult_js_1.decodeErrorResult;
    } });
    var decodeEventLog_js_1 = require_decodeEventLog();
    Object.defineProperty(exports2, "decodeEventLog", { enumerable: true, get: function() {
      return decodeEventLog_js_1.decodeEventLog;
    } });
    var decodeFunctionData_js_1 = require_decodeFunctionData();
    Object.defineProperty(exports2, "decodeFunctionData", { enumerable: true, get: function() {
      return decodeFunctionData_js_1.decodeFunctionData;
    } });
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    Object.defineProperty(exports2, "decodeFunctionResult", { enumerable: true, get: function() {
      return decodeFunctionResult_js_1.decodeFunctionResult;
    } });
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    Object.defineProperty(exports2, "encodeAbiParameters", { enumerable: true, get: function() {
      return encodeAbiParameters_js_1.encodeAbiParameters;
    } });
    var encodeDeployData_js_1 = require_encodeDeployData();
    Object.defineProperty(exports2, "encodeDeployData", { enumerable: true, get: function() {
      return encodeDeployData_js_1.encodeDeployData;
    } });
    var encodeErrorResult_js_1 = require_encodeErrorResult();
    Object.defineProperty(exports2, "encodeErrorResult", { enumerable: true, get: function() {
      return encodeErrorResult_js_1.encodeErrorResult;
    } });
    var encodeEventTopics_js_1 = require_encodeEventTopics();
    Object.defineProperty(exports2, "encodeEventTopics", { enumerable: true, get: function() {
      return encodeEventTopics_js_1.encodeEventTopics;
    } });
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    Object.defineProperty(exports2, "encodeFunctionData", { enumerable: true, get: function() {
      return encodeFunctionData_js_1.encodeFunctionData;
    } });
    var prepareEncodeFunctionData_js_1 = require_prepareEncodeFunctionData();
    Object.defineProperty(exports2, "prepareEncodeFunctionData", { enumerable: true, get: function() {
      return prepareEncodeFunctionData_js_1.prepareEncodeFunctionData;
    } });
    var encodeFunctionResult_js_1 = require_encodeFunctionResult();
    Object.defineProperty(exports2, "encodeFunctionResult", { enumerable: true, get: function() {
      return encodeFunctionResult_js_1.encodeFunctionResult;
    } });
    var parseEventLogs_js_1 = require_parseEventLogs();
    Object.defineProperty(exports2, "parseEventLogs", { enumerable: true, get: function() {
      return parseEventLogs_js_1.parseEventLogs;
    } });
    var transaction_js_2 = require_transaction();
    Object.defineProperty(exports2, "defineTransaction", { enumerable: true, get: function() {
      return transaction_js_2.defineTransaction;
    } });
    Object.defineProperty(exports2, "formatTransaction", { enumerable: true, get: function() {
      return transaction_js_2.formatTransaction;
    } });
    Object.defineProperty(exports2, "transactionType", { enumerable: true, get: function() {
      return transaction_js_2.transactionType;
    } });
    var transactionReceipt_js_1 = require_transactionReceipt();
    Object.defineProperty(exports2, "defineTransactionReceipt", { enumerable: true, get: function() {
      return transactionReceipt_js_1.defineTransactionReceipt;
    } });
    Object.defineProperty(exports2, "formatTransactionReceipt", { enumerable: true, get: function() {
      return transactionReceipt_js_1.formatTransactionReceipt;
    } });
    var transactionRequest_js_1 = require_transactionRequest();
    Object.defineProperty(exports2, "defineTransactionRequest", { enumerable: true, get: function() {
      return transactionRequest_js_1.defineTransactionRequest;
    } });
    Object.defineProperty(exports2, "formatTransactionRequest", { enumerable: true, get: function() {
      return transactionRequest_js_1.formatTransactionRequest;
    } });
    Object.defineProperty(exports2, "rpcTransactionType", { enumerable: true, get: function() {
      return transactionRequest_js_1.rpcTransactionType;
    } });
    var getAbiItem_js_1 = require_getAbiItem();
    Object.defineProperty(exports2, "getAbiItem", { enumerable: true, get: function() {
      return getAbiItem_js_1.getAbiItem;
    } });
    var getContractAddress_js_1 = require_getContractAddress();
    Object.defineProperty(exports2, "getContractAddress", { enumerable: true, get: function() {
      return getContractAddress_js_1.getContractAddress;
    } });
    Object.defineProperty(exports2, "getCreate2Address", { enumerable: true, get: function() {
      return getContractAddress_js_1.getCreate2Address;
    } });
    Object.defineProperty(exports2, "getCreateAddress", { enumerable: true, get: function() {
      return getContractAddress_js_1.getCreateAddress;
    } });
    var getSerializedTransactionType_js_1 = require_getSerializedTransactionType();
    Object.defineProperty(exports2, "getSerializedTransactionType", { enumerable: true, get: function() {
      return getSerializedTransactionType_js_1.getSerializedTransactionType;
    } });
    var getTransactionType_js_1 = require_getTransactionType();
    Object.defineProperty(exports2, "getTransactionType", { enumerable: true, get: function() {
      return getTransactionType_js_1.getTransactionType;
    } });
    var hashTypedData_js_1 = require_hashTypedData();
    Object.defineProperty(exports2, "hashDomain", { enumerable: true, get: function() {
      return hashTypedData_js_1.hashDomain;
    } });
    Object.defineProperty(exports2, "hashTypedData", { enumerable: true, get: function() {
      return hashTypedData_js_1.hashTypedData;
    } });
    var compactSignatureToSignature_js_1 = require_compactSignatureToSignature();
    Object.defineProperty(exports2, "compactSignatureToSignature", { enumerable: true, get: function() {
      return compactSignatureToSignature_js_1.compactSignatureToSignature;
    } });
    var parseCompactSignature_js_1 = require_parseCompactSignature();
    Object.defineProperty(exports2, "hexToCompactSignature", { enumerable: true, get: function() {
      return parseCompactSignature_js_1.parseCompactSignature;
    } });
    Object.defineProperty(exports2, "parseCompactSignature", { enumerable: true, get: function() {
      return parseCompactSignature_js_1.parseCompactSignature;
    } });
    var parseSignature_js_1 = require_parseSignature();
    Object.defineProperty(exports2, "hexToSignature", { enumerable: true, get: function() {
      return parseSignature_js_1.parseSignature;
    } });
    Object.defineProperty(exports2, "parseSignature", { enumerable: true, get: function() {
      return parseSignature_js_1.parseSignature;
    } });
    var recoverAddress_js_1 = require_recoverAddress();
    Object.defineProperty(exports2, "recoverAddress", { enumerable: true, get: function() {
      return recoverAddress_js_1.recoverAddress;
    } });
    var recoverMessageAddress_js_1 = require_recoverMessageAddress();
    Object.defineProperty(exports2, "recoverMessageAddress", { enumerable: true, get: function() {
      return recoverMessageAddress_js_1.recoverMessageAddress;
    } });
    var recoverPublicKey_js_1 = require_recoverPublicKey();
    Object.defineProperty(exports2, "recoverPublicKey", { enumerable: true, get: function() {
      return recoverPublicKey_js_1.recoverPublicKey;
    } });
    var recoverTransactionAddress_js_1 = require_recoverTransactionAddress();
    Object.defineProperty(exports2, "recoverTransactionAddress", { enumerable: true, get: function() {
      return recoverTransactionAddress_js_1.recoverTransactionAddress;
    } });
    var recoverTypedDataAddress_js_1 = require_recoverTypedDataAddress();
    Object.defineProperty(exports2, "recoverTypedDataAddress", { enumerable: true, get: function() {
      return recoverTypedDataAddress_js_1.recoverTypedDataAddress;
    } });
    var signatureToCompactSignature_js_1 = require_signatureToCompactSignature();
    Object.defineProperty(exports2, "signatureToCompactSignature", { enumerable: true, get: function() {
      return signatureToCompactSignature_js_1.signatureToCompactSignature;
    } });
    var serializeCompactSignature_js_1 = require_serializeCompactSignature();
    Object.defineProperty(exports2, "compactSignatureToHex", { enumerable: true, get: function() {
      return serializeCompactSignature_js_1.serializeCompactSignature;
    } });
    Object.defineProperty(exports2, "serializeCompactSignature", { enumerable: true, get: function() {
      return serializeCompactSignature_js_1.serializeCompactSignature;
    } });
    var serializeSignature_js_1 = require_serializeSignature();
    Object.defineProperty(exports2, "signatureToHex", { enumerable: true, get: function() {
      return serializeSignature_js_1.serializeSignature;
    } });
    Object.defineProperty(exports2, "serializeSignature", { enumerable: true, get: function() {
      return serializeSignature_js_1.serializeSignature;
    } });
    var toRlp_js_1 = require_toRlp();
    Object.defineProperty(exports2, "bytesToRlp", { enumerable: true, get: function() {
      return toRlp_js_1.bytesToRlp;
    } });
    Object.defineProperty(exports2, "hexToRlp", { enumerable: true, get: function() {
      return toRlp_js_1.hexToRlp;
    } });
    Object.defineProperty(exports2, "toRlp", { enumerable: true, get: function() {
      return toRlp_js_1.toRlp;
    } });
    var verifyHash_js_1 = require_verifyHash();
    Object.defineProperty(exports2, "verifyHash", { enumerable: true, get: function() {
      return verifyHash_js_1.verifyHash;
    } });
    var verifyMessage_js_1 = require_verifyMessage();
    Object.defineProperty(exports2, "verifyMessage", { enumerable: true, get: function() {
      return verifyMessage_js_1.verifyMessage;
    } });
    var verifyTypedData_js_1 = require_verifyTypedData();
    Object.defineProperty(exports2, "verifyTypedData", { enumerable: true, get: function() {
      return verifyTypedData_js_1.verifyTypedData;
    } });
    var parseErc6492Signature_js_1 = require_parseErc6492Signature();
    Object.defineProperty(exports2, "parseErc6492Signature", { enumerable: true, get: function() {
      return parseErc6492Signature_js_1.parseErc6492Signature;
    } });
    var isErc6492Signature_js_1 = require_isErc6492Signature();
    Object.defineProperty(exports2, "isErc6492Signature", { enumerable: true, get: function() {
      return isErc6492Signature_js_1.isErc6492Signature;
    } });
    var serializeErc6492Signature_js_1 = require_serializeErc6492Signature();
    Object.defineProperty(exports2, "serializeErc6492Signature", { enumerable: true, get: function() {
      return serializeErc6492Signature_js_1.serializeErc6492Signature;
    } });
    var assertRequest_js_1 = require_assertRequest();
    Object.defineProperty(exports2, "assertRequest", { enumerable: true, get: function() {
      return assertRequest_js_1.assertRequest;
    } });
    var assertTransaction_js_1 = require_assertTransaction();
    Object.defineProperty(exports2, "assertTransactionEIP1559", { enumerable: true, get: function() {
      return assertTransaction_js_1.assertTransactionEIP1559;
    } });
    Object.defineProperty(exports2, "assertTransactionEIP2930", { enumerable: true, get: function() {
      return assertTransaction_js_1.assertTransactionEIP2930;
    } });
    Object.defineProperty(exports2, "assertTransactionLegacy", { enumerable: true, get: function() {
      return assertTransaction_js_1.assertTransactionLegacy;
    } });
    var toBytes_js_1 = require_toBytes();
    Object.defineProperty(exports2, "boolToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.boolToBytes;
    } });
    Object.defineProperty(exports2, "hexToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.hexToBytes;
    } });
    Object.defineProperty(exports2, "numberToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.numberToBytes;
    } });
    Object.defineProperty(exports2, "stringToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.stringToBytes;
    } });
    Object.defineProperty(exports2, "toBytes", { enumerable: true, get: function() {
      return toBytes_js_1.toBytes;
    } });
    var toHex_js_1 = require_toHex();
    Object.defineProperty(exports2, "boolToHex", { enumerable: true, get: function() {
      return toHex_js_1.boolToHex;
    } });
    Object.defineProperty(exports2, "bytesToHex", { enumerable: true, get: function() {
      return toHex_js_1.bytesToHex;
    } });
    Object.defineProperty(exports2, "numberToHex", { enumerable: true, get: function() {
      return toHex_js_1.numberToHex;
    } });
    Object.defineProperty(exports2, "stringToHex", { enumerable: true, get: function() {
      return toHex_js_1.stringToHex;
    } });
    Object.defineProperty(exports2, "toHex", { enumerable: true, get: function() {
      return toHex_js_1.toHex;
    } });
    var fromBytes_js_1 = require_fromBytes();
    Object.defineProperty(exports2, "bytesToBigInt", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToBigInt;
    } });
    Object.defineProperty(exports2, "bytesToBool", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToBool;
    } });
    Object.defineProperty(exports2, "bytesToNumber", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToNumber;
    } });
    Object.defineProperty(exports2, "bytesToString", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToString;
    } });
    Object.defineProperty(exports2, "fromBytes", { enumerable: true, get: function() {
      return fromBytes_js_1.fromBytes;
    } });
    var ccip_js_1 = require_ccip2();
    Object.defineProperty(exports2, "ccipRequest", { enumerable: true, get: function() {
      return ccip_js_1.ccipRequest;
    } });
    Object.defineProperty(exports2, "ccipFetch", { enumerable: true, get: function() {
      return ccip_js_1.ccipRequest;
    } });
    Object.defineProperty(exports2, "offchainLookup", { enumerable: true, get: function() {
      return ccip_js_1.offchainLookup;
    } });
    Object.defineProperty(exports2, "offchainLookupAbiItem", { enumerable: true, get: function() {
      return ccip_js_1.offchainLookupAbiItem;
    } });
    Object.defineProperty(exports2, "offchainLookupSignature", { enumerable: true, get: function() {
      return ccip_js_1.offchainLookupSignature;
    } });
    var blobsToCommitments_js_1 = require_blobsToCommitments();
    Object.defineProperty(exports2, "blobsToCommitments", { enumerable: true, get: function() {
      return blobsToCommitments_js_1.blobsToCommitments;
    } });
    var commitmentToVersionedHash_js_1 = require_commitmentToVersionedHash();
    Object.defineProperty(exports2, "commitmentToVersionedHash", { enumerable: true, get: function() {
      return commitmentToVersionedHash_js_1.commitmentToVersionedHash;
    } });
    var commitmentsToVersionedHashes_js_1 = require_commitmentsToVersionedHashes();
    Object.defineProperty(exports2, "commitmentsToVersionedHashes", { enumerable: true, get: function() {
      return commitmentsToVersionedHashes_js_1.commitmentsToVersionedHashes;
    } });
    var sidecarsToVersionedHashes_js_1 = require_sidecarsToVersionedHashes();
    Object.defineProperty(exports2, "sidecarsToVersionedHashes", { enumerable: true, get: function() {
      return sidecarsToVersionedHashes_js_1.sidecarsToVersionedHashes;
    } });
    var blobsToProofs_js_1 = require_blobsToProofs();
    Object.defineProperty(exports2, "blobsToProofs", { enumerable: true, get: function() {
      return blobsToProofs_js_1.blobsToProofs;
    } });
    var fromBlobs_js_1 = require_fromBlobs();
    Object.defineProperty(exports2, "fromBlobs", { enumerable: true, get: function() {
      return fromBlobs_js_1.fromBlobs;
    } });
    var toBlobSidecars_js_1 = require_toBlobSidecars();
    Object.defineProperty(exports2, "toBlobSidecars", { enumerable: true, get: function() {
      return toBlobSidecars_js_1.toBlobSidecars;
    } });
    var toBlobs_js_1 = require_toBlobs();
    Object.defineProperty(exports2, "toBlobs", { enumerable: true, get: function() {
      return toBlobs_js_1.toBlobs;
    } });
    var defineKzg_js_1 = require_defineKzg();
    Object.defineProperty(exports2, "defineKzg", { enumerable: true, get: function() {
      return defineKzg_js_1.defineKzg;
    } });
    var setupKzg_js_1 = require_setupKzg();
    Object.defineProperty(exports2, "setupKzg", { enumerable: true, get: function() {
      return setupKzg_js_1.setupKzg;
    } });
    var concat_js_1 = require_concat();
    Object.defineProperty(exports2, "concat", { enumerable: true, get: function() {
      return concat_js_1.concat;
    } });
    Object.defineProperty(exports2, "concatBytes", { enumerable: true, get: function() {
      return concat_js_1.concatBytes;
    } });
    Object.defineProperty(exports2, "concatHex", { enumerable: true, get: function() {
      return concat_js_1.concatHex;
    } });
    var assertCurrentChain_js_1 = require_assertCurrentChain();
    Object.defineProperty(exports2, "assertCurrentChain", { enumerable: true, get: function() {
      return assertCurrentChain_js_1.assertCurrentChain;
    } });
    var defineChain_js_1 = require_defineChain();
    Object.defineProperty(exports2, "defineChain", { enumerable: true, get: function() {
      return defineChain_js_1.defineChain;
    } });
    var extractChain_js_1 = require_extractChain();
    Object.defineProperty(exports2, "extractChain", { enumerable: true, get: function() {
      return extractChain_js_1.extractChain;
    } });
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    Object.defineProperty(exports2, "getChainContractAddress", { enumerable: true, get: function() {
      return getChainContractAddress_js_1.getChainContractAddress;
    } });
    var encodePacked_js_1 = require_encodePacked();
    Object.defineProperty(exports2, "encodePacked", { enumerable: true, get: function() {
      return encodePacked_js_1.encodePacked;
    } });
    var withRetry_js_1 = require_withRetry();
    Object.defineProperty(exports2, "withRetry", { enumerable: true, get: function() {
      return withRetry_js_1.withRetry;
    } });
    var withTimeout_js_1 = require_withTimeout();
    Object.defineProperty(exports2, "withTimeout", { enumerable: true, get: function() {
      return withTimeout_js_1.withTimeout;
    } });
    var formatEther_js_1 = require_formatEther();
    Object.defineProperty(exports2, "formatEther", { enumerable: true, get: function() {
      return formatEther_js_1.formatEther;
    } });
    var formatGwei_js_1 = require_formatGwei();
    Object.defineProperty(exports2, "formatGwei", { enumerable: true, get: function() {
      return formatGwei_js_1.formatGwei;
    } });
    var formatUnits_js_1 = require_formatUnits();
    Object.defineProperty(exports2, "formatUnits", { enumerable: true, get: function() {
      return formatUnits_js_1.formatUnits;
    } });
    var fromHex_js_1 = require_fromHex();
    Object.defineProperty(exports2, "fromHex", { enumerable: true, get: function() {
      return fromHex_js_1.fromHex;
    } });
    Object.defineProperty(exports2, "hexToBigInt", { enumerable: true, get: function() {
      return fromHex_js_1.hexToBigInt;
    } });
    Object.defineProperty(exports2, "hexToBool", { enumerable: true, get: function() {
      return fromHex_js_1.hexToBool;
    } });
    Object.defineProperty(exports2, "hexToNumber", { enumerable: true, get: function() {
      return fromHex_js_1.hexToNumber;
    } });
    Object.defineProperty(exports2, "hexToString", { enumerable: true, get: function() {
      return fromHex_js_1.hexToString;
    } });
    var fromRlp_js_1 = require_fromRlp();
    Object.defineProperty(exports2, "fromRlp", { enumerable: true, get: function() {
      return fromRlp_js_1.fromRlp;
    } });
    var getAddress_js_1 = require_getAddress();
    Object.defineProperty(exports2, "checksumAddress", { enumerable: true, get: function() {
      return getAddress_js_1.checksumAddress;
    } });
    Object.defineProperty(exports2, "getAddress", { enumerable: true, get: function() {
      return getAddress_js_1.getAddress;
    } });
    var getContractError_js_1 = require_getContractError();
    Object.defineProperty(exports2, "getContractError", { enumerable: true, get: function() {
      return getContractError_js_1.getContractError;
    } });
    var toEventSelector_js_1 = require_toEventSelector();
    Object.defineProperty(exports2, "toEventSelector", { enumerable: true, get: function() {
      return toEventSelector_js_1.toEventSelector;
    } });
    Object.defineProperty(exports2, "getEventSelector", { enumerable: true, get: function() {
      return toEventSelector_js_1.toEventSelector;
    } });
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    Object.defineProperty(exports2, "toFunctionSelector", { enumerable: true, get: function() {
      return toFunctionSelector_js_1.toFunctionSelector;
    } });
    Object.defineProperty(exports2, "getFunctionSelector", { enumerable: true, get: function() {
      return toFunctionSelector_js_1.toFunctionSelector;
    } });
    var toEventSignature_js_1 = require_toEventSignature();
    Object.defineProperty(exports2, "toEventSignature", { enumerable: true, get: function() {
      return toEventSignature_js_1.toEventSignature;
    } });
    Object.defineProperty(exports2, "getEventSignature", { enumerable: true, get: function() {
      return toEventSignature_js_1.toEventSignature;
    } });
    var toFunctionSignature_js_1 = require_toFunctionSignature();
    Object.defineProperty(exports2, "toFunctionSignature", { enumerable: true, get: function() {
      return toFunctionSignature_js_1.toFunctionSignature;
    } });
    Object.defineProperty(exports2, "getFunctionSignature", { enumerable: true, get: function() {
      return toFunctionSignature_js_1.toFunctionSignature;
    } });
    var toEventHash_js_1 = require_toEventHash();
    Object.defineProperty(exports2, "toEventHash", { enumerable: true, get: function() {
      return toEventHash_js_1.toEventHash;
    } });
    var toFunctionHash_js_1 = require_toFunctionHash();
    Object.defineProperty(exports2, "toFunctionHash", { enumerable: true, get: function() {
      return toFunctionHash_js_1.toFunctionHash;
    } });
    var hashMessage_js_1 = require_hashMessage();
    Object.defineProperty(exports2, "hashMessage", { enumerable: true, get: function() {
      return hashMessage_js_1.hashMessage;
    } });
    var toPrefixedMessage_js_1 = require_toPrefixedMessage();
    Object.defineProperty(exports2, "toPrefixedMessage", { enumerable: true, get: function() {
      return toPrefixedMessage_js_1.toPrefixedMessage;
    } });
    var isAddress_js_1 = require_isAddress();
    Object.defineProperty(exports2, "isAddress", { enumerable: true, get: function() {
      return isAddress_js_1.isAddress;
    } });
    var isAddressEqual_js_1 = require_isAddressEqual();
    Object.defineProperty(exports2, "isAddressEqual", { enumerable: true, get: function() {
      return isAddressEqual_js_1.isAddressEqual;
    } });
    var isBytes_js_1 = require_isBytes();
    Object.defineProperty(exports2, "isBytes", { enumerable: true, get: function() {
      return isBytes_js_1.isBytes;
    } });
    var isHash_js_1 = require_isHash();
    Object.defineProperty(exports2, "isHash", { enumerable: true, get: function() {
      return isHash_js_1.isHash;
    } });
    var isHex_js_1 = require_isHex();
    Object.defineProperty(exports2, "isHex", { enumerable: true, get: function() {
      return isHex_js_1.isHex;
    } });
    var keccak256_js_1 = require_keccak256();
    Object.defineProperty(exports2, "keccak256", { enumerable: true, get: function() {
      return keccak256_js_1.keccak256;
    } });
    var sha256_js_1 = require_sha2562();
    Object.defineProperty(exports2, "sha256", { enumerable: true, get: function() {
      return sha256_js_1.sha256;
    } });
    var ripemd160_js_1 = require_ripemd1602();
    Object.defineProperty(exports2, "ripemd160", { enumerable: true, get: function() {
      return ripemd160_js_1.ripemd160;
    } });
    var pad_js_1 = require_pad();
    Object.defineProperty(exports2, "pad", { enumerable: true, get: function() {
      return pad_js_1.pad;
    } });
    Object.defineProperty(exports2, "padBytes", { enumerable: true, get: function() {
      return pad_js_1.padBytes;
    } });
    Object.defineProperty(exports2, "padHex", { enumerable: true, get: function() {
      return pad_js_1.padHex;
    } });
    var parseEther_js_1 = require_parseEther();
    Object.defineProperty(exports2, "parseEther", { enumerable: true, get: function() {
      return parseEther_js_1.parseEther;
    } });
    var parseGwei_js_1 = require_parseGwei();
    Object.defineProperty(exports2, "parseGwei", { enumerable: true, get: function() {
      return parseGwei_js_1.parseGwei;
    } });
    var parseTransaction_js_1 = require_parseTransaction();
    Object.defineProperty(exports2, "parseTransaction", { enumerable: true, get: function() {
      return parseTransaction_js_1.parseTransaction;
    } });
    var parseUnits_js_1 = require_parseUnits();
    Object.defineProperty(exports2, "parseUnits", { enumerable: true, get: function() {
      return parseUnits_js_1.parseUnits;
    } });
    var serializeAccessList_js_1 = require_serializeAccessList();
    Object.defineProperty(exports2, "serializeAccessList", { enumerable: true, get: function() {
      return serializeAccessList_js_1.serializeAccessList;
    } });
    var serializeTransaction_js_1 = require_serializeTransaction();
    Object.defineProperty(exports2, "serializeTransaction", { enumerable: true, get: function() {
      return serializeTransaction_js_1.serializeTransaction;
    } });
    var size_js_1 = require_size();
    Object.defineProperty(exports2, "size", { enumerable: true, get: function() {
      return size_js_1.size;
    } });
    var slice_js_1 = require_slice();
    Object.defineProperty(exports2, "slice", { enumerable: true, get: function() {
      return slice_js_1.slice;
    } });
    Object.defineProperty(exports2, "sliceBytes", { enumerable: true, get: function() {
      return slice_js_1.sliceBytes;
    } });
    Object.defineProperty(exports2, "sliceHex", { enumerable: true, get: function() {
      return slice_js_1.sliceHex;
    } });
    var stringify_js_1 = require_stringify();
    Object.defineProperty(exports2, "stringify", { enumerable: true, get: function() {
      return stringify_js_1.stringify;
    } });
    var trim_js_1 = require_trim();
    Object.defineProperty(exports2, "trim", { enumerable: true, get: function() {
      return trim_js_1.trim;
    } });
    var typedData_js_1 = require_typedData();
    Object.defineProperty(exports2, "serializeTypedData", { enumerable: true, get: function() {
      return typedData_js_1.serializeTypedData;
    } });
    Object.defineProperty(exports2, "validateTypedData", { enumerable: true, get: function() {
      return typedData_js_1.validateTypedData;
    } });
    Object.defineProperty(exports2, "domainSeparator", { enumerable: true, get: function() {
      return typedData_js_1.domainSeparator;
    } });
    Object.defineProperty(exports2, "getTypesForEIP712Domain", { enumerable: true, get: function() {
      return typedData_js_1.getTypesForEIP712Domain;
    } });
    var nonceManager_js_1 = require_nonceManager();
    Object.defineProperty(exports2, "createNonceManager", { enumerable: true, get: function() {
      return nonceManager_js_1.createNonceManager;
    } });
    Object.defineProperty(exports2, "nonceManager", { enumerable: true, get: function() {
      return nonceManager_js_1.nonceManager;
    } });
  }
});

// node_modules/@supercharge/promise-pool/dist/validation-error.js
var require_validation_error = __commonJS({
  "node_modules/@supercharge/promise-pool/dist/validation-error.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ValidationError = void 0;
    var ValidationError = class extends Error {
      /**
       * Create a new instance for the given `message`.
       *
       * @param message  The error message
       */
      constructor(message) {
        super(message);
        if (Error.captureStackTrace && typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, this.constructor);
        }
      }
      /**
       * Returns a validation error with the given `message`.
       */
      static createFrom(message) {
        return new this(message);
      }
    };
    exports2.ValidationError = ValidationError;
  }
});

// node_modules/@supercharge/promise-pool/dist/promise-pool-error.js
var require_promise_pool_error = __commonJS({
  "node_modules/@supercharge/promise-pool/dist/promise-pool-error.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PromisePoolError = void 0;
    var PromisePoolError = class extends Error {
      /**
       * Create a new instance for the given `message` and `item`.
       *
       * @param error  The original error
       * @param item   The item causing the error
       */
      constructor(error, item) {
        super();
        this.raw = error;
        this.item = item;
        this.name = this.constructor.name;
        this.message = this.messageFrom(error);
        if (Error.captureStackTrace && typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, this.constructor);
        }
      }
      /**
       * Returns a new promise pool error instance wrapping the `error` and `item`.
       *
       * @param {*} error
       * @param {*} item
       *
       * @returns {PromisePoolError}
       */
      static createFrom(error, item) {
        return new this(error, item);
      }
      /**
       * Returns the error message from the given `error`.
       *
       * @param {*} error
       *
       * @returns {String}
       */
      messageFrom(error) {
        if (error instanceof Error) {
          return error.message;
        }
        if (typeof error === "object") {
          return error.message;
        }
        if (typeof error === "string" || typeof error === "number") {
          return error.toString();
        }
        return "";
      }
    };
    exports2.PromisePoolError = PromisePoolError;
  }
});

// node_modules/@supercharge/promise-pool/dist/stop-the-promise-pool-error.js
var require_stop_the_promise_pool_error = __commonJS({
  "node_modules/@supercharge/promise-pool/dist/stop-the-promise-pool-error.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StopThePromisePoolError = void 0;
    var StopThePromisePoolError = class extends Error {
    };
    exports2.StopThePromisePoolError = StopThePromisePoolError;
  }
});

// node_modules/@supercharge/promise-pool/dist/promise-pool-executor.js
var require_promise_pool_executor = __commonJS({
  "node_modules/@supercharge/promise-pool/dist/promise-pool-executor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PromisePoolExecutor = void 0;
    var promise_pool_1 = require_promise_pool();
    var validation_error_1 = require_validation_error();
    var promise_pool_error_1 = require_promise_pool_error();
    var stop_the_promise_pool_error_1 = require_stop_the_promise_pool_error();
    var PromisePoolExecutor = class {
      /**
       * Creates a new promise pool executer instance with a default concurrency of 10.
       */
      constructor() {
        this.meta = {
          tasks: [],
          items: [],
          errors: [],
          results: [],
          stopped: false,
          concurrency: 10,
          shouldResultsCorrespond: false,
          processedItems: [],
          taskTimeout: 0
        };
        this.handler = (item) => item;
        this.errorHandler = void 0;
        this.onTaskStartedHandlers = [];
        this.onTaskFinishedHandlers = [];
      }
      /**
       * Set the number of tasks to process concurrently the promise pool.
       *
       * @param {Integer} concurrency
       *
       * @returns {PromisePoolExecutor}
       */
      useConcurrency(concurrency) {
        if (!this.isValidConcurrency(concurrency)) {
          throw validation_error_1.ValidationError.createFrom(`"concurrency" must be a number, 1 or up. Received "${concurrency}" (${typeof concurrency})`);
        }
        this.meta.concurrency = concurrency;
        return this;
      }
      /**
       * Determine whether the given `concurrency` value is valid.
       *
       * @param {Number} concurrency
       *
       * @returns {Boolean}
       */
      isValidConcurrency(concurrency) {
        return typeof concurrency === "number" && concurrency >= 1;
      }
      /**
       * Set the timeout in ms for the pool handler
       *
       * @param {Number} timeout
       *
       * @returns {PromisePool}
       */
      withTaskTimeout(timeout) {
        this.meta.taskTimeout = timeout;
        return this;
      }
      /**
       * Returns the number of concurrently processed tasks.
       *
       * @returns {Number}
       */
      concurrency() {
        return this.meta.concurrency;
      }
      /**
       * Assign whether to keep corresponding results between source items and resulting tasks.
       */
      useCorrespondingResults(shouldResultsCorrespond) {
        this.meta.shouldResultsCorrespond = shouldResultsCorrespond;
        return this;
      }
      /**
       * Determine whether to keep corresponding results between source items and resulting tasks.
       */
      shouldUseCorrespondingResults() {
        return this.meta.shouldResultsCorrespond;
      }
      /**
       * Returns the task timeout in milliseconds.
       */
      taskTimeout() {
        return this.meta.taskTimeout;
      }
      /**
       * Set the items to be processed in the promise pool.
       *
       * @param {Array} items
       *
       * @returns {PromisePoolExecutor}
       */
      for(items) {
        this.meta.items = items;
        return this;
      }
      /**
       * Returns the list of items to process.
       *
       * @returns {T[] | Iterable<T> | AsyncIterable<T>}
       */
      items() {
        return this.meta.items;
      }
      /**
       * Returns the number of items to process, or `NaN` if items are not an array.
       *
       * @returns {Number}
       */
      itemsCount() {
        const items = this.items();
        return Array.isArray(items) ? items.length : NaN;
      }
      /**
       * Returns the list of active tasks.
       *
       * @returns {Array}
       */
      tasks() {
        return this.meta.tasks;
      }
      /**
       * Returns the number of currently active tasks.
       *
       * @returns {Number}
       *
       * @deprecated use the `activeTasksCount()` method (plural naming) instead
       */
      activeTaskCount() {
        return this.activeTasksCount();
      }
      /**
       * Returns the number of currently active tasks.
       *
       * @returns {Number}
       */
      activeTasksCount() {
        return this.tasks().length;
      }
      /**
       * Returns the list of processed items.
       *
       * @returns {T[]}
       */
      processedItems() {
        return this.meta.processedItems;
      }
      /**
       * Returns the number of processed items.
       *
       * @returns {Number}
       */
      processedCount() {
        return this.processedItems().length;
      }
      /**
       * Returns the percentage progress of items that have been processed, or `NaN` if items is not an array.
       */
      processedPercentage() {
        return this.processedCount() / this.itemsCount() * 100;
      }
      /**
       * Returns the list of results.
       *
       * @returns {R[]}
       */
      results() {
        return this.meta.results;
      }
      /**
       * Returns the list of errors.
       *
       * @returns {Array<PromisePoolError<T>>}
       */
      errors() {
        return this.meta.errors;
      }
      /**
       * Set the handler that is applied to each item.
       *
       * @param {Function} action
       *
       * @returns {PromisePoolExecutor}
       */
      withHandler(action) {
        this.handler = action;
        return this;
      }
      /**
       * Determine whether a custom error handle is available.
       *
       * @returns {Boolean}
       */
      hasErrorHandler() {
        return !!this.errorHandler;
      }
      /**
       * Set the error handler function to execute when an error occurs.
       *
       * @param {Function} errorHandler
       *
       * @returns {PromisePoolExecutor}
       */
      handleError(handler) {
        this.errorHandler = handler;
        return this;
      }
      /**
       * Set the handler function to execute when started a task.
       *
       * @param {Function} handler
       *
       * @returns {this}
       */
      onTaskStarted(handlers) {
        this.onTaskStartedHandlers = handlers;
        return this;
      }
      /**
        * Assign the given callback `handler` function to run when a task finished.
       *
       * @param {OnProgressCallback<T>} handlers
       *
       * @returns {this}
       */
      onTaskFinished(handlers) {
        this.onTaskFinishedHandlers = handlers;
        return this;
      }
      /**
       * Determines whether the number of active tasks is greater or equal to the concurrency limit.
       *
       * @returns {Boolean}
       */
      hasReachedConcurrencyLimit() {
        return this.activeTasksCount() >= this.concurrency();
      }
      /**
       * Stop a promise pool processing.
       */
      stop() {
        this.markAsStopped();
        throw new stop_the_promise_pool_error_1.StopThePromisePoolError();
      }
      /**
       * Mark the promise pool as stopped.
       *
       * @returns {PromisePoolExecutor}
       */
      markAsStopped() {
        this.meta.stopped = true;
        return this;
      }
      /**
       * Determine whether the pool is stopped.
       *
       * @returns {Boolean}
       */
      isStopped() {
        return this.meta.stopped;
      }
      /**
       * Start processing the promise pool.
       *
       * @returns {ReturnValue}
       */
      async start() {
        return await this.validateInputs().prepareResultsArray().process();
      }
      /**
       * Determine whether the pool should stop.
       *
       * @returns {PromisePoolExecutor}
       *
       * @throws
       */
      validateInputs() {
        if (typeof this.handler !== "function") {
          throw validation_error_1.ValidationError.createFrom("The first parameter for the .process(fn) method must be a function");
        }
        const timeout = this.taskTimeout();
        if (!(timeout == null || typeof timeout === "number" && timeout >= 0)) {
          throw validation_error_1.ValidationError.createFrom(`"timeout" must be undefined or a number. A number must be 0 or up. Received "${String(timeout)}" (${typeof timeout})`);
        }
        if (!this.areItemsValid()) {
          throw validation_error_1.ValidationError.createFrom(`"items" must be an array, an iterable or an async iterable. Received "${typeof this.items()}"`);
        }
        if (this.errorHandler && typeof this.errorHandler !== "function") {
          throw validation_error_1.ValidationError.createFrom(`The error handler must be a function. Received "${typeof this.errorHandler}"`);
        }
        this.onTaskStartedHandlers.forEach((handler) => {
          if (handler && typeof handler !== "function") {
            throw validation_error_1.ValidationError.createFrom(`The onTaskStarted handler must be a function. Received "${typeof handler}"`);
          }
        });
        this.onTaskFinishedHandlers.forEach((handler) => {
          if (handler && typeof handler !== "function") {
            throw validation_error_1.ValidationError.createFrom(`The error handler must be a function. Received "${typeof handler}"`);
          }
        });
        return this;
      }
      areItemsValid() {
        const items = this.items();
        if (Array.isArray(items))
          return true;
        if (typeof items[Symbol.iterator] === "function")
          return true;
        if (typeof items[Symbol.asyncIterator] === "function")
          return true;
        return false;
      }
      /**
       * Prefill the results array with `notRun` symbol values if results should correspond.
       */
      prepareResultsArray() {
        const items = this.items();
        if (!Array.isArray(items))
          return this;
        if (!this.shouldUseCorrespondingResults())
          return this;
        this.meta.results = Array(items.length).fill(promise_pool_1.PromisePool.notRun);
        return this;
      }
      /**
       * Starts processing the promise pool by iterating over the items
       * and running each item through the async `callback` function.
       *
       * @param {Function} callback
       *
       * @returns {Promise}
       */
      async process() {
        let index = 0;
        for await (const item of this.items()) {
          if (this.isStopped()) {
            break;
          }
          if (this.shouldUseCorrespondingResults()) {
            this.results()[index] = promise_pool_1.PromisePool.notRun;
          }
          this.startProcessing(item, index);
          index += 1;
          await this.waitForProcessingSlot();
        }
        return await this.drained();
      }
      /**
       * Wait for one of the active tasks to finish processing.
       */
      async waitForProcessingSlot() {
        while (this.hasReachedConcurrencyLimit()) {
          await this.waitForActiveTaskToFinish();
        }
      }
      /**
       * Wait for the next, currently active task to finish processing.
       */
      async waitForActiveTaskToFinish() {
        await Promise.race(this.tasks());
      }
      /**
       * Create a processing function for the given `item`.
       *
       * @param {T} item
       * @param {number} index
       */
      startProcessing(item, index) {
        const task = this.createTaskFor(item, index).then((result) => {
          this.save(result, index).removeActive(task);
        }).catch(async (error) => {
          await this.handleErrorFor(error, item, index);
          this.removeActive(task);
        }).finally(() => {
          this.processedItems().push(item);
          this.runOnTaskFinishedHandlers(item);
        });
        this.tasks().push(task);
        this.runOnTaskStartedHandlers(item);
      }
      /**
       * Ensures a returned promise for the processing of the given `item`.
       *
       * @param {T} item
       * @param {number} index
       *
       * @returns {*}
       */
      async createTaskFor(item, index) {
        if (this.taskTimeout() === void 0) {
          return this.handler(item, index, this);
        }
        const [timer, canceller] = this.createTaskTimeout(item);
        return Promise.race([
          this.handler(item, index, this),
          timer()
        ]).finally(canceller);
      }
      /**
       * Returns a tuple of a timer function and a canceller function that
       * times-out after the configured task timeout.
       */
      createTaskTimeout(item) {
        let timerId;
        const timer = async () => new Promise((_resolve, reject) => {
          timerId = setTimeout(() => {
            reject(new promise_pool_error_1.PromisePoolError(`Task in promise pool timed out after ${this.taskTimeout()}ms`, item));
          }, this.taskTimeout());
        });
        const canceller = () => clearTimeout(timerId);
        return [timer, canceller];
      }
      /**
       * Save the given calculation `result`, possibly at the provided `position`.
       *
       * @param {*} result
       * @param {number} position
       *
       * @returns {PromisePoolExecutor}
       */
      save(result, position) {
        this.shouldUseCorrespondingResults() ? this.results()[position] = result : this.results().push(result);
        return this;
      }
      /**
       * Remove the given `task` from the list of active tasks.
       *
       * @param {Promise} task
       */
      removeActive(task) {
        this.tasks().splice(this.tasks().indexOf(task), 1);
        return this;
      }
      /**
       * Create and save an error for the the given `item`.
       *
       * @param {Error} error
       * @param {T} item
       * @param {number} index
       */
      async handleErrorFor(error, item, index) {
        if (this.shouldUseCorrespondingResults()) {
          this.results()[index] = promise_pool_1.PromisePool.failed;
        }
        if (this.isStoppingThePoolError(error)) {
          return;
        }
        if (this.isValidationError(error)) {
          this.markAsStopped();
          throw error;
        }
        this.hasErrorHandler() ? await this.runErrorHandlerFor(error, item) : this.saveErrorFor(error, item);
      }
      /**
       * Determine whether the given `error` is a `StopThePromisePoolError` instance.
       *
       * @param {Error} error
       *
       * @returns {Boolean}
       */
      isStoppingThePoolError(error) {
        return error instanceof stop_the_promise_pool_error_1.StopThePromisePoolError;
      }
      /**
       * Determine whether the given `error` is a `ValidationError` instance.
       *
       * @param {Error} error
       *
       * @returns {Boolean}
       */
      isValidationError(error) {
        return error instanceof validation_error_1.ValidationError;
      }
      /**
       * Run the user’s error handler, if available.
       *
       * @param {Error} processingError
       * @param {T} item
       */
      async runErrorHandlerFor(processingError, item) {
        try {
          await this.errorHandler?.(processingError, item, this);
        } catch (error) {
          this.rethrowIfNotStoppingThePool(error);
        }
      }
      /**
       * Run the onTaskStarted handlers.
       */
      runOnTaskStartedHandlers(item) {
        this.onTaskStartedHandlers.forEach((handler) => {
          handler(item, this);
        });
      }
      /**
       * Run the onTaskFinished handlers.
       */
      runOnTaskFinishedHandlers(item) {
        this.onTaskFinishedHandlers.forEach((handler) => {
          handler(item, this);
        });
      }
      /**
       * Rethrow the given `error` if it’s not an instance of `StopThePromisePoolError`.
       *
       * @param {Error} error
       */
      rethrowIfNotStoppingThePool(error) {
        if (this.isStoppingThePoolError(error)) {
          return;
        }
        throw error;
      }
      /**
       * Create and save an error for the the given `item`.
       *
       * @param {T} item
       */
      saveErrorFor(error, item) {
        this.errors().push(promise_pool_error_1.PromisePoolError.createFrom(error, item));
      }
      /**
       * Wait for all active tasks to finish. Once all the tasks finished
       * processing, returns an object containing the results and errors.
       *
       * @returns {Object}
       */
      async drained() {
        await this.drainActiveTasks();
        return {
          errors: this.errors(),
          results: this.results()
        };
      }
      /**
       * Wait for all of the active tasks to finish processing.
       */
      async drainActiveTasks() {
        await Promise.all(this.tasks());
      }
    };
    exports2.PromisePoolExecutor = PromisePoolExecutor;
  }
});

// node_modules/@supercharge/promise-pool/dist/promise-pool.js
var require_promise_pool = __commonJS({
  "node_modules/@supercharge/promise-pool/dist/promise-pool.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PromisePool = void 0;
    var promise_pool_executor_1 = require_promise_pool_executor();
    var PromisePool = class _PromisePool {
      /**
       * Instantiates a new promise pool with a default `concurrency: 10` and `items: []`.
       *
       * @param {Object} options
       */
      constructor(items) {
        this.timeout = void 0;
        this.concurrency = 10;
        this.items = items ?? [];
        this.errorHandler = void 0;
        this.onTaskStartedHandlers = [];
        this.onTaskFinishedHandlers = [];
        this.shouldResultsCorrespond = false;
      }
      /**
       * Set the number of tasks to process concurrently in the promise pool.
       *
       * @param {Integer} concurrency
       *
       * @returns {PromisePool}
       */
      withConcurrency(concurrency) {
        this.concurrency = concurrency;
        return this;
      }
      /**
       * Set the number of tasks to process concurrently in the promise pool.
       *
       * @param {Number} concurrency
       *
       * @returns {PromisePool}
       */
      static withConcurrency(concurrency) {
        return new this().withConcurrency(concurrency);
      }
      /**
       * Set the timeout in milliseconds for the pool handler.
       *
       * @param {Number} timeout
       *
       * @returns {PromisePool}
       */
      withTaskTimeout(timeout) {
        this.timeout = timeout;
        return this;
      }
      /**
       * Set the timeout in milliseconds for the pool handler.
       *
       * @param {Number} timeout
       *
       * @returns {PromisePool}
       */
      static withTaskTimeout(timeout) {
        return new this().withTaskTimeout(timeout);
      }
      /**
       * Set the items to be processed in the promise pool.
       *
       * @param {SomeIterable<ItemType>} items
       *
       * @returns {PromisePool}
       */
      for(items) {
        const pool = new _PromisePool(items).withConcurrency(this.concurrency);
        if (typeof this.errorHandler === "function") {
          pool.handleError(this.errorHandler);
        }
        return typeof this.timeout === "number" ? pool.withTaskTimeout(this.timeout) : pool;
      }
      /**
       * Set the items to be processed in the promise pool.
       *
       * @param {T[] | Iterable<T> | AsyncIterable<T>} items
       *
       * @returns {PromisePool}
       */
      static for(items) {
        return new this().for(items);
      }
      /**
       * Set the error handler function to execute when an error occurs.
       *
       * @param {ErrorHandler<T>} handler
       *
       * @returns {PromisePool}
       */
      handleError(handler) {
        this.errorHandler = handler;
        return this;
      }
      /**
       * Assign the given callback `handler` function to run when a task starts.
       *
       * @param {OnProgressCallback<T>} handler
       *
       * @returns {PromisePool}
       */
      onTaskStarted(handler) {
        this.onTaskStartedHandlers.push(handler);
        return this;
      }
      /**
       * Assign the given callback `handler` function to run when a task finished.
       *
       * @param {OnProgressCallback<T>} handler
       *
       * @returns {PromisePool}
       */
      onTaskFinished(handler) {
        this.onTaskFinishedHandlers.push(handler);
        return this;
      }
      /**
       * Assign whether to keep corresponding results between source items and resulting tasks.
       */
      useCorrespondingResults() {
        this.shouldResultsCorrespond = true;
        return this;
      }
      /**
       * Starts processing the promise pool by iterating over the items
       * and running each item through the async `callback` function.
       *
       * @param {ProcessHandler} The async processing function receiving each item from the `items` array.
       *
       * @returns Promise<{ results, errors }>
       */
      async process(callback) {
        return new promise_pool_executor_1.PromisePoolExecutor().useConcurrency(this.concurrency).useCorrespondingResults(this.shouldResultsCorrespond).withTaskTimeout(this.timeout).withHandler(callback).handleError(this.errorHandler).onTaskStarted(this.onTaskStartedHandlers).onTaskFinished(this.onTaskFinishedHandlers).for(this.items).start();
      }
    };
    exports2.PromisePool = PromisePool;
    PromisePool.notRun = Symbol("notRun");
    PromisePool.failed = Symbol("failed");
  }
});

// node_modules/@supercharge/promise-pool/dist/contracts.js
var require_contracts3 = __commonJS({
  "node_modules/@supercharge/promise-pool/dist/contracts.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@supercharge/promise-pool/dist/return-value.js
var require_return_value = __commonJS({
  "node_modules/@supercharge/promise-pool/dist/return-value.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/@supercharge/promise-pool/dist/index.js
var require_dist = __commonJS({
  "node_modules/@supercharge/promise-pool/dist/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var promise_pool_1 = require_promise_pool();
    exports2.default = promise_pool_1.PromisePool;
    __exportStar(require_contracts3(), exports2);
    __exportStar(require_promise_pool(), exports2);
    __exportStar(require_promise_pool_error(), exports2);
    __exportStar(require_return_value(), exports2);
    __exportStar(require_stop_the_promise_pool_error(), exports2);
    __exportStar(require_validation_error(), exports2);
  }
});

// node_modules/viem/_cjs/actions/index.js
var require_actions = __commonJS({
  "node_modules/viem/_cjs/actions/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getProof = exports2.getPermissions = exports2.getAddresses = exports2.readContract = exports2.watchPendingTransactions = exports2.watchEvent = exports2.watchBlockNumber = exports2.watchBlocks = exports2.multicall = exports2.mine = exports2.loadState = exports2.increaseTime = exports2.impersonateAccount = exports2.getTransactionReceipt = exports2.getTransaction = exports2.getTransactionCount = exports2.getTransactionConfirmations = exports2.getStorageAt = exports2.getLogs = exports2.getGasPrice = exports2.getFilterLogs = exports2.getFilterChanges = exports2.getFeeHistory = exports2.getEip712Domain = exports2.getContractEvents = exports2.getCode = exports2.getBytecode = exports2.getChainId = exports2.getBlockTransactionCount = exports2.getBlockNumber = exports2.getBlock = exports2.getBlobBaseFee = exports2.getBalance = exports2.estimateGas = exports2.estimateMaxPriorityFeePerGas = exports2.estimateFeesPerGas = exports2.estimateContractGas = exports2.dumpState = exports2.createPendingTransactionFilter = exports2.createEventFilter = exports2.createContractEventFilter = exports2.createBlockFilter = exports2.call = exports2.getEnsText = exports2.getEnsResolver = exports2.getEnsName = exports2.getEnsAvatar = exports2.getEnsAddress = exports2.deployContract = exports2.addChain = void 0;
    exports2.writeContract = exports2.watchContractEvent = exports2.watchAsset = exports2.verifyTypedData = exports2.verifyMessage = exports2.verifyHash = exports2.uninstallFilter = exports2.switchChain = exports2.stopImpersonatingAccount = exports2.simulateContract = exports2.signTypedData = exports2.signMessage = exports2.snapshot = exports2.setStorageAt = exports2.setRpcUrl = exports2.setNonce = exports2.setNextBlockTimestamp = exports2.setNextBlockBaseFeePerGas = exports2.setMinGasPrice = exports2.setLoggingEnabled = exports2.setIntervalMining = exports2.setCoinbase = exports2.setCode = exports2.setBlockTimestampInterval = exports2.setBlockGasLimit = exports2.setAutomine = exports2.setBalance = exports2.sendUnsignedTransaction = exports2.sendRawTransaction = exports2.signTransaction = exports2.sendTransaction = exports2.defaultPrepareTransactionRequestParameters = exports2.prepareTransactionRequest = exports2.revert = exports2.reset = exports2.removeBlockTimestampInterval = exports2.inspectTxpool = exports2.getTxpoolStatus = exports2.getTxpoolContent = exports2.getAutomine = exports2.dropTransaction = exports2.requestPermissions = exports2.requestAddresses = exports2.waitForTransactionReceipt = void 0;
    var addChain_js_1 = require_addChain();
    Object.defineProperty(exports2, "addChain", { enumerable: true, get: function() {
      return addChain_js_1.addChain;
    } });
    var deployContract_js_1 = require_deployContract();
    Object.defineProperty(exports2, "deployContract", { enumerable: true, get: function() {
      return deployContract_js_1.deployContract;
    } });
    var getEnsAddress_js_1 = require_getEnsAddress();
    Object.defineProperty(exports2, "getEnsAddress", { enumerable: true, get: function() {
      return getEnsAddress_js_1.getEnsAddress;
    } });
    var getEnsAvatar_js_1 = require_getEnsAvatar();
    Object.defineProperty(exports2, "getEnsAvatar", { enumerable: true, get: function() {
      return getEnsAvatar_js_1.getEnsAvatar;
    } });
    var getEnsName_js_1 = require_getEnsName();
    Object.defineProperty(exports2, "getEnsName", { enumerable: true, get: function() {
      return getEnsName_js_1.getEnsName;
    } });
    var getEnsResolver_js_1 = require_getEnsResolver();
    Object.defineProperty(exports2, "getEnsResolver", { enumerable: true, get: function() {
      return getEnsResolver_js_1.getEnsResolver;
    } });
    var getEnsText_js_1 = require_getEnsText();
    Object.defineProperty(exports2, "getEnsText", { enumerable: true, get: function() {
      return getEnsText_js_1.getEnsText;
    } });
    var call_js_1 = require_call();
    Object.defineProperty(exports2, "call", { enumerable: true, get: function() {
      return call_js_1.call;
    } });
    var createBlockFilter_js_1 = require_createBlockFilter();
    Object.defineProperty(exports2, "createBlockFilter", { enumerable: true, get: function() {
      return createBlockFilter_js_1.createBlockFilter;
    } });
    var createContractEventFilter_js_1 = require_createContractEventFilter();
    Object.defineProperty(exports2, "createContractEventFilter", { enumerable: true, get: function() {
      return createContractEventFilter_js_1.createContractEventFilter;
    } });
    var createEventFilter_js_1 = require_createEventFilter();
    Object.defineProperty(exports2, "createEventFilter", { enumerable: true, get: function() {
      return createEventFilter_js_1.createEventFilter;
    } });
    var createPendingTransactionFilter_js_1 = require_createPendingTransactionFilter();
    Object.defineProperty(exports2, "createPendingTransactionFilter", { enumerable: true, get: function() {
      return createPendingTransactionFilter_js_1.createPendingTransactionFilter;
    } });
    var dumpState_js_1 = require_dumpState();
    Object.defineProperty(exports2, "dumpState", { enumerable: true, get: function() {
      return dumpState_js_1.dumpState;
    } });
    var estimateContractGas_js_1 = require_estimateContractGas();
    Object.defineProperty(exports2, "estimateContractGas", { enumerable: true, get: function() {
      return estimateContractGas_js_1.estimateContractGas;
    } });
    var estimateFeesPerGas_js_1 = require_estimateFeesPerGas();
    Object.defineProperty(exports2, "estimateFeesPerGas", { enumerable: true, get: function() {
      return estimateFeesPerGas_js_1.estimateFeesPerGas;
    } });
    var estimateMaxPriorityFeePerGas_js_1 = require_estimateMaxPriorityFeePerGas();
    Object.defineProperty(exports2, "estimateMaxPriorityFeePerGas", { enumerable: true, get: function() {
      return estimateMaxPriorityFeePerGas_js_1.estimateMaxPriorityFeePerGas;
    } });
    var estimateGas_js_1 = require_estimateGas2();
    Object.defineProperty(exports2, "estimateGas", { enumerable: true, get: function() {
      return estimateGas_js_1.estimateGas;
    } });
    var getBalance_js_1 = require_getBalance();
    Object.defineProperty(exports2, "getBalance", { enumerable: true, get: function() {
      return getBalance_js_1.getBalance;
    } });
    var getBlobBaseFee_js_1 = require_getBlobBaseFee();
    Object.defineProperty(exports2, "getBlobBaseFee", { enumerable: true, get: function() {
      return getBlobBaseFee_js_1.getBlobBaseFee;
    } });
    var getBlock_js_1 = require_getBlock();
    Object.defineProperty(exports2, "getBlock", { enumerable: true, get: function() {
      return getBlock_js_1.getBlock;
    } });
    var getBlockNumber_js_1 = require_getBlockNumber();
    Object.defineProperty(exports2, "getBlockNumber", { enumerable: true, get: function() {
      return getBlockNumber_js_1.getBlockNumber;
    } });
    var getBlockTransactionCount_js_1 = require_getBlockTransactionCount();
    Object.defineProperty(exports2, "getBlockTransactionCount", { enumerable: true, get: function() {
      return getBlockTransactionCount_js_1.getBlockTransactionCount;
    } });
    var getChainId_js_1 = require_getChainId();
    Object.defineProperty(exports2, "getChainId", { enumerable: true, get: function() {
      return getChainId_js_1.getChainId;
    } });
    var getCode_js_1 = require_getCode();
    Object.defineProperty(exports2, "getBytecode", { enumerable: true, get: function() {
      return getCode_js_1.getCode;
    } });
    Object.defineProperty(exports2, "getCode", { enumerable: true, get: function() {
      return getCode_js_1.getCode;
    } });
    var getContractEvents_js_1 = require_getContractEvents();
    Object.defineProperty(exports2, "getContractEvents", { enumerable: true, get: function() {
      return getContractEvents_js_1.getContractEvents;
    } });
    var getEip712Domain_js_1 = require_getEip712Domain2();
    Object.defineProperty(exports2, "getEip712Domain", { enumerable: true, get: function() {
      return getEip712Domain_js_1.getEip712Domain;
    } });
    var getFeeHistory_js_1 = require_getFeeHistory();
    Object.defineProperty(exports2, "getFeeHistory", { enumerable: true, get: function() {
      return getFeeHistory_js_1.getFeeHistory;
    } });
    var getFilterChanges_js_1 = require_getFilterChanges();
    Object.defineProperty(exports2, "getFilterChanges", { enumerable: true, get: function() {
      return getFilterChanges_js_1.getFilterChanges;
    } });
    var getFilterLogs_js_1 = require_getFilterLogs();
    Object.defineProperty(exports2, "getFilterLogs", { enumerable: true, get: function() {
      return getFilterLogs_js_1.getFilterLogs;
    } });
    var getGasPrice_js_1 = require_getGasPrice();
    Object.defineProperty(exports2, "getGasPrice", { enumerable: true, get: function() {
      return getGasPrice_js_1.getGasPrice;
    } });
    var getLogs_js_1 = require_getLogs();
    Object.defineProperty(exports2, "getLogs", { enumerable: true, get: function() {
      return getLogs_js_1.getLogs;
    } });
    var getStorageAt_js_1 = require_getStorageAt();
    Object.defineProperty(exports2, "getStorageAt", { enumerable: true, get: function() {
      return getStorageAt_js_1.getStorageAt;
    } });
    var getTransactionConfirmations_js_1 = require_getTransactionConfirmations();
    Object.defineProperty(exports2, "getTransactionConfirmations", { enumerable: true, get: function() {
      return getTransactionConfirmations_js_1.getTransactionConfirmations;
    } });
    var getTransactionCount_js_1 = require_getTransactionCount();
    Object.defineProperty(exports2, "getTransactionCount", { enumerable: true, get: function() {
      return getTransactionCount_js_1.getTransactionCount;
    } });
    var getTransaction_js_1 = require_getTransaction();
    Object.defineProperty(exports2, "getTransaction", { enumerable: true, get: function() {
      return getTransaction_js_1.getTransaction;
    } });
    var getTransactionReceipt_js_1 = require_getTransactionReceipt();
    Object.defineProperty(exports2, "getTransactionReceipt", { enumerable: true, get: function() {
      return getTransactionReceipt_js_1.getTransactionReceipt;
    } });
    var impersonateAccount_js_1 = require_impersonateAccount();
    Object.defineProperty(exports2, "impersonateAccount", { enumerable: true, get: function() {
      return impersonateAccount_js_1.impersonateAccount;
    } });
    var increaseTime_js_1 = require_increaseTime();
    Object.defineProperty(exports2, "increaseTime", { enumerable: true, get: function() {
      return increaseTime_js_1.increaseTime;
    } });
    var loadState_js_1 = require_loadState();
    Object.defineProperty(exports2, "loadState", { enumerable: true, get: function() {
      return loadState_js_1.loadState;
    } });
    var mine_js_1 = require_mine();
    Object.defineProperty(exports2, "mine", { enumerable: true, get: function() {
      return mine_js_1.mine;
    } });
    var multicall_js_1 = require_multicall();
    Object.defineProperty(exports2, "multicall", { enumerable: true, get: function() {
      return multicall_js_1.multicall;
    } });
    var watchBlocks_js_1 = require_watchBlocks();
    Object.defineProperty(exports2, "watchBlocks", { enumerable: true, get: function() {
      return watchBlocks_js_1.watchBlocks;
    } });
    var watchBlockNumber_js_1 = require_watchBlockNumber();
    Object.defineProperty(exports2, "watchBlockNumber", { enumerable: true, get: function() {
      return watchBlockNumber_js_1.watchBlockNumber;
    } });
    var watchEvent_js_1 = require_watchEvent();
    Object.defineProperty(exports2, "watchEvent", { enumerable: true, get: function() {
      return watchEvent_js_1.watchEvent;
    } });
    var watchPendingTransactions_js_1 = require_watchPendingTransactions();
    Object.defineProperty(exports2, "watchPendingTransactions", { enumerable: true, get: function() {
      return watchPendingTransactions_js_1.watchPendingTransactions;
    } });
    var readContract_js_1 = require_readContract();
    Object.defineProperty(exports2, "readContract", { enumerable: true, get: function() {
      return readContract_js_1.readContract;
    } });
    var getAddresses_js_1 = require_getAddresses();
    Object.defineProperty(exports2, "getAddresses", { enumerable: true, get: function() {
      return getAddresses_js_1.getAddresses;
    } });
    var getPermissions_js_1 = require_getPermissions();
    Object.defineProperty(exports2, "getPermissions", { enumerable: true, get: function() {
      return getPermissions_js_1.getPermissions;
    } });
    var getProof_js_1 = require_getProof();
    Object.defineProperty(exports2, "getProof", { enumerable: true, get: function() {
      return getProof_js_1.getProof;
    } });
    var waitForTransactionReceipt_js_1 = require_waitForTransactionReceipt();
    Object.defineProperty(exports2, "waitForTransactionReceipt", { enumerable: true, get: function() {
      return waitForTransactionReceipt_js_1.waitForTransactionReceipt;
    } });
    var requestAddresses_js_1 = require_requestAddresses();
    Object.defineProperty(exports2, "requestAddresses", { enumerable: true, get: function() {
      return requestAddresses_js_1.requestAddresses;
    } });
    var requestPermissions_js_1 = require_requestPermissions();
    Object.defineProperty(exports2, "requestPermissions", { enumerable: true, get: function() {
      return requestPermissions_js_1.requestPermissions;
    } });
    var dropTransaction_js_1 = require_dropTransaction();
    Object.defineProperty(exports2, "dropTransaction", { enumerable: true, get: function() {
      return dropTransaction_js_1.dropTransaction;
    } });
    var getAutomine_js_1 = require_getAutomine();
    Object.defineProperty(exports2, "getAutomine", { enumerable: true, get: function() {
      return getAutomine_js_1.getAutomine;
    } });
    var getTxpoolContent_js_1 = require_getTxpoolContent();
    Object.defineProperty(exports2, "getTxpoolContent", { enumerable: true, get: function() {
      return getTxpoolContent_js_1.getTxpoolContent;
    } });
    var getTxpoolStatus_js_1 = require_getTxpoolStatus();
    Object.defineProperty(exports2, "getTxpoolStatus", { enumerable: true, get: function() {
      return getTxpoolStatus_js_1.getTxpoolStatus;
    } });
    var inspectTxpool_js_1 = require_inspectTxpool();
    Object.defineProperty(exports2, "inspectTxpool", { enumerable: true, get: function() {
      return inspectTxpool_js_1.inspectTxpool;
    } });
    var removeBlockTimestampInterval_js_1 = require_removeBlockTimestampInterval();
    Object.defineProperty(exports2, "removeBlockTimestampInterval", { enumerable: true, get: function() {
      return removeBlockTimestampInterval_js_1.removeBlockTimestampInterval;
    } });
    var reset_js_1 = require_reset();
    Object.defineProperty(exports2, "reset", { enumerable: true, get: function() {
      return reset_js_1.reset;
    } });
    var revert_js_1 = require_revert();
    Object.defineProperty(exports2, "revert", { enumerable: true, get: function() {
      return revert_js_1.revert;
    } });
    var prepareTransactionRequest_js_1 = require_prepareTransactionRequest();
    Object.defineProperty(exports2, "prepareTransactionRequest", { enumerable: true, get: function() {
      return prepareTransactionRequest_js_1.prepareTransactionRequest;
    } });
    Object.defineProperty(exports2, "defaultPrepareTransactionRequestParameters", { enumerable: true, get: function() {
      return prepareTransactionRequest_js_1.defaultParameters;
    } });
    var sendTransaction_js_1 = require_sendTransaction();
    Object.defineProperty(exports2, "sendTransaction", { enumerable: true, get: function() {
      return sendTransaction_js_1.sendTransaction;
    } });
    var signTransaction_js_1 = require_signTransaction();
    Object.defineProperty(exports2, "signTransaction", { enumerable: true, get: function() {
      return signTransaction_js_1.signTransaction;
    } });
    var sendRawTransaction_js_1 = require_sendRawTransaction();
    Object.defineProperty(exports2, "sendRawTransaction", { enumerable: true, get: function() {
      return sendRawTransaction_js_1.sendRawTransaction;
    } });
    var sendUnsignedTransaction_js_1 = require_sendUnsignedTransaction();
    Object.defineProperty(exports2, "sendUnsignedTransaction", { enumerable: true, get: function() {
      return sendUnsignedTransaction_js_1.sendUnsignedTransaction;
    } });
    var setBalance_js_1 = require_setBalance();
    Object.defineProperty(exports2, "setBalance", { enumerable: true, get: function() {
      return setBalance_js_1.setBalance;
    } });
    var setAutomine_js_1 = require_setAutomine();
    Object.defineProperty(exports2, "setAutomine", { enumerable: true, get: function() {
      return setAutomine_js_1.setAutomine;
    } });
    var setBlockGasLimit_js_1 = require_setBlockGasLimit();
    Object.defineProperty(exports2, "setBlockGasLimit", { enumerable: true, get: function() {
      return setBlockGasLimit_js_1.setBlockGasLimit;
    } });
    var setBlockTimestampInterval_js_1 = require_setBlockTimestampInterval();
    Object.defineProperty(exports2, "setBlockTimestampInterval", { enumerable: true, get: function() {
      return setBlockTimestampInterval_js_1.setBlockTimestampInterval;
    } });
    var setCode_js_1 = require_setCode();
    Object.defineProperty(exports2, "setCode", { enumerable: true, get: function() {
      return setCode_js_1.setCode;
    } });
    var setCoinbase_js_1 = require_setCoinbase();
    Object.defineProperty(exports2, "setCoinbase", { enumerable: true, get: function() {
      return setCoinbase_js_1.setCoinbase;
    } });
    var setIntervalMining_js_1 = require_setIntervalMining();
    Object.defineProperty(exports2, "setIntervalMining", { enumerable: true, get: function() {
      return setIntervalMining_js_1.setIntervalMining;
    } });
    var setLoggingEnabled_js_1 = require_setLoggingEnabled();
    Object.defineProperty(exports2, "setLoggingEnabled", { enumerable: true, get: function() {
      return setLoggingEnabled_js_1.setLoggingEnabled;
    } });
    var setMinGasPrice_js_1 = require_setMinGasPrice();
    Object.defineProperty(exports2, "setMinGasPrice", { enumerable: true, get: function() {
      return setMinGasPrice_js_1.setMinGasPrice;
    } });
    var setNextBlockBaseFeePerGas_js_1 = require_setNextBlockBaseFeePerGas();
    Object.defineProperty(exports2, "setNextBlockBaseFeePerGas", { enumerable: true, get: function() {
      return setNextBlockBaseFeePerGas_js_1.setNextBlockBaseFeePerGas;
    } });
    var setNextBlockTimestamp_js_1 = require_setNextBlockTimestamp();
    Object.defineProperty(exports2, "setNextBlockTimestamp", { enumerable: true, get: function() {
      return setNextBlockTimestamp_js_1.setNextBlockTimestamp;
    } });
    var setNonce_js_1 = require_setNonce();
    Object.defineProperty(exports2, "setNonce", { enumerable: true, get: function() {
      return setNonce_js_1.setNonce;
    } });
    var setRpcUrl_js_1 = require_setRpcUrl();
    Object.defineProperty(exports2, "setRpcUrl", { enumerable: true, get: function() {
      return setRpcUrl_js_1.setRpcUrl;
    } });
    var setStorageAt_js_1 = require_setStorageAt();
    Object.defineProperty(exports2, "setStorageAt", { enumerable: true, get: function() {
      return setStorageAt_js_1.setStorageAt;
    } });
    var snapshot_js_1 = require_snapshot();
    Object.defineProperty(exports2, "snapshot", { enumerable: true, get: function() {
      return snapshot_js_1.snapshot;
    } });
    var signMessage_js_1 = require_signMessage();
    Object.defineProperty(exports2, "signMessage", { enumerable: true, get: function() {
      return signMessage_js_1.signMessage;
    } });
    var signTypedData_js_1 = require_signTypedData();
    Object.defineProperty(exports2, "signTypedData", { enumerable: true, get: function() {
      return signTypedData_js_1.signTypedData;
    } });
    var simulateContract_js_1 = require_simulateContract();
    Object.defineProperty(exports2, "simulateContract", { enumerable: true, get: function() {
      return simulateContract_js_1.simulateContract;
    } });
    var stopImpersonatingAccount_js_1 = require_stopImpersonatingAccount();
    Object.defineProperty(exports2, "stopImpersonatingAccount", { enumerable: true, get: function() {
      return stopImpersonatingAccount_js_1.stopImpersonatingAccount;
    } });
    var switchChain_js_1 = require_switchChain();
    Object.defineProperty(exports2, "switchChain", { enumerable: true, get: function() {
      return switchChain_js_1.switchChain;
    } });
    var uninstallFilter_js_1 = require_uninstallFilter();
    Object.defineProperty(exports2, "uninstallFilter", { enumerable: true, get: function() {
      return uninstallFilter_js_1.uninstallFilter;
    } });
    var verifyHash_js_1 = require_verifyHash2();
    Object.defineProperty(exports2, "verifyHash", { enumerable: true, get: function() {
      return verifyHash_js_1.verifyHash;
    } });
    var verifyMessage_js_1 = require_verifyMessage2();
    Object.defineProperty(exports2, "verifyMessage", { enumerable: true, get: function() {
      return verifyMessage_js_1.verifyMessage;
    } });
    var verifyTypedData_js_1 = require_verifyTypedData2();
    Object.defineProperty(exports2, "verifyTypedData", { enumerable: true, get: function() {
      return verifyTypedData_js_1.verifyTypedData;
    } });
    var watchAsset_js_1 = require_watchAsset();
    Object.defineProperty(exports2, "watchAsset", { enumerable: true, get: function() {
      return watchAsset_js_1.watchAsset;
    } });
    var watchContractEvent_js_1 = require_watchContractEvent();
    Object.defineProperty(exports2, "watchContractEvent", { enumerable: true, get: function() {
      return watchContractEvent_js_1.watchContractEvent;
    } });
    var writeContract_js_1 = require_writeContract();
    Object.defineProperty(exports2, "writeContract", { enumerable: true, get: function() {
      return writeContract_js_1.writeContract;
    } });
  }
});

// node_modules/base-x/src/index.js
var require_src = __commonJS({
  "node_modules/base-x/src/index.js"(exports2, module2) {
    "use strict";
    function base(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode(source) {
        if (source instanceof Uint8Array) {
        } else if (ArrayBuffer.isView(source)) {
          source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
          source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
          throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i2 = 0;
          for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          pbegin++;
        }
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
        var str2 = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) {
          str2 += ALPHABET.charAt(b58[it2]);
        }
        return str2;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return new Uint8Array();
        }
        var psz = 0;
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while (source[psz]) {
          var carry = BASE_MAP[source.charCodeAt(psz)];
          if (carry === 255) {
            return;
          }
          var i2 = 0;
          for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          psz++;
        }
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = new Uint8Array(zeroes + (size - it4));
        var j2 = zeroes;
        while (it4 !== size) {
          vch[j2++] = b256[it4++];
        }
        return vch;
      }
      function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode,
        decodeUnsafe,
        decode
      };
    }
    module2.exports = base;
  }
});

// node_modules/bs58/index.js
var require_bs58 = __commonJS({
  "node_modules/bs58/index.js"(exports2, module2) {
    "use strict";
    var basex = require_src();
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module2.exports = basex(ALPHABET);
  }
});

// node_modules/kind-of/index.js
var require_kind_of = __commonJS({
  "node_modules/kind-of/index.js"(exports2, module2) {
    "use strict";
    var toString = Object.prototype.toString;
    module2.exports = function kindOf(val) {
      if (val === void 0) return "undefined";
      if (val === null) return "null";
      var type = typeof val;
      if (type === "boolean") return "boolean";
      if (type === "string") return "string";
      if (type === "number") return "number";
      if (type === "symbol") return "symbol";
      if (type === "function") {
        return isGeneratorFn(val) ? "generatorfunction" : "function";
      }
      if (isArray(val)) return "array";
      if (isBuffer(val)) return "buffer";
      if (isArguments(val)) return "arguments";
      if (isDate(val)) return "date";
      if (isError(val)) return "error";
      if (isRegexp(val)) return "regexp";
      switch (ctorName(val)) {
        case "Symbol":
          return "symbol";
        case "Promise":
          return "promise";
        // Set, Map, WeakSet, WeakMap
        case "WeakMap":
          return "weakmap";
        case "WeakSet":
          return "weakset";
        case "Map":
          return "map";
        case "Set":
          return "set";
        // 8-bit typed arrays
        case "Int8Array":
          return "int8array";
        case "Uint8Array":
          return "uint8array";
        case "Uint8ClampedArray":
          return "uint8clampedarray";
        // 16-bit typed arrays
        case "Int16Array":
          return "int16array";
        case "Uint16Array":
          return "uint16array";
        // 32-bit typed arrays
        case "Int32Array":
          return "int32array";
        case "Uint32Array":
          return "uint32array";
        case "Float32Array":
          return "float32array";
        case "Float64Array":
          return "float64array";
      }
      if (isGeneratorObj(val)) {
        return "generator";
      }
      type = toString.call(val);
      switch (type) {
        case "[object Object]":
          return "object";
        // iterators
        case "[object Map Iterator]":
          return "mapiterator";
        case "[object Set Iterator]":
          return "setiterator";
        case "[object String Iterator]":
          return "stringiterator";
        case "[object Array Iterator]":
          return "arrayiterator";
      }
      return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
    };
    function ctorName(val) {
      return typeof val.constructor === "function" ? val.constructor.name : null;
    }
    function isArray(val) {
      if (Array.isArray) return Array.isArray(val);
      return val instanceof Array;
    }
    function isError(val) {
      return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
    }
    function isDate(val) {
      if (val instanceof Date) return true;
      return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
    }
    function isRegexp(val) {
      if (val instanceof RegExp) return true;
      return typeof val.flags === "string" && typeof val.ignoreCase === "boolean" && typeof val.multiline === "boolean" && typeof val.global === "boolean";
    }
    function isGeneratorFn(name, val) {
      return ctorName(name) === "GeneratorFunction";
    }
    function isGeneratorObj(val) {
      return typeof val.throw === "function" && typeof val.return === "function" && typeof val.next === "function";
    }
    function isArguments(val) {
      try {
        if (typeof val.length === "number" && typeof val.callee === "function") {
          return true;
        }
      } catch (err) {
        if (err.message.indexOf("callee") !== -1) {
          return true;
        }
      }
      return false;
    }
    function isBuffer(val) {
      if (val.constructor && typeof val.constructor.isBuffer === "function") {
        return val.constructor.isBuffer(val);
      }
      return false;
    }
  }
});

// node_modules/is-extendable/index.js
var require_is_extendable = __commonJS({
  "node_modules/is-extendable/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function isExtendable(val) {
      return typeof val !== "undefined" && val !== null && (typeof val === "object" || typeof val === "function");
    };
  }
});

// node_modules/extend-shallow/index.js
var require_extend_shallow = __commonJS({
  "node_modules/extend-shallow/index.js"(exports2, module2) {
    "use strict";
    var isObject = require_is_extendable();
    module2.exports = function extend(o) {
      if (!isObject(o)) {
        o = {};
      }
      var len = arguments.length;
      for (var i = 1; i < len; i++) {
        var obj = arguments[i];
        if (isObject(obj)) {
          assign(o, obj);
        }
      }
      return o;
    };
    function assign(a, b) {
      for (var key in b) {
        if (hasOwn(b, key)) {
          a[key] = b[key];
        }
      }
    }
    function hasOwn(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
  }
});

// node_modules/section-matter/index.js
var require_section_matter = __commonJS({
  "node_modules/section-matter/index.js"(exports2, module2) {
    "use strict";
    var typeOf = require_kind_of();
    var extend = require_extend_shallow();
    module2.exports = function(input, options2) {
      if (typeof options2 === "function") {
        options2 = { parse: options2 };
      }
      var file = toObject(input);
      var defaults = { section_delimiter: "---", parse: identity };
      var opts = extend({}, defaults, options2);
      var delim = opts.section_delimiter;
      var lines = file.content.split(/\r?\n/);
      var sections = null;
      var section = createSection();
      var content = [];
      var stack = [];
      function initSections(val) {
        file.content = val;
        sections = [];
        content = [];
      }
      function closeSection(val) {
        if (stack.length) {
          section.key = getKey(stack[0], delim);
          section.content = val;
          opts.parse(section, sections);
          sections.push(section);
          section = createSection();
          content = [];
          stack = [];
        }
      }
      for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        var len = stack.length;
        var ln = line.trim();
        if (isDelimiter(ln, delim)) {
          if (ln.length === 3 && i !== 0) {
            if (len === 0 || len === 2) {
              content.push(line);
              continue;
            }
            stack.push(ln);
            section.data = content.join("\n");
            content = [];
            continue;
          }
          if (sections === null) {
            initSections(content.join("\n"));
          }
          if (len === 2) {
            closeSection(content.join("\n"));
          }
          stack.push(ln);
          continue;
        }
        content.push(line);
      }
      if (sections === null) {
        initSections(content.join("\n"));
      } else {
        closeSection(content.join("\n"));
      }
      file.sections = sections;
      return file;
    };
    function isDelimiter(line, delim) {
      if (line.slice(0, delim.length) !== delim) {
        return false;
      }
      if (line.charAt(delim.length + 1) === delim.slice(-1)) {
        return false;
      }
      return true;
    }
    function toObject(input) {
      if (typeOf(input) !== "object") {
        input = { content: input };
      }
      if (typeof input.content !== "string" && !isBuffer(input.content)) {
        throw new TypeError("expected a buffer or string");
      }
      input.content = input.content.toString();
      input.sections = [];
      return input;
    }
    function getKey(val, delim) {
      return val ? val.slice(delim.length).trim() : "";
    }
    function createSection() {
      return { key: "", data: "", content: "" };
    }
    function identity(val) {
      return val;
    }
    function isBuffer(val) {
      if (val && val.constructor && typeof val.constructor.isBuffer === "function") {
        return val.constructor.isBuffer(val);
      }
      return false;
    }
  }
});

// node_modules/js-yaml/lib/js-yaml/common.js
var require_common = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/common.js"(exports2, module2) {
    "use strict";
    function isNothing(subject) {
      return typeof subject === "undefined" || subject === null;
    }
    function isObject(subject) {
      return typeof subject === "object" && subject !== null;
    }
    function toArray(sequence) {
      if (Array.isArray(sequence)) return sequence;
      else if (isNothing(sequence)) return [];
      return [sequence];
    }
    function extend(target, source) {
      var index, length, key, sourceKeys;
      if (source) {
        sourceKeys = Object.keys(source);
        for (index = 0, length = sourceKeys.length; index < length; index += 1) {
          key = sourceKeys[index];
          target[key] = source[key];
        }
      }
      return target;
    }
    function repeat(string, count) {
      var result = "", cycle;
      for (cycle = 0; cycle < count; cycle += 1) {
        result += string;
      }
      return result;
    }
    function isNegativeZero(number) {
      return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
    }
    module2.exports.isNothing = isNothing;
    module2.exports.isObject = isObject;
    module2.exports.toArray = toArray;
    module2.exports.repeat = repeat;
    module2.exports.isNegativeZero = isNegativeZero;
    module2.exports.extend = extend;
  }
});

// node_modules/js-yaml/lib/js-yaml/exception.js
var require_exception = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/exception.js"(exports2, module2) {
    "use strict";
    function YAMLException(reason, mark) {
      Error.call(this);
      this.name = "YAMLException";
      this.reason = reason;
      this.mark = mark;
      this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : "");
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack || "";
      }
    }
    YAMLException.prototype = Object.create(Error.prototype);
    YAMLException.prototype.constructor = YAMLException;
    YAMLException.prototype.toString = function toString(compact) {
      var result = this.name + ": ";
      result += this.reason || "(unknown reason)";
      if (!compact && this.mark) {
        result += " " + this.mark.toString();
      }
      return result;
    };
    module2.exports = YAMLException;
  }
});

// node_modules/js-yaml/lib/js-yaml/mark.js
var require_mark = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/mark.js"(exports2, module2) {
    "use strict";
    var common = require_common();
    function Mark(name, buffer, position, line, column) {
      this.name = name;
      this.buffer = buffer;
      this.position = position;
      this.line = line;
      this.column = column;
    }
    Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
      var head, start, tail, end, snippet;
      if (!this.buffer) return null;
      indent = indent || 4;
      maxLength = maxLength || 75;
      head = "";
      start = this.position;
      while (start > 0 && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(start - 1)) === -1) {
        start -= 1;
        if (this.position - start > maxLength / 2 - 1) {
          head = " ... ";
          start += 5;
          break;
        }
      }
      tail = "";
      end = this.position;
      while (end < this.buffer.length && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(end)) === -1) {
        end += 1;
        if (end - this.position > maxLength / 2 - 1) {
          tail = " ... ";
          end -= 5;
          break;
        }
      }
      snippet = this.buffer.slice(start, end);
      return common.repeat(" ", indent) + head + snippet + tail + "\n" + common.repeat(" ", indent + this.position - start + head.length) + "^";
    };
    Mark.prototype.toString = function toString(compact) {
      var snippet, where = "";
      if (this.name) {
        where += 'in "' + this.name + '" ';
      }
      where += "at line " + (this.line + 1) + ", column " + (this.column + 1);
      if (!compact) {
        snippet = this.getSnippet();
        if (snippet) {
          where += ":\n" + snippet;
        }
      }
      return where;
    };
    module2.exports = Mark;
  }
});

// node_modules/js-yaml/lib/js-yaml/type.js
var require_type = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type.js"(exports2, module2) {
    "use strict";
    var YAMLException = require_exception();
    var TYPE_CONSTRUCTOR_OPTIONS = [
      "kind",
      "resolve",
      "construct",
      "instanceOf",
      "predicate",
      "represent",
      "defaultStyle",
      "styleAliases"
    ];
    var YAML_NODE_KINDS = [
      "scalar",
      "sequence",
      "mapping"
    ];
    function compileStyleAliases(map) {
      var result = {};
      if (map !== null) {
        Object.keys(map).forEach(function(style) {
          map[style].forEach(function(alias) {
            result[String(alias)] = style;
          });
        });
      }
      return result;
    }
    function Type(tag, options2) {
      options2 = options2 || {};
      Object.keys(options2).forEach(function(name) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
          throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
        }
      });
      this.tag = tag;
      this.kind = options2["kind"] || null;
      this.resolve = options2["resolve"] || function() {
        return true;
      };
      this.construct = options2["construct"] || function(data) {
        return data;
      };
      this.instanceOf = options2["instanceOf"] || null;
      this.predicate = options2["predicate"] || null;
      this.represent = options2["represent"] || null;
      this.defaultStyle = options2["defaultStyle"] || null;
      this.styleAliases = compileStyleAliases(options2["styleAliases"] || null);
      if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
        throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
      }
    }
    module2.exports = Type;
  }
});

// node_modules/js-yaml/lib/js-yaml/schema.js
var require_schema = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/schema.js"(exports2, module2) {
    "use strict";
    var common = require_common();
    var YAMLException = require_exception();
    var Type = require_type();
    function compileList(schema, name, result) {
      var exclude = [];
      schema.include.forEach(function(includedSchema) {
        result = compileList(includedSchema, name, result);
      });
      schema[name].forEach(function(currentType) {
        result.forEach(function(previousType, previousIndex) {
          if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
            exclude.push(previousIndex);
          }
        });
        result.push(currentType);
      });
      return result.filter(function(type, index) {
        return exclude.indexOf(index) === -1;
      });
    }
    function compileMap() {
      var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {}
      }, index, length;
      function collectType(type) {
        result[type.kind][type.tag] = result["fallback"][type.tag] = type;
      }
      for (index = 0, length = arguments.length; index < length; index += 1) {
        arguments[index].forEach(collectType);
      }
      return result;
    }
    function Schema(definition) {
      this.include = definition.include || [];
      this.implicit = definition.implicit || [];
      this.explicit = definition.explicit || [];
      this.implicit.forEach(function(type) {
        if (type.loadKind && type.loadKind !== "scalar") {
          throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
        }
      });
      this.compiledImplicit = compileList(this, "implicit", []);
      this.compiledExplicit = compileList(this, "explicit", []);
      this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
    }
    Schema.DEFAULT = null;
    Schema.create = function createSchema() {
      var schemas, types;
      switch (arguments.length) {
        case 1:
          schemas = Schema.DEFAULT;
          types = arguments[0];
          break;
        case 2:
          schemas = arguments[0];
          types = arguments[1];
          break;
        default:
          throw new YAMLException("Wrong number of arguments for Schema.create function");
      }
      schemas = common.toArray(schemas);
      types = common.toArray(types);
      if (!schemas.every(function(schema) {
        return schema instanceof Schema;
      })) {
        throw new YAMLException("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
      }
      if (!types.every(function(type) {
        return type instanceof Type;
      })) {
        throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
      }
      return new Schema({
        include: schemas,
        explicit: types
      });
    };
    module2.exports = Schema;
  }
});

// node_modules/js-yaml/lib/js-yaml/type/str.js
var require_str = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/str.js"(exports2, module2) {
    "use strict";
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:str", {
      kind: "scalar",
      construct: function(data) {
        return data !== null ? data : "";
      }
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/seq.js
var require_seq = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/seq.js"(exports2, module2) {
    "use strict";
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:seq", {
      kind: "sequence",
      construct: function(data) {
        return data !== null ? data : [];
      }
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/map.js
var require_map = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/map.js"(exports2, module2) {
    "use strict";
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:map", {
      kind: "mapping",
      construct: function(data) {
        return data !== null ? data : {};
      }
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/schema/failsafe.js
var require_failsafe = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/schema/failsafe.js"(exports2, module2) {
    "use strict";
    var Schema = require_schema();
    module2.exports = new Schema({
      explicit: [
        require_str(),
        require_seq(),
        require_map()
      ]
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/null.js
var require_null = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/null.js"(exports2, module2) {
    "use strict";
    var Type = require_type();
    function resolveYamlNull(data) {
      if (data === null) return true;
      var max = data.length;
      return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
    }
    function constructYamlNull() {
      return null;
    }
    function isNull(object) {
      return object === null;
    }
    module2.exports = new Type("tag:yaml.org,2002:null", {
      kind: "scalar",
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function() {
          return "~";
        },
        lowercase: function() {
          return "null";
        },
        uppercase: function() {
          return "NULL";
        },
        camelcase: function() {
          return "Null";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/bool.js
var require_bool = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/bool.js"(exports2, module2) {
    "use strict";
    var Type = require_type();
    function resolveYamlBoolean(data) {
      if (data === null) return false;
      var max = data.length;
      return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
    }
    function constructYamlBoolean(data) {
      return data === "true" || data === "True" || data === "TRUE";
    }
    function isBoolean(object) {
      return Object.prototype.toString.call(object) === "[object Boolean]";
    }
    module2.exports = new Type("tag:yaml.org,2002:bool", {
      kind: "scalar",
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function(object) {
          return object ? "true" : "false";
        },
        uppercase: function(object) {
          return object ? "TRUE" : "FALSE";
        },
        camelcase: function(object) {
          return object ? "True" : "False";
        }
      },
      defaultStyle: "lowercase"
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/int.js
var require_int = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/int.js"(exports2, module2) {
    "use strict";
    var common = require_common();
    var Type = require_type();
    function isHexCode(c) {
      return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
    }
    function isOctCode(c) {
      return 48 <= c && c <= 55;
    }
    function isDecCode(c) {
      return 48 <= c && c <= 57;
    }
    function resolveYamlInteger(data) {
      if (data === null) return false;
      var max = data.length, index = 0, hasDigits = false, ch;
      if (!max) return false;
      ch = data[index];
      if (ch === "-" || ch === "+") {
        ch = data[++index];
      }
      if (ch === "0") {
        if (index + 1 === max) return true;
        ch = data[++index];
        if (ch === "b") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_") continue;
            if (ch !== "0" && ch !== "1") return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "x") {
          index++;
          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_") continue;
            if (!isHexCode(data.charCodeAt(index))) return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        for (; index < max; index++) {
          ch = data[index];
          if (ch === "_") continue;
          if (!isOctCode(data.charCodeAt(index))) return false;
          hasDigits = true;
        }
        return hasDigits && ch !== "_";
      }
      if (ch === "_") return false;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_") continue;
        if (ch === ":") break;
        if (!isDecCode(data.charCodeAt(index))) {
          return false;
        }
        hasDigits = true;
      }
      if (!hasDigits || ch === "_") return false;
      if (ch !== ":") return true;
      return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
    }
    function constructYamlInteger(data) {
      var value = data, sign = 1, ch, base, digits = [];
      if (value.indexOf("_") !== -1) {
        value = value.replace(/_/g, "");
      }
      ch = value[0];
      if (ch === "-" || ch === "+") {
        if (ch === "-") sign = -1;
        value = value.slice(1);
        ch = value[0];
      }
      if (value === "0") return 0;
      if (ch === "0") {
        if (value[1] === "b") return sign * parseInt(value.slice(2), 2);
        if (value[1] === "x") return sign * parseInt(value, 16);
        return sign * parseInt(value, 8);
      }
      if (value.indexOf(":") !== -1) {
        value.split(":").forEach(function(v) {
          digits.unshift(parseInt(v, 10));
        });
        value = 0;
        base = 1;
        digits.forEach(function(d) {
          value += d * base;
          base *= 60;
        });
        return sign * value;
      }
      return sign * parseInt(value, 10);
    }
    function isInteger(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
    }
    module2.exports = new Type("tag:yaml.org,2002:int", {
      kind: "scalar",
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary: function(obj) {
          return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
        },
        octal: function(obj) {
          return obj >= 0 ? "0" + obj.toString(8) : "-0" + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
          return obj.toString(10);
        },
        /* eslint-disable max-len */
        hexadecimal: function(obj) {
          return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: "decimal",
      styleAliases: {
        binary: [2, "bin"],
        octal: [8, "oct"],
        decimal: [10, "dec"],
        hexadecimal: [16, "hex"]
      }
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/float.js
var require_float = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/float.js"(exports2, module2) {
    "use strict";
    var common = require_common();
    var Type = require_type();
    var YAML_FLOAT_PATTERN = new RegExp(
      // 2.5e4, 2.5 and integers
      "^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
    );
    function resolveYamlFloat(data) {
      if (data === null) return false;
      if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === "_") {
        return false;
      }
      return true;
    }
    function constructYamlFloat(data) {
      var value, sign, base, digits;
      value = data.replace(/_/g, "").toLowerCase();
      sign = value[0] === "-" ? -1 : 1;
      digits = [];
      if ("+-".indexOf(value[0]) >= 0) {
        value = value.slice(1);
      }
      if (value === ".inf") {
        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
      } else if (value === ".nan") {
        return NaN;
      } else if (value.indexOf(":") >= 0) {
        value.split(":").forEach(function(v) {
          digits.unshift(parseFloat(v, 10));
        });
        value = 0;
        base = 1;
        digits.forEach(function(d) {
          value += d * base;
          base *= 60;
        });
        return sign * value;
      }
      return sign * parseFloat(value, 10);
    }
    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
    function representYamlFloat(object, style) {
      var res;
      if (isNaN(object)) {
        switch (style) {
          case "lowercase":
            return ".nan";
          case "uppercase":
            return ".NAN";
          case "camelcase":
            return ".NaN";
        }
      } else if (Number.POSITIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return ".inf";
          case "uppercase":
            return ".INF";
          case "camelcase":
            return ".Inf";
        }
      } else if (Number.NEGATIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return "-.inf";
          case "uppercase":
            return "-.INF";
          case "camelcase":
            return "-.Inf";
        }
      } else if (common.isNegativeZero(object)) {
        return "-0.0";
      }
      res = object.toString(10);
      return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
    }
    function isFloat(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
    }
    module2.exports = new Type("tag:yaml.org,2002:float", {
      kind: "scalar",
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: "lowercase"
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/schema/json.js
var require_json = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/schema/json.js"(exports2, module2) {
    "use strict";
    var Schema = require_schema();
    module2.exports = new Schema({
      include: [
        require_failsafe()
      ],
      implicit: [
        require_null(),
        require_bool(),
        require_int(),
        require_float()
      ]
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/schema/core.js
var require_core = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/schema/core.js"(exports2, module2) {
    "use strict";
    var Schema = require_schema();
    module2.exports = new Schema({
      include: [
        require_json()
      ]
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/timestamp.js"(exports2, module2) {
    "use strict";
    var Type = require_type();
    var YAML_DATE_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
    );
    var YAML_TIMESTAMP_REGEXP = new RegExp(
      "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
    );
    function resolveYamlTimestamp(data) {
      if (data === null) return false;
      if (YAML_DATE_REGEXP.exec(data) !== null) return true;
      if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
      return false;
    }
    function constructYamlTimestamp(data) {
      var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
      match = YAML_DATE_REGEXP.exec(data);
      if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
      if (match === null) throw new Error("Date resolve error");
      year = +match[1];
      month = +match[2] - 1;
      day = +match[3];
      if (!match[4]) {
        return new Date(Date.UTC(year, month, day));
      }
      hour = +match[4];
      minute = +match[5];
      second = +match[6];
      if (match[7]) {
        fraction = match[7].slice(0, 3);
        while (fraction.length < 3) {
          fraction += "0";
        }
        fraction = +fraction;
      }
      if (match[9]) {
        tz_hour = +match[10];
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 6e4;
        if (match[9] === "-") delta = -delta;
      }
      date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
      if (delta) date.setTime(date.getTime() - delta);
      return date;
    }
    function representYamlTimestamp(object) {
      return object.toISOString();
    }
    module2.exports = new Type("tag:yaml.org,2002:timestamp", {
      kind: "scalar",
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/merge.js
var require_merge = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/merge.js"(exports2, module2) {
    "use strict";
    var Type = require_type();
    function resolveYamlMerge(data) {
      return data === "<<" || data === null;
    }
    module2.exports = new Type("tag:yaml.org,2002:merge", {
      kind: "scalar",
      resolve: resolveYamlMerge
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/binary.js
var require_binary = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/binary.js"(exports2, module2) {
    "use strict";
    var NodeBuffer;
    try {
      _require = __require;
      NodeBuffer = _require("buffer").Buffer;
    } catch (__) {
    }
    var _require;
    var Type = require_type();
    var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
    function resolveYamlBinary(data) {
      if (data === null) return false;
      var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        code = map.indexOf(data.charAt(idx));
        if (code > 64) continue;
        if (code < 0) return false;
        bitlen += 6;
      }
      return bitlen % 8 === 0;
    }
    function constructYamlBinary(data) {
      var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map = BASE64_MAP, bits = 0, result = [];
      for (idx = 0; idx < max; idx++) {
        if (idx % 4 === 0 && idx) {
          result.push(bits >> 16 & 255);
          result.push(bits >> 8 & 255);
          result.push(bits & 255);
        }
        bits = bits << 6 | map.indexOf(input.charAt(idx));
      }
      tailbits = max % 4 * 6;
      if (tailbits === 0) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      } else if (tailbits === 18) {
        result.push(bits >> 10 & 255);
        result.push(bits >> 2 & 255);
      } else if (tailbits === 12) {
        result.push(bits >> 4 & 255);
      }
      if (NodeBuffer) {
        return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
      }
      return result;
    }
    function representYamlBinary(object) {
      var result = "", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        if (idx % 3 === 0 && idx) {
          result += map[bits >> 18 & 63];
          result += map[bits >> 12 & 63];
          result += map[bits >> 6 & 63];
          result += map[bits & 63];
        }
        bits = (bits << 8) + object[idx];
      }
      tail = max % 3;
      if (tail === 0) {
        result += map[bits >> 18 & 63];
        result += map[bits >> 12 & 63];
        result += map[bits >> 6 & 63];
        result += map[bits & 63];
      } else if (tail === 2) {
        result += map[bits >> 10 & 63];
        result += map[bits >> 4 & 63];
        result += map[bits << 2 & 63];
        result += map[64];
      } else if (tail === 1) {
        result += map[bits >> 2 & 63];
        result += map[bits << 4 & 63];
        result += map[64];
        result += map[64];
      }
      return result;
    }
    function isBinary(object) {
      return NodeBuffer && NodeBuffer.isBuffer(object);
    }
    module2.exports = new Type("tag:yaml.org,2002:binary", {
      kind: "scalar",
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/omap.js
var require_omap = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/omap.js"(exports2, module2) {
    "use strict";
    var Type = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var _toString = Object.prototype.toString;
    function resolveYamlOmap(data) {
      if (data === null) return true;
      var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        pairHasKey = false;
        if (_toString.call(pair) !== "[object Object]") return false;
        for (pairKey in pair) {
          if (_hasOwnProperty.call(pair, pairKey)) {
            if (!pairHasKey) pairHasKey = true;
            else return false;
          }
        }
        if (!pairHasKey) return false;
        if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
        else return false;
      }
      return true;
    }
    function constructYamlOmap(data) {
      return data !== null ? data : [];
    }
    module2.exports = new Type("tag:yaml.org,2002:omap", {
      kind: "sequence",
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/pairs.js
var require_pairs = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/pairs.js"(exports2, module2) {
    "use strict";
    var Type = require_type();
    var _toString = Object.prototype.toString;
    function resolveYamlPairs(data) {
      if (data === null) return true;
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        if (_toString.call(pair) !== "[object Object]") return false;
        keys = Object.keys(pair);
        if (keys.length !== 1) return false;
        result[index] = [keys[0], pair[keys[0]]];
      }
      return true;
    }
    function constructYamlPairs(data) {
      if (data === null) return [];
      var index, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        keys = Object.keys(pair);
        result[index] = [keys[0], pair[keys[0]]];
      }
      return result;
    }
    module2.exports = new Type("tag:yaml.org,2002:pairs", {
      kind: "sequence",
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/set.js
var require_set = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/set.js"(exports2, module2) {
    "use strict";
    var Type = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    function resolveYamlSet(data) {
      if (data === null) return true;
      var key, object = data;
      for (key in object) {
        if (_hasOwnProperty.call(object, key)) {
          if (object[key] !== null) return false;
        }
      }
      return true;
    }
    function constructYamlSet(data) {
      return data !== null ? data : {};
    }
    module2.exports = new Type("tag:yaml.org,2002:set", {
      kind: "mapping",
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/schema/default_safe.js
var require_default_safe = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/schema/default_safe.js"(exports2, module2) {
    "use strict";
    var Schema = require_schema();
    module2.exports = new Schema({
      include: [
        require_core()
      ],
      implicit: [
        require_timestamp(),
        require_merge()
      ],
      explicit: [
        require_binary(),
        require_omap(),
        require_pairs(),
        require_set()
      ]
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/js/undefined.js
var require_undefined = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/js/undefined.js"(exports2, module2) {
    "use strict";
    var Type = require_type();
    function resolveJavascriptUndefined() {
      return true;
    }
    function constructJavascriptUndefined() {
      return void 0;
    }
    function representJavascriptUndefined() {
      return "";
    }
    function isUndefined(object) {
      return typeof object === "undefined";
    }
    module2.exports = new Type("tag:yaml.org,2002:js/undefined", {
      kind: "scalar",
      resolve: resolveJavascriptUndefined,
      construct: constructJavascriptUndefined,
      predicate: isUndefined,
      represent: representJavascriptUndefined
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/js/regexp.js
var require_regexp = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/js/regexp.js"(exports2, module2) {
    "use strict";
    var Type = require_type();
    function resolveJavascriptRegExp(data) {
      if (data === null) return false;
      if (data.length === 0) return false;
      var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
      if (regexp[0] === "/") {
        if (tail) modifiers = tail[1];
        if (modifiers.length > 3) return false;
        if (regexp[regexp.length - modifiers.length - 1] !== "/") return false;
      }
      return true;
    }
    function constructJavascriptRegExp(data) {
      var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
      if (regexp[0] === "/") {
        if (tail) modifiers = tail[1];
        regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
      }
      return new RegExp(regexp, modifiers);
    }
    function representJavascriptRegExp(object) {
      var result = "/" + object.source + "/";
      if (object.global) result += "g";
      if (object.multiline) result += "m";
      if (object.ignoreCase) result += "i";
      return result;
    }
    function isRegExp(object) {
      return Object.prototype.toString.call(object) === "[object RegExp]";
    }
    module2.exports = new Type("tag:yaml.org,2002:js/regexp", {
      kind: "scalar",
      resolve: resolveJavascriptRegExp,
      construct: constructJavascriptRegExp,
      predicate: isRegExp,
      represent: representJavascriptRegExp
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/type/js/function.js
var require_function = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/type/js/function.js"(exports2, module2) {
    "use strict";
    var esprima;
    try {
      _require = __require;
      esprima = _require("esprima");
    } catch (_) {
      if (typeof window !== "undefined") esprima = window.esprima;
    }
    var _require;
    var Type = require_type();
    function resolveJavascriptFunction(data) {
      if (data === null) return false;
      try {
        var source = "(" + data + ")", ast = esprima.parse(source, { range: true });
        if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    function constructJavascriptFunction(data) {
      var source = "(" + data + ")", ast = esprima.parse(source, { range: true }), params = [], body;
      if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
        throw new Error("Failed to resolve function");
      }
      ast.body[0].expression.params.forEach(function(param) {
        params.push(param.name);
      });
      body = ast.body[0].expression.body.range;
      if (ast.body[0].expression.body.type === "BlockStatement") {
        return new Function(params, source.slice(body[0] + 1, body[1] - 1));
      }
      return new Function(params, "return " + source.slice(body[0], body[1]));
    }
    function representJavascriptFunction(object) {
      return object.toString();
    }
    function isFunction(object) {
      return Object.prototype.toString.call(object) === "[object Function]";
    }
    module2.exports = new Type("tag:yaml.org,2002:js/function", {
      kind: "scalar",
      resolve: resolveJavascriptFunction,
      construct: constructJavascriptFunction,
      predicate: isFunction,
      represent: representJavascriptFunction
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/schema/default_full.js
var require_default_full = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/schema/default_full.js"(exports2, module2) {
    "use strict";
    var Schema = require_schema();
    module2.exports = Schema.DEFAULT = new Schema({
      include: [
        require_default_safe()
      ],
      explicit: [
        require_undefined(),
        require_regexp(),
        require_function()
      ]
    });
  }
});

// node_modules/js-yaml/lib/js-yaml/loader.js
var require_loader = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/loader.js"(exports2, module2) {
    "use strict";
    var common = require_common();
    var YAMLException = require_exception();
    var Mark = require_mark();
    var DEFAULT_SAFE_SCHEMA = require_default_safe();
    var DEFAULT_FULL_SCHEMA = require_default_full();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CONTEXT_FLOW_IN = 1;
    var CONTEXT_FLOW_OUT = 2;
    var CONTEXT_BLOCK_IN = 3;
    var CONTEXT_BLOCK_OUT = 4;
    var CHOMPING_CLIP = 1;
    var CHOMPING_STRIP = 2;
    var CHOMPING_KEEP = 3;
    var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function is_EOL(c) {
      return c === 10 || c === 13;
    }
    function is_WHITE_SPACE(c) {
      return c === 9 || c === 32;
    }
    function is_WS_OR_EOL(c) {
      return c === 9 || c === 32 || c === 10 || c === 13;
    }
    function is_FLOW_INDICATOR(c) {
      return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
    }
    function fromHexCode(c) {
      var lc;
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      lc = c | 32;
      if (97 <= lc && lc <= 102) {
        return lc - 97 + 10;
      }
      return -1;
    }
    function escapedHexLen(c) {
      if (c === 120) {
        return 2;
      }
      if (c === 117) {
        return 4;
      }
      if (c === 85) {
        return 8;
      }
      return 0;
    }
    function fromDecimalCode(c) {
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      return -1;
    }
    function simpleEscapeSequence(c) {
      return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
    }
    function charFromCodepoint(c) {
      if (c <= 65535) {
        return String.fromCharCode(c);
      }
      return String.fromCharCode(
        (c - 65536 >> 10) + 55296,
        (c - 65536 & 1023) + 56320
      );
    }
    var simpleEscapeCheck = new Array(256);
    var simpleEscapeMap = new Array(256);
    for (i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }
    var i;
    function State(input, options2) {
      this.input = input;
      this.filename = options2["filename"] || null;
      this.schema = options2["schema"] || DEFAULT_FULL_SCHEMA;
      this.onWarning = options2["onWarning"] || null;
      this.legacy = options2["legacy"] || false;
      this.json = options2["json"] || false;
      this.listener = options2["listener"] || null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.typeMap = this.schema.compiledTypeMap;
      this.length = input.length;
      this.position = 0;
      this.line = 0;
      this.lineStart = 0;
      this.lineIndent = 0;
      this.documents = [];
    }
    function generateError(state, message) {
      return new YAMLException(
        message,
        new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart)
      );
    }
    function throwError(state, message) {
      throw generateError(state, message);
    }
    function throwWarning(state, message) {
      if (state.onWarning) {
        state.onWarning.call(null, generateError(state, message));
      }
    }
    var directiveHandlers = {
      YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;
        if (state.version !== null) {
          throwError(state, "duplication of %YAML directive");
        }
        if (args.length !== 1) {
          throwError(state, "YAML directive accepts exactly one argument");
        }
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match === null) {
          throwError(state, "ill-formed argument of the YAML directive");
        }
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (major !== 1) {
          throwError(state, "unacceptable YAML version of the document");
        }
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) {
          throwWarning(state, "unsupported YAML version of the document");
        }
      },
      TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (args.length !== 2) {
          throwError(state, "TAG directive accepts exactly two arguments");
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (_hasOwnProperty.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        state.tagMap[handle] = prefix;
      }
    };
    function captureSegment(state, start, end, checkJson) {
      var _position, _length, _character, _result;
      if (start < end) {
        _result = state.input.slice(start, end);
        if (checkJson) {
          for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
            _character = _result.charCodeAt(_position);
            if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
              throwError(state, "expected valid JSON character");
            }
          }
        } else if (PATTERN_NON_PRINTABLE.test(_result)) {
          throwError(state, "the stream contains non-printable characters");
        }
        state.result += _result;
      }
    }
    function mergeMappings(state, destination, source, overridableKeys) {
      var sourceKeys, key, index, quantity;
      if (!common.isObject(source)) {
        throwError(state, "cannot merge mappings; the provided source object is unacceptable");
      }
      sourceKeys = Object.keys(source);
      for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
        key = sourceKeys[index];
        if (!_hasOwnProperty.call(destination, key)) {
          destination[key] = source[key];
          overridableKeys[key] = true;
        }
      }
    }
    function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
      var index, quantity;
      if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);
        for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
          if (Array.isArray(keyNode[index])) {
            throwError(state, "nested arrays are not supported inside keys");
          }
          if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
            keyNode[index] = "[object Object]";
          }
        }
      }
      if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
        keyNode = "[object Object]";
      }
      keyNode = String(keyNode);
      if (_result === null) {
        _result = {};
      }
      if (keyTag === "tag:yaml.org,2002:merge") {
        if (Array.isArray(valueNode)) {
          for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
            mergeMappings(state, _result, valueNode[index], overridableKeys);
          }
        } else {
          mergeMappings(state, _result, valueNode, overridableKeys);
        }
      } else {
        if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
          state.line = startLine || state.line;
          state.position = startPos || state.position;
          throwError(state, "duplicated mapping key");
        }
        _result[keyNode] = valueNode;
        delete overridableKeys[keyNode];
      }
      return _result;
    }
    function readLineBreak(state) {
      var ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 10) {
        state.position++;
      } else if (ch === 13) {
        state.position++;
        if (state.input.charCodeAt(state.position) === 10) {
          state.position++;
        }
      } else {
        throwError(state, "a line break is expected");
      }
      state.line += 1;
      state.lineStart = state.position;
    }
    function skipSeparationSpace(state, allowComments, checkIndent) {
      var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (allowComments && ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 10 && ch !== 13 && ch !== 0);
        }
        if (is_EOL(ch)) {
          readLineBreak(state);
          ch = state.input.charCodeAt(state.position);
          lineBreaks++;
          state.lineIndent = 0;
          while (ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
        } else {
          break;
        }
      }
      if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
        throwWarning(state, "deficient indentation");
      }
      return lineBreaks;
    }
    function testDocumentSeparator(state) {
      var _position = state.position, ch;
      ch = state.input.charCodeAt(_position);
      if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
        _position += 3;
        ch = state.input.charCodeAt(_position);
        if (ch === 0 || is_WS_OR_EOL(ch)) {
          return true;
        }
      }
      return false;
    }
    function writeFoldedLines(state, count) {
      if (count === 1) {
        state.result += " ";
      } else if (count > 1) {
        state.result += common.repeat("\n", count - 1);
      }
    }
    function readPlainScalar(state, nodeIndent, withinFlowCollection) {
      var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
      ch = state.input.charCodeAt(state.position);
      if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
        return false;
      }
      if (ch === 63 || ch === 45) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          return false;
        }
      }
      state.kind = "scalar";
      state.result = "";
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
      while (ch !== 0) {
        if (ch === 58) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            break;
          }
        } else if (ch === 35) {
          preceding = state.input.charCodeAt(state.position - 1);
          if (is_WS_OR_EOL(preceding)) {
            break;
          }
        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
          break;
        } else if (is_EOL(ch)) {
          _line = state.line;
          _lineStart = state.lineStart;
          _lineIndent = state.lineIndent;
          skipSeparationSpace(state, false, -1);
          if (state.lineIndent >= nodeIndent) {
            hasPendingContent = true;
            ch = state.input.charCodeAt(state.position);
            continue;
          } else {
            state.position = captureEnd;
            state.line = _line;
            state.lineStart = _lineStart;
            state.lineIndent = _lineIndent;
            break;
          }
        }
        if (hasPendingContent) {
          captureSegment(state, captureStart, captureEnd, false);
          writeFoldedLines(state, state.line - _line);
          captureStart = captureEnd = state.position;
          hasPendingContent = false;
        }
        if (!is_WHITE_SPACE(ch)) {
          captureEnd = state.position + 1;
        }
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment(state, captureStart, captureEnd, false);
      if (state.result) {
        return true;
      }
      state.kind = _kind;
      state.result = _result;
      return false;
    }
    function readSingleQuotedScalar(state, nodeIndent) {
      var ch, captureStart, captureEnd;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 39) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 39) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (ch === 39) {
            captureStart = state.position;
            state.position++;
            captureEnd = state.position;
          } else {
            return true;
          }
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a single quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a single quoted scalar");
    }
    function readDoubleQuotedScalar(state, nodeIndent) {
      var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 34) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 34) {
          captureSegment(state, captureStart, state.position, true);
          state.position++;
          return true;
        } else if (ch === 92) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (is_EOL(ch)) {
            skipSeparationSpace(state, false, nodeIndent);
          } else if (ch < 256 && simpleEscapeCheck[ch]) {
            state.result += simpleEscapeMap[ch];
            state.position++;
          } else if ((tmp = escapedHexLen(ch)) > 0) {
            hexLength = tmp;
            hexResult = 0;
            for (; hexLength > 0; hexLength--) {
              ch = state.input.charCodeAt(++state.position);
              if ((tmp = fromHexCode(ch)) >= 0) {
                hexResult = (hexResult << 4) + tmp;
              } else {
                throwError(state, "expected hexadecimal character");
              }
            }
            state.result += charFromCodepoint(hexResult);
            state.position++;
          } else {
            throwError(state, "unknown escape sequence");
          }
          captureStart = captureEnd = state.position;
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a double quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a double quoted scalar");
    }
    function readFlowCollection(state, nodeIndent) {
      var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = {}, keyNode, keyTag, valueNode, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 91) {
        terminator = 93;
        isMapping = false;
        _result = [];
      } else if (ch === 123) {
        terminator = 125;
        isMapping = true;
        _result = {};
      } else {
        return false;
      }
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(++state.position);
      while (ch !== 0) {
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === terminator) {
          state.position++;
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = isMapping ? "mapping" : "sequence";
          state.result = _result;
          return true;
        } else if (!readNext) {
          throwError(state, "missed comma between flow collection entries");
        }
        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;
        if (ch === 63) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following)) {
            isPair = isExplicitPair = true;
            state.position++;
            skipSeparationSpace(state, true, nodeIndent);
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if ((isExplicitPair || state.line === _line) && ch === 58) {
          isPair = true;
          ch = state.input.charCodeAt(++state.position);
          skipSeparationSpace(state, true, nodeIndent);
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          valueNode = state.result;
        }
        if (isMapping) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
        } else if (isPair) {
          _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
        } else {
          _result.push(keyNode);
        }
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === 44) {
          readNext = true;
          ch = state.input.charCodeAt(++state.position);
        } else {
          readNext = false;
        }
      }
      throwError(state, "unexpected end of the stream within a flow collection");
    }
    function readBlockScalar(state, nodeIndent) {
      var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 124) {
        folding = false;
      } else if (ch === 62) {
        folding = true;
      } else {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      while (ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
        if (ch === 43 || ch === 45) {
          if (CHOMPING_CLIP === chomping) {
            chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
          } else {
            throwError(state, "repeat of a chomping mode identifier");
          }
        } else if ((tmp = fromDecimalCode(ch)) >= 0) {
          if (tmp === 0) {
            throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
          } else if (!detectedIndent) {
            textIndent = nodeIndent + tmp - 1;
            detectedIndent = true;
          } else {
            throwError(state, "repeat of an indentation width identifier");
          }
        } else {
          break;
        }
      }
      if (is_WHITE_SPACE(ch)) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (is_WHITE_SPACE(ch));
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (!is_EOL(ch) && ch !== 0);
        }
      }
      while (ch !== 0) {
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);
        while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
        if (!detectedIndent && state.lineIndent > textIndent) {
          textIndent = state.lineIndent;
        }
        if (is_EOL(ch)) {
          emptyLines++;
          continue;
        }
        if (state.lineIndent < textIndent) {
          if (chomping === CHOMPING_KEEP) {
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (chomping === CHOMPING_CLIP) {
            if (didReadContent) {
              state.result += "\n";
            }
          }
          break;
        }
        if (folding) {
          if (is_WHITE_SPACE(ch)) {
            atMoreIndented = true;
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (atMoreIndented) {
            atMoreIndented = false;
            state.result += common.repeat("\n", emptyLines + 1);
          } else if (emptyLines === 0) {
            if (didReadContent) {
              state.result += " ";
            }
          } else {
            state.result += common.repeat("\n", emptyLines);
          }
        } else {
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        }
        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;
        while (!is_EOL(ch) && ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, state.position, false);
      }
      return true;
    }
    function readBlockSequence(state, nodeIndent) {
      var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (ch !== 45) {
          break;
        }
        following = state.input.charCodeAt(state.position + 1);
        if (!is_WS_OR_EOL(following)) {
          break;
        }
        detected = true;
        state.position++;
        if (skipSeparationSpace(state, true, -1)) {
          if (state.lineIndent <= nodeIndent) {
            _result.push(null);
            ch = state.input.charCodeAt(state.position);
            continue;
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        _result.push(state.result);
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a sequence entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "sequence";
        state.result = _result;
        return true;
      }
      return false;
    }
    function readBlockMapping(state, nodeIndent, flowIndent) {
      var following, allowCompact, _line, _pos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = {}, keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line;
        _pos = state.position;
        if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
          if (ch === 63) {
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = true;
            allowCompact = true;
          } else if (atExplicitKey) {
            atExplicitKey = false;
            allowCompact = true;
          } else {
            throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
          }
          state.position += 1;
          ch = following;
        } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
          if (state.line === _line) {
            ch = state.input.charCodeAt(state.position);
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 58) {
              ch = state.input.charCodeAt(++state.position);
              if (!is_WS_OR_EOL(ch)) {
                throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
              }
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = false;
              allowCompact = false;
              keyTag = state.tag;
              keyNode = state.result;
            } else if (detected) {
              throwError(state, "can not read an implicit mapping pair; a colon is missed");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else if (detected) {
            throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        } else {
          break;
        }
        if (state.line === _line || state.lineIndent > nodeIndent) {
          if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
            if (atExplicitKey) {
              keyNode = state.result;
            } else {
              valueNode = state.result;
            }
          }
          if (!atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
            keyTag = keyNode = valueNode = null;
          }
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
        }
        if (state.lineIndent > nodeIndent && ch !== 0) {
          throwError(state, "bad indentation of a mapping entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "mapping";
        state.result = _result;
      }
      return detected;
    }
    function readTagProperty(state) {
      var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 33) return false;
      if (state.tag !== null) {
        throwError(state, "duplication of a tag property");
      }
      ch = state.input.charCodeAt(++state.position);
      if (ch === 60) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);
      } else if (ch === 33) {
        isNamed = true;
        tagHandle = "!!";
        ch = state.input.charCodeAt(++state.position);
      } else {
        tagHandle = "!";
      }
      _position = state.position;
      if (isVerbatim) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && ch !== 62);
        if (state.position < state.length) {
          tagName = state.input.slice(_position, state.position);
          ch = state.input.charCodeAt(++state.position);
        } else {
          throwError(state, "unexpected end of the stream within a verbatim tag");
        }
      } else {
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          if (ch === 33) {
            if (!isNamed) {
              tagHandle = state.input.slice(_position - 1, state.position + 1);
              if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                throwError(state, "named tag handle cannot contain such characters");
              }
              isNamed = true;
              _position = state.position + 1;
            } else {
              throwError(state, "tag suffix cannot contain exclamation marks");
            }
          }
          ch = state.input.charCodeAt(++state.position);
        }
        tagName = state.input.slice(_position, state.position);
        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
          throwError(state, "tag suffix cannot contain flow indicator characters");
        }
      }
      if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError(state, "tag name cannot contain such characters: " + tagName);
      }
      if (isVerbatim) {
        state.tag = tagName;
      } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;
      } else if (tagHandle === "!") {
        state.tag = "!" + tagName;
      } else if (tagHandle === "!!") {
        state.tag = "tag:yaml.org,2002:" + tagName;
      } else {
        throwError(state, 'undeclared tag handle "' + tagHandle + '"');
      }
      return true;
    }
    function readAnchorProperty(state) {
      var _position, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 38) return false;
      if (state.anchor !== null) {
        throwError(state, "duplication of an anchor property");
      }
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an anchor node must contain at least one character");
      }
      state.anchor = state.input.slice(_position, state.position);
      return true;
    }
    function readAlias(state) {
      var _position, alias, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 42) return false;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an alias node must contain at least one character");
      }
      alias = state.input.slice(_position, state.position);
      if (!_hasOwnProperty.call(state.anchorMap, alias)) {
        throwError(state, 'unidentified alias "' + alias + '"');
      }
      state.result = state.anchorMap[alias];
      skipSeparationSpace(state, true, -1);
      return true;
    }
    function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
      var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type, flowIndent, blockIndent;
      if (state.listener !== null) {
        state.listener("open", state);
      }
      state.tag = null;
      state.anchor = null;
      state.kind = null;
      state.result = null;
      allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
      if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        }
      }
      if (indentStatus === 1) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          } else {
            allowBlockCollections = false;
          }
        }
      }
      if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
      }
      if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
          flowIndent = parentIndent;
        } else {
          flowIndent = parentIndent + 1;
        }
        blockIndent = state.position - state.lineStart;
        if (indentStatus === 1) {
          if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
            hasContent = true;
          } else {
            if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
              hasContent = true;
            } else if (readAlias(state)) {
              hasContent = true;
              if (state.tag !== null || state.anchor !== null) {
                throwError(state, "alias node should not have any properties");
              }
            } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
              hasContent = true;
              if (state.tag === null) {
                state.tag = "?";
              }
            }
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else if (indentStatus === 0) {
          hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
      }
      if (state.tag !== null && state.tag !== "!") {
        if (state.tag === "?") {
          if (state.result !== null && state.kind !== "scalar") {
            throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
          }
          for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
            type = state.implicitTypes[typeIndex];
            if (type.resolve(state.result)) {
              state.result = type.construct(state.result);
              state.tag = type.tag;
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
              break;
            }
          }
        } else if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
          type = state.typeMap[state.kind || "fallback"][state.tag];
          if (state.result !== null && type.kind !== state.kind) {
            throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
          }
          if (!type.resolve(state.result)) {
            throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
          } else {
            state.result = type.construct(state.result);
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else {
          throwError(state, "unknown tag !<" + state.tag + ">");
        }
      }
      if (state.listener !== null) {
        state.listener("close", state);
      }
      return state.tag !== null || state.anchor !== null || hasContent;
    }
    function readDocument(state) {
      var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
      state.version = null;
      state.checkLineBreaks = state.legacy;
      state.tagMap = {};
      state.anchorMap = {};
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if (state.lineIndent > 0 || ch !== 37) {
          break;
        }
        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];
        if (directiveName.length < 1) {
          throwError(state, "directive name must not be less than one character in length");
        }
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 0 && !is_EOL(ch));
            break;
          }
          if (is_EOL(ch)) break;
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveArgs.push(state.input.slice(_position, state.position));
        }
        if (ch !== 0) readLineBreak(state);
        if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
          directiveHandlers[directiveName](state, directiveName, directiveArgs);
        } else {
          throwWarning(state, 'unknown document directive "' + directiveName + '"');
        }
      }
      skipSeparationSpace(state, true, -1);
      if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      } else if (hasDirectives) {
        throwError(state, "directives end mark is expected");
      }
      composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
      skipSeparationSpace(state, true, -1);
      if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, "non-ASCII line breaks are interpreted as content");
      }
      state.documents.push(state.result);
      if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (state.input.charCodeAt(state.position) === 46) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        }
        return;
      }
      if (state.position < state.length - 1) {
        throwError(state, "end of the stream or a document separator is expected");
      } else {
        return;
      }
    }
    function loadDocuments(input, options2) {
      input = String(input);
      options2 = options2 || {};
      if (input.length !== 0) {
        if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
          input += "\n";
        }
        if (input.charCodeAt(0) === 65279) {
          input = input.slice(1);
        }
      }
      var state = new State(input, options2);
      var nullpos = input.indexOf("\0");
      if (nullpos !== -1) {
        state.position = nullpos;
        throwError(state, "null byte is not allowed in input");
      }
      state.input += "\0";
      while (state.input.charCodeAt(state.position) === 32) {
        state.lineIndent += 1;
        state.position += 1;
      }
      while (state.position < state.length - 1) {
        readDocument(state);
      }
      return state.documents;
    }
    function loadAll(input, iterator, options2) {
      if (iterator !== null && typeof iterator === "object" && typeof options2 === "undefined") {
        options2 = iterator;
        iterator = null;
      }
      var documents = loadDocuments(input, options2);
      if (typeof iterator !== "function") {
        return documents;
      }
      for (var index = 0, length = documents.length; index < length; index += 1) {
        iterator(documents[index]);
      }
    }
    function load(input, options2) {
      var documents = loadDocuments(input, options2);
      if (documents.length === 0) {
        return void 0;
      } else if (documents.length === 1) {
        return documents[0];
      }
      throw new YAMLException("expected a single document in the stream, but found more");
    }
    function safeLoadAll(input, iterator, options2) {
      if (typeof iterator === "object" && iterator !== null && typeof options2 === "undefined") {
        options2 = iterator;
        iterator = null;
      }
      return loadAll(input, iterator, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options2));
    }
    function safeLoad(input, options2) {
      return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options2));
    }
    module2.exports.loadAll = loadAll;
    module2.exports.load = load;
    module2.exports.safeLoadAll = safeLoadAll;
    module2.exports.safeLoad = safeLoad;
  }
});

// node_modules/js-yaml/lib/js-yaml/dumper.js
var require_dumper = __commonJS({
  "node_modules/js-yaml/lib/js-yaml/dumper.js"(exports2, module2) {
    "use strict";
    var common = require_common();
    var YAMLException = require_exception();
    var DEFAULT_FULL_SCHEMA = require_default_full();
    var DEFAULT_SAFE_SCHEMA = require_default_safe();
    var _toString = Object.prototype.toString;
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CHAR_TAB = 9;
    var CHAR_LINE_FEED = 10;
    var CHAR_CARRIAGE_RETURN = 13;
    var CHAR_SPACE = 32;
    var CHAR_EXCLAMATION = 33;
    var CHAR_DOUBLE_QUOTE = 34;
    var CHAR_SHARP = 35;
    var CHAR_PERCENT = 37;
    var CHAR_AMPERSAND = 38;
    var CHAR_SINGLE_QUOTE = 39;
    var CHAR_ASTERISK = 42;
    var CHAR_COMMA = 44;
    var CHAR_MINUS = 45;
    var CHAR_COLON = 58;
    var CHAR_EQUALS = 61;
    var CHAR_GREATER_THAN = 62;
    var CHAR_QUESTION = 63;
    var CHAR_COMMERCIAL_AT = 64;
    var CHAR_LEFT_SQUARE_BRACKET = 91;
    var CHAR_RIGHT_SQUARE_BRACKET = 93;
    var CHAR_GRAVE_ACCENT = 96;
    var CHAR_LEFT_CURLY_BRACKET = 123;
    var CHAR_VERTICAL_LINE = 124;
    var CHAR_RIGHT_CURLY_BRACKET = 125;
    var ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0] = "\\0";
    ESCAPE_SEQUENCES[7] = "\\a";
    ESCAPE_SEQUENCES[8] = "\\b";
    ESCAPE_SEQUENCES[9] = "\\t";
    ESCAPE_SEQUENCES[10] = "\\n";
    ESCAPE_SEQUENCES[11] = "\\v";
    ESCAPE_SEQUENCES[12] = "\\f";
    ESCAPE_SEQUENCES[13] = "\\r";
    ESCAPE_SEQUENCES[27] = "\\e";
    ESCAPE_SEQUENCES[34] = '\\"';
    ESCAPE_SEQUENCES[92] = "\\\\";
    ESCAPE_SEQUENCES[133] = "\\N";
    ESCAPE_SEQUENCES[160] = "\\_";
    ESCAPE_SEQUENCES[8232] = "\\L";
    ESCAPE_SEQUENCES[8233] = "\\P";
    var DEPRECATED_BOOLEANS_SYNTAX = [
      "y",
      "Y",
      "yes",
      "Yes",
      "YES",
      "on",
      "On",
      "ON",
      "n",
      "N",
      "no",
      "No",
      "NO",
      "off",
      "Off",
      "OFF"
    ];
    function compileStyleMap(schema, map) {
      var result, keys, index, length, tag, style, type;
      if (map === null) return {};
      result = {};
      keys = Object.keys(map);
      for (index = 0, length = keys.length; index < length; index += 1) {
        tag = keys[index];
        style = String(map[tag]);
        if (tag.slice(0, 2) === "!!") {
          tag = "tag:yaml.org,2002:" + tag.slice(2);
        }
        type = schema.compiledTypeMap["fallback"][tag];
        if (type && _hasOwnProperty.call(type.styleAliases, style)) {
          style = type.styleAliases[style];
        }
        result[tag] = style;
      }
      return result;
    }
    function encodeHex(character) {
      var string, handle, length;
      string = character.toString(16).toUpperCase();
      if (character <= 255) {
        handle = "x";
        length = 2;
      } else if (character <= 65535) {
        handle = "u";
        length = 4;
      } else if (character <= 4294967295) {
        handle = "U";
        length = 8;
      } else {
        throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
      }
      return "\\" + handle + common.repeat("0", length - string.length) + string;
    }
    function State(options2) {
      this.schema = options2["schema"] || DEFAULT_FULL_SCHEMA;
      this.indent = Math.max(1, options2["indent"] || 2);
      this.noArrayIndent = options2["noArrayIndent"] || false;
      this.skipInvalid = options2["skipInvalid"] || false;
      this.flowLevel = common.isNothing(options2["flowLevel"]) ? -1 : options2["flowLevel"];
      this.styleMap = compileStyleMap(this.schema, options2["styles"] || null);
      this.sortKeys = options2["sortKeys"] || false;
      this.lineWidth = options2["lineWidth"] || 80;
      this.noRefs = options2["noRefs"] || false;
      this.noCompatMode = options2["noCompatMode"] || false;
      this.condenseFlow = options2["condenseFlow"] || false;
      this.implicitTypes = this.schema.compiledImplicit;
      this.explicitTypes = this.schema.compiledExplicit;
      this.tag = null;
      this.result = "";
      this.duplicates = [];
      this.usedDuplicates = null;
    }
    function indentString(string, spaces) {
      var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
      while (position < length) {
        next = string.indexOf("\n", position);
        if (next === -1) {
          line = string.slice(position);
          position = length;
        } else {
          line = string.slice(position, next + 1);
          position = next + 1;
        }
        if (line.length && line !== "\n") result += ind;
        result += line;
      }
      return result;
    }
    function generateNextLine(state, level) {
      return "\n" + common.repeat(" ", state.indent * level);
    }
    function testImplicitResolving(state, str2) {
      var index, length, type;
      for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
        type = state.implicitTypes[index];
        if (type.resolve(str2)) {
          return true;
        }
      }
      return false;
    }
    function isWhitespace(c) {
      return c === CHAR_SPACE || c === CHAR_TAB;
    }
    function isPrintable(c) {
      return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== 65279 || 65536 <= c && c <= 1114111;
    }
    function isNsChar(c) {
      return isPrintable(c) && !isWhitespace(c) && c !== 65279 && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
    }
    function isPlainSafe(c, prev) {
      return isPrintable(c) && c !== 65279 && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));
    }
    function isPlainSafeFirst(c) {
      return isPrintable(c) && c !== 65279 && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
    }
    function needIndentIndicator(string) {
      var leadingSpaceRe = /^\n* /;
      return leadingSpaceRe.test(string);
    }
    var STYLE_PLAIN = 1;
    var STYLE_SINGLE = 2;
    var STYLE_LITERAL = 3;
    var STYLE_FOLDED = 4;
    var STYLE_DOUBLE = 5;
    function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
      var i;
      var char, prev_char;
      var hasLineBreak = false;
      var hasFoldableLine = false;
      var shouldTrackWidth = lineWidth !== -1;
      var previousLineBreak = -1;
      var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));
      if (singleLineOnly) {
        for (i = 0; i < string.length; i++) {
          char = string.charCodeAt(i);
          if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
          plain = plain && isPlainSafe(char, prev_char);
        }
      } else {
        for (i = 0; i < string.length; i++) {
          char = string.charCodeAt(i);
          if (char === CHAR_LINE_FEED) {
            hasLineBreak = true;
            if (shouldTrackWidth) {
              hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
              i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
              previousLineBreak = i;
            }
          } else if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
          plain = plain && isPlainSafe(char, prev_char);
        }
        hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
      }
      if (!hasLineBreak && !hasFoldableLine) {
        return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;
      }
      if (indentPerLevel > 9 && needIndentIndicator(string)) {
        return STYLE_DOUBLE;
      }
      return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
    }
    function writeScalar(state, string, level, iskey) {
      state.dump = function() {
        if (string.length === 0) {
          return "''";
        }
        if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
          return "'" + string + "'";
        }
        var indent = state.indent * Math.max(1, level);
        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
        function testAmbiguity(string2) {
          return testImplicitResolving(state, string2);
        }
        switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
          case STYLE_PLAIN:
            return string;
          case STYLE_SINGLE:
            return "'" + string.replace(/'/g, "''") + "'";
          case STYLE_LITERAL:
            return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
          case STYLE_FOLDED:
            return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
          case STYLE_DOUBLE:
            return '"' + escapeString(string, lineWidth) + '"';
          default:
            throw new YAMLException("impossible error: invalid scalar style");
        }
      }();
    }
    function blockHeader(string, indentPerLevel) {
      var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
      var clip = string[string.length - 1] === "\n";
      var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
      var chomp = keep ? "+" : clip ? "" : "-";
      return indentIndicator + chomp + "\n";
    }
    function dropEndingNewline(string) {
      return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
    }
    function foldString(string, width) {
      var lineRe = /(\n+)([^\n]*)/g;
      var result = function() {
        var nextLF = string.indexOf("\n");
        nextLF = nextLF !== -1 ? nextLF : string.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string.slice(0, nextLF), width);
      }();
      var prevMoreIndented = string[0] === "\n" || string[0] === " ";
      var moreIndented;
      var match;
      while (match = lineRe.exec(string)) {
        var prefix = match[1], line = match[2];
        moreIndented = line[0] === " ";
        result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
        prevMoreIndented = moreIndented;
      }
      return result;
    }
    function foldLine(line, width) {
      if (line === "" || line[0] === " ") return line;
      var breakRe = / [^ ]/g;
      var match;
      var start = 0, end, curr = 0, next = 0;
      var result = "";
      while (match = breakRe.exec(line)) {
        next = match.index;
        if (next - start > width) {
          end = curr > start ? curr : next;
          result += "\n" + line.slice(start, end);
          start = end + 1;
        }
        curr = next;
      }
      result += "\n";
      if (line.length - start > width && curr > start) {
        result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
      } else {
        result += line.slice(start);
      }
      return result.slice(1);
    }
    function escapeString(string) {
      var result = "";
      var char, nextChar;
      var escapeSeq;
      for (var i = 0; i < string.length; i++) {
        char = string.charCodeAt(i);
        if (char >= 55296 && char <= 56319) {
          nextChar = string.charCodeAt(i + 1);
          if (nextChar >= 56320 && nextChar <= 57343) {
            result += encodeHex((char - 55296) * 1024 + nextChar - 56320 + 65536);
            i++;
            continue;
          }
        }
        escapeSeq = ESCAPE_SEQUENCES[char];
        result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);
      }
      return result;
    }
    function writeFlowSequence(state, level, object) {
      var _result = "", _tag = state.tag, index, length;
      for (index = 0, length = object.length; index < length; index += 1) {
        if (writeNode(state, level, object[index], false, false)) {
          if (index !== 0) _result += "," + (!state.condenseFlow ? " " : "");
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = "[" + _result + "]";
    }
    function writeBlockSequence(state, level, object, compact) {
      var _result = "", _tag = state.tag, index, length;
      for (index = 0, length = object.length; index < length; index += 1) {
        if (writeNode(state, level + 1, object[index], true, true)) {
          if (!compact || index !== 0) {
            _result += generateNextLine(state, level);
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            _result += "-";
          } else {
            _result += "- ";
          }
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = _result || "[]";
    }
    function writeFlowMapping(state, level, object) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (index !== 0) pairBuffer += ", ";
        if (state.condenseFlow) pairBuffer += '"';
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (!writeNode(state, level, objectKey, false, false)) {
          continue;
        }
        if (state.dump.length > 1024) pairBuffer += "? ";
        pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
        if (!writeNode(state, level, objectValue, false, false)) {
          continue;
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = "{" + _result + "}";
    }
    function writeBlockMapping(state, level, object, compact) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
      if (state.sortKeys === true) {
        objectKeyList.sort();
      } else if (typeof state.sortKeys === "function") {
        objectKeyList.sort(state.sortKeys);
      } else if (state.sortKeys) {
        throw new YAMLException("sortKeys must be a boolean or a function");
      }
      for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = "";
        if (!compact || index !== 0) {
          pairBuffer += generateNextLine(state, level);
        }
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (!writeNode(state, level + 1, objectKey, true, true, true)) {
          continue;
        }
        explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
        if (explicitPair) {
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += "?";
          } else {
            pairBuffer += "? ";
          }
        }
        pairBuffer += state.dump;
        if (explicitPair) {
          pairBuffer += generateNextLine(state, level);
        }
        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
          continue;
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += ":";
        } else {
          pairBuffer += ": ";
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = _result || "{}";
    }
    function detectType(state, object, explicit) {
      var _result, typeList, index, length, type, style;
      typeList = explicit ? state.explicitTypes : state.implicitTypes;
      for (index = 0, length = typeList.length; index < length; index += 1) {
        type = typeList[index];
        if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
          state.tag = explicit ? type.tag : "?";
          if (type.represent) {
            style = state.styleMap[type.tag] || type.defaultStyle;
            if (_toString.call(type.represent) === "[object Function]") {
              _result = type.represent(object, style);
            } else if (_hasOwnProperty.call(type.represent, style)) {
              _result = type.represent[style](object, style);
            } else {
              throw new YAMLException("!<" + type.tag + '> tag resolver accepts not "' + style + '" style');
            }
            state.dump = _result;
          }
          return true;
        }
      }
      return false;
    }
    function writeNode(state, level, object, block, compact, iskey) {
      state.tag = null;
      state.dump = object;
      if (!detectType(state, object, false)) {
        detectType(state, object, true);
      }
      var type = _toString.call(state.dump);
      if (block) {
        block = state.flowLevel < 0 || state.flowLevel > level;
      }
      var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
      if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
      }
      if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
        compact = false;
      }
      if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = "*ref_" + duplicateIndex;
      } else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
          state.usedDuplicates[duplicateIndex] = true;
        }
        if (type === "[object Object]") {
          if (block && Object.keys(state.dump).length !== 0) {
            writeBlockMapping(state, level, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowMapping(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object Array]") {
          var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;
          if (block && state.dump.length !== 0) {
            writeBlockSequence(state, arrayLevel, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowSequence(state, arrayLevel, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object String]") {
          if (state.tag !== "?") {
            writeScalar(state, state.dump, level, iskey);
          }
        } else {
          if (state.skipInvalid) return false;
          throw new YAMLException("unacceptable kind of an object to dump " + type);
        }
        if (state.tag !== null && state.tag !== "?") {
          state.dump = "!<" + state.tag + "> " + state.dump;
        }
      }
      return true;
    }
    function getDuplicateReferences(object, state) {
      var objects = [], duplicatesIndexes = [], index, length;
      inspectNode(object, objects, duplicatesIndexes);
      for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index]]);
      }
      state.usedDuplicates = new Array(length);
    }
    function inspectNode(object, objects, duplicatesIndexes) {
      var objectKeyList, index, length;
      if (object !== null && typeof object === "object") {
        index = objects.indexOf(object);
        if (index !== -1) {
          if (duplicatesIndexes.indexOf(index) === -1) {
            duplicatesIndexes.push(index);
          }
        } else {
          objects.push(object);
          if (Array.isArray(object)) {
            for (index = 0, length = object.length; index < length; index += 1) {
              inspectNode(object[index], objects, duplicatesIndexes);
            }
          } else {
            objectKeyList = Object.keys(object);
            for (index = 0, length = objectKeyList.length; index < length; index += 1) {
              inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
            }
          }
        }
      }
    }
    function dump(input, options2) {
      options2 = options2 || {};
      var state = new State(options2);
      if (!state.noRefs) getDuplicateReferences(input, state);
      if (writeNode(state, 0, input, true, true)) return state.dump + "\n";
      return "";
    }
    function safeDump(input, options2) {
      return dump(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options2));
    }
    module2.exports.dump = dump;
    module2.exports.safeDump = safeDump;
  }
});

// node_modules/js-yaml/lib/js-yaml.js
var require_js_yaml = __commonJS({
  "node_modules/js-yaml/lib/js-yaml.js"(exports2, module2) {
    "use strict";
    var loader = require_loader();
    var dumper = require_dumper();
    function deprecated(name) {
      return function() {
        throw new Error("Function " + name + " is deprecated and cannot be used.");
      };
    }
    module2.exports.Type = require_type();
    module2.exports.Schema = require_schema();
    module2.exports.FAILSAFE_SCHEMA = require_failsafe();
    module2.exports.JSON_SCHEMA = require_json();
    module2.exports.CORE_SCHEMA = require_core();
    module2.exports.DEFAULT_SAFE_SCHEMA = require_default_safe();
    module2.exports.DEFAULT_FULL_SCHEMA = require_default_full();
    module2.exports.load = loader.load;
    module2.exports.loadAll = loader.loadAll;
    module2.exports.safeLoad = loader.safeLoad;
    module2.exports.safeLoadAll = loader.safeLoadAll;
    module2.exports.dump = dumper.dump;
    module2.exports.safeDump = dumper.safeDump;
    module2.exports.YAMLException = require_exception();
    module2.exports.MINIMAL_SCHEMA = require_failsafe();
    module2.exports.SAFE_SCHEMA = require_default_safe();
    module2.exports.DEFAULT_SCHEMA = require_default_full();
    module2.exports.scan = deprecated("scan");
    module2.exports.parse = deprecated("parse");
    module2.exports.compose = deprecated("compose");
    module2.exports.addConstructor = deprecated("addConstructor");
  }
});

// node_modules/js-yaml/index.js
var require_js_yaml2 = __commonJS({
  "node_modules/js-yaml/index.js"(exports2, module2) {
    "use strict";
    var yaml2 = require_js_yaml();
    module2.exports = yaml2;
  }
});

// node_modules/gray-matter/lib/engines.js
var require_engines = __commonJS({
  "node_modules/gray-matter/lib/engines.js"(exports, module) {
    "use strict";
    var yaml = require_js_yaml2();
    var engines = exports = module.exports;
    engines.yaml = {
      parse: yaml.safeLoad.bind(yaml),
      stringify: yaml.safeDump.bind(yaml)
    };
    engines.json = {
      parse: JSON.parse.bind(JSON),
      stringify: function(obj, options2) {
        const opts = Object.assign({ replacer: null, space: 2 }, options2);
        return JSON.stringify(obj, opts.replacer, opts.space);
      }
    };
    engines.javascript = {
      parse: function parse(str, options, wrap) {
        try {
          if (wrap !== false) {
            str = "(function() {\nreturn " + str.trim() + ";\n}());";
          }
          return eval(str) || {};
        } catch (err) {
          if (wrap !== false && /(unexpected|identifier)/i.test(err.message)) {
            return parse(str, options, false);
          }
          throw new SyntaxError(err);
        }
      },
      stringify: function() {
        throw new Error("stringifying JavaScript is not supported");
      }
    };
  }
});

// node_modules/strip-bom-string/index.js
var require_strip_bom_string = __commonJS({
  "node_modules/strip-bom-string/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function(str2) {
      if (typeof str2 === "string" && str2.charAt(0) === "\uFEFF") {
        return str2.slice(1);
      }
      return str2;
    };
  }
});

// node_modules/gray-matter/lib/utils.js
var require_utils10 = __commonJS({
  "node_modules/gray-matter/lib/utils.js"(exports2) {
    "use strict";
    var stripBom = require_strip_bom_string();
    var typeOf = require_kind_of();
    exports2.define = function(obj, key, val) {
      Reflect.defineProperty(obj, key, {
        enumerable: false,
        configurable: true,
        writable: true,
        value: val
      });
    };
    exports2.isBuffer = function(val) {
      return typeOf(val) === "buffer";
    };
    exports2.isObject = function(val) {
      return typeOf(val) === "object";
    };
    exports2.toBuffer = function(input) {
      return typeof input === "string" ? Buffer.from(input) : input;
    };
    exports2.toString = function(input) {
      if (exports2.isBuffer(input)) return stripBom(String(input));
      if (typeof input !== "string") {
        throw new TypeError("expected input to be a string or buffer");
      }
      return stripBom(input);
    };
    exports2.arrayify = function(val) {
      return val ? Array.isArray(val) ? val : [val] : [];
    };
    exports2.startsWith = function(str2, substr, len) {
      if (typeof len !== "number") len = substr.length;
      return str2.slice(0, len) === substr;
    };
  }
});

// node_modules/gray-matter/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/gray-matter/lib/defaults.js"(exports2, module2) {
    "use strict";
    var engines2 = require_engines();
    var utils = require_utils10();
    module2.exports = function(options2) {
      const opts = Object.assign({}, options2);
      opts.delimiters = utils.arrayify(opts.delims || opts.delimiters || "---");
      if (opts.delimiters.length === 1) {
        opts.delimiters.push(opts.delimiters[0]);
      }
      opts.language = (opts.language || opts.lang || "yaml").toLowerCase();
      opts.engines = Object.assign({}, engines2, opts.parsers, opts.engines);
      return opts;
    };
  }
});

// node_modules/gray-matter/lib/engine.js
var require_engine = __commonJS({
  "node_modules/gray-matter/lib/engine.js"(exports2, module2) {
    "use strict";
    module2.exports = function(name, options2) {
      let engine = options2.engines[name] || options2.engines[aliase(name)];
      if (typeof engine === "undefined") {
        throw new Error('gray-matter engine "' + name + '" is not registered');
      }
      if (typeof engine === "function") {
        engine = { parse: engine };
      }
      return engine;
    };
    function aliase(name) {
      switch (name.toLowerCase()) {
        case "js":
        case "javascript":
          return "javascript";
        case "coffee":
        case "coffeescript":
        case "cson":
          return "coffee";
        case "yaml":
        case "yml":
          return "yaml";
        default: {
          return name;
        }
      }
    }
  }
});

// node_modules/gray-matter/lib/stringify.js
var require_stringify2 = __commonJS({
  "node_modules/gray-matter/lib/stringify.js"(exports2, module2) {
    "use strict";
    var typeOf = require_kind_of();
    var getEngine = require_engine();
    var defaults = require_defaults();
    module2.exports = function(file, data, options2) {
      if (data == null && options2 == null) {
        switch (typeOf(file)) {
          case "object":
            data = file.data;
            options2 = {};
            break;
          case "string":
            return file;
          default: {
            throw new TypeError("expected file to be a string or object");
          }
        }
      }
      const str2 = file.content;
      const opts = defaults(options2);
      if (data == null) {
        if (!opts.data) return file;
        data = opts.data;
      }
      const language = file.language || opts.language;
      const engine = getEngine(language, opts);
      if (typeof engine.stringify !== "function") {
        throw new TypeError('expected "' + language + '.stringify" to be a function');
      }
      data = Object.assign({}, file.data, data);
      const open = opts.delimiters[0];
      const close = opts.delimiters[1];
      const matter = engine.stringify(data, options2).trim();
      let buf = "";
      if (matter !== "{}") {
        buf = newline(open) + newline(matter) + newline(close);
      }
      if (typeof file.excerpt === "string" && file.excerpt !== "") {
        if (str2.indexOf(file.excerpt.trim()) === -1) {
          buf += newline(file.excerpt) + newline(close);
        }
      }
      return buf + newline(str2);
    };
    function newline(str2) {
      return str2.slice(-1) !== "\n" ? str2 + "\n" : str2;
    }
  }
});

// node_modules/gray-matter/lib/excerpt.js
var require_excerpt = __commonJS({
  "node_modules/gray-matter/lib/excerpt.js"(exports2, module2) {
    "use strict";
    var defaults = require_defaults();
    module2.exports = function(file, options2) {
      const opts = defaults(options2);
      if (file.data == null) {
        file.data = {};
      }
      if (typeof opts.excerpt === "function") {
        return opts.excerpt(file, opts);
      }
      const sep = file.data.excerpt_separator || opts.excerpt_separator;
      if (sep == null && (opts.excerpt === false || opts.excerpt == null)) {
        return file;
      }
      const delimiter = typeof opts.excerpt === "string" ? opts.excerpt : sep || opts.delimiters[0];
      const idx = file.content.indexOf(delimiter);
      if (idx !== -1) {
        file.excerpt = file.content.slice(0, idx);
      }
      return file;
    };
  }
});

// node_modules/gray-matter/lib/to-file.js
var require_to_file = __commonJS({
  "node_modules/gray-matter/lib/to-file.js"(exports2, module2) {
    "use strict";
    var typeOf = require_kind_of();
    var stringify = require_stringify2();
    var utils = require_utils10();
    module2.exports = function(file) {
      if (typeOf(file) !== "object") {
        file = { content: file };
      }
      if (typeOf(file.data) !== "object") {
        file.data = {};
      }
      if (file.contents && file.content == null) {
        file.content = file.contents;
      }
      utils.define(file, "orig", utils.toBuffer(file.content));
      utils.define(file, "language", file.language || "");
      utils.define(file, "matter", file.matter || "");
      utils.define(file, "stringify", function(data, options2) {
        if (options2 && options2.language) {
          file.language = options2.language;
        }
        return stringify(file, data, options2);
      });
      file.content = utils.toString(file.content);
      file.isEmpty = false;
      file.excerpt = "";
      return file;
    };
  }
});

// node_modules/gray-matter/lib/parse.js
var require_parse = __commonJS({
  "node_modules/gray-matter/lib/parse.js"(exports2, module2) {
    "use strict";
    var getEngine = require_engine();
    var defaults = require_defaults();
    module2.exports = function(language, str2, options2) {
      const opts = defaults(options2);
      const engine = getEngine(language, opts);
      if (typeof engine.parse !== "function") {
        throw new TypeError('expected "' + language + '.parse" to be a function');
      }
      return engine.parse(str2, opts);
    };
  }
});

// node_modules/gray-matter/index.js
var require_gray_matter = __commonJS({
  "node_modules/gray-matter/index.js"(exports2, module2) {
    "use strict";
    var fs = __require("fs");
    var sections = require_section_matter();
    var defaults = require_defaults();
    var stringify = require_stringify2();
    var excerpt = require_excerpt();
    var engines2 = require_engines();
    var toFile = require_to_file();
    var parse2 = require_parse();
    var utils = require_utils10();
    function matter(input, options2) {
      if (input === "") {
        return { data: {}, content: input, excerpt: "", orig: input };
      }
      let file = toFile(input);
      const cached = matter.cache[file.content];
      if (!options2) {
        if (cached) {
          file = Object.assign({}, cached);
          file.orig = cached.orig;
          return file;
        }
        matter.cache[file.content] = file;
      }
      return parseMatter(file, options2);
    }
    function parseMatter(file, options2) {
      const opts = defaults(options2);
      const open = opts.delimiters[0];
      const close = "\n" + opts.delimiters[1];
      let str2 = file.content;
      if (opts.language) {
        file.language = opts.language;
      }
      const openLen = open.length;
      if (!utils.startsWith(str2, open, openLen)) {
        excerpt(file, opts);
        return file;
      }
      if (str2.charAt(openLen) === open.slice(-1)) {
        return file;
      }
      str2 = str2.slice(openLen);
      const len = str2.length;
      const language = matter.language(str2, opts);
      if (language.name) {
        file.language = language.name;
        str2 = str2.slice(language.raw.length);
      }
      let closeIndex = str2.indexOf(close);
      if (closeIndex === -1) {
        closeIndex = len;
      }
      file.matter = str2.slice(0, closeIndex);
      const block = file.matter.replace(/^\s*#[^\n]+/gm, "").trim();
      if (block === "") {
        file.isEmpty = true;
        file.empty = file.content;
        file.data = {};
      } else {
        file.data = parse2(file.language, file.matter, opts);
      }
      if (closeIndex === len) {
        file.content = "";
      } else {
        file.content = str2.slice(closeIndex + close.length);
        if (file.content[0] === "\r") {
          file.content = file.content.slice(1);
        }
        if (file.content[0] === "\n") {
          file.content = file.content.slice(1);
        }
      }
      excerpt(file, opts);
      if (opts.sections === true || typeof opts.section === "function") {
        sections(file, opts.section);
      }
      return file;
    }
    matter.engines = engines2;
    matter.stringify = function(file, data, options2) {
      if (typeof file === "string") file = matter(file, options2);
      return stringify(file, data, options2);
    };
    matter.read = function(filepath, options2) {
      const str2 = fs.readFileSync(filepath, "utf8");
      const file = matter(str2, options2);
      file.path = filepath;
      return file;
    };
    matter.test = function(str2, options2) {
      return utils.startsWith(str2, defaults(options2).delimiters[0]);
    };
    matter.language = function(str2, options2) {
      const opts = defaults(options2);
      const open = opts.delimiters[0];
      if (matter.test(str2)) {
        str2 = str2.slice(open.length);
      }
      const language = str2.slice(0, str2.search(/\r?\n/));
      return {
        raw: language,
        name: language ? language.trim() : ""
      };
    };
    matter.cache = {};
    matter.clearCache = function() {
      matter.cache = {};
    };
    module2.exports = matter;
  }
});

// node_modules/@bgd-labs/js-utils/dist/node.cjs
var require_node2 = __commonJS({
  "node_modules/@bgd-labs/js-utils/dist/node.cjs"(exports2, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var node_exports = {};
    __export(node_exports, {
      CHAIN_ID_CLIENT_MAP: () => CHAIN_ID_CLIENT_MAP,
      ChainId: () => ChainId2,
      arbitrumClient: () => arbitrumClient,
      arbitrumGoerliClient: () => arbitrumGoerliClient,
      arbitrumSepoliaClient: () => arbitrumSepoliaClient,
      avalancheClient: () => avalancheClient,
      baseClient: () => baseClient,
      baseSepoliaClient: () => baseSepoliaClient,
      baseToCidv0: () => baseToCidv0,
      bnbClient: () => bnbClient,
      celoClient: () => celoClient,
      compareStorageLayouts: () => compareStorageLayouts,
      decodeReserveConfigV2: () => decodeReserveConfigV2,
      decodeReserveConfigV3: () => decodeReserveConfigV3,
      fantomClient: () => fantomClient,
      fantomTestnetClient: () => fantomTestnetClient,
      fujiClient: () => fujiClient,
      getBits: () => getBits,
      getBlockAtTimestamp: () => getBlockAtTimestamp,
      getBytesValue: () => getBytesValue,
      getContractDeploymentBlock: () => getContractDeploymentBlock,
      getDynamicArraySlot: () => getDynamicArraySlot,
      getLink: () => getLink,
      getLogsRecursive: () => getLogsRecursive,
      getProposalMetadata: () => getProposalMetadata,
      getSolidityStorageSlotAddress: () => getSolidityStorageSlotAddress,
      getSolidityStorageSlotBytes: () => getSolidityStorageSlotBytes,
      getSolidityStorageSlotUint: () => getSolidityStorageSlotUint,
      gnosisClient: () => gnosisClient,
      goerliClient: () => goerliClient,
      harmonyClient: () => harmonyClient,
      mainnetClient: () => mainnetClient,
      metisClient: () => metisClient,
      mumbaiClient: () => mumbaiClient,
      optimismClient: () => optimismClient,
      optimismGoerliClient: () => optimismGoerliClient,
      optimismSepoliaClient: () => optimismSepoliaClient,
      polygonClient: () => polygonClient,
      readJSONCache: () => readJSONCache,
      scrollClient: () => scrollClient,
      scrollSepoliaClient: () => scrollSepoliaClient,
      sepoliaClient: () => sepoliaClient,
      setBits: () => setBits,
      strategicGetLogs: () => strategicGetLogs,
      uploadToPinata: () => uploadToPinata,
      uploadToQuicknode: () => uploadToQuicknode,
      uploadToTheGraph: () => uploadToTheGraph,
      writeJSONCache: () => writeJSONCache,
      zkEVMClient: () => zkEVMClient,
      zkSyncClient: () => zkSyncClient
    });
    module2.exports = __toCommonJS(node_exports);
    function compareStorageLayouts(layoutBefore, layoutAfter) {
      const layoutForComparisonBefore = preformatStorageLayout(layoutBefore);
      const layoutForComparisonAfter = preformatStorageLayout(layoutAfter);
      const comparison = compareStorageArrays(
        layoutForComparisonBefore,
        layoutForComparisonAfter
      );
      const md = generateMarkdownOutput(comparison);
      return md;
    }
    function preformatStorageLayout(json) {
      return json.storage.map((item) => ({
        label: item.label,
        offset: item.offset,
        slot: item.slot,
        type: json.types[item.type].label,
        numberOfBytes: json.types[item.type].numberOfBytes
      }));
    }
    function compareStorageArrays(oldArray, newArray) {
      const changes = [];
      const oldMap = new Map(
        oldArray.map((item) => [item.slot + "-" + item.offset, item])
      );
      const newMap = new Map(
        newArray.map((item) => [item.slot + "-" + item.offset, item])
      );
      oldArray.forEach((oldItem) => {
        const newItem = newMap.get(oldItem.slot + "-" + oldItem.offset);
        if (!newItem) {
          changes.push({ ...oldItem, status: "removed" });
        } else if (isDifferent(oldItem, newItem)) {
          changes.push({ ...oldItem, status: "removed" });
          changes.push({ ...newItem, status: "added" });
        } else {
          changes.push({ ...newItem, status: "unchanged" });
        }
      });
      newArray.forEach((newItem) => {
        if (!oldMap.has(newItem.slot + "-" + newItem.offset)) {
          changes.push({ ...newItem, status: "added" });
        }
      });
      changes.sort((a, b) => {
        if (a.slot === b.slot) {
          return a.offset - b.offset;
        }
        return a.slot.localeCompare(b.slot);
      });
      return changes;
    }
    function isDifferent(item1, item2) {
      return item1.offset !== item2.offset || item1.slot !== item2.slot || item1.type !== item2.type || item1.numberOfBytes !== item2.numberOfBytes;
    }
    function generateMarkdownOutput(items) {
      const columnWidths = {
        name: Math.max(...items.map((item) => item.label.length), "Label".length),
        offset: "Offset".length,
        slot: "Slot".length,
        type: Math.max(...items.map((item) => item.type.length), "Type".length),
        numberOfBytes: "Bytes".length
      };
      let markdownTable = "```diff\n";
      markdownTable += ` | ${"Label".padEnd(
        columnWidths.name,
        " "
      )} | ${"Offset".padEnd(columnWidths.offset, " ")} | ${"Slot".padEnd(
        columnWidths.slot,
        " "
      )} | ${"Type".padEnd(columnWidths.type, " ")} | ${"Bytes".padEnd(
        columnWidths.numberOfBytes,
        " "
      )} |
`;
      markdownTable += ` |${"-".repeat(columnWidths.name + 2)}|${"-".repeat(
        columnWidths.offset + 2
      )}|${"-".repeat(columnWidths.slot + 2)}|${"-".repeat(
        columnWidths.type + 2
      )}|${"-".repeat(columnWidths.numberOfBytes + 2)}||
`;
      items.forEach((item) => {
        const sign = item.status === "added" ? "+" : item.status === "removed" ? "-" : " ";
        const row = `${sign}| ${item.label.padEnd(
          columnWidths.name,
          " "
        )} | ${item.offset.toString().padEnd(columnWidths.offset, " ")} | ${item.slot.padEnd(
          columnWidths.slot,
          " "
        )} | ${item.type.padEnd(
          columnWidths.type,
          " "
        )} | ${item.numberOfBytes.padEnd(columnWidths.numberOfBytes, " ")} |
`;
        markdownTable += row;
      });
      markdownTable += "```";
      return markdownTable;
    }
    var import_chains = require_chains();
    var ChainId2 = {
      mainnet: import_chains.mainnet.id,
      goerli: import_chains.goerli.id,
      polygon: import_chains.polygon.id,
      mumbai: import_chains.polygonMumbai.id,
      avalanche: import_chains.avalanche.id,
      fuji: import_chains.avalancheFuji.id,
      arbitrum_one: import_chains.arbitrum.id,
      arbitrum_goerli: import_chains.arbitrumGoerli.id,
      arbitrum_sepolia: import_chains.arbitrumSepolia.id,
      fantom: import_chains.fantom.id,
      fantom_testnet: import_chains.fantomTestnet.id,
      optimism: import_chains.optimism.id,
      optimism_sepolia: import_chains.optimismSepolia.id,
      optimism_goerli: import_chains.optimismGoerli.id,
      harmony: import_chains.harmonyOne.id,
      sepolia: import_chains.sepolia.id,
      scroll: import_chains.scroll.id,
      scroll_sepolia: import_chains.scrollSepolia.id,
      metis: import_chains.metis.id,
      base: import_chains.base.id,
      base_sepolia: import_chains.baseSepolia.id,
      bnb: import_chains.bsc.id,
      gnosis: import_chains.gnosis.id,
      zkEVM: import_chains.polygonZkEvm.id,
      celo: import_chains.celo.id,
      zkSync: import_chains.zkSync.id
    };
    var import_viem = require_cjs2();
    var import_promise_pool = require_dist();
    var import_actions = require_actions();
    async function getContractDeploymentBlock({
      client,
      contractAddress,
      fromBlock,
      toBlock,
      maxDelta
    }) {
      if (fromBlock == toBlock)
        return fromBlock;
      if (fromBlock < toBlock) {
        const midBlock = BigInt(fromBlock + toBlock) >> BigInt(1);
        const codeMid = await (0, import_actions.getBytecode)(client, {
          blockNumber: midBlock,
          address: contractAddress
        });
        if (!codeMid) {
          if (toBlock - midBlock > maxDelta) {
            return getContractDeploymentBlock({
              client,
              contractAddress,
              fromBlock: midBlock,
              toBlock,
              maxDelta
            });
          } else {
            return midBlock;
          }
        }
        return getContractDeploymentBlock({
          client,
          contractAddress,
          fromBlock,
          toBlock: midBlock,
          maxDelta
        });
      }
      throw new Error("Could not find contract deployment block");
    }
    async function getBlockAtTimestamp({
      client,
      timestamp,
      fromBlock,
      toBlock,
      maxDelta
    }) {
      if (fromBlock <= toBlock) {
        const midBlock = BigInt(fromBlock + toBlock) >> BigInt(1);
        const block = await (0, import_actions.getBlock)(client, { blockNumber: midBlock });
        if (block.timestamp > timestamp) {
          return getBlockAtTimestamp({
            client,
            timestamp,
            fromBlock,
            toBlock: midBlock,
            maxDelta
          });
        } else {
          if (timestamp - block.timestamp < maxDelta) {
            return block;
          } else {
            return getBlockAtTimestamp({
              client,
              timestamp,
              fromBlock: midBlock,
              toBlock,
              maxDelta
            });
          }
        }
      }
      throw new Error("Could not find matching block");
    }
    async function strategicGetLogs({
      client,
      events,
      address,
      fromBlock,
      toBlock
    }) {
      if (client.transport.key === "http") {
        const url = client.transport.url;
        let batchSize = 0;
        if (/llamarpc/.test(url))
          batchSize = 1e5;
        if (/quiknode/.test(url))
          batchSize = 1e4;
        if (/alchemy/.test(url)) {
          getLogsRecursive({ client, events, address, fromBlock, toBlock });
        }
        if (batchSize > 0) {
          return getLogsInBatches({
            client,
            events,
            address,
            fromBlock,
            toBlock,
            batchSize
          });
        }
      }
      return getLogsRecursive({ client, events, address, fromBlock, toBlock });
    }
    async function getLogsRecursive({
      client,
      events,
      address,
      fromBlock,
      toBlock
    }) {
      console.log("recursions", fromBlock, toBlock);
      if (fromBlock <= toBlock) {
        try {
          const logs = await (0, import_actions.getLogs)(client, {
            fromBlock,
            toBlock,
            events,
            address
          });
          return logs;
        } catch (error) {
          const rangeMatch = error.details?.match(/.*\[(.*),\s*(.*)\]/);
          if (rangeMatch?.length === 3) {
            const maxBlock = (0, import_viem.fromHex)(rangeMatch[2], "bigint");
            const arr1 = await getLogsRecursive({
              client,
              events,
              address,
              fromBlock,
              toBlock: maxBlock
            });
            const midBlock = BigInt(maxBlock + toBlock) >> BigInt(1);
            const arr2 = await getLogsRecursive({
              client,
              events,
              address,
              fromBlock: maxBlock + BigInt(1),
              toBlock: midBlock
            });
            const arr3 = await getLogsRecursive({
              client,
              events,
              address,
              fromBlock: midBlock + BigInt(1),
              toBlock
            });
            return [...arr1, ...arr2, ...arr3];
          } else {
            const midBlock = BigInt(fromBlock + toBlock) >> BigInt(1);
            const arr1 = await getLogsRecursive({
              client,
              events,
              address,
              fromBlock,
              toBlock: midBlock
            });
            const arr2 = await getLogsRecursive({
              client,
              events,
              address,
              fromBlock: midBlock + BigInt(1),
              toBlock
            });
            return [...arr1, ...arr2];
          }
        }
      }
      return [];
    }
    async function getLogsInBatches({
      client,
      events,
      address,
      fromBlock,
      toBlock,
      batchSize
    }) {
      const batches = [];
      for (let i = Number(fromBlock); i < Number(toBlock); i = i + batchSize) {
        batches.push({
          from: BigInt(i),
          to: BigInt(i + batchSize - 1) > toBlock ? toBlock : BigInt(i + batchSize - 1)
        });
      }
      const { results, errors } = await import_promise_pool.PromisePool.for(batches).withConcurrency(5).useCorrespondingResults().process(async ({ from, to }) => {
        return (0, import_actions.getLogs)(client, {
          fromBlock: from,
          toBlock: to,
          events,
          address
        });
      });
      if (errors.length != 0) {
        console.log(errors);
        throw new Error("Error fetching logs");
      }
      return results.flat();
    }
    var import_viem2 = require_cjs2();
    var import_chains2 = require_chains();
    var commonConfig = { timeout: 3e4 };
    var mainnetClient = (0, import_viem2.createClient)({
      chain: import_chains2.mainnet,
      transport: (0, import_viem2.http)(process.env.RPC_MAINNET, commonConfig)
    });
    var arbitrumClient = (0, import_viem2.createClient)({
      chain: import_chains2.arbitrum,
      transport: (0, import_viem2.http)(process.env.RPC_ARBITRUM, commonConfig)
    });
    var polygonClient = (0, import_viem2.createClient)({
      chain: import_chains2.polygon,
      transport: (0, import_viem2.http)(process.env.RPC_POLYGON, commonConfig)
    });
    var optimismClient = (0, import_viem2.createClient)({
      chain: import_chains2.optimism,
      transport: (0, import_viem2.http)(process.env.RPC_OPTIMISM, commonConfig)
    });
    var metisClient = (0, import_viem2.createClient)({
      chain: import_chains2.metis,
      transport: (0, import_viem2.http)(process.env.RPC_METIS, commonConfig)
    });
    var baseClient = (0, import_viem2.createClient)({
      chain: import_chains2.base,
      transport: (0, import_viem2.http)(process.env.RPC_BASE, commonConfig)
    });
    var fantomClient = (0, import_viem2.createClient)({
      chain: import_chains2.fantom,
      transport: (0, import_viem2.http)(process.env.RPC_FANTOM, commonConfig)
    });
    var bnbClient = (0, import_viem2.createClient)({
      chain: import_chains2.bsc,
      transport: (0, import_viem2.http)(process.env.RPC_BNB, commonConfig)
    });
    var avalancheClient = (0, import_viem2.createClient)({
      chain: import_chains2.avalanche,
      transport: (0, import_viem2.http)(process.env.RPC_AVALANCHE, commonConfig)
    });
    var gnosisClient = (0, import_viem2.createClient)({
      chain: import_chains2.gnosis,
      transport: (0, import_viem2.http)(process.env.RPC_GNOSIS, commonConfig)
    });
    var scrollClient = (0, import_viem2.createClient)({
      chain: import_chains2.scroll,
      transport: (0, import_viem2.http)(process.env.RPC_SCROLL, commonConfig)
    });
    var zkEVMClient = (0, import_viem2.createClient)({
      chain: import_chains2.polygonZkEvm,
      transport: (0, import_viem2.http)(process.env.RPC_ZKEVM, commonConfig)
    });
    var celoClient = (0, import_viem2.createClient)({
      chain: import_chains2.celo,
      transport: (0, import_viem2.http)(process.env.RPC_CELO, commonConfig)
    });
    var zkSyncClient = (0, import_viem2.createClient)({
      chain: import_chains2.zkSync,
      transport: (0, import_viem2.http)(process.env.RPC_ZKSYNC, commonConfig)
    });
    var harmonyClient = (0, import_viem2.createClient)({
      chain: import_chains2.harmonyOne,
      transport: (0, import_viem2.http)(process.env.RPC_HARMONY, commonConfig)
    });
    var fujiClient = (0, import_viem2.createClient)({
      chain: import_chains2.avalancheFuji,
      transport: (0, import_viem2.http)(process.env.RPC_FUJI, commonConfig)
    });
    var mumbaiClient = (0, import_viem2.createClient)({
      chain: import_chains2.polygonMumbai,
      transport: (0, import_viem2.http)(process.env.RPC_MUMBAI, commonConfig)
    });
    var sepoliaClient = (0, import_viem2.createClient)({
      chain: import_chains2.sepolia,
      transport: (0, import_viem2.http)(process.env.RPC_SEPOLIA, commonConfig)
    });
    var goerliClient = (0, import_viem2.createClient)({
      chain: import_chains2.goerli,
      transport: (0, import_viem2.http)(process.env.RPC_GOERLI, commonConfig)
    });
    var arbitrumGoerliClient = (0, import_viem2.createClient)({
      chain: import_chains2.arbitrumGoerli,
      transport: (0, import_viem2.http)(process.env.RPC_ARBITRUM_GOERLI, commonConfig)
    });
    var arbitrumSepoliaClient = (0, import_viem2.createClient)({
      chain: import_chains2.arbitrumSepolia,
      transport: (0, import_viem2.http)(process.env.RPC_ARBITRUM_SEPOLIA, commonConfig)
    });
    var optimismGoerliClient = (0, import_viem2.createClient)({
      chain: import_chains2.optimismGoerli,
      transport: (0, import_viem2.http)(process.env.RPC_OPTIMISM_GOERLI, commonConfig)
    });
    var optimismSepoliaClient = (0, import_viem2.createClient)({
      chain: import_chains2.optimismSepolia,
      transport: (0, import_viem2.http)(process.env.RPC_OPTIMISM_SEPOLIA, commonConfig)
    });
    var scrollSepoliaClient = (0, import_viem2.createClient)({
      chain: import_chains2.scrollSepolia,
      transport: (0, import_viem2.http)(process.env.RPC_SCROLL_SEPOLIA, commonConfig)
    });
    var fantomTestnetClient = (0, import_viem2.createClient)({
      chain: import_chains2.fantomTestnet,
      transport: (0, import_viem2.http)(process.env.RPC_FANTOM_TESTNET, commonConfig)
    });
    var baseSepoliaClient = (0, import_viem2.createClient)({
      chain: import_chains2.baseSepolia,
      transport: (0, import_viem2.http)(process.env.RPC_BASE_SEPOLIA, commonConfig)
    });
    var CHAIN_ID_CLIENT_MAP = {
      [ChainId2.mainnet]: mainnetClient,
      [ChainId2.arbitrum_one]: arbitrumClient,
      [ChainId2.arbitrum_goerli]: arbitrumGoerliClient,
      [ChainId2.arbitrum_sepolia]: arbitrumSepoliaClient,
      [ChainId2.polygon]: polygonClient,
      [ChainId2.optimism]: optimismClient,
      [ChainId2.optimism_goerli]: optimismGoerliClient,
      [ChainId2.optimism_sepolia]: optimismSepoliaClient,
      [ChainId2.metis]: metisClient,
      [ChainId2.base]: baseClient,
      [ChainId2.base_sepolia]: baseSepoliaClient,
      [ChainId2.sepolia]: sepoliaClient,
      [ChainId2.goerli]: goerliClient,
      [ChainId2.fantom]: fantomClient,
      [ChainId2.fantom_testnet]: fantomTestnetClient,
      [ChainId2.bnb]: bnbClient,
      [ChainId2.avalanche]: avalancheClient,
      [ChainId2.gnosis]: gnosisClient,
      [ChainId2.scroll]: scrollClient,
      [ChainId2.scroll_sepolia]: scrollSepoliaClient,
      [ChainId2.zkEVM]: zkEVMClient,
      [ChainId2.celo]: celoClient,
      [ChainId2.zkSync]: zkSyncClient,
      [ChainId2.fuji]: fujiClient,
      [ChainId2.mumbai]: mumbaiClient,
      [ChainId2.harmony]: harmonyClient
    };
    var import_bs58 = __toESM2(require_bs58(), 1);
    function baseToCidv0(hash) {
      return import_bs58.default.encode(Buffer.from(`1220${hash.slice(2)}`, "hex"));
    }
    async function uploadToPinata(source) {
      const PINATA_KEY = process.env.PINATA_KEY;
      if (!PINATA_KEY)
        throw new Error("PINATA_KEY env must be set");
      const PINATA_SECRET = process.env.PINATA_SECRET;
      if (!PINATA_SECRET)
        throw new Error("PINATA_SECRET env must be set");
      const data = new FormData();
      data.append("file", new Blob([source]));
      const res = await fetch("https://api.pinata.cloud/pinning/pinFileToIPFS", {
        method: "POST",
        body: data,
        headers: {
          pinata_api_key: PINATA_KEY,
          pinata_secret_api_key: PINATA_SECRET
        }
      });
      if (!res.ok) {
        throw Error(await res.text());
      }
      const result = await res.json();
      if (result.error)
        throw { message: result.error };
      return result;
    }
    async function uploadToTheGraph(source) {
      const data = new FormData();
      data.append("file", new Blob([source]));
      const res = await fetch("https://api.thegraph.com/ipfs/api/v0/add", {
        method: "POST",
        body: data
      });
      return res.json();
    }
    async function uploadToQuicknode(source, key) {
      const apiKey = process.env.QUICKNODE_API_KEY;
      const headers = new Headers();
      headers.append("x-api-key", apiKey);
      const data = new FormData();
      data.append("Body", new Blob([source]));
      data.append("Key", key || "unknownKey");
      data.append("ContentType", "text/plain");
      const res = await fetch(
        "https://api.quicknode.com/ipfs/rest/v1/s3/put-object",
        {
          method: "POST",
          headers,
          body: data,
          redirect: "follow"
        }
      );
      return res.text();
    }
    var import_gray_matter = __toESM2(require_gray_matter(), 1);
    function getLink(hash, gateway) {
      return `${gateway}/${hash}`;
    }
    async function getProposalMetadata(hash, gateway = "https://cloudflare-ipfs.com/ipfs") {
      const ipfsHash = hash.startsWith("0x") ? baseToCidv0(hash) : hash;
      const ipfsPath = getLink(ipfsHash, gateway);
      const ipfsResponse = await fetch(ipfsPath, {
        headers: {
          "Content-Type": "application/json"
        }
      });
      if (!ipfsResponse.ok)
        throw Error(`IPFS: error fetching ${ipfsPath}`);
      const clone = ipfsResponse.clone();
      try {
        const response = await ipfsResponse.json();
        const { content, data } = (0, import_gray_matter.default)(response.description);
        return {
          ...response,
          ipfsHash,
          description: content,
          ...data
        };
      } catch (e) {
        const { content, data } = (0, import_gray_matter.default)(await clone.text());
        return {
          ...ipfsResponse,
          ipfsHash,
          description: content,
          ...data
        };
      }
    }
    var import_viem3 = require_cjs2();
    function getSolidityStorageSlotBytes(mappingSlot, key) {
      const slot = (0, import_viem3.pad)(mappingSlot, { size: 32 });
      return (0, import_viem3.trim)(
        (0, import_viem3.keccak256)(
          (0, import_viem3.encodeAbiParameters)((0, import_viem3.parseAbiParameters)("bytes32, uint256"), [
            key,
            BigInt(slot)
          ])
        )
      );
    }
    function getSolidityStorageSlotUint(mappingSlot, key) {
      return (0, import_viem3.keccak256)(
        (0, import_viem3.encodeAbiParameters)((0, import_viem3.parseAbiParameters)("uint256, uint256"), [
          key,
          mappingSlot
        ])
      );
    }
    function getSolidityStorageSlotAddress(mappingSlot, key) {
      return (0, import_viem3.keccak256)(
        (0, import_viem3.encodeAbiParameters)((0, import_viem3.parseAbiParameters)("address, uint256"), [
          key,
          BigInt(mappingSlot)
        ])
      );
    }
    function getDynamicArraySlot(baseSlot, arrayIndex, itemSize) {
      return (0, import_viem3.pad)(
        (0, import_viem3.toHex)(
          (0, import_viem3.fromHex)(
            (0, import_viem3.keccak256)(
              (0, import_viem3.encodeAbiParameters)((0, import_viem3.parseAbiParameters)("uint256"), [baseSlot])
            ),
            "bigint"
          ) + BigInt(arrayIndex * itemSize)
        ),
        { size: 32 }
      );
    }
    function getBytesValue(value) {
      const bytesString = (0, import_viem3.toBytes)(value);
      if (bytesString.length > 31)
        throw new Error("Error: strings > 31 bytes are not implemented");
      return (0, import_viem3.concat)([
        (0, import_viem3.toHex)((0, import_viem3.pad)(bytesString, { size: 31, dir: "right" })),
        (0, import_viem3.toHex)(bytesString.length * 2, { size: 1 })
      ]);
    }
    function getBits(_bigIntValue, startBit, _endBit) {
      let endBit = _endBit;
      const bigIntValue = BigInt(_bigIntValue);
      if (startBit > endBit) {
        throw new Error(
          "Invalid bit range: startBit must be less than or equal to endBit"
        );
      }
      const bitLength = BigInt(bigIntValue.toString(2)).toString().length;
      if (endBit >= bitLength) {
        endBit = BigInt(bitLength - 1);
      }
      const mask = (1n << endBit - startBit + 1n) - 1n;
      const maskedValue = bigIntValue >> startBit & mask;
      return maskedValue.toString();
    }
    function setBits(_bigIntBase, startBit, endBit, _replaceValue) {
      const bigIntBase = BigInt(_bigIntBase);
      const bigIntReplaceValue = BigInt(_replaceValue);
      let mask = BigInt(0);
      for (let i = startBit; i < endBit; i++) {
        mask |= BigInt(1) << BigInt(i);
      }
      const clearedNumber = bigIntBase & ~mask;
      const result = clearedNumber | bigIntReplaceValue << BigInt(startBit);
      return result;
    }
    function decodeReserveConfigV2(data) {
      const ltv = getBits(data, 0n, 15n);
      const liquidationThreshold = getBits(data, 16n, 31n);
      const liquidationBonus = getBits(data, 32n, 47n);
      const decimals = getBits(data, 48n, 55n);
      const active = Number(getBits(data, 56n, 56n));
      const frozen = Number(getBits(data, 57n, 57n));
      const borrowingEnabled = Number(getBits(data, 58n, 58n));
      const stableBorrowingEnabled = Number(getBits(data, 59n, 59n));
      const reserveFactor = getBits(data, 64n, 79n);
      return {
        ltv,
        liquidationThreshold,
        liquidationBonus,
        decimals,
        active: !!active,
        frozen: !!frozen,
        borrowingEnabled: !!borrowingEnabled,
        stableBorrowingEnabled: !!stableBorrowingEnabled,
        reserveFactor
      };
    }
    function decodeReserveConfigV3(data) {
      const ltv = getBits(data, 0n, 15n);
      const liquidationThreshold = getBits(data, 16n, 31n);
      const liquidationBonus = getBits(data, 32n, 47n);
      const decimals = getBits(data, 48n, 55n);
      const active = Number(getBits(data, 56n, 56n));
      const frozen = Number(getBits(data, 57n, 57n));
      const borrowingEnabled = Number(getBits(data, 58n, 58n));
      const stableRateBorrowingEnabled = Number(getBits(data, 59n, 59n));
      const paused = Number(getBits(data, 60n, 60n));
      const borrowingInIsolation = Number(getBits(data, 61n, 61n));
      const siloedBorrowingEnabled = Number(getBits(data, 62n, 62n));
      const flashloaningEnabled = Number(getBits(data, 63n, 63n));
      const reserveFactor = getBits(data, 64n, 79n);
      const borrowCap = getBits(data, 80n, 115n);
      const supplyCap = getBits(data, 116n, 151n);
      const liquidationProtocolFee = getBits(data, 152n, 167n);
      const eModeCategory = getBits(data, 168n, 175n);
      const unbackedMintCap = getBits(data, 176n, 211n);
      const debtCeiling = getBits(data, 212n, 251n);
      return {
        ltv,
        liquidationThreshold,
        liquidationBonus,
        decimals,
        active: !!active,
        frozen: !!frozen,
        borrowingEnabled: !!borrowingEnabled,
        stableRateBorrowingEnabled: !!stableRateBorrowingEnabled,
        paused: !!paused,
        borrowingInIsolation: !!borrowingInIsolation,
        reserveFactor,
        borrowCap,
        supplyCap,
        liquidationProtocolFee,
        eModeCategory,
        unbackedMintCap,
        debtCeiling,
        siloedBorrowingEnabled: !!siloedBorrowingEnabled,
        flashloaningEnabled: !!flashloaningEnabled
      };
    }
    var import_fs = __require("fs");
    var import_path = __toESM2(__require("path"), 1);
    var DEFAULT_PATH = import_path.default.join(process.cwd(), "cache");
    function readJSONCache(filePath, filename) {
      const joinedPath = import_path.default.join(DEFAULT_PATH, filePath, `${filename}.json`);
      if ((0, import_fs.existsSync)(joinedPath)) {
        return JSON.parse((0, import_fs.readFileSync)(joinedPath, "utf8"));
      }
    }
    function writeJSONCache(filePath, filename, json) {
      const joinedFolderPath = import_path.default.join(DEFAULT_PATH, filePath);
      if (!(0, import_fs.existsSync)(joinedFolderPath)) {
        (0, import_fs.mkdirSync)(joinedFolderPath, { recursive: true });
      }
      const joinedFilePath = import_path.default.join(joinedFolderPath, `${filename}.json`);
      (0, import_fs.writeFileSync)(
        joinedFilePath,
        JSON.stringify(
          json,
          (key, value) => typeof value === "bigint" ? value.toString() : value === void 0 ? null : value,
          2
        )
      );
    }
  }
});

// src/lib.ts
var import_js_utils = __toESM(require_node2());
var alchemyNetworks = {
  1: "eth-mainnet",
  3: "eth-ropsten",
  4: "eth-rinkeby",
  5: "eth-goerli",
  10: "opt-mainnet",
  42: "eth-kovan",
  56: "bnb-mainnet",
  69: "opt-kovan",
  97: "bnb-testnet",
  100: "gnosis-mainnet",
  137: "polygon-mainnet",
  204: "opbnb-mainnet",
  250: "fantom-mainnet",
  252: "frax-mainnet",
  300: "zksync-sepolia",
  324: "zksync-mainnet",
  420: "opt-goerli",
  592: "astar-mainnet",
  747: "flow-mainnet",
  1088: "metis-mainnet",
  1101: "polygonzkevm-mainnet",
  1301: "unichain-sepolia",
  1442: "polygonzkevm-testnet",
  1946: "soneium-minato",
  2442: "polygonzkevm-cardona",
  2522: "frax-sepolia",
  4002: "fantom-testnet",
  5611: "opbnb-testnet",
  7e3: "zetachain-mainnet",
  7001: "zetachain-testnet",
  8453: "base-mainnet",
  10200: "gnosis-chiado",
  11011: "shape-sepolia",
  42161: "arb-mainnet",
  42170: "arbnova-mainnet",
  43113: "avax-fuji",
  43114: "avax-mainnet",
  59141: "linea-sepolia",
  59144: "linea-mainnet",
  80001: "polygon-mumbai",
  80002: "polygon-amoy",
  80084: "berachain-bartio",
  81457: "blast-mainnet",
  84531: "base-goerli",
  84532: "base-sepolia",
  421611: "arb-rinkeby",
  421613: "arb-goerli",
  421614: "arb-sepolia",
  534351: "scroll-sepolia",
  534352: "scroll-mainnet",
  7777777: "zora-mainnet",
  11155111: "eth-sepolia",
  11155420: "opt-sepolia",
  168587773: "blast-sepolia",
  999999999: "zora-sepolia"
};
var networkEnv = {
  [import_js_utils.ChainId.mainnet]: "RPC_MAINNET",
  [import_js_utils.ChainId.optimism]: "RPC_OPTIMISM",
  [import_js_utils.ChainId.bnb]: "RPC_BNB",
  [import_js_utils.ChainId.gnosis]: "RPC_GNOSIS",
  [import_js_utils.ChainId.polygon]: "RPC_POLYGON",
  [import_js_utils.ChainId.fantom]: "RPC_FANTOM",
  [import_js_utils.ChainId.zkSync]: "RPC_ZKSYNC",
  [import_js_utils.ChainId.metis]: "RPC_METIS",
  [import_js_utils.ChainId.base]: "RPC_BASE",
  [import_js_utils.ChainId.arbitrum_one]: "RPC_ARBITRUM",
  [import_js_utils.ChainId.avalanche]: "RPC_AVALANCHE",
  [import_js_utils.ChainId.scroll]: "RPC_SCROLL"
};
var supportedChainIds = Object.keys(
  networkEnv
);
var getRPCUrl = (chainId, alchemyKey) => {
  if (process.env[networkEnv[chainId]]) {
    return process.env[networkEnv[chainId]];
  }
  if (alchemyNetworks[chainId] && alchemyKey) {
    return `https://${alchemyNetworks[chainId]}.g.alchemy.com/v2/${alchemyKey}`;
  }
};
export {
  getRPCUrl,
  networkEnv,
  supportedChainIds
};
/*! Bundled license information:

@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

is-extendable/index.js:
  (*!
   * is-extendable <https://github.com/jonschlinkert/is-extendable>
   *
   * Copyright (c) 2015, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

strip-bom-string/index.js:
  (*!
   * strip-bom-string <https://github.com/jonschlinkert/strip-bom-string>
   *
   * Copyright (c) 2015, 2017, Jon Schlinkert.
   * Released under the MIT License.
   *)
*/
